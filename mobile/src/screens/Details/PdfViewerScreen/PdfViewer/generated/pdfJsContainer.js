
  const bundle = 'LyoqCiAqIEBsaWNzdGFydCBUaGUgZm9sbG93aW5nIGlzIHRoZSBlbnRpcmUgbGljZW5zZSBub3RpY2UgZm9yIHRoZQogKiBKYXZhc2NyaXB0IGNvZGUgaW4gdGhpcyBwYWdlCiAqCiAqIENvcHlyaWdodCAyMDIwIE1vemlsbGEgRm91bmRhdGlvbgogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICoKICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKgogKiBAbGljZW5kIFRoZSBhYm92ZSBpcyB0aGUgZW50aXJlIGxpY2Vuc2Ugbm90aWNlIGZvciB0aGUKICogSmF2YXNjcmlwdCBjb2RlIGluIHRoaXMgcGFnZQogKi8KCihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7CglpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpCgkJbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7CgllbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkKCQlkZWZpbmUoInBkZmpzLWRpc3QvYnVpbGQvcGRmIiwgW10sIGZhY3RvcnkpOwoJZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpCgkJZXhwb3J0c1sicGRmanMtZGlzdC9idWlsZC9wZGYiXSA9IGZhY3RvcnkoKTsKCWVsc2UKCQlyb290WyJwZGZqcy1kaXN0L2J1aWxkL3BkZiJdID0gcm9vdC5wZGZqc0xpYiA9IGZhY3RvcnkoKTsKfSkodGhpcywgZnVuY3Rpb24oKSB7CnJldHVybiAvKioqKioqLyAoZnVuY3Rpb24obW9kdWxlcykgeyAvLyB3ZWJwYWNrQm9vdHN0cmFwCi8qKioqKiovIAkvLyBUaGUgbW9kdWxlIGNhY2hlCi8qKioqKiovIAl2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9OwovKioqKioqLwovKioqKioqLyAJLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb24KLyoqKioqKi8gCWZ1bmN0aW9uIF9fd19wZGZqc19yZXF1aXJlX18obW9kdWxlSWQpIHsKLyoqKioqKi8KLyoqKioqKi8gCQkvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGUKLyoqKioqKi8gCQlpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkgewovKioqKioqLyAJCQlyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0czsKLyoqKioqKi8gCQl9Ci8qKioqKiovIAkJLy8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSkKLyoqKioqKi8gCQl2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7Ci8qKioqKiovIAkJCWk6IG1vZHVsZUlkLAovKioqKioqLyAJCQlsOiBmYWxzZSwKLyoqKioqKi8gCQkJZXhwb3J0czoge30KLyoqKioqKi8gCQl9OwovKioqKioqLwovKioqKioqLyAJCS8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvbgovKioqKioqLyAJCW1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pOwovKioqKioqLwovKioqKioqLyAJCS8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWQKLyoqKioqKi8gCQltb2R1bGUubCA9IHRydWU7Ci8qKioqKiovCi8qKioqKiovIAkJLy8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGUKLyoqKioqKi8gCQlyZXR1cm4gbW9kdWxlLmV4cG9ydHM7Ci8qKioqKiovIAl9Ci8qKioqKiovCi8qKioqKiovCi8qKioqKiovIAkvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKQovKioqKioqLyAJX193X3BkZmpzX3JlcXVpcmVfXy5tID0gbW9kdWxlczsKLyoqKioqKi8KLyoqKioqKi8gCS8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlCi8qKioqKiovIAlfX3dfcGRmanNfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzOwovKioqKioqLwovKioqKioqLyAJLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzCi8qKioqKiovIAlfX3dfcGRmanNfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHsKLyoqKioqKi8gCQlpZighX193X3BkZmpzX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7Ci8qKioqKiovIAkJCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pOwovKioqKioqLyAJCX0KLyoqKioqKi8gCX07Ci8qKioqKiovCi8qKioqKiovIAkvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzCi8qKioqKiovIAlfX3dfcGRmanNfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7Ci8qKioqKiovIAkJaWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7Ci8qKioqKiovIAkJCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pOwovKioqKioqLyAJCX0KLyoqKioqKi8gCQlPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pOwovKioqKioqLyAJfTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdAovKioqKioqLyAJLy8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0Ci8qKioqKiovIAkvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnMKLyoqKioqKi8gCS8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdAovKioqKioqLyAJLy8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZQovKioqKioqLyAJX193X3BkZmpzX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHsKLyoqKioqKi8gCQlpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKHZhbHVlKTsKLyoqKioqKi8gCQlpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlOwovKioqKioqLyAJCWlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7Ci8qKioqKiovIAkJdmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKLyoqKioqKi8gCQlfX3dfcGRmanNfcmVxdWlyZV9fLnIobnMpOwovKioqKioqLyAJCU9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTsKLyoqKioqKi8gCQlpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dfcGRmanNfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7Ci8qKioqKiovIAkJcmV0dXJuIG5zOwovKioqKioqLyAJfTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzCi8qKioqKiovIAlfX3dfcGRmanNfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHsKLyoqKioqKi8gCQl2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID8KLyoqKioqKi8gCQkJZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDoKLyoqKioqKi8gCQkJZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTsKLyoqKioqKi8gCQlfX3dfcGRmanNfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7Ci8qKioqKiovIAkJcmV0dXJuIGdldHRlcjsKLyoqKioqKi8gCX07Ci8qKioqKiovCi8qKioqKiovIAkvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwKLyoqKioqKi8gCV9fd19wZGZqc19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTsKLyoqKioqKi8KLyoqKioqKi8gCS8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fCi8qKioqKiovIAlfX3dfcGRmanNfcmVxdWlyZV9fLnAgPSAiIjsKLyoqKioqKi8KLyoqKioqKi8KLyoqKioqKi8gCS8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0cwovKioqKioqLyAJcmV0dXJuIF9fd19wZGZqc19yZXF1aXJlX18oX193X3BkZmpzX3JlcXVpcmVfXy5zID0gMCk7Ci8qKioqKiovIH0pCi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi8qKioqKiovIChbCi8qIDAgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJhZGRMaW5rQXR0cmlidXRlcyIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIF9kaXNwbGF5X3V0aWxzLmFkZExpbmtBdHRyaWJ1dGVzOwogIH0KfSk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiZ2V0RmlsZW5hbWVGcm9tVXJsIiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gX2Rpc3BsYXlfdXRpbHMuZ2V0RmlsZW5hbWVGcm9tVXJsOwogIH0KfSk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiTGlua1RhcmdldCIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIF9kaXNwbGF5X3V0aWxzLkxpbmtUYXJnZXQ7CiAgfQp9KTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJsb2FkU2NyaXB0IiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gX2Rpc3BsYXlfdXRpbHMubG9hZFNjcmlwdDsKICB9Cn0pOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIlBERkRhdGVTdHJpbmciLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBfZGlzcGxheV91dGlscy5QREZEYXRlU3RyaW5nOwogIH0KfSk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiUmVuZGVyaW5nQ2FuY2VsbGVkRXhjZXB0aW9uIiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gX2Rpc3BsYXlfdXRpbHMuUmVuZGVyaW5nQ2FuY2VsbGVkRXhjZXB0aW9uOwogIH0KfSk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiYnVpbGQiLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBfYXBpLmJ1aWxkOwogIH0KfSk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiZ2V0RG9jdW1lbnQiLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBfYXBpLmdldERvY3VtZW50OwogIH0KfSk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiTG9vcGJhY2tQb3J0IiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gX2FwaS5Mb29wYmFja1BvcnQ7CiAgfQp9KTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJQREZEYXRhUmFuZ2VUcmFuc3BvcnQiLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBfYXBpLlBERkRhdGFSYW5nZVRyYW5zcG9ydDsKICB9Cn0pOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIlBERldvcmtlciIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIF9hcGkuUERGV29ya2VyOwogIH0KfSk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAidmVyc2lvbiIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIF9hcGkudmVyc2lvbjsKICB9Cn0pOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIkNNYXBDb21wcmVzc2lvblR5cGUiLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBfdXRpbC5DTWFwQ29tcHJlc3Npb25UeXBlOwogIH0KfSk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiY3JlYXRlT2JqZWN0VVJMIiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gX3V0aWwuY3JlYXRlT2JqZWN0VVJMOwogIH0KfSk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkiLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eTsKICB9Cn0pOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgImNyZWF0ZVZhbGlkQWJzb2x1dGVVcmwiLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBfdXRpbC5jcmVhdGVWYWxpZEFic29sdXRlVXJsOwogIH0KfSk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiSW52YWxpZFBERkV4Y2VwdGlvbiIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIF91dGlsLkludmFsaWRQREZFeGNlcHRpb247CiAgfQp9KTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJNaXNzaW5nUERGRXhjZXB0aW9uIiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gX3V0aWwuTWlzc2luZ1BERkV4Y2VwdGlvbjsKICB9Cn0pOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIk9QUyIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIF91dGlsLk9QUzsKICB9Cn0pOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIlBhc3N3b3JkUmVzcG9uc2VzIiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gX3V0aWwuUGFzc3dvcmRSZXNwb25zZXM7CiAgfQp9KTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJQZXJtaXNzaW9uRmxhZyIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIF91dGlsLlBlcm1pc3Npb25GbGFnOwogIH0KfSk7Ck9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAicmVtb3ZlTnVsbENoYXJhY3RlcnMiLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBfdXRpbC5yZW1vdmVOdWxsQ2hhcmFjdGVyczsKICB9Cn0pOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgInNoYWRvdyIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIF91dGlsLnNoYWRvdzsKICB9Cn0pOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbiIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIF91dGlsLlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbjsKICB9Cn0pOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIlVOU1VQUE9SVEVEX0ZFQVRVUkVTIiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gX3V0aWwuVU5TVVBQT1JURURfRkVBVFVSRVM7CiAgfQp9KTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJVdGlsIiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gX3V0aWwuVXRpbDsKICB9Cn0pOwpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIlZlcmJvc2l0eUxldmVsIiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gX3V0aWwuVmVyYm9zaXR5TGV2ZWw7CiAgfQp9KTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJBbm5vdGF0aW9uTGF5ZXIiLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBfYW5ub3RhdGlvbl9sYXllci5Bbm5vdGF0aW9uTGF5ZXI7CiAgfQp9KTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJhcGlDb21wYXRpYmlsaXR5UGFyYW1zIiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gX2FwaV9jb21wYXRpYmlsaXR5LmFwaUNvbXBhdGliaWxpdHlQYXJhbXM7CiAgfQp9KTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJHbG9iYWxXb3JrZXJPcHRpb25zIiwgewogIGVudW1lcmFibGU6IHRydWUsCiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICByZXR1cm4gX3dvcmtlcl9vcHRpb25zLkdsb2JhbFdvcmtlck9wdGlvbnM7CiAgfQp9KTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJyZW5kZXJUZXh0TGF5ZXIiLCB7CiAgZW51bWVyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgIHJldHVybiBfdGV4dF9sYXllci5yZW5kZXJUZXh0TGF5ZXI7CiAgfQp9KTsKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJTVkdHcmFwaGljcyIsIHsKICBlbnVtZXJhYmxlOiB0cnVlLAogIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgcmV0dXJuIF9zdmcuU1ZHR3JhcGhpY3M7CiAgfQp9KTsKCnZhciBfZGlzcGxheV91dGlscyA9IF9fd19wZGZqc19yZXF1aXJlX18oMSk7Cgp2YXIgX2FwaSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTk4KTsKCnZhciBfdXRpbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNSk7Cgp2YXIgX2Fubm90YXRpb25fbGF5ZXIgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIwOSk7Cgp2YXIgX2FwaV9jb21wYXRpYmlsaXR5ID0gX193X3BkZmpzX3JlcXVpcmVfXygyMDApOwoKdmFyIF93b3JrZXJfb3B0aW9ucyA9IF9fd19wZGZqc19yZXF1aXJlX18oMjAzKTsKCnZhciBfdGV4dF9sYXllciA9IF9fd19wZGZqc19yZXF1aXJlX18oMjEwKTsKCnZhciBfc3ZnID0gX193X3BkZmpzX3JlcXVpcmVfXygyMTEpOwoKdmFyIHBkZmpzVmVyc2lvbiA9ICcyLjUuMjA3JzsKdmFyIHBkZmpzQnVpbGQgPSAnMDk3NGQ2MDUnOwp7CiAgdmFyIF9yZXF1aXJlID0gX193X3BkZmpzX3JlcXVpcmVfXyg3KSwKICAgICAgaXNOb2RlSlMgPSBfcmVxdWlyZS5pc05vZGVKUzsKCiAgaWYgKGlzTm9kZUpTKSB7CiAgICB2YXIgUERGTm9kZVN0cmVhbSA9IF9fd19wZGZqc19yZXF1aXJlX18oMjEyKS5QREZOb2RlU3RyZWFtOwoKICAgICgwLCBfYXBpLnNldFBERk5ldHdvcmtTdHJlYW1GYWN0b3J5KShmdW5jdGlvbiAocGFyYW1zKSB7CiAgICAgIHJldHVybiBuZXcgUERGTm9kZVN0cmVhbShwYXJhbXMpOwogICAgfSk7CiAgfSBlbHNlIHsKICAgIHZhciBQREZOZXR3b3JrU3RyZWFtID0gX193X3BkZmpzX3JlcXVpcmVfXygyMTUpLlBERk5ldHdvcmtTdHJlYW07CgogICAgdmFyIFBERkZldGNoU3RyZWFtOwoKICAgIGlmICgoMCwgX2Rpc3BsYXlfdXRpbHMuaXNGZXRjaFN1cHBvcnRlZCkoKSkgewogICAgICBQREZGZXRjaFN0cmVhbSA9IF9fd19wZGZqc19yZXF1aXJlX18oMjE2KS5QREZGZXRjaFN0cmVhbTsKICAgIH0KCiAgICAoMCwgX2FwaS5zZXRQREZOZXR3b3JrU3RyZWFtRmFjdG9yeSkoZnVuY3Rpb24gKHBhcmFtcykgewogICAgICBpZiAoUERGRmV0Y2hTdHJlYW0gJiYgKDAsIF9kaXNwbGF5X3V0aWxzLmlzVmFsaWRGZXRjaFVybCkocGFyYW1zLnVybCkpIHsKICAgICAgICByZXR1cm4gbmV3IFBERkZldGNoU3RyZWFtKHBhcmFtcyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBuZXcgUERGTmV0d29ya1N0cmVhbShwYXJhbXMpOwogICAgfSk7CiAgfQp9CgovKioqLyB9KSwKLyogMSAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7CgoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmFkZExpbmtBdHRyaWJ1dGVzID0gYWRkTGlua0F0dHJpYnV0ZXM7CmV4cG9ydHMuZ2V0RmlsZW5hbWVGcm9tVXJsID0gZ2V0RmlsZW5hbWVGcm9tVXJsOwpleHBvcnRzLmlzRmV0Y2hTdXBwb3J0ZWQgPSBpc0ZldGNoU3VwcG9ydGVkOwpleHBvcnRzLmlzVmFsaWRGZXRjaFVybCA9IGlzVmFsaWRGZXRjaFVybDsKZXhwb3J0cy5sb2FkU2NyaXB0ID0gbG9hZFNjcmlwdDsKZXhwb3J0cy5kZXByZWNhdGVkID0gZGVwcmVjYXRlZDsKZXhwb3J0cy5QREZEYXRlU3RyaW5nID0gZXhwb3J0cy5TdGF0VGltZXIgPSBleHBvcnRzLkRPTVNWR0ZhY3RvcnkgPSBleHBvcnRzLkRPTUNNYXBSZWFkZXJGYWN0b3J5ID0gZXhwb3J0cy5ET01DYW52YXNGYWN0b3J5ID0gZXhwb3J0cy5ERUZBVUxUX0xJTktfUkVMID0gZXhwb3J0cy5MaW5rVGFyZ2V0ID0gZXhwb3J0cy5SZW5kZXJpbmdDYW5jZWxsZWRFeGNlcHRpb24gPSBleHBvcnRzLlBhZ2VWaWV3cG9ydCA9IHZvaWQgMDsKCnZhciBfcmVnZW5lcmF0b3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd19wZGZqc19yZXF1aXJlX18oMikpOwoKdmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXyg1KTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICJkZWZhdWx0Ijogb2JqIH07IH0KCmZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8sIGFsbG93QXJyYXlMaWtlKSB7IHZhciBpdDsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJ1bmRlZmluZWQiIHx8IG9bU3ltYm9sLml0ZXJhdG9yXSA9PSBudWxsKSB7IGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09ICJudW1iZXIiKSB7IGlmIChpdCkgbyA9IGl0OyB2YXIgaSA9IDA7IHZhciBGID0gZnVuY3Rpb24gRigpIHt9OyByZXR1cm4geyBzOiBGLCBuOiBmdW5jdGlvbiBuKCkgeyBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHsgZG9uZTogdHJ1ZSB9OyByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IG9baSsrXSB9OyB9LCBlOiBmdW5jdGlvbiBlKF9lKSB7IHRocm93IF9lOyB9LCBmOiBGIH07IH0gdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpOyB9IHZhciBub3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgZGlkRXJyID0gZmFsc2UsIGVycjsgcmV0dXJuIHsgczogZnVuY3Rpb24gcygpIHsgaXQgPSBvW1N5bWJvbC5pdGVyYXRvcl0oKTsgfSwgbjogZnVuY3Rpb24gbigpIHsgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7IG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7IHJldHVybiBzdGVwOyB9LCBlOiBmdW5jdGlvbiBlKF9lMikgeyBkaWRFcnIgPSB0cnVlOyBlcnIgPSBfZTI7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdFsicmV0dXJuIl0gIT0gbnVsbCkgaXRbInJldHVybiJdKCk7IH0gZmluYWxseSB7IGlmIChkaWRFcnIpIHRocm93IGVycjsgfSB9IH07IH0KCmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gInN0cmluZyIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSAiT2JqZWN0IiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gIk1hcCIgfHwgbiA9PT0gIlNldCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gIkFyZ3VtZW50cyIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9CgpmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfQoKZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIHNlbGYgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzOyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7IGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgIm5leHQiLCB2YWx1ZSk7IH0gZnVuY3Rpb24gX3Rocm93KGVycikgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJ0aHJvdyIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9Cgp2YXIgREVGQVVMVF9MSU5LX1JFTCA9ICJub29wZW5lciBub3JlZmVycmVyIG5vZm9sbG93IjsKZXhwb3J0cy5ERUZBVUxUX0xJTktfUkVMID0gREVGQVVMVF9MSU5LX1JFTDsKdmFyIFNWR19OUyA9ICJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI7Cgp2YXIgRE9NQ2FudmFzRmFjdG9yeSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gRE9NQ2FudmFzRmFjdG9yeSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBET01DYW52YXNGYWN0b3J5KTsKICB9CgogIF9jcmVhdGVDbGFzcyhET01DYW52YXNGYWN0b3J5LCBbewogICAga2V5OiAiY3JlYXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUod2lkdGgsIGhlaWdodCkgewogICAgICBpZiAod2lkdGggPD0gMCB8fCBoZWlnaHQgPD0gMCkgewogICAgICAgIHRocm93IG5ldyBFcnJvcigiSW52YWxpZCBjYW52YXMgc2l6ZSIpOwogICAgICB9CgogICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiY2FudmFzIik7CiAgICAgIHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoIjJkIik7CiAgICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoOwogICAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0OwogICAgICByZXR1cm4gewogICAgICAgIGNhbnZhczogY2FudmFzLAogICAgICAgIGNvbnRleHQ6IGNvbnRleHQKICAgICAgfTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZXNldCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXQoY2FudmFzQW5kQ29udGV4dCwgd2lkdGgsIGhlaWdodCkgewogICAgICBpZiAoIWNhbnZhc0FuZENvbnRleHQuY2FudmFzKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJDYW52YXMgaXMgbm90IHNwZWNpZmllZCIpOwogICAgICB9CgogICAgICBpZiAod2lkdGggPD0gMCB8fCBoZWlnaHQgPD0gMCkgewogICAgICAgIHRocm93IG5ldyBFcnJvcigiSW52YWxpZCBjYW52YXMgc2l6ZSIpOwogICAgICB9CgogICAgICBjYW52YXNBbmRDb250ZXh0LmNhbnZhcy53aWR0aCA9IHdpZHRoOwogICAgICBjYW52YXNBbmRDb250ZXh0LmNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7CiAgICB9CiAgfSwgewogICAga2V5OiAiZGVzdHJveSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveShjYW52YXNBbmRDb250ZXh0KSB7CiAgICAgIGlmICghY2FudmFzQW5kQ29udGV4dC5jYW52YXMpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkNhbnZhcyBpcyBub3Qgc3BlY2lmaWVkIik7CiAgICAgIH0KCiAgICAgIGNhbnZhc0FuZENvbnRleHQuY2FudmFzLndpZHRoID0gMDsKICAgICAgY2FudmFzQW5kQ29udGV4dC5jYW52YXMuaGVpZ2h0ID0gMDsKICAgICAgY2FudmFzQW5kQ29udGV4dC5jYW52YXMgPSBudWxsOwogICAgICBjYW52YXNBbmRDb250ZXh0LmNvbnRleHQgPSBudWxsOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIERPTUNhbnZhc0ZhY3Rvcnk7Cn0oKTsKCmV4cG9ydHMuRE9NQ2FudmFzRmFjdG9yeSA9IERPTUNhbnZhc0ZhY3Rvcnk7Cgp2YXIgRE9NQ01hcFJlYWRlckZhY3RvcnkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIERPTUNNYXBSZWFkZXJGYWN0b3J5KF9yZWYpIHsKICAgIHZhciBfcmVmJGJhc2VVcmwgPSBfcmVmLmJhc2VVcmwsCiAgICAgICAgYmFzZVVybCA9IF9yZWYkYmFzZVVybCA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWYkYmFzZVVybCwKICAgICAgICBfcmVmJGlzQ29tcHJlc3NlZCA9IF9yZWYuaXNDb21wcmVzc2VkLAogICAgICAgIGlzQ29tcHJlc3NlZCA9IF9yZWYkaXNDb21wcmVzc2VkID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYkaXNDb21wcmVzc2VkOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBET01DTWFwUmVhZGVyRmFjdG9yeSk7CgogICAgdGhpcy5iYXNlVXJsID0gYmFzZVVybDsKICAgIHRoaXMuaXNDb21wcmVzc2VkID0gaXNDb21wcmVzc2VkOwogIH0KCiAgX2NyZWF0ZUNsYXNzKERPTUNNYXBSZWFkZXJGYWN0b3J5LCBbewogICAga2V5OiAiZmV0Y2giLAogICAgdmFsdWU6IGZ1bmN0aW9uIChfZmV0Y2gpIHsKICAgICAgZnVuY3Rpb24gZmV0Y2goX3gpIHsKICAgICAgICByZXR1cm4gX2ZldGNoLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIGZldGNoLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiBfZmV0Y2gudG9TdHJpbmcoKTsKICAgICAgfTsKCiAgICAgIHJldHVybiBmZXRjaDsKICAgIH0oIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcmVmMyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yWyJkZWZhdWx0Il0ubWFyayhmdW5jdGlvbiBfY2FsbGVlMihfcmVmMikgewogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAgIHZhciBuYW1lLCB1cmwsIGNvbXByZXNzaW9uVHlwZTsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yWyJkZWZhdWx0Il0ud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBuYW1lID0gX3JlZjIubmFtZTsKCiAgICAgICAgICAgICAgICBpZiAodGhpcy5iYXNlVXJsKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgQ01hcCAiYmFzZVVybCIgcGFyYW1ldGVyIG11c3QgYmUgc3BlY2lmaWVkLCBlbnN1cmUgdGhhdCAnICsgJ3RoZSAiY01hcFVybCIgYW5kICJjTWFwUGFja2VkIiBBUEkgcGFyYW1ldGVycyBhcmUgcHJvdmlkZWQuJyk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIGlmIChuYW1lKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJDTWFwIG5hbWUgbXVzdCBiZSBzcGVjaWZpZWQuIik7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIHVybCA9IHRoaXMuYmFzZVVybCArIG5hbWUgKyAodGhpcy5pc0NvbXByZXNzZWQgPyAiLmJjbWFwIiA6ICIiKTsKICAgICAgICAgICAgICAgIGNvbXByZXNzaW9uVHlwZSA9IHRoaXMuaXNDb21wcmVzc2VkID8gX3V0aWwuQ01hcENvbXByZXNzaW9uVHlwZS5CSU5BUlkgOiBfdXRpbC5DTWFwQ29tcHJlc3Npb25UeXBlLk5PTkU7CgogICAgICAgICAgICAgICAgaWYgKCEoaXNGZXRjaFN1cHBvcnRlZCgpICYmIGlzVmFsaWRGZXRjaFVybCh1cmwsIGRvY3VtZW50LmJhc2VVUkkpKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBmZXRjaCh1cmwpLnRoZW4oIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgIHZhciBfcmVmNCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yWyJkZWZhdWx0Il0ubWFyayhmdW5jdGlvbiBfY2FsbGVlKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGNNYXBEYXRhOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JbImRlZmF1bHQiXS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLm9rKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IocmVzcG9uc2Uuc3RhdHVzVGV4dCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX3RoaXMuaXNDb21wcmVzc2VkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBVaW50OEFycmF5OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDY7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UuYXJyYXlCdWZmZXIoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQudDEgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY01hcERhdGEgPSBuZXcgX2NvbnRleHQudDAoX2NvbnRleHQudDEpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE1OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC50MiA9IF91dGlsLnN0cmluZ1RvQnl0ZXM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UudGV4dCgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQudDMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgY01hcERhdGEgPSAoMCwgX2NvbnRleHQudDIpKF9jb250ZXh0LnQzKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY01hcERhdGE6IGNNYXBEYXRhLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wcmVzc2lvblR5cGU6IGNvbXByZXNzaW9uVHlwZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTY6CiAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LCBfY2FsbGVlKTsKICAgICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChfeDMpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3JlZjQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0oKSlbImNhdGNoIl0oZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlVuYWJsZSB0byBsb2FkICIuY29uY2F0KF90aGlzLmlzQ29tcHJlc3NlZCA/ICJiaW5hcnkgIiA6ICIiKSArICJDTWFwIGF0OiAiLmNvbmNhdCh1cmwpKTsKICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKICAgICAgICAgICAgICAgICAgcmVxdWVzdC5vcGVuKCJHRVQiLCB1cmwsIHRydWUpOwoKICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLmlzQ29tcHJlc3NlZCkgewogICAgICAgICAgICAgICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gImFycmF5YnVmZmVyIjsKICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgcmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gWE1MSHR0cFJlcXVlc3QuRE9ORSkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3Quc3RhdHVzID09PSAyMDAgfHwgcmVxdWVzdC5zdGF0dXMgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgIHZhciBjTWFwRGF0YTsKCiAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RoaXMuaXNDb21wcmVzc2VkICYmIHJlcXVlc3QucmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY01hcERhdGEgPSBuZXcgVWludDhBcnJheShyZXF1ZXN0LnJlc3BvbnNlKTsKICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIV90aGlzLmlzQ29tcHJlc3NlZCAmJiByZXF1ZXN0LnJlc3BvbnNlVGV4dCkgewogICAgICAgICAgICAgICAgICAgICAgICBjTWFwRGF0YSA9ICgwLCBfdXRpbC5zdHJpbmdUb0J5dGVzKShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7CiAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgaWYgKGNNYXBEYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoewogICAgICAgICAgICAgICAgICAgICAgICAgIGNNYXBEYXRhOiBjTWFwRGF0YSwKICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wcmVzc2lvblR5cGU6IGNvbXByZXNzaW9uVHlwZQogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihyZXF1ZXN0LnN0YXR1c1RleHQpKTsKICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgIHJlcXVlc3Quc2VuZChudWxsKTsKICAgICAgICAgICAgICAgIH0pWyJjYXRjaCJdKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJVbmFibGUgdG8gbG9hZCAiLmNvbmNhdChfdGhpcy5pc0NvbXByZXNzZWQgPyAiYmluYXJ5ICIgOiAiIikgKyAiQ01hcCBhdDogIi5jb25jYXQodXJsKSk7CiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIsIHRoaXMpOwogICAgICB9KSk7CgogICAgICByZXR1cm4gZnVuY3Rpb24gKF94MikgewogICAgICAgIHJldHVybiBfcmVmMy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9OwogICAgfSgpKQogIH1dKTsKCiAgcmV0dXJuIERPTUNNYXBSZWFkZXJGYWN0b3J5Owp9KCk7CgpleHBvcnRzLkRPTUNNYXBSZWFkZXJGYWN0b3J5ID0gRE9NQ01hcFJlYWRlckZhY3Rvcnk7Cgp2YXIgRE9NU1ZHRmFjdG9yeSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gRE9NU1ZHRmFjdG9yeSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBET01TVkdGYWN0b3J5KTsKICB9CgogIF9jcmVhdGVDbGFzcyhET01TVkdGYWN0b3J5LCBbewogICAga2V5OiAiY3JlYXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUod2lkdGgsIGhlaWdodCkgewogICAgICAoMCwgX3V0aWwuYXNzZXJ0KSh3aWR0aCA+IDAgJiYgaGVpZ2h0ID4gMCwgIkludmFsaWQgU1ZHIGRpbWVuc2lvbnMiKTsKICAgICAgdmFyIHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhTVkdfTlMsICJzdmc6c3ZnIik7CiAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoInZlcnNpb24iLCAiMS4xIik7CiAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoIndpZHRoIiwgd2lkdGggKyAicHgiKTsKICAgICAgc3ZnLnNldEF0dHJpYnV0ZSgiaGVpZ2h0IiwgaGVpZ2h0ICsgInB4Iik7CiAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoInByZXNlcnZlQXNwZWN0UmF0aW8iLCAibm9uZSIpOwogICAgICBzdmcuc2V0QXR0cmlidXRlKCJ2aWV3Qm94IiwgIjAgMCAiICsgd2lkdGggKyAiICIgKyBoZWlnaHQpOwogICAgICByZXR1cm4gc3ZnOwogICAgfQogIH0sIHsKICAgIGtleTogImNyZWF0ZUVsZW1lbnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodHlwZSkgewogICAgICAoMCwgX3V0aWwuYXNzZXJ0KSh0eXBlb2YgdHlwZSA9PT0gInN0cmluZyIsICJJbnZhbGlkIFNWRyBlbGVtZW50IHR5cGUiKTsKICAgICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhTVkdfTlMsIHR5cGUpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIERPTVNWR0ZhY3Rvcnk7Cn0oKTsKCmV4cG9ydHMuRE9NU1ZHRmFjdG9yeSA9IERPTVNWR0ZhY3Rvcnk7Cgp2YXIgUGFnZVZpZXdwb3J0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBQYWdlVmlld3BvcnQoX3JlZjUpIHsKICAgIHZhciB2aWV3Qm94ID0gX3JlZjUudmlld0JveCwKICAgICAgICBzY2FsZSA9IF9yZWY1LnNjYWxlLAogICAgICAgIHJvdGF0aW9uID0gX3JlZjUucm90YXRpb24sCiAgICAgICAgX3JlZjUkb2Zmc2V0WCA9IF9yZWY1Lm9mZnNldFgsCiAgICAgICAgb2Zmc2V0WCA9IF9yZWY1JG9mZnNldFggPT09IHZvaWQgMCA/IDAgOiBfcmVmNSRvZmZzZXRYLAogICAgICAgIF9yZWY1JG9mZnNldFkgPSBfcmVmNS5vZmZzZXRZLAogICAgICAgIG9mZnNldFkgPSBfcmVmNSRvZmZzZXRZID09PSB2b2lkIDAgPyAwIDogX3JlZjUkb2Zmc2V0WSwKICAgICAgICBfcmVmNSRkb250RmxpcCA9IF9yZWY1LmRvbnRGbGlwLAogICAgICAgIGRvbnRGbGlwID0gX3JlZjUkZG9udEZsaXAgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjUkZG9udEZsaXA7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBhZ2VWaWV3cG9ydCk7CgogICAgdGhpcy52aWV3Qm94ID0gdmlld0JveDsKICAgIHRoaXMuc2NhbGUgPSBzY2FsZTsKICAgIHRoaXMucm90YXRpb24gPSByb3RhdGlvbjsKICAgIHRoaXMub2Zmc2V0WCA9IG9mZnNldFg7CiAgICB0aGlzLm9mZnNldFkgPSBvZmZzZXRZOwogICAgdmFyIGNlbnRlclggPSAodmlld0JveFsyXSArIHZpZXdCb3hbMF0pIC8gMjsKICAgIHZhciBjZW50ZXJZID0gKHZpZXdCb3hbM10gKyB2aWV3Qm94WzFdKSAvIDI7CiAgICB2YXIgcm90YXRlQSwgcm90YXRlQiwgcm90YXRlQywgcm90YXRlRDsKICAgIHJvdGF0aW9uID0gcm90YXRpb24gJSAzNjA7CiAgICByb3RhdGlvbiA9IHJvdGF0aW9uIDwgMCA/IHJvdGF0aW9uICsgMzYwIDogcm90YXRpb247CgogICAgc3dpdGNoIChyb3RhdGlvbikgewogICAgICBjYXNlIDE4MDoKICAgICAgICByb3RhdGVBID0gLTE7CiAgICAgICAgcm90YXRlQiA9IDA7CiAgICAgICAgcm90YXRlQyA9IDA7CiAgICAgICAgcm90YXRlRCA9IDE7CiAgICAgICAgYnJlYWs7CgogICAgICBjYXNlIDkwOgogICAgICAgIHJvdGF0ZUEgPSAwOwogICAgICAgIHJvdGF0ZUIgPSAxOwogICAgICAgIHJvdGF0ZUMgPSAxOwogICAgICAgIHJvdGF0ZUQgPSAwOwogICAgICAgIGJyZWFrOwoKICAgICAgY2FzZSAyNzA6CiAgICAgICAgcm90YXRlQSA9IDA7CiAgICAgICAgcm90YXRlQiA9IC0xOwogICAgICAgIHJvdGF0ZUMgPSAtMTsKICAgICAgICByb3RhdGVEID0gMDsKICAgICAgICBicmVhazsKCiAgICAgIGNhc2UgMDoKICAgICAgICByb3RhdGVBID0gMTsKICAgICAgICByb3RhdGVCID0gMDsKICAgICAgICByb3RhdGVDID0gMDsKICAgICAgICByb3RhdGVEID0gLTE7CiAgICAgICAgYnJlYWs7CgogICAgICBkZWZhdWx0OgogICAgICAgIHRocm93IG5ldyBFcnJvcigiUGFnZVZpZXdwb3J0OiBJbnZhbGlkIHJvdGF0aW9uLCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgOTAgZGVncmVlcy4iKTsKICAgIH0KCiAgICBpZiAoZG9udEZsaXApIHsKICAgICAgcm90YXRlQyA9IC1yb3RhdGVDOwogICAgICByb3RhdGVEID0gLXJvdGF0ZUQ7CiAgICB9CgogICAgdmFyIG9mZnNldENhbnZhc1gsIG9mZnNldENhbnZhc1k7CiAgICB2YXIgd2lkdGgsIGhlaWdodDsKCiAgICBpZiAocm90YXRlQSA9PT0gMCkgewogICAgICBvZmZzZXRDYW52YXNYID0gTWF0aC5hYnMoY2VudGVyWSAtIHZpZXdCb3hbMV0pICogc2NhbGUgKyBvZmZzZXRYOwogICAgICBvZmZzZXRDYW52YXNZID0gTWF0aC5hYnMoY2VudGVyWCAtIHZpZXdCb3hbMF0pICogc2NhbGUgKyBvZmZzZXRZOwogICAgICB3aWR0aCA9IE1hdGguYWJzKHZpZXdCb3hbM10gLSB2aWV3Qm94WzFdKSAqIHNjYWxlOwogICAgICBoZWlnaHQgPSBNYXRoLmFicyh2aWV3Qm94WzJdIC0gdmlld0JveFswXSkgKiBzY2FsZTsKICAgIH0gZWxzZSB7CiAgICAgIG9mZnNldENhbnZhc1ggPSBNYXRoLmFicyhjZW50ZXJYIC0gdmlld0JveFswXSkgKiBzY2FsZSArIG9mZnNldFg7CiAgICAgIG9mZnNldENhbnZhc1kgPSBNYXRoLmFicyhjZW50ZXJZIC0gdmlld0JveFsxXSkgKiBzY2FsZSArIG9mZnNldFk7CiAgICAgIHdpZHRoID0gTWF0aC5hYnModmlld0JveFsyXSAtIHZpZXdCb3hbMF0pICogc2NhbGU7CiAgICAgIGhlaWdodCA9IE1hdGguYWJzKHZpZXdCb3hbM10gLSB2aWV3Qm94WzFdKSAqIHNjYWxlOwogICAgfQoKICAgIHRoaXMudHJhbnNmb3JtID0gW3JvdGF0ZUEgKiBzY2FsZSwgcm90YXRlQiAqIHNjYWxlLCByb3RhdGVDICogc2NhbGUsIHJvdGF0ZUQgKiBzY2FsZSwgb2Zmc2V0Q2FudmFzWCAtIHJvdGF0ZUEgKiBzY2FsZSAqIGNlbnRlclggLSByb3RhdGVDICogc2NhbGUgKiBjZW50ZXJZLCBvZmZzZXRDYW52YXNZIC0gcm90YXRlQiAqIHNjYWxlICogY2VudGVyWCAtIHJvdGF0ZUQgKiBzY2FsZSAqIGNlbnRlclldOwogICAgdGhpcy53aWR0aCA9IHdpZHRoOwogICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7CiAgfQoKICBfY3JlYXRlQ2xhc3MoUGFnZVZpZXdwb3J0LCBbewogICAga2V5OiAiY2xvbmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNsb25lKCkgewogICAgICB2YXIgX3JlZjYgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LAogICAgICAgICAgX3JlZjYkc2NhbGUgPSBfcmVmNi5zY2FsZSwKICAgICAgICAgIHNjYWxlID0gX3JlZjYkc2NhbGUgPT09IHZvaWQgMCA/IHRoaXMuc2NhbGUgOiBfcmVmNiRzY2FsZSwKICAgICAgICAgIF9yZWY2JHJvdGF0aW9uID0gX3JlZjYucm90YXRpb24sCiAgICAgICAgICByb3RhdGlvbiA9IF9yZWY2JHJvdGF0aW9uID09PSB2b2lkIDAgPyB0aGlzLnJvdGF0aW9uIDogX3JlZjYkcm90YXRpb24sCiAgICAgICAgICBfcmVmNiRvZmZzZXRYID0gX3JlZjYub2Zmc2V0WCwKICAgICAgICAgIG9mZnNldFggPSBfcmVmNiRvZmZzZXRYID09PSB2b2lkIDAgPyB0aGlzLm9mZnNldFggOiBfcmVmNiRvZmZzZXRYLAogICAgICAgICAgX3JlZjYkb2Zmc2V0WSA9IF9yZWY2Lm9mZnNldFksCiAgICAgICAgICBvZmZzZXRZID0gX3JlZjYkb2Zmc2V0WSA9PT0gdm9pZCAwID8gdGhpcy5vZmZzZXRZIDogX3JlZjYkb2Zmc2V0WSwKICAgICAgICAgIF9yZWY2JGRvbnRGbGlwID0gX3JlZjYuZG9udEZsaXAsCiAgICAgICAgICBkb250RmxpcCA9IF9yZWY2JGRvbnRGbGlwID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY2JGRvbnRGbGlwOwoKICAgICAgcmV0dXJuIG5ldyBQYWdlVmlld3BvcnQoewogICAgICAgIHZpZXdCb3g6IHRoaXMudmlld0JveC5zbGljZSgpLAogICAgICAgIHNjYWxlOiBzY2FsZSwKICAgICAgICByb3RhdGlvbjogcm90YXRpb24sCiAgICAgICAgb2Zmc2V0WDogb2Zmc2V0WCwKICAgICAgICBvZmZzZXRZOiBvZmZzZXRZLAogICAgICAgIGRvbnRGbGlwOiBkb250RmxpcAogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb252ZXJ0VG9WaWV3cG9ydFBvaW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjb252ZXJ0VG9WaWV3cG9ydFBvaW50KHgsIHkpIHsKICAgICAgcmV0dXJuIF91dGlsLlV0aWwuYXBwbHlUcmFuc2Zvcm0oW3gsIHldLCB0aGlzLnRyYW5zZm9ybSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY29udmVydFRvVmlld3BvcnRSZWN0YW5nbGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnZlcnRUb1ZpZXdwb3J0UmVjdGFuZ2xlKHJlY3QpIHsKICAgICAgdmFyIHRvcExlZnQgPSBfdXRpbC5VdGlsLmFwcGx5VHJhbnNmb3JtKFtyZWN0WzBdLCByZWN0WzFdXSwgdGhpcy50cmFuc2Zvcm0pOwoKICAgICAgdmFyIGJvdHRvbVJpZ2h0ID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbcmVjdFsyXSwgcmVjdFszXV0sIHRoaXMudHJhbnNmb3JtKTsKCiAgICAgIHJldHVybiBbdG9wTGVmdFswXSwgdG9wTGVmdFsxXSwgYm90dG9tUmlnaHRbMF0sIGJvdHRvbVJpZ2h0WzFdXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb252ZXJ0VG9QZGZQb2ludCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29udmVydFRvUGRmUG9pbnQoeCwgeSkgewogICAgICByZXR1cm4gX3V0aWwuVXRpbC5hcHBseUludmVyc2VUcmFuc2Zvcm0oW3gsIHldLCB0aGlzLnRyYW5zZm9ybSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUGFnZVZpZXdwb3J0Owp9KCk7CgpleHBvcnRzLlBhZ2VWaWV3cG9ydCA9IFBhZ2VWaWV3cG9ydDsKCnZhciBSZW5kZXJpbmdDYW5jZWxsZWRFeGNlcHRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlRXhjZXB0aW9uKSB7CiAgX2luaGVyaXRzKFJlbmRlcmluZ0NhbmNlbGxlZEV4Y2VwdGlvbiwgX0Jhc2VFeGNlcHRpb24pOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFJlbmRlcmluZ0NhbmNlbGxlZEV4Y2VwdGlvbik7CgogIGZ1bmN0aW9uIFJlbmRlcmluZ0NhbmNlbGxlZEV4Y2VwdGlvbihtc2csIHR5cGUpIHsKICAgIHZhciBfdGhpczI7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlbmRlcmluZ0NhbmNlbGxlZEV4Y2VwdGlvbik7CgogICAgX3RoaXMyID0gX3N1cGVyLmNhbGwodGhpcywgbXNnKTsKICAgIF90aGlzMi50eXBlID0gdHlwZTsKICAgIHJldHVybiBfdGhpczI7CiAgfQoKICByZXR1cm4gUmVuZGVyaW5nQ2FuY2VsbGVkRXhjZXB0aW9uOwp9KF91dGlsLkJhc2VFeGNlcHRpb24pOwoKZXhwb3J0cy5SZW5kZXJpbmdDYW5jZWxsZWRFeGNlcHRpb24gPSBSZW5kZXJpbmdDYW5jZWxsZWRFeGNlcHRpb247CnZhciBMaW5rVGFyZ2V0ID0gewogIE5PTkU6IDAsCiAgU0VMRjogMSwKICBCTEFOSzogMiwKICBQQVJFTlQ6IDMsCiAgVE9QOiA0Cn07CmV4cG9ydHMuTGlua1RhcmdldCA9IExpbmtUYXJnZXQ7CgpmdW5jdGlvbiBhZGRMaW5rQXR0cmlidXRlcyhsaW5rKSB7CiAgdmFyIF9yZWY3ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fSwKICAgICAgdXJsID0gX3JlZjcudXJsLAogICAgICB0YXJnZXQgPSBfcmVmNy50YXJnZXQsCiAgICAgIHJlbCA9IF9yZWY3LnJlbCwKICAgICAgX3JlZjckZW5hYmxlZCA9IF9yZWY3LmVuYWJsZWQsCiAgICAgIGVuYWJsZWQgPSBfcmVmNyRlbmFibGVkID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjckZW5hYmxlZDsKCiAgKDAsIF91dGlsLmFzc2VydCkodXJsICYmIHR5cGVvZiB1cmwgPT09ICJzdHJpbmciLCAnYWRkTGlua0F0dHJpYnV0ZXM6IEEgdmFsaWQgInVybCIgcGFyYW1ldGVyIG11c3QgcHJvdmlkZWQuJyk7CiAgdmFyIHVybE51bGxSZW1vdmVkID0gKDAsIF91dGlsLnJlbW92ZU51bGxDaGFyYWN0ZXJzKSh1cmwpOwoKICBpZiAoZW5hYmxlZCkgewogICAgbGluay5ocmVmID0gbGluay50aXRsZSA9IHVybE51bGxSZW1vdmVkOwogIH0gZWxzZSB7CiAgICBsaW5rLmhyZWYgPSAiIjsKICAgIGxpbmsudGl0bGUgPSAiRGlzYWJsZWQ6ICIuY29uY2F0KHVybE51bGxSZW1vdmVkKTsKCiAgICBsaW5rLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH07CiAgfQoKICB2YXIgdGFyZ2V0U3RyID0gIiI7CgogIHN3aXRjaCAodGFyZ2V0KSB7CiAgICBjYXNlIExpbmtUYXJnZXQuTk9ORToKICAgICAgYnJlYWs7CgogICAgY2FzZSBMaW5rVGFyZ2V0LlNFTEY6CiAgICAgIHRhcmdldFN0ciA9ICJfc2VsZiI7CiAgICAgIGJyZWFrOwoKICAgIGNhc2UgTGlua1RhcmdldC5CTEFOSzoKICAgICAgdGFyZ2V0U3RyID0gIl9ibGFuayI7CiAgICAgIGJyZWFrOwoKICAgIGNhc2UgTGlua1RhcmdldC5QQVJFTlQ6CiAgICAgIHRhcmdldFN0ciA9ICJfcGFyZW50IjsKICAgICAgYnJlYWs7CgogICAgY2FzZSBMaW5rVGFyZ2V0LlRPUDoKICAgICAgdGFyZ2V0U3RyID0gIl90b3AiOwogICAgICBicmVhazsKICB9CgogIGxpbmsudGFyZ2V0ID0gdGFyZ2V0U3RyOwogIGxpbmsucmVsID0gdHlwZW9mIHJlbCA9PT0gInN0cmluZyIgPyByZWwgOiBERUZBVUxUX0xJTktfUkVMOwp9CgpmdW5jdGlvbiBnZXRGaWxlbmFtZUZyb21VcmwodXJsKSB7CiAgdmFyIGFuY2hvciA9IHVybC5pbmRleE9mKCIjIik7CiAgdmFyIHF1ZXJ5ID0gdXJsLmluZGV4T2YoIj8iKTsKICB2YXIgZW5kID0gTWF0aC5taW4oYW5jaG9yID4gMCA/IGFuY2hvciA6IHVybC5sZW5ndGgsIHF1ZXJ5ID4gMCA/IHF1ZXJ5IDogdXJsLmxlbmd0aCk7CiAgcmV0dXJuIHVybC5zdWJzdHJpbmcodXJsLmxhc3RJbmRleE9mKCIvIiwgZW5kKSArIDEsIGVuZCk7Cn0KCnZhciBTdGF0VGltZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFN0YXRUaW1lcigpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdGF0VGltZXIpOwoKICAgIHRoaXMuc3RhcnRlZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICB0aGlzLnRpbWVzID0gW107CiAgfQoKICBfY3JlYXRlQ2xhc3MoU3RhdFRpbWVyLCBbewogICAga2V5OiAidGltZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZShuYW1lKSB7CiAgICAgIGlmIChuYW1lIGluIHRoaXMuc3RhcnRlZCkgewogICAgICAgICgwLCBfdXRpbC53YXJuKSgiVGltZXIgaXMgYWxyZWFkeSBydW5uaW5nIGZvciAiLmNvbmNhdChuYW1lKSk7CiAgICAgIH0KCiAgICAgIHRoaXMuc3RhcnRlZFtuYW1lXSA9IERhdGUubm93KCk7CiAgICB9CiAgfSwgewogICAga2V5OiAidGltZUVuZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdGltZUVuZChuYW1lKSB7CiAgICAgIGlmICghKG5hbWUgaW4gdGhpcy5zdGFydGVkKSkgewogICAgICAgICgwLCBfdXRpbC53YXJuKSgiVGltZXIgaGFzIG5vdCBiZWVuIHN0YXJ0ZWQgZm9yICIuY29uY2F0KG5hbWUpKTsKICAgICAgfQoKICAgICAgdGhpcy50aW1lcy5wdXNoKHsKICAgICAgICBuYW1lOiBuYW1lLAogICAgICAgIHN0YXJ0OiB0aGlzLnN0YXJ0ZWRbbmFtZV0sCiAgICAgICAgZW5kOiBEYXRlLm5vdygpCiAgICAgIH0pOwogICAgICBkZWxldGUgdGhpcy5zdGFydGVkW25hbWVdOwogICAgfQogIH0sIHsKICAgIGtleTogInRvU3RyaW5nIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b1N0cmluZygpIHsKICAgICAgdmFyIG91dEJ1ZiA9IFtdOwogICAgICB2YXIgbG9uZ2VzdCA9IDA7CgogICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy50aW1lcyksCiAgICAgICAgICBfc3RlcDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciB0aW1lID0gX3N0ZXAudmFsdWU7CiAgICAgICAgICB2YXIgbmFtZSA9IHRpbWUubmFtZTsKCiAgICAgICAgICBpZiAobmFtZS5sZW5ndGggPiBsb25nZXN0KSB7CiAgICAgICAgICAgIGxvbmdlc3QgPSBuYW1lLmxlbmd0aDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvci5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yLmYoKTsKICAgICAgfQoKICAgICAgdmFyIF9pdGVyYXRvcjIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLnRpbWVzKSwKICAgICAgICAgIF9zdGVwMjsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IyLnMoKTsgIShfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBfdGltZSA9IF9zdGVwMi52YWx1ZTsKICAgICAgICAgIHZhciBkdXJhdGlvbiA9IF90aW1lLmVuZCAtIF90aW1lLnN0YXJ0OwogICAgICAgICAgb3V0QnVmLnB1c2goIiIuY29uY2F0KF90aW1lLm5hbWUucGFkRW5kKGxvbmdlc3QpLCAiICIpLmNvbmNhdChkdXJhdGlvbiwgIm1zXG4iKSk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IyLmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3IyLmYoKTsKICAgICAgfQoKICAgICAgcmV0dXJuIG91dEJ1Zi5qb2luKCIiKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBTdGF0VGltZXI7Cn0oKTsKCmV4cG9ydHMuU3RhdFRpbWVyID0gU3RhdFRpbWVyOwoKZnVuY3Rpb24gaXNGZXRjaFN1cHBvcnRlZCgpIHsKICByZXR1cm4gdHlwZW9mIGZldGNoICE9PSAidW5kZWZpbmVkIiAmJiB0eXBlb2YgUmVzcG9uc2UgIT09ICJ1bmRlZmluZWQiICYmICJib2R5IiBpbiBSZXNwb25zZS5wcm90b3R5cGUgJiYgdHlwZW9mIFJlYWRhYmxlU3RyZWFtICE9PSAidW5kZWZpbmVkIjsKfQoKZnVuY3Rpb24gaXNWYWxpZEZldGNoVXJsKHVybCwgYmFzZVVybCkgewogIHRyeSB7CiAgICB2YXIgX3JlZjggPSBiYXNlVXJsID8gbmV3IFVSTCh1cmwsIGJhc2VVcmwpIDogbmV3IFVSTCh1cmwpLAogICAgICAgIHByb3RvY29sID0gX3JlZjgucHJvdG9jb2w7CgogICAgcmV0dXJuIHByb3RvY29sID09PSAiaHR0cDoiIHx8IHByb3RvY29sID09PSAiaHR0cHM6IjsKICB9IGNhdGNoIChleCkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KfQoKZnVuY3Rpb24gbG9hZFNjcmlwdChzcmMpIHsKICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOwogICAgc2NyaXB0LnNyYyA9IHNyYzsKICAgIHNjcmlwdC5vbmxvYWQgPSByZXNvbHZlOwoKICAgIHNjcmlwdC5vbmVycm9yID0gZnVuY3Rpb24gKCkgewogICAgICByZWplY3QobmV3IEVycm9yKCJDYW5ub3QgbG9hZCBzY3JpcHQgYXQ6ICIuY29uY2F0KHNjcmlwdC5zcmMpKSk7CiAgICB9OwoKICAgIChkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuYXBwZW5kQ2hpbGQoc2NyaXB0KTsKICB9KTsKfQoKZnVuY3Rpb24gZGVwcmVjYXRlZChkZXRhaWxzKSB7CiAgY29uc29sZS5sb2coIkRlcHJlY2F0ZWQgQVBJIHVzYWdlOiAiICsgZGV0YWlscyk7Cn0KCnZhciBwZGZEYXRlU3RyaW5nUmVnZXg7Cgp2YXIgUERGRGF0ZVN0cmluZyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gUERGRGF0ZVN0cmluZygpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQREZEYXRlU3RyaW5nKTsKICB9CgogIF9jcmVhdGVDbGFzcyhQREZEYXRlU3RyaW5nLCBudWxsLCBbewogICAga2V5OiAidG9EYXRlT2JqZWN0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiB0b0RhdGVPYmplY3QoaW5wdXQpIHsKICAgICAgaWYgKCFpbnB1dCB8fCAhKDAsIF91dGlsLmlzU3RyaW5nKShpbnB1dCkpIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQoKICAgICAgaWYgKCFwZGZEYXRlU3RyaW5nUmVnZXgpIHsKICAgICAgICBwZGZEYXRlU3RyaW5nUmVnZXggPSBuZXcgUmVnRXhwKCJeRDoiICsgIihcXGR7NH0pIiArICIoXFxkezJ9KT8iICsgIihcXGR7Mn0pPyIgKyAiKFxcZHsyfSk/IiArICIoXFxkezJ9KT8iICsgIihcXGR7Mn0pPyIgKyAiKFtafCt8LV0pPyIgKyAiKFxcZHsyfSk/IiArICInPyIgKyAiKFxcZHsyfSk/IiArICInPyIpOwogICAgICB9CgogICAgICB2YXIgbWF0Y2hlcyA9IHBkZkRhdGVTdHJpbmdSZWdleC5leGVjKGlucHV0KTsKCiAgICAgIGlmICghbWF0Y2hlcykgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CgogICAgICB2YXIgeWVhciA9IHBhcnNlSW50KG1hdGNoZXNbMV0sIDEwKTsKICAgICAgdmFyIG1vbnRoID0gcGFyc2VJbnQobWF0Y2hlc1syXSwgMTApOwogICAgICBtb250aCA9IG1vbnRoID49IDEgJiYgbW9udGggPD0gMTIgPyBtb250aCAtIDEgOiAwOwogICAgICB2YXIgZGF5ID0gcGFyc2VJbnQobWF0Y2hlc1szXSwgMTApOwogICAgICBkYXkgPSBkYXkgPj0gMSAmJiBkYXkgPD0gMzEgPyBkYXkgOiAxOwogICAgICB2YXIgaG91ciA9IHBhcnNlSW50KG1hdGNoZXNbNF0sIDEwKTsKICAgICAgaG91ciA9IGhvdXIgPj0gMCAmJiBob3VyIDw9IDIzID8gaG91ciA6IDA7CiAgICAgIHZhciBtaW51dGUgPSBwYXJzZUludChtYXRjaGVzWzVdLCAxMCk7CiAgICAgIG1pbnV0ZSA9IG1pbnV0ZSA+PSAwICYmIG1pbnV0ZSA8PSA1OSA/IG1pbnV0ZSA6IDA7CiAgICAgIHZhciBzZWNvbmQgPSBwYXJzZUludChtYXRjaGVzWzZdLCAxMCk7CiAgICAgIHNlY29uZCA9IHNlY29uZCA+PSAwICYmIHNlY29uZCA8PSA1OSA/IHNlY29uZCA6IDA7CiAgICAgIHZhciB1bml2ZXJzYWxUaW1lUmVsYXRpb24gPSBtYXRjaGVzWzddIHx8ICJaIjsKICAgICAgdmFyIG9mZnNldEhvdXIgPSBwYXJzZUludChtYXRjaGVzWzhdLCAxMCk7CiAgICAgIG9mZnNldEhvdXIgPSBvZmZzZXRIb3VyID49IDAgJiYgb2Zmc2V0SG91ciA8PSAyMyA/IG9mZnNldEhvdXIgOiAwOwogICAgICB2YXIgb2Zmc2V0TWludXRlID0gcGFyc2VJbnQobWF0Y2hlc1s5XSwgMTApIHx8IDA7CiAgICAgIG9mZnNldE1pbnV0ZSA9IG9mZnNldE1pbnV0ZSA+PSAwICYmIG9mZnNldE1pbnV0ZSA8PSA1OSA/IG9mZnNldE1pbnV0ZSA6IDA7CgogICAgICBpZiAodW5pdmVyc2FsVGltZVJlbGF0aW9uID09PSAiLSIpIHsKICAgICAgICBob3VyICs9IG9mZnNldEhvdXI7CiAgICAgICAgbWludXRlICs9IG9mZnNldE1pbnV0ZTsKICAgICAgfSBlbHNlIGlmICh1bml2ZXJzYWxUaW1lUmVsYXRpb24gPT09ICIrIikgewogICAgICAgIGhvdXIgLT0gb2Zmc2V0SG91cjsKICAgICAgICBtaW51dGUgLT0gb2Zmc2V0TWludXRlOwogICAgICB9CgogICAgICByZXR1cm4gbmV3IERhdGUoRGF0ZS5VVEMoeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQpKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBQREZEYXRlU3RyaW5nOwp9KCk7CgpleHBvcnRzLlBERkRhdGVTdHJpbmcgPSBQREZEYXRlU3RyaW5nOwoKLyoqKi8gfSksCi8qIDIgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKCm1vZHVsZS5leHBvcnRzID0gX193X3BkZmpzX3JlcXVpcmVfXygzKTsKCi8qKiovIH0pLAovKiAzICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKLyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKG1vZHVsZSkgewoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9Cgp2YXIgcnVudGltZSA9IGZ1bmN0aW9uIChleHBvcnRzKSB7CiAgInVzZSBzdHJpY3QiOwoKICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlOwogIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTsKICB2YXIgdW5kZWZpbmVkOwogIHZhciAkU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiA/IFN5bWJvbCA6IHt9OwogIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgIkBAaXRlcmF0b3IiOwogIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8ICJAQGFzeW5jSXRlcmF0b3IiOwogIHZhciB0b1N0cmluZ1RhZ1N5bWJvbCA9ICRTeW1ib2wudG9TdHJpbmdUYWcgfHwgIkBAdG9TdHJpbmdUYWciOwoKICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7CiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjsKICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7CiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTsKICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTsKICAgIHJldHVybiBnZW5lcmF0b3I7CiAgfQoKICBleHBvcnRzLndyYXAgPSB3cmFwOwoKICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHsKICAgIHRyeSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgdHlwZTogIm5vcm1hbCIsCiAgICAgICAgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKQogICAgICB9OwogICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgdHlwZTogInRocm93IiwKICAgICAgICBhcmc6IGVycgogICAgICB9OwogICAgfQogIH0KCiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSAic3VzcGVuZGVkU3RhcnQiOwogIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gInN1c3BlbmRlZFlpZWxkIjsKICB2YXIgR2VuU3RhdGVFeGVjdXRpbmcgPSAiZXhlY3V0aW5nIjsKICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSAiY29tcGxldGVkIjsKICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9OwoKICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fQoKICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9CgogIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge30KCiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307CgogIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzOwogIH07CgogIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjsKICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7CgogIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJiBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiYgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkgewogICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTsKICB9CgogIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9IEdlbmVyYXRvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlKTsKICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlOwogIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb247CiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGVbdG9TdHJpbmdUYWdTeW1ib2xdID0gR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSAiR2VuZXJhdG9yRnVuY3Rpb24iOwoKICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7CiAgICBbIm5leHQiLCAidGhyb3ciLCAicmV0dXJuIl0uZm9yRWFjaChmdW5jdGlvbiAobWV0aG9kKSB7CiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24gKGFyZykgewogICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpOwogICAgICB9OwogICAgfSk7CiAgfQoKICBleHBvcnRzLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiAoZ2VuRnVuKSB7CiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09ICJmdW5jdGlvbiIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yOwogICAgcmV0dXJuIGN0b3IgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fCAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSAiR2VuZXJhdG9yRnVuY3Rpb24iIDogZmFsc2U7CiAgfTsKCiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24gKGdlbkZ1bikgewogICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikgewogICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7CiAgICB9IGVsc2UgewogICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7CgogICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7CiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9ICJHZW5lcmF0b3JGdW5jdGlvbiI7CiAgICAgIH0KICAgIH0KCiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7CiAgICByZXR1cm4gZ2VuRnVuOwogIH07CgogIGV4cG9ydHMuYXdyYXAgPSBmdW5jdGlvbiAoYXJnKSB7CiAgICByZXR1cm4gewogICAgICBfX2F3YWl0OiBhcmcKICAgIH07CiAgfTsKCiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7CiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkgewogICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTsKCiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gInRocm93IikgewogICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZzsKICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7CgogICAgICAgIGlmICh2YWx1ZSAmJiBfdHlwZW9mKHZhbHVlKSA9PT0gIm9iamVjdCIgJiYgaGFzT3duLmNhbGwodmFsdWUsICJfX2F3YWl0IikpIHsKICAgICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICAgIGludm9rZSgibmV4dCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpOwogICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgICBpbnZva2UoInRocm93IiwgZXJyLCByZXNvbHZlLCByZWplY3QpOwogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZSkudGhlbihmdW5jdGlvbiAodW53cmFwcGVkKSB7CiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7CiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7CiAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7CiAgICAgICAgICByZXR1cm4gaW52b2tlKCJ0aHJvdyIsIGVycm9yLCByZXNvbHZlLCByZWplY3QpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9CgogICAgdmFyIHByZXZpb3VzUHJvbWlzZTsKCiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7CiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkgewogICAgICAgIHJldHVybiBuZXcgUHJvbWlzZUltcGwoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpOwogICAgICAgIH0pOwogICAgICB9CgogICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID0gcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7CiAgICB9CgogICAgdGhpcy5faW52b2tlID0gZW5xdWV1ZTsKICB9CgogIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhBc3luY0l0ZXJhdG9yLnByb3RvdHlwZSk7CgogIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHRoaXM7CiAgfTsKCiAgZXhwb3J0cy5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjsKCiAgZXhwb3J0cy5hc3luYyA9IGZ1bmN0aW9uIChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHsKICAgIGlmIChQcm9taXNlSW1wbCA9PT0gdm9pZCAwKSBQcm9taXNlSW1wbCA9IFByb21pc2U7CiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLCBQcm9taXNlSW1wbCk7CiAgICByZXR1cm4gZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pID8gaXRlciA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTsKICAgIH0pOwogIH07CgogIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkgewogICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDsKICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHsKICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUV4ZWN1dGluZykgewogICAgICAgIHRocm93IG5ldyBFcnJvcigiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZyIpOwogICAgICB9CgogICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7CiAgICAgICAgaWYgKG1ldGhvZCA9PT0gInRocm93IikgewogICAgICAgICAgdGhyb3cgYXJnOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTsKICAgICAgfQoKICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7CiAgICAgIGNvbnRleHQuYXJnID0gYXJnOwoKICAgICAgd2hpbGUgKHRydWUpIHsKICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlOwoKICAgICAgICBpZiAoZGVsZWdhdGUpIHsKICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpOwoKICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkgewogICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlOwogICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09ICJuZXh0IikgewogICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnOwogICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09ICJ0aHJvdyIpIHsKICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkgewogICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkOwogICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZzsKICAgICAgICAgIH0KCiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTsKICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSAicmV0dXJuIikgewogICAgICAgICAgY29udGV4dC5hYnJ1cHQoInJldHVybiIsIGNvbnRleHQuYXJnKTsKICAgICAgICB9CgogICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7CiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpOwoKICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09ICJub3JtYWwiKSB7CiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZSA/IEdlblN0YXRlQ29tcGxldGVkIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDsKCiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZywKICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lCiAgICAgICAgICB9OwogICAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09ICJ0aHJvdyIpIHsKICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7CiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9ICJ0aHJvdyI7CiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7CiAgICAgICAgfQogICAgICB9CiAgICB9OwogIH0KCiAgZnVuY3Rpb24gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCkgewogICAgdmFyIG1ldGhvZCA9IGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXTsKCiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHsKICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7CgogICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09ICJ0aHJvdyIpIHsKICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3JbInJldHVybiJdKSB7CiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9ICJyZXR1cm4iOwogICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7CiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTsKCiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09ICJ0aHJvdyIpIHsKICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBjb250ZXh0Lm1ldGhvZCA9ICJ0aHJvdyI7CiAgICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kIik7CiAgICAgIH0KCiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsOwogICAgfQoKICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7CgogICAgaWYgKHJlY29yZC50eXBlID09PSAidGhyb3ciKSB7CiAgICAgIGNvbnRleHQubWV0aG9kID0gInRocm93IjsKICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnOwogICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDsKICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7CiAgICB9CgogICAgdmFyIGluZm8gPSByZWNvcmQuYXJnOwoKICAgIGlmICghaW5mbykgewogICAgICBjb250ZXh0Lm1ldGhvZCA9ICJ0aHJvdyI7CiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcigiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3QiKTsKICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7CiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsOwogICAgfQoKICAgIGlmIChpbmZvLmRvbmUpIHsKICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7CiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7CgogICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09ICJyZXR1cm4iKSB7CiAgICAgICAgY29udGV4dC5tZXRob2QgPSAibmV4dCI7CiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIHJldHVybiBpbmZvOwogICAgfQoKICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsOwogICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7CiAgfQoKICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApOwogIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9ICJHZW5lcmF0b3IiOwoKICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7CiAgICByZXR1cm4gdGhpczsKICB9OwoKICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiAiW29iamVjdCBHZW5lcmF0b3JdIjsKICB9OwoKICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykgewogICAgdmFyIGVudHJ5ID0gewogICAgICB0cnlMb2M6IGxvY3NbMF0KICAgIH07CgogICAgaWYgKDEgaW4gbG9jcykgewogICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07CiAgICB9CgogICAgaWYgKDIgaW4gbG9jcykgewogICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTsKICAgICAgZW50cnkuYWZ0ZXJMb2MgPSBsb2NzWzNdOwogICAgfQoKICAgIHRoaXMudHJ5RW50cmllcy5wdXNoKGVudHJ5KTsKICB9CgogIGZ1bmN0aW9uIHJlc2V0VHJ5RW50cnkoZW50cnkpIHsKICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9OwogICAgcmVjb3JkLnR5cGUgPSAibm9ybWFsIjsKICAgIGRlbGV0ZSByZWNvcmQuYXJnOwogICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDsKICB9CgogIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHsKICAgIHRoaXMudHJ5RW50cmllcyA9IFt7CiAgICAgIHRyeUxvYzogInJvb3QiCiAgICB9XTsKICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTsKICAgIHRoaXMucmVzZXQodHJ1ZSk7CiAgfQoKICBleHBvcnRzLmtleXMgPSBmdW5jdGlvbiAob2JqZWN0KSB7CiAgICB2YXIga2V5cyA9IFtdOwoKICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHsKICAgICAga2V5cy5wdXNoKGtleSk7CiAgICB9CgogICAga2V5cy5yZXZlcnNlKCk7CiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHsKICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7CiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7CgogICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7CiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5OwogICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7CiAgICAgICAgICByZXR1cm4gbmV4dDsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIG5leHQuZG9uZSA9IHRydWU7CiAgICAgIHJldHVybiBuZXh0OwogICAgfTsKICB9OwoKICBmdW5jdGlvbiB2YWx1ZXMoaXRlcmFibGUpIHsKICAgIGlmIChpdGVyYWJsZSkgewogICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07CgogICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHsKICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7CiAgICAgIH0KCiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gImZ1bmN0aW9uIikgewogICAgICAgIHJldHVybiBpdGVyYWJsZTsKICAgICAgfQoKICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7CiAgICAgICAgdmFyIGkgPSAtMSwKICAgICAgICAgICAgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7CiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7CiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHsKICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07CiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7CiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkOwogICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTsKICAgICAgICAgIHJldHVybiBuZXh0OwogICAgICAgIH07CgogICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0OwogICAgICB9CiAgICB9CgogICAgcmV0dXJuIHsKICAgICAgbmV4dDogZG9uZVJlc3VsdAogICAgfTsKICB9CgogIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzOwoKICBmdW5jdGlvbiBkb25lUmVzdWx0KCkgewogICAgcmV0dXJuIHsKICAgICAgdmFsdWU6IHVuZGVmaW5lZCwKICAgICAgZG9uZTogdHJ1ZQogICAgfTsKICB9CgogIENvbnRleHQucHJvdG90eXBlID0gewogICAgY29uc3RydWN0b3I6IENvbnRleHQsCiAgICByZXNldDogZnVuY3Rpb24gcmVzZXQoc2tpcFRlbXBSZXNldCkgewogICAgICB0aGlzLnByZXYgPSAwOwogICAgICB0aGlzLm5leHQgPSAwOwogICAgICB0aGlzLnNlbnQgPSB0aGlzLl9zZW50ID0gdW5kZWZpbmVkOwogICAgICB0aGlzLmRvbmUgPSBmYWxzZTsKICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7CiAgICAgIHRoaXMubWV0aG9kID0gIm5leHQiOwogICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDsKICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7CgogICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHsKICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHsKICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gInQiICYmIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHsKICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBzdG9wOiBmdW5jdGlvbiBzdG9wKCkgewogICAgICB0aGlzLmRvbmUgPSB0cnVlOwogICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdOwogICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uOwoKICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gInRocm93IikgewogICAgICAgIHRocm93IHJvb3RSZWNvcmQuYXJnOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy5ydmFsOwogICAgfSwKICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbiBkaXNwYXRjaEV4Y2VwdGlvbihleGNlcHRpb24pIHsKICAgICAgaWYgKHRoaXMuZG9uZSkgewogICAgICAgIHRocm93IGV4Y2VwdGlvbjsKICAgICAgfQoKICAgICAgdmFyIGNvbnRleHQgPSB0aGlzOwoKICAgICAgZnVuY3Rpb24gaGFuZGxlKGxvYywgY2F1Z2h0KSB7CiAgICAgICAgcmVjb3JkLnR5cGUgPSAidGhyb3ciOwogICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247CiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jOwoKICAgICAgICBpZiAoY2F1Z2h0KSB7CiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9ICJuZXh0IjsKICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuICEhY2F1Z2h0OwogICAgICB9CgogICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7CiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldOwogICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uOwoKICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSAicm9vdCIpIHsKICAgICAgICAgIHJldHVybiBoYW5kbGUoImVuZCIpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHsKICAgICAgICAgIHZhciBoYXNDYXRjaCA9IGhhc093bi5jYWxsKGVudHJ5LCAiY2F0Y2hMb2MiKTsKICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksICJmaW5hbGx5TG9jIik7CgogICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHsKICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykgewogICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHsKICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7CiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSBpZiAoaGFzRmluYWxseSkgewogICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykgewogICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHkiKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBhYnJ1cHQ6IGZ1bmN0aW9uIGFicnVwdCh0eXBlLCBhcmcpIHsKICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgewogICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTsKCiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiYgaGFzT3duLmNhbGwoZW50cnksICJmaW5hbGx5TG9jIikgJiYgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykgewogICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5OwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAoZmluYWxseUVudHJ5ICYmICh0eXBlID09PSAiYnJlYWsiIHx8IHR5cGUgPT09ICJjb250aW51ZSIpICYmIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykgewogICAgICAgIGZpbmFsbHlFbnRyeSA9IG51bGw7CiAgICAgIH0KCiAgICAgIHZhciByZWNvcmQgPSBmaW5hbGx5RW50cnkgPyBmaW5hbGx5RW50cnkuY29tcGxldGlvbiA6IHt9OwogICAgICByZWNvcmQudHlwZSA9IHR5cGU7CiAgICAgIHJlY29yZC5hcmcgPSBhcmc7CgogICAgICBpZiAoZmluYWxseUVudHJ5KSB7CiAgICAgICAgdGhpcy5tZXRob2QgPSAibmV4dCI7CiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7CiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7CiAgICB9LAogICAgY29tcGxldGU6IGZ1bmN0aW9uIGNvbXBsZXRlKHJlY29yZCwgYWZ0ZXJMb2MpIHsKICAgICAgaWYgKHJlY29yZC50eXBlID09PSAidGhyb3ciKSB7CiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZzsKICAgICAgfQoKICAgICAgaWYgKHJlY29yZC50eXBlID09PSAiYnJlYWsiIHx8IHJlY29yZC50eXBlID09PSAiY29udGludWUiKSB7CiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZzsKICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gInJldHVybiIpIHsKICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7CiAgICAgICAgdGhpcy5tZXRob2QgPSAicmV0dXJuIjsKICAgICAgICB0aGlzLm5leHQgPSAiZW5kIjsKICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gIm5vcm1hbCIgJiYgYWZ0ZXJMb2MpIHsKICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYzsKICAgICAgfQoKICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7CiAgICB9LAogICAgZmluaXNoOiBmdW5jdGlvbiBmaW5pc2goZmluYWxseUxvYykgewogICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7CiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldOwoKICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykgewogICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7CiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTsKICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgICJjYXRjaCI6IGZ1bmN0aW9uIF9jYXRjaCh0cnlMb2MpIHsKICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkgewogICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTsKCiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7CiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjsKCiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09ICJ0aHJvdyIpIHsKICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7CiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiB0aHJvd247CiAgICAgICAgfQogICAgICB9CgogICAgICB0aHJvdyBuZXcgRXJyb3IoImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdCIpOwogICAgfSwKICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uIGRlbGVnYXRlWWllbGQoaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHsKICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHsKICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSwKICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLAogICAgICAgIG5leHRMb2M6IG5leHRMb2MKICAgICAgfTsKCiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gIm5leHQiKSB7CiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7CiAgICAgIH0KCiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsOwogICAgfQogIH07CiAgcmV0dXJuIGV4cG9ydHM7Cn0oKCBmYWxzZSA/IHVuZGVmaW5lZCA6IF90eXBlb2YobW9kdWxlKSkgPT09ICJvYmplY3QiID8gbW9kdWxlLmV4cG9ydHMgOiB7fSk7Cgp0cnkgewogIHJlZ2VuZXJhdG9yUnVudGltZSA9IHJ1bnRpbWU7Cn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7CiAgRnVuY3Rpb24oInIiLCAicmVnZW5lcmF0b3JSdW50aW1lID0gciIpKHJ1bnRpbWUpOwp9Ci8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbCh0aGlzLCBfX3dfcGRmanNfcmVxdWlyZV9fKDQpKG1vZHVsZSkpKQoKLyoqKi8gfSksCi8qIDQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1vZHVsZSkgewogIGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkgewogICAgbW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uICgpIHt9OwoKICAgIG1vZHVsZS5wYXRocyA9IFtdOwogICAgaWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgImxvYWRlZCIsIHsKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIG1vZHVsZS5sOwogICAgICB9CiAgICB9KTsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsICJpZCIsIHsKICAgICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIG1vZHVsZS5pOwogICAgICB9CiAgICB9KTsKICAgIG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxOwogIH0KCiAgcmV0dXJuIG1vZHVsZTsKfTsKCi8qKiovIH0pLAovKiA1ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuYXJyYXlCeXRlTGVuZ3RoID0gYXJyYXlCeXRlTGVuZ3RoOwpleHBvcnRzLmFycmF5c1RvQnl0ZXMgPSBhcnJheXNUb0J5dGVzOwpleHBvcnRzLmFzc2VydCA9IGFzc2VydDsKZXhwb3J0cy5ieXRlc1RvU3RyaW5nID0gYnl0ZXNUb1N0cmluZzsKZXhwb3J0cy5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSA9IGNyZWF0ZVByb21pc2VDYXBhYmlsaXR5OwpleHBvcnRzLmdldFZlcmJvc2l0eUxldmVsID0gZ2V0VmVyYm9zaXR5TGV2ZWw7CmV4cG9ydHMuaW5mbyA9IGluZm87CmV4cG9ydHMuaXNBcnJheUJ1ZmZlciA9IGlzQXJyYXlCdWZmZXI7CmV4cG9ydHMuaXNBcnJheUVxdWFsID0gaXNBcnJheUVxdWFsOwpleHBvcnRzLmlzQm9vbCA9IGlzQm9vbDsKZXhwb3J0cy5pc0VtcHR5T2JqID0gaXNFbXB0eU9iajsKZXhwb3J0cy5pc051bSA9IGlzTnVtOwpleHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7CmV4cG9ydHMuaXNTYW1lT3JpZ2luID0gaXNTYW1lT3JpZ2luOwpleHBvcnRzLmNyZWF0ZVZhbGlkQWJzb2x1dGVVcmwgPSBjcmVhdGVWYWxpZEFic29sdXRlVXJsOwpleHBvcnRzLnJlbW92ZU51bGxDaGFyYWN0ZXJzID0gcmVtb3ZlTnVsbENoYXJhY3RlcnM7CmV4cG9ydHMuc2V0VmVyYm9zaXR5TGV2ZWwgPSBzZXRWZXJib3NpdHlMZXZlbDsKZXhwb3J0cy5zaGFkb3cgPSBzaGFkb3c7CmV4cG9ydHMuc3RyaW5nMzIgPSBzdHJpbmczMjsKZXhwb3J0cy5zdHJpbmdUb0J5dGVzID0gc3RyaW5nVG9CeXRlczsKZXhwb3J0cy5zdHJpbmdUb1BERlN0cmluZyA9IHN0cmluZ1RvUERGU3RyaW5nOwpleHBvcnRzLnN0cmluZ1RvVVRGOFN0cmluZyA9IHN0cmluZ1RvVVRGOFN0cmluZzsKZXhwb3J0cy51dGY4U3RyaW5nVG9TdHJpbmcgPSB1dGY4U3RyaW5nVG9TdHJpbmc7CmV4cG9ydHMud2FybiA9IHdhcm47CmV4cG9ydHMudW5yZWFjaGFibGUgPSB1bnJlYWNoYWJsZTsKZXhwb3J0cy5Jc0V2YWxTdXBwb3J0ZWRDYWNoZWQgPSBleHBvcnRzLklzTGl0dGxlRW5kaWFuQ2FjaGVkID0gZXhwb3J0cy5jcmVhdGVPYmplY3RVUkwgPSBleHBvcnRzLkZvcm1hdEVycm9yID0gZXhwb3J0cy5VdGlsID0gZXhwb3J0cy5Vbmtub3duRXJyb3JFeGNlcHRpb24gPSBleHBvcnRzLlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbiA9IGV4cG9ydHMuVGV4dFJlbmRlcmluZ01vZGUgPSBleHBvcnRzLlN0cmVhbVR5cGUgPSBleHBvcnRzLlBlcm1pc3Npb25GbGFnID0gZXhwb3J0cy5QYXNzd29yZFJlc3BvbnNlcyA9IGV4cG9ydHMuUGFzc3dvcmRFeGNlcHRpb24gPSBleHBvcnRzLk1pc3NpbmdQREZFeGNlcHRpb24gPSBleHBvcnRzLkludmFsaWRQREZFeGNlcHRpb24gPSBleHBvcnRzLkFib3J0RXhjZXB0aW9uID0gZXhwb3J0cy5DTWFwQ29tcHJlc3Npb25UeXBlID0gZXhwb3J0cy5JbWFnZUtpbmQgPSBleHBvcnRzLkZvbnRUeXBlID0gZXhwb3J0cy5Bbm5vdGF0aW9uVHlwZSA9IGV4cG9ydHMuQW5ub3RhdGlvblN0YXRlTW9kZWxUeXBlID0gZXhwb3J0cy5Bbm5vdGF0aW9uUmV2aWV3U3RhdGUgPSBleHBvcnRzLkFubm90YXRpb25SZXBseVR5cGUgPSBleHBvcnRzLkFubm90YXRpb25NYXJrZWRTdGF0ZSA9IGV4cG9ydHMuQW5ub3RhdGlvbkZsYWcgPSBleHBvcnRzLkFubm90YXRpb25GaWVsZEZsYWcgPSBleHBvcnRzLkFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGUgPSBleHBvcnRzLlVOU1VQUE9SVEVEX0ZFQVRVUkVTID0gZXhwb3J0cy5WZXJib3NpdHlMZXZlbCA9IGV4cG9ydHMuT1BTID0gZXhwb3J0cy5JREVOVElUWV9NQVRSSVggPSBleHBvcnRzLkZPTlRfSURFTlRJVFlfTUFUUklYID0gZXhwb3J0cy5CYXNlRXhjZXB0aW9uID0gdm9pZCAwOwoKX193X3BkZmpzX3JlcXVpcmVfXyg2KTsKCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCnZhciBJREVOVElUWV9NQVRSSVggPSBbMSwgMCwgMCwgMSwgMCwgMF07CmV4cG9ydHMuSURFTlRJVFlfTUFUUklYID0gSURFTlRJVFlfTUFUUklYOwp2YXIgRk9OVF9JREVOVElUWV9NQVRSSVggPSBbMC4wMDEsIDAsIDAsIDAuMDAxLCAwLCAwXTsKZXhwb3J0cy5GT05UX0lERU5USVRZX01BVFJJWCA9IEZPTlRfSURFTlRJVFlfTUFUUklYOwp2YXIgUGVybWlzc2lvbkZsYWcgPSB7CiAgUFJJTlQ6IDB4MDQsCiAgTU9ESUZZX0NPTlRFTlRTOiAweDA4LAogIENPUFk6IDB4MTAsCiAgTU9ESUZZX0FOTk9UQVRJT05TOiAweDIwLAogIEZJTExfSU5URVJBQ1RJVkVfRk9STVM6IDB4MTAwLAogIENPUFlfRk9SX0FDQ0VTU0lCSUxJVFk6IDB4MjAwLAogIEFTU0VNQkxFOiAweDQwMCwKICBQUklOVF9ISUdIX1FVQUxJVFk6IDB4ODAwCn07CmV4cG9ydHMuUGVybWlzc2lvbkZsYWcgPSBQZXJtaXNzaW9uRmxhZzsKdmFyIFRleHRSZW5kZXJpbmdNb2RlID0gewogIEZJTEw6IDAsCiAgU1RST0tFOiAxLAogIEZJTExfU1RST0tFOiAyLAogIElOVklTSUJMRTogMywKICBGSUxMX0FERF9UT19QQVRIOiA0LAogIFNUUk9LRV9BRERfVE9fUEFUSDogNSwKICBGSUxMX1NUUk9LRV9BRERfVE9fUEFUSDogNiwKICBBRERfVE9fUEFUSDogNywKICBGSUxMX1NUUk9LRV9NQVNLOiAzLAogIEFERF9UT19QQVRIX0ZMQUc6IDQKfTsKZXhwb3J0cy5UZXh0UmVuZGVyaW5nTW9kZSA9IFRleHRSZW5kZXJpbmdNb2RlOwp2YXIgSW1hZ2VLaW5kID0gewogIEdSQVlTQ0FMRV8xQlBQOiAxLAogIFJHQl8yNEJQUDogMiwKICBSR0JBXzMyQlBQOiAzCn07CmV4cG9ydHMuSW1hZ2VLaW5kID0gSW1hZ2VLaW5kOwp2YXIgQW5ub3RhdGlvblR5cGUgPSB7CiAgVEVYVDogMSwKICBMSU5LOiAyLAogIEZSRUVURVhUOiAzLAogIExJTkU6IDQsCiAgU1FVQVJFOiA1LAogIENJUkNMRTogNiwKICBQT0xZR09OOiA3LAogIFBPTFlMSU5FOiA4LAogIEhJR0hMSUdIVDogOSwKICBVTkRFUkxJTkU6IDEwLAogIFNRVUlHR0xZOiAxMSwKICBTVFJJS0VPVVQ6IDEyLAogIFNUQU1QOiAxMywKICBDQVJFVDogMTQsCiAgSU5LOiAxNSwKICBQT1BVUDogMTYsCiAgRklMRUFUVEFDSE1FTlQ6IDE3LAogIFNPVU5EOiAxOCwKICBNT1ZJRTogMTksCiAgV0lER0VUOiAyMCwKICBTQ1JFRU46IDIxLAogIFBSSU5URVJNQVJLOiAyMiwKICBUUkFQTkVUOiAyMywKICBXQVRFUk1BUks6IDI0LAogIFRIUkVFRDogMjUsCiAgUkVEQUNUOiAyNgp9OwpleHBvcnRzLkFubm90YXRpb25UeXBlID0gQW5ub3RhdGlvblR5cGU7CnZhciBBbm5vdGF0aW9uU3RhdGVNb2RlbFR5cGUgPSB7CiAgTUFSS0VEOiAiTWFya2VkIiwKICBSRVZJRVc6ICJSZXZpZXciCn07CmV4cG9ydHMuQW5ub3RhdGlvblN0YXRlTW9kZWxUeXBlID0gQW5ub3RhdGlvblN0YXRlTW9kZWxUeXBlOwp2YXIgQW5ub3RhdGlvbk1hcmtlZFN0YXRlID0gewogIE1BUktFRDogIk1hcmtlZCIsCiAgVU5NQVJLRUQ6ICJVbm1hcmtlZCIKfTsKZXhwb3J0cy5Bbm5vdGF0aW9uTWFya2VkU3RhdGUgPSBBbm5vdGF0aW9uTWFya2VkU3RhdGU7CnZhciBBbm5vdGF0aW9uUmV2aWV3U3RhdGUgPSB7CiAgQUNDRVBURUQ6ICJBY2NlcHRlZCIsCiAgUkVKRUNURUQ6ICJSZWplY3RlZCIsCiAgQ0FOQ0VMTEVEOiAiQ2FuY2VsbGVkIiwKICBDT01QTEVURUQ6ICJDb21wbGV0ZWQiLAogIE5PTkU6ICJOb25lIgp9OwpleHBvcnRzLkFubm90YXRpb25SZXZpZXdTdGF0ZSA9IEFubm90YXRpb25SZXZpZXdTdGF0ZTsKdmFyIEFubm90YXRpb25SZXBseVR5cGUgPSB7CiAgR1JPVVA6ICJHcm91cCIsCiAgUkVQTFk6ICJSIgp9OwpleHBvcnRzLkFubm90YXRpb25SZXBseVR5cGUgPSBBbm5vdGF0aW9uUmVwbHlUeXBlOwp2YXIgQW5ub3RhdGlvbkZsYWcgPSB7CiAgSU5WSVNJQkxFOiAweDAxLAogIEhJRERFTjogMHgwMiwKICBQUklOVDogMHgwNCwKICBOT1pPT006IDB4MDgsCiAgTk9ST1RBVEU6IDB4MTAsCiAgTk9WSUVXOiAweDIwLAogIFJFQURPTkxZOiAweDQwLAogIExPQ0tFRDogMHg4MCwKICBUT0dHTEVOT1ZJRVc6IDB4MTAwLAogIExPQ0tFRENPTlRFTlRTOiAweDIwMAp9OwpleHBvcnRzLkFubm90YXRpb25GbGFnID0gQW5ub3RhdGlvbkZsYWc7CnZhciBBbm5vdGF0aW9uRmllbGRGbGFnID0gewogIFJFQURPTkxZOiAweDAwMDAwMDEsCiAgUkVRVUlSRUQ6IDB4MDAwMDAwMiwKICBOT0VYUE9SVDogMHgwMDAwMDA0LAogIE1VTFRJTElORTogMHgwMDAxMDAwLAogIFBBU1NXT1JEOiAweDAwMDIwMDAsCiAgTk9UT0dHTEVUT09GRjogMHgwMDA0MDAwLAogIFJBRElPOiAweDAwMDgwMDAsCiAgUFVTSEJVVFRPTjogMHgwMDEwMDAwLAogIENPTUJPOiAweDAwMjAwMDAsCiAgRURJVDogMHgwMDQwMDAwLAogIFNPUlQ6IDB4MDA4MDAwMCwKICBGSUxFU0VMRUNUOiAweDAxMDAwMDAsCiAgTVVMVElTRUxFQ1Q6IDB4MDIwMDAwMCwKICBET05PVFNQRUxMQ0hFQ0s6IDB4MDQwMDAwMCwKICBET05PVFNDUk9MTDogMHgwODAwMDAwLAogIENPTUI6IDB4MTAwMDAwMCwKICBSSUNIVEVYVDogMHgyMDAwMDAwLAogIFJBRElPU0lOVU5JU09OOiAweDIwMDAwMDAsCiAgQ09NTUlUT05TRUxDSEFOR0U6IDB4NDAwMDAwMAp9OwpleHBvcnRzLkFubm90YXRpb25GaWVsZEZsYWcgPSBBbm5vdGF0aW9uRmllbGRGbGFnOwp2YXIgQW5ub3RhdGlvbkJvcmRlclN0eWxlVHlwZSA9IHsKICBTT0xJRDogMSwKICBEQVNIRUQ6IDIsCiAgQkVWRUxFRDogMywKICBJTlNFVDogNCwKICBVTkRFUkxJTkU6IDUKfTsKZXhwb3J0cy5Bbm5vdGF0aW9uQm9yZGVyU3R5bGVUeXBlID0gQW5ub3RhdGlvbkJvcmRlclN0eWxlVHlwZTsKdmFyIFN0cmVhbVR5cGUgPSB7CiAgVU5LTk9XTjogIlVOS05PV04iLAogIEZMQVRFOiAiRkxBVEUiLAogIExaVzogIkxaVyIsCiAgRENUOiAiRENUIiwKICBKUFg6ICJKUFgiLAogIEpCSUc6ICJKQklHIiwKICBBODU6ICJBODUiLAogIEFIWDogIkFIWCIsCiAgQ0NGOiAiQ0NGIiwKICBSTFg6ICJSTFgiCn07CmV4cG9ydHMuU3RyZWFtVHlwZSA9IFN0cmVhbVR5cGU7CnZhciBGb250VHlwZSA9IHsKICBVTktOT1dOOiAiVU5LTk9XTiIsCiAgVFlQRTE6ICJUWVBFMSIsCiAgVFlQRTFDOiAiVFlQRTFDIiwKICBDSURGT05UVFlQRTA6ICJDSURGT05UVFlQRTAiLAogIENJREZPTlRUWVBFMEM6ICJDSURGT05UVFlQRTBDIiwKICBUUlVFVFlQRTogIlRSVUVUWVBFIiwKICBDSURGT05UVFlQRTI6ICJDSURGT05UVFlQRTIiLAogIFRZUEUzOiAiVFlQRTMiLAogIE9QRU5UWVBFOiAiT1BFTlRZUEUiLAogIFRZUEUwOiAiVFlQRTAiLAogIE1NVFlQRTE6ICJNTVRZUEUxIgp9OwpleHBvcnRzLkZvbnRUeXBlID0gRm9udFR5cGU7CnZhciBWZXJib3NpdHlMZXZlbCA9IHsKICBFUlJPUlM6IDAsCiAgV0FSTklOR1M6IDEsCiAgSU5GT1M6IDUKfTsKZXhwb3J0cy5WZXJib3NpdHlMZXZlbCA9IFZlcmJvc2l0eUxldmVsOwp2YXIgQ01hcENvbXByZXNzaW9uVHlwZSA9IHsKICBOT05FOiAwLAogIEJJTkFSWTogMSwKICBTVFJFQU06IDIKfTsKZXhwb3J0cy5DTWFwQ29tcHJlc3Npb25UeXBlID0gQ01hcENvbXByZXNzaW9uVHlwZTsKdmFyIE9QUyA9IHsKICBkZXBlbmRlbmN5OiAxLAogIHNldExpbmVXaWR0aDogMiwKICBzZXRMaW5lQ2FwOiAzLAogIHNldExpbmVKb2luOiA0LAogIHNldE1pdGVyTGltaXQ6IDUsCiAgc2V0RGFzaDogNiwKICBzZXRSZW5kZXJpbmdJbnRlbnQ6IDcsCiAgc2V0RmxhdG5lc3M6IDgsCiAgc2V0R1N0YXRlOiA5LAogIHNhdmU6IDEwLAogIHJlc3RvcmU6IDExLAogIHRyYW5zZm9ybTogMTIsCiAgbW92ZVRvOiAxMywKICBsaW5lVG86IDE0LAogIGN1cnZlVG86IDE1LAogIGN1cnZlVG8yOiAxNiwKICBjdXJ2ZVRvMzogMTcsCiAgY2xvc2VQYXRoOiAxOCwKICByZWN0YW5nbGU6IDE5LAogIHN0cm9rZTogMjAsCiAgY2xvc2VTdHJva2U6IDIxLAogIGZpbGw6IDIyLAogIGVvRmlsbDogMjMsCiAgZmlsbFN0cm9rZTogMjQsCiAgZW9GaWxsU3Ryb2tlOiAyNSwKICBjbG9zZUZpbGxTdHJva2U6IDI2LAogIGNsb3NlRU9GaWxsU3Ryb2tlOiAyNywKICBlbmRQYXRoOiAyOCwKICBjbGlwOiAyOSwKICBlb0NsaXA6IDMwLAogIGJlZ2luVGV4dDogMzEsCiAgZW5kVGV4dDogMzIsCiAgc2V0Q2hhclNwYWNpbmc6IDMzLAogIHNldFdvcmRTcGFjaW5nOiAzNCwKICBzZXRIU2NhbGU6IDM1LAogIHNldExlYWRpbmc6IDM2LAogIHNldEZvbnQ6IDM3LAogIHNldFRleHRSZW5kZXJpbmdNb2RlOiAzOCwKICBzZXRUZXh0UmlzZTogMzksCiAgbW92ZVRleHQ6IDQwLAogIHNldExlYWRpbmdNb3ZlVGV4dDogNDEsCiAgc2V0VGV4dE1hdHJpeDogNDIsCiAgbmV4dExpbmU6IDQzLAogIHNob3dUZXh0OiA0NCwKICBzaG93U3BhY2VkVGV4dDogNDUsCiAgbmV4dExpbmVTaG93VGV4dDogNDYsCiAgbmV4dExpbmVTZXRTcGFjaW5nU2hvd1RleHQ6IDQ3LAogIHNldENoYXJXaWR0aDogNDgsCiAgc2V0Q2hhcldpZHRoQW5kQm91bmRzOiA0OSwKICBzZXRTdHJva2VDb2xvclNwYWNlOiA1MCwKICBzZXRGaWxsQ29sb3JTcGFjZTogNTEsCiAgc2V0U3Ryb2tlQ29sb3I6IDUyLAogIHNldFN0cm9rZUNvbG9yTjogNTMsCiAgc2V0RmlsbENvbG9yOiA1NCwKICBzZXRGaWxsQ29sb3JOOiA1NSwKICBzZXRTdHJva2VHcmF5OiA1NiwKICBzZXRGaWxsR3JheTogNTcsCiAgc2V0U3Ryb2tlUkdCQ29sb3I6IDU4LAogIHNldEZpbGxSR0JDb2xvcjogNTksCiAgc2V0U3Ryb2tlQ01ZS0NvbG9yOiA2MCwKICBzZXRGaWxsQ01ZS0NvbG9yOiA2MSwKICBzaGFkaW5nRmlsbDogNjIsCiAgYmVnaW5JbmxpbmVJbWFnZTogNjMsCiAgYmVnaW5JbWFnZURhdGE6IDY0LAogIGVuZElubGluZUltYWdlOiA2NSwKICBwYWludFhPYmplY3Q6IDY2LAogIG1hcmtQb2ludDogNjcsCiAgbWFya1BvaW50UHJvcHM6IDY4LAogIGJlZ2luTWFya2VkQ29udGVudDogNjksCiAgYmVnaW5NYXJrZWRDb250ZW50UHJvcHM6IDcwLAogIGVuZE1hcmtlZENvbnRlbnQ6IDcxLAogIGJlZ2luQ29tcGF0OiA3MiwKICBlbmRDb21wYXQ6IDczLAogIHBhaW50Rm9ybVhPYmplY3RCZWdpbjogNzQsCiAgcGFpbnRGb3JtWE9iamVjdEVuZDogNzUsCiAgYmVnaW5Hcm91cDogNzYsCiAgZW5kR3JvdXA6IDc3LAogIGJlZ2luQW5ub3RhdGlvbnM6IDc4LAogIGVuZEFubm90YXRpb25zOiA3OSwKICBiZWdpbkFubm90YXRpb246IDgwLAogIGVuZEFubm90YXRpb246IDgxLAogIHBhaW50SnBlZ1hPYmplY3Q6IDgyLAogIHBhaW50SW1hZ2VNYXNrWE9iamVjdDogODMsCiAgcGFpbnRJbWFnZU1hc2tYT2JqZWN0R3JvdXA6IDg0LAogIHBhaW50SW1hZ2VYT2JqZWN0OiA4NSwKICBwYWludElubGluZUltYWdlWE9iamVjdDogODYsCiAgcGFpbnRJbmxpbmVJbWFnZVhPYmplY3RHcm91cDogODcsCiAgcGFpbnRJbWFnZVhPYmplY3RSZXBlYXQ6IDg4LAogIHBhaW50SW1hZ2VNYXNrWE9iamVjdFJlcGVhdDogODksCiAgcGFpbnRTb2xpZENvbG9ySW1hZ2VNYXNrOiA5MCwKICBjb25zdHJ1Y3RQYXRoOiA5MQp9OwpleHBvcnRzLk9QUyA9IE9QUzsKdmFyIFVOU1VQUE9SVEVEX0ZFQVRVUkVTID0gewogIHVua25vd246ICJ1bmtub3duIiwKICBmb3JtczogImZvcm1zIiwKICBqYXZhU2NyaXB0OiAiamF2YVNjcmlwdCIsCiAgc21hc2s6ICJzbWFzayIsCiAgc2hhZGluZ1BhdHRlcm46ICJzaGFkaW5nUGF0dGVybiIsCiAgZm9udDogImZvbnQiLAogIGVycm9yVGlsaW5nUGF0dGVybjogImVycm9yVGlsaW5nUGF0dGVybiIsCiAgZXJyb3JFeHRHU3RhdGU6ICJlcnJvckV4dEdTdGF0ZSIsCiAgZXJyb3JYT2JqZWN0OiAiZXJyb3JYT2JqZWN0IiwKICBlcnJvckZvbnRMb2FkVHlwZTM6ICJlcnJvckZvbnRMb2FkVHlwZTMiLAogIGVycm9yRm9udFN0YXRlOiAiZXJyb3JGb250U3RhdGUiLAogIGVycm9yRm9udE1pc3Npbmc6ICJlcnJvckZvbnRNaXNzaW5nIiwKICBlcnJvckZvbnRUcmFuc2xhdGU6ICJlcnJvckZvbnRUcmFuc2xhdGUiLAogIGVycm9yQ29sb3JTcGFjZTogImVycm9yQ29sb3JTcGFjZSIsCiAgZXJyb3JPcGVyYXRvckxpc3Q6ICJlcnJvck9wZXJhdG9yTGlzdCIsCiAgZXJyb3JGb250VG9Vbmljb2RlOiAiZXJyb3JGb250VG9Vbmljb2RlIiwKICBlcnJvckZvbnRMb2FkTmF0aXZlOiAiZXJyb3JGb250TG9hZE5hdGl2ZSIsCiAgZXJyb3JGb250R2V0UGF0aDogImVycm9yRm9udEdldFBhdGgiCn07CmV4cG9ydHMuVU5TVVBQT1JURURfRkVBVFVSRVMgPSBVTlNVUFBPUlRFRF9GRUFUVVJFUzsKdmFyIFBhc3N3b3JkUmVzcG9uc2VzID0gewogIE5FRURfUEFTU1dPUkQ6IDEsCiAgSU5DT1JSRUNUX1BBU1NXT1JEOiAyCn07CmV4cG9ydHMuUGFzc3dvcmRSZXNwb25zZXMgPSBQYXNzd29yZFJlc3BvbnNlczsKdmFyIHZlcmJvc2l0eSA9IFZlcmJvc2l0eUxldmVsLldBUk5JTkdTOwoKZnVuY3Rpb24gc2V0VmVyYm9zaXR5TGV2ZWwobGV2ZWwpIHsKICBpZiAoTnVtYmVyLmlzSW50ZWdlcihsZXZlbCkpIHsKICAgIHZlcmJvc2l0eSA9IGxldmVsOwogIH0KfQoKZnVuY3Rpb24gZ2V0VmVyYm9zaXR5TGV2ZWwoKSB7CiAgcmV0dXJuIHZlcmJvc2l0eTsKfQoKZnVuY3Rpb24gaW5mbyhtc2cpIHsKICBpZiAodmVyYm9zaXR5ID49IFZlcmJvc2l0eUxldmVsLklORk9TKSB7CiAgICBjb25zb2xlLmxvZygiSW5mbzogIi5jb25jYXQobXNnKSk7CiAgfQp9CgpmdW5jdGlvbiB3YXJuKG1zZykgewogIGlmICh2ZXJib3NpdHkgPj0gVmVyYm9zaXR5TGV2ZWwuV0FSTklOR1MpIHsKICAgIGNvbnNvbGUubG9nKCJXYXJuaW5nOiAiLmNvbmNhdChtc2cpKTsKICB9Cn0KCmZ1bmN0aW9uIHVucmVhY2hhYmxlKG1zZykgewogIHRocm93IG5ldyBFcnJvcihtc2cpOwp9CgpmdW5jdGlvbiBhc3NlcnQoY29uZCwgbXNnKSB7CiAgaWYgKCFjb25kKSB7CiAgICB1bnJlYWNoYWJsZShtc2cpOwogIH0KfQoKZnVuY3Rpb24gaXNTYW1lT3JpZ2luKGJhc2VVcmwsIG90aGVyVXJsKSB7CiAgdmFyIGJhc2U7CgogIHRyeSB7CiAgICBiYXNlID0gbmV3IFVSTChiYXNlVXJsKTsKCiAgICBpZiAoIWJhc2Uub3JpZ2luIHx8IGJhc2Uub3JpZ2luID09PSAibnVsbCIpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH0gY2F0Y2ggKGUpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHZhciBvdGhlciA9IG5ldyBVUkwob3RoZXJVcmwsIGJhc2UpOwogIHJldHVybiBiYXNlLm9yaWdpbiA9PT0gb3RoZXIub3JpZ2luOwp9CgpmdW5jdGlvbiBfaXNWYWxpZFByb3RvY29sKHVybCkgewogIGlmICghdXJsKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBzd2l0Y2ggKHVybC5wcm90b2NvbCkgewogICAgY2FzZSAiaHR0cDoiOgogICAgY2FzZSAiaHR0cHM6IjoKICAgIGNhc2UgImZ0cDoiOgogICAgY2FzZSAibWFpbHRvOiI6CiAgICBjYXNlICJ0ZWw6IjoKICAgICAgcmV0dXJuIHRydWU7CgogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuIGZhbHNlOwogIH0KfQoKZnVuY3Rpb24gY3JlYXRlVmFsaWRBYnNvbHV0ZVVybCh1cmwsIGJhc2VVcmwpIHsKICBpZiAoIXVybCkgewogICAgcmV0dXJuIG51bGw7CiAgfQoKICB0cnkgewogICAgdmFyIGFic29sdXRlVXJsID0gYmFzZVVybCA/IG5ldyBVUkwodXJsLCBiYXNlVXJsKSA6IG5ldyBVUkwodXJsKTsKCiAgICBpZiAoX2lzVmFsaWRQcm90b2NvbChhYnNvbHV0ZVVybCkpIHsKICAgICAgcmV0dXJuIGFic29sdXRlVXJsOwogICAgfQogIH0gY2F0Y2ggKGV4KSB7fQoKICByZXR1cm4gbnVsbDsKfQoKZnVuY3Rpb24gc2hhZG93KG9iaiwgcHJvcCwgdmFsdWUpIHsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBwcm9wLCB7CiAgICB2YWx1ZTogdmFsdWUsCiAgICBlbnVtZXJhYmxlOiB0cnVlLAogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgd3JpdGFibGU6IGZhbHNlCiAgfSk7CiAgcmV0dXJuIHZhbHVlOwp9Cgp2YXIgQmFzZUV4Y2VwdGlvbiA9IGZ1bmN0aW9uIEJhc2VFeGNlcHRpb25DbG9zdXJlKCkgewogIGZ1bmN0aW9uIEJhc2VFeGNlcHRpb24obWVzc2FnZSkgewogICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IEJhc2VFeGNlcHRpb24pIHsKICAgICAgdW5yZWFjaGFibGUoIkNhbm5vdCBpbml0aWFsaXplIEJhc2VFeGNlcHRpb24uIik7CiAgICB9CgogICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTsKICAgIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTsKICB9CgogIEJhc2VFeGNlcHRpb24ucHJvdG90eXBlID0gbmV3IEVycm9yKCk7CiAgQmFzZUV4Y2VwdGlvbi5jb25zdHJ1Y3RvciA9IEJhc2VFeGNlcHRpb247CiAgcmV0dXJuIEJhc2VFeGNlcHRpb247Cn0oKTsKCmV4cG9ydHMuQmFzZUV4Y2VwdGlvbiA9IEJhc2VFeGNlcHRpb247Cgp2YXIgUGFzc3dvcmRFeGNlcHRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlRXhjZXB0aW9uKSB7CiAgX2luaGVyaXRzKFBhc3N3b3JkRXhjZXB0aW9uLCBfQmFzZUV4Y2VwdGlvbik7CgogIHZhciBfc3VwZXIgPSBfY3JlYXRlU3VwZXIoUGFzc3dvcmRFeGNlcHRpb24pOwoKICBmdW5jdGlvbiBQYXNzd29yZEV4Y2VwdGlvbihtc2csIGNvZGUpIHsKICAgIHZhciBfdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGFzc3dvcmRFeGNlcHRpb24pOwoKICAgIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgbXNnKTsKICAgIF90aGlzLmNvZGUgPSBjb2RlOwogICAgcmV0dXJuIF90aGlzOwogIH0KCiAgcmV0dXJuIFBhc3N3b3JkRXhjZXB0aW9uOwp9KEJhc2VFeGNlcHRpb24pOwoKZXhwb3J0cy5QYXNzd29yZEV4Y2VwdGlvbiA9IFBhc3N3b3JkRXhjZXB0aW9uOwoKdmFyIFVua25vd25FcnJvckV4Y2VwdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VFeGNlcHRpb24yKSB7CiAgX2luaGVyaXRzKFVua25vd25FcnJvckV4Y2VwdGlvbiwgX0Jhc2VFeGNlcHRpb24yKTsKCiAgdmFyIF9zdXBlcjIgPSBfY3JlYXRlU3VwZXIoVW5rbm93bkVycm9yRXhjZXB0aW9uKTsKCiAgZnVuY3Rpb24gVW5rbm93bkVycm9yRXhjZXB0aW9uKG1zZywgZGV0YWlscykgewogICAgdmFyIF90aGlzMjsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVW5rbm93bkVycm9yRXhjZXB0aW9uKTsKCiAgICBfdGhpczIgPSBfc3VwZXIyLmNhbGwodGhpcywgbXNnKTsKICAgIF90aGlzMi5kZXRhaWxzID0gZGV0YWlsczsKICAgIHJldHVybiBfdGhpczI7CiAgfQoKICByZXR1cm4gVW5rbm93bkVycm9yRXhjZXB0aW9uOwp9KEJhc2VFeGNlcHRpb24pOwoKZXhwb3J0cy5Vbmtub3duRXJyb3JFeGNlcHRpb24gPSBVbmtub3duRXJyb3JFeGNlcHRpb247Cgp2YXIgSW52YWxpZFBERkV4Y2VwdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VFeGNlcHRpb24zKSB7CiAgX2luaGVyaXRzKEludmFsaWRQREZFeGNlcHRpb24sIF9CYXNlRXhjZXB0aW9uMyk7CgogIHZhciBfc3VwZXIzID0gX2NyZWF0ZVN1cGVyKEludmFsaWRQREZFeGNlcHRpb24pOwoKICBmdW5jdGlvbiBJbnZhbGlkUERGRXhjZXB0aW9uKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEludmFsaWRQREZFeGNlcHRpb24pOwoKICAgIHJldHVybiBfc3VwZXIzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICByZXR1cm4gSW52YWxpZFBERkV4Y2VwdGlvbjsKfShCYXNlRXhjZXB0aW9uKTsKCmV4cG9ydHMuSW52YWxpZFBERkV4Y2VwdGlvbiA9IEludmFsaWRQREZFeGNlcHRpb247Cgp2YXIgTWlzc2luZ1BERkV4Y2VwdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VFeGNlcHRpb240KSB7CiAgX2luaGVyaXRzKE1pc3NpbmdQREZFeGNlcHRpb24sIF9CYXNlRXhjZXB0aW9uNCk7CgogIHZhciBfc3VwZXI0ID0gX2NyZWF0ZVN1cGVyKE1pc3NpbmdQREZFeGNlcHRpb24pOwoKICBmdW5jdGlvbiBNaXNzaW5nUERGRXhjZXB0aW9uKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1pc3NpbmdQREZFeGNlcHRpb24pOwoKICAgIHJldHVybiBfc3VwZXI0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICByZXR1cm4gTWlzc2luZ1BERkV4Y2VwdGlvbjsKfShCYXNlRXhjZXB0aW9uKTsKCmV4cG9ydHMuTWlzc2luZ1BERkV4Y2VwdGlvbiA9IE1pc3NpbmdQREZFeGNlcHRpb247Cgp2YXIgVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZUV4Y2VwdGlvbjUpIHsKICBfaW5oZXJpdHMoVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uLCBfQmFzZUV4Y2VwdGlvbjUpOwoKICB2YXIgX3N1cGVyNSA9IF9jcmVhdGVTdXBlcihVbmV4cGVjdGVkUmVzcG9uc2VFeGNlcHRpb24pOwoKICBmdW5jdGlvbiBVbmV4cGVjdGVkUmVzcG9uc2VFeGNlcHRpb24obXNnLCBzdGF0dXMpIHsKICAgIHZhciBfdGhpczM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbik7CgogICAgX3RoaXMzID0gX3N1cGVyNS5jYWxsKHRoaXMsIG1zZyk7CiAgICBfdGhpczMuc3RhdHVzID0gc3RhdHVzOwogICAgcmV0dXJuIF90aGlzMzsKICB9CgogIHJldHVybiBVbmV4cGVjdGVkUmVzcG9uc2VFeGNlcHRpb247Cn0oQmFzZUV4Y2VwdGlvbik7CgpleHBvcnRzLlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbiA9IFVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbjsKCnZhciBGb3JtYXRFcnJvciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VFeGNlcHRpb242KSB7CiAgX2luaGVyaXRzKEZvcm1hdEVycm9yLCBfQmFzZUV4Y2VwdGlvbjYpOwoKICB2YXIgX3N1cGVyNiA9IF9jcmVhdGVTdXBlcihGb3JtYXRFcnJvcik7CgogIGZ1bmN0aW9uIEZvcm1hdEVycm9yKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZvcm1hdEVycm9yKTsKCiAgICByZXR1cm4gX3N1cGVyNi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogIH0KCiAgcmV0dXJuIEZvcm1hdEVycm9yOwp9KEJhc2VFeGNlcHRpb24pOwoKZXhwb3J0cy5Gb3JtYXRFcnJvciA9IEZvcm1hdEVycm9yOwoKdmFyIEFib3J0RXhjZXB0aW9uID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZUV4Y2VwdGlvbjcpIHsKICBfaW5oZXJpdHMoQWJvcnRFeGNlcHRpb24sIF9CYXNlRXhjZXB0aW9uNyk7CgogIHZhciBfc3VwZXI3ID0gX2NyZWF0ZVN1cGVyKEFib3J0RXhjZXB0aW9uKTsKCiAgZnVuY3Rpb24gQWJvcnRFeGNlcHRpb24oKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQWJvcnRFeGNlcHRpb24pOwoKICAgIHJldHVybiBfc3VwZXI3LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICByZXR1cm4gQWJvcnRFeGNlcHRpb247Cn0oQmFzZUV4Y2VwdGlvbik7CgpleHBvcnRzLkFib3J0RXhjZXB0aW9uID0gQWJvcnRFeGNlcHRpb247CnZhciBOdWxsQ2hhcmFjdGVyc1JlZ0V4cCA9IC9ceDAwL2c7CgpmdW5jdGlvbiByZW1vdmVOdWxsQ2hhcmFjdGVycyhzdHIpIHsKICBpZiAodHlwZW9mIHN0ciAhPT0gInN0cmluZyIpIHsKICAgIHdhcm4oIlRoZSBhcmd1bWVudCBmb3IgcmVtb3ZlTnVsbENoYXJhY3RlcnMgbXVzdCBiZSBhIHN0cmluZy4iKTsKICAgIHJldHVybiBzdHI7CiAgfQoKICByZXR1cm4gc3RyLnJlcGxhY2UoTnVsbENoYXJhY3RlcnNSZWdFeHAsICIiKTsKfQoKZnVuY3Rpb24gYnl0ZXNUb1N0cmluZyhieXRlcykgewogIGFzc2VydChieXRlcyAhPT0gbnVsbCAmJiBfdHlwZW9mKGJ5dGVzKSA9PT0gIm9iamVjdCIgJiYgYnl0ZXMubGVuZ3RoICE9PSB1bmRlZmluZWQsICJJbnZhbGlkIGFyZ3VtZW50IGZvciBieXRlc1RvU3RyaW5nIik7CiAgdmFyIGxlbmd0aCA9IGJ5dGVzLmxlbmd0aDsKICB2YXIgTUFYX0FSR1VNRU5UX0NPVU5UID0gODE5MjsKCiAgaWYgKGxlbmd0aCA8IE1BWF9BUkdVTUVOVF9DT1VOVCkgewogICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYnl0ZXMpOwogIH0KCiAgdmFyIHN0ckJ1ZiA9IFtdOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSBNQVhfQVJHVU1FTlRfQ09VTlQpIHsKICAgIHZhciBjaHVua0VuZCA9IE1hdGgubWluKGkgKyBNQVhfQVJHVU1FTlRfQ09VTlQsIGxlbmd0aCk7CiAgICB2YXIgY2h1bmsgPSBieXRlcy5zdWJhcnJheShpLCBjaHVua0VuZCk7CiAgICBzdHJCdWYucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgfQoKICByZXR1cm4gc3RyQnVmLmpvaW4oIiIpOwp9CgpmdW5jdGlvbiBzdHJpbmdUb0J5dGVzKHN0cikgewogIGFzc2VydCh0eXBlb2Ygc3RyID09PSAic3RyaW5nIiwgIkludmFsaWQgYXJndW1lbnQgZm9yIHN0cmluZ1RvQnl0ZXMiKTsKICB2YXIgbGVuZ3RoID0gc3RyLmxlbmd0aDsKICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShsZW5ndGgpOwoKICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CiAgICBieXRlc1tpXSA9IHN0ci5jaGFyQ29kZUF0KGkpICYgMHhmZjsKICB9CgogIHJldHVybiBieXRlczsKfQoKZnVuY3Rpb24gYXJyYXlCeXRlTGVuZ3RoKGFycikgewogIGlmIChhcnIubGVuZ3RoICE9PSB1bmRlZmluZWQpIHsKICAgIHJldHVybiBhcnIubGVuZ3RoOwogIH0KCiAgYXNzZXJ0KGFyci5ieXRlTGVuZ3RoICE9PSB1bmRlZmluZWQsICJhcnJheUJ5dGVMZW5ndGggLSBpbnZhbGlkIGFyZ3VtZW50LiIpOwogIHJldHVybiBhcnIuYnl0ZUxlbmd0aDsKfQoKZnVuY3Rpb24gYXJyYXlzVG9CeXRlcyhhcnIpIHsKICB2YXIgbGVuZ3RoID0gYXJyLmxlbmd0aDsKCiAgaWYgKGxlbmd0aCA9PT0gMSAmJiBhcnJbMF0gaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7CiAgICByZXR1cm4gYXJyWzBdOwogIH0KCiAgdmFyIHJlc3VsdExlbmd0aCA9IDA7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgIHJlc3VsdExlbmd0aCArPSBhcnJheUJ5dGVMZW5ndGgoYXJyW2ldKTsKICB9CgogIHZhciBwb3MgPSAwOwogIHZhciBkYXRhID0gbmV3IFVpbnQ4QXJyYXkocmVzdWx0TGVuZ3RoKTsKCiAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxlbmd0aDsgX2krKykgewogICAgdmFyIGl0ZW0gPSBhcnJbX2ldOwoKICAgIGlmICghKGl0ZW0gaW5zdGFuY2VvZiBVaW50OEFycmF5KSkgewogICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICJzdHJpbmciKSB7CiAgICAgICAgaXRlbSA9IHN0cmluZ1RvQnl0ZXMoaXRlbSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaXRlbSA9IG5ldyBVaW50OEFycmF5KGl0ZW0pOwogICAgICB9CiAgICB9CgogICAgdmFyIGl0ZW1MZW5ndGggPSBpdGVtLmJ5dGVMZW5ndGg7CiAgICBkYXRhLnNldChpdGVtLCBwb3MpOwogICAgcG9zICs9IGl0ZW1MZW5ndGg7CiAgfQoKICByZXR1cm4gZGF0YTsKfQoKZnVuY3Rpb24gc3RyaW5nMzIodmFsdWUpIHsKICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSh2YWx1ZSA+PiAyNCAmIDB4ZmYsIHZhbHVlID4+IDE2ICYgMHhmZiwgdmFsdWUgPj4gOCAmIDB4ZmYsIHZhbHVlICYgMHhmZik7Cn0KCmZ1bmN0aW9uIGlzTGl0dGxlRW5kaWFuKCkgewogIHZhciBidWZmZXI4ID0gbmV3IFVpbnQ4QXJyYXkoNCk7CiAgYnVmZmVyOFswXSA9IDE7CiAgdmFyIHZpZXczMiA9IG5ldyBVaW50MzJBcnJheShidWZmZXI4LmJ1ZmZlciwgMCwgMSk7CiAgcmV0dXJuIHZpZXczMlswXSA9PT0gMTsKfQoKdmFyIElzTGl0dGxlRW5kaWFuQ2FjaGVkID0gewogIGdldCB2YWx1ZSgpIHsKICAgIHJldHVybiBzaGFkb3codGhpcywgInZhbHVlIiwgaXNMaXR0bGVFbmRpYW4oKSk7CiAgfQoKfTsKZXhwb3J0cy5Jc0xpdHRsZUVuZGlhbkNhY2hlZCA9IElzTGl0dGxlRW5kaWFuQ2FjaGVkOwoKZnVuY3Rpb24gaXNFdmFsU3VwcG9ydGVkKCkgewogIHRyeSB7CiAgICBuZXcgRnVuY3Rpb24oIiIpOwogICAgcmV0dXJuIHRydWU7CiAgfSBjYXRjaCAoZSkgewogICAgcmV0dXJuIGZhbHNlOwogIH0KfQoKdmFyIElzRXZhbFN1cHBvcnRlZENhY2hlZCA9IHsKICBnZXQgdmFsdWUoKSB7CiAgICByZXR1cm4gc2hhZG93KHRoaXMsICJ2YWx1ZSIsIGlzRXZhbFN1cHBvcnRlZCgpKTsKICB9Cgp9OwpleHBvcnRzLklzRXZhbFN1cHBvcnRlZENhY2hlZCA9IElzRXZhbFN1cHBvcnRlZENhY2hlZDsKdmFyIHJnYkJ1ZiA9IFsicmdiKCIsIDAsICIsIiwgMCwgIiwiLCAwLCAiKSJdOwoKdmFyIFV0aWwgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFV0aWwoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVXRpbCk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoVXRpbCwgbnVsbCwgW3sKICAgIGtleTogIm1ha2VDc3NSZ2IiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG1ha2VDc3NSZ2IociwgZywgYikgewogICAgICByZ2JCdWZbMV0gPSByOwogICAgICByZ2JCdWZbM10gPSBnOwogICAgICByZ2JCdWZbNV0gPSBiOwogICAgICByZXR1cm4gcmdiQnVmLmpvaW4oIiIpOwogICAgfQogIH0sIHsKICAgIGtleTogInRyYW5zZm9ybSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdHJhbnNmb3JtKG0xLCBtMikgewogICAgICByZXR1cm4gW20xWzBdICogbTJbMF0gKyBtMVsyXSAqIG0yWzFdLCBtMVsxXSAqIG0yWzBdICsgbTFbM10gKiBtMlsxXSwgbTFbMF0gKiBtMlsyXSArIG0xWzJdICogbTJbM10sIG0xWzFdICogbTJbMl0gKyBtMVszXSAqIG0yWzNdLCBtMVswXSAqIG0yWzRdICsgbTFbMl0gKiBtMls1XSArIG0xWzRdLCBtMVsxXSAqIG0yWzRdICsgbTFbM10gKiBtMls1XSArIG0xWzVdXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJhcHBseVRyYW5zZm9ybSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYXBwbHlUcmFuc2Zvcm0ocCwgbSkgewogICAgICB2YXIgeHQgPSBwWzBdICogbVswXSArIHBbMV0gKiBtWzJdICsgbVs0XTsKICAgICAgdmFyIHl0ID0gcFswXSAqIG1bMV0gKyBwWzFdICogbVszXSArIG1bNV07CiAgICAgIHJldHVybiBbeHQsIHl0XTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJhcHBseUludmVyc2VUcmFuc2Zvcm0iLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFwcGx5SW52ZXJzZVRyYW5zZm9ybShwLCBtKSB7CiAgICAgIHZhciBkID0gbVswXSAqIG1bM10gLSBtWzFdICogbVsyXTsKICAgICAgdmFyIHh0ID0gKHBbMF0gKiBtWzNdIC0gcFsxXSAqIG1bMl0gKyBtWzJdICogbVs1XSAtIG1bNF0gKiBtWzNdKSAvIGQ7CiAgICAgIHZhciB5dCA9ICgtcFswXSAqIG1bMV0gKyBwWzFdICogbVswXSArIG1bNF0gKiBtWzFdIC0gbVs1XSAqIG1bMF0pIC8gZDsKICAgICAgcmV0dXJuIFt4dCwgeXRdOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEF4aWFsQWxpZ25lZEJvdW5kaW5nQm94IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBeGlhbEFsaWduZWRCb3VuZGluZ0JveChyLCBtKSB7CiAgICAgIHZhciBwMSA9IFV0aWwuYXBwbHlUcmFuc2Zvcm0ociwgbSk7CiAgICAgIHZhciBwMiA9IFV0aWwuYXBwbHlUcmFuc2Zvcm0oci5zbGljZSgyLCA0KSwgbSk7CiAgICAgIHZhciBwMyA9IFV0aWwuYXBwbHlUcmFuc2Zvcm0oW3JbMF0sIHJbM11dLCBtKTsKICAgICAgdmFyIHA0ID0gVXRpbC5hcHBseVRyYW5zZm9ybShbclsyXSwgclsxXV0sIG0pOwogICAgICByZXR1cm4gW01hdGgubWluKHAxWzBdLCBwMlswXSwgcDNbMF0sIHA0WzBdKSwgTWF0aC5taW4ocDFbMV0sIHAyWzFdLCBwM1sxXSwgcDRbMV0pLCBNYXRoLm1heChwMVswXSwgcDJbMF0sIHAzWzBdLCBwNFswXSksIE1hdGgubWF4KHAxWzFdLCBwMlsxXSwgcDNbMV0sIHA0WzFdKV07CiAgICB9CiAgfSwgewogICAga2V5OiAiaW52ZXJzZVRyYW5zZm9ybSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaW52ZXJzZVRyYW5zZm9ybShtKSB7CiAgICAgIHZhciBkID0gbVswXSAqIG1bM10gLSBtWzFdICogbVsyXTsKICAgICAgcmV0dXJuIFttWzNdIC8gZCwgLW1bMV0gLyBkLCAtbVsyXSAvIGQsIG1bMF0gLyBkLCAobVsyXSAqIG1bNV0gLSBtWzRdICogbVszXSkgLyBkLCAobVs0XSAqIG1bMV0gLSBtWzVdICogbVswXSkgLyBkXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJhcHBseTNkVHJhbnNmb3JtIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhcHBseTNkVHJhbnNmb3JtKG0sIHYpIHsKICAgICAgcmV0dXJuIFttWzBdICogdlswXSArIG1bMV0gKiB2WzFdICsgbVsyXSAqIHZbMl0sIG1bM10gKiB2WzBdICsgbVs0XSAqIHZbMV0gKyBtWzVdICogdlsyXSwgbVs2XSAqIHZbMF0gKyBtWzddICogdlsxXSArIG1bOF0gKiB2WzJdXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzaW5ndWxhclZhbHVlRGVjb21wb3NlMmRTY2FsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2luZ3VsYXJWYWx1ZURlY29tcG9zZTJkU2NhbGUobSkgewogICAgICB2YXIgdHJhbnNwb3NlID0gW21bMF0sIG1bMl0sIG1bMV0sIG1bM11dOwogICAgICB2YXIgYSA9IG1bMF0gKiB0cmFuc3Bvc2VbMF0gKyBtWzFdICogdHJhbnNwb3NlWzJdOwogICAgICB2YXIgYiA9IG1bMF0gKiB0cmFuc3Bvc2VbMV0gKyBtWzFdICogdHJhbnNwb3NlWzNdOwogICAgICB2YXIgYyA9IG1bMl0gKiB0cmFuc3Bvc2VbMF0gKyBtWzNdICogdHJhbnNwb3NlWzJdOwogICAgICB2YXIgZCA9IG1bMl0gKiB0cmFuc3Bvc2VbMV0gKyBtWzNdICogdHJhbnNwb3NlWzNdOwogICAgICB2YXIgZmlyc3QgPSAoYSArIGQpIC8gMjsKICAgICAgdmFyIHNlY29uZCA9IE1hdGguc3FydCgoYSArIGQpICogKGEgKyBkKSAtIDQgKiAoYSAqIGQgLSBjICogYikpIC8gMjsKICAgICAgdmFyIHN4ID0gZmlyc3QgKyBzZWNvbmQgfHwgMTsKICAgICAgdmFyIHN5ID0gZmlyc3QgLSBzZWNvbmQgfHwgMTsKICAgICAgcmV0dXJuIFtNYXRoLnNxcnQoc3gpLCBNYXRoLnNxcnQoc3kpXTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJub3JtYWxpemVSZWN0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBub3JtYWxpemVSZWN0KHJlY3QpIHsKICAgICAgdmFyIHIgPSByZWN0LnNsaWNlKDApOwoKICAgICAgaWYgKHJlY3RbMF0gPiByZWN0WzJdKSB7CiAgICAgICAgclswXSA9IHJlY3RbMl07CiAgICAgICAgclsyXSA9IHJlY3RbMF07CiAgICAgIH0KCiAgICAgIGlmIChyZWN0WzFdID4gcmVjdFszXSkgewogICAgICAgIHJbMV0gPSByZWN0WzNdOwogICAgICAgIHJbM10gPSByZWN0WzFdOwogICAgICB9CgogICAgICByZXR1cm4gcjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpbnRlcnNlY3QiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGludGVyc2VjdChyZWN0MSwgcmVjdDIpIHsKICAgICAgZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7CiAgICAgICAgcmV0dXJuIGEgLSBiOwogICAgICB9CgogICAgICB2YXIgb3JkZXJlZFggPSBbcmVjdDFbMF0sIHJlY3QxWzJdLCByZWN0MlswXSwgcmVjdDJbMl1dLnNvcnQoY29tcGFyZSk7CiAgICAgIHZhciBvcmRlcmVkWSA9IFtyZWN0MVsxXSwgcmVjdDFbM10sIHJlY3QyWzFdLCByZWN0MlszXV0uc29ydChjb21wYXJlKTsKICAgICAgdmFyIHJlc3VsdCA9IFtdOwogICAgICByZWN0MSA9IFV0aWwubm9ybWFsaXplUmVjdChyZWN0MSk7CiAgICAgIHJlY3QyID0gVXRpbC5ub3JtYWxpemVSZWN0KHJlY3QyKTsKCiAgICAgIGlmIChvcmRlcmVkWFswXSA9PT0gcmVjdDFbMF0gJiYgb3JkZXJlZFhbMV0gPT09IHJlY3QyWzBdIHx8IG9yZGVyZWRYWzBdID09PSByZWN0MlswXSAmJiBvcmRlcmVkWFsxXSA9PT0gcmVjdDFbMF0pIHsKICAgICAgICByZXN1bHRbMF0gPSBvcmRlcmVkWFsxXTsKICAgICAgICByZXN1bHRbMl0gPSBvcmRlcmVkWFsyXTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQoKICAgICAgaWYgKG9yZGVyZWRZWzBdID09PSByZWN0MVsxXSAmJiBvcmRlcmVkWVsxXSA9PT0gcmVjdDJbMV0gfHwgb3JkZXJlZFlbMF0gPT09IHJlY3QyWzFdICYmIG9yZGVyZWRZWzFdID09PSByZWN0MVsxXSkgewogICAgICAgIHJlc3VsdFsxXSA9IG9yZGVyZWRZWzFdOwogICAgICAgIHJlc3VsdFszXSA9IG9yZGVyZWRZWzJdOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CgogICAgICByZXR1cm4gcmVzdWx0OwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFV0aWw7Cn0oKTsKCmV4cG9ydHMuVXRpbCA9IFV0aWw7CnZhciBQREZTdHJpbmdUcmFuc2xhdGVUYWJsZSA9IFswLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAwLCAweDJEOCwgMHgyQzcsIDB4MkM2LCAweDJEOSwgMHgyREQsIDB4MkRCLCAweDJEQSwgMHgyREMsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDB4MjAyMiwgMHgyMDIwLCAweDIwMjEsIDB4MjAyNiwgMHgyMDE0LCAweDIwMTMsIDB4MTkyLCAweDIwNDQsIDB4MjAzOSwgMHgyMDNBLCAweDIyMTIsIDB4MjAzMCwgMHgyMDFFLCAweDIwMUMsIDB4MjAxRCwgMHgyMDE4LCAweDIwMTksIDB4MjAxQSwgMHgyMTIyLCAweEZCMDEsIDB4RkIwMiwgMHgxNDEsIDB4MTUyLCAweDE2MCwgMHgxNzgsIDB4MTdELCAweDEzMSwgMHgxNDIsIDB4MTUzLCAweDE2MSwgMHgxN0UsIDAsIDB4MjBBQ107CgpmdW5jdGlvbiBzdHJpbmdUb1BERlN0cmluZyhzdHIpIHsKICB2YXIgbGVuZ3RoID0gc3RyLmxlbmd0aCwKICAgICAgc3RyQnVmID0gW107CgogIGlmIChzdHJbMF0gPT09ICJceEZFIiAmJiBzdHJbMV0gPT09ICJceEZGIikgewogICAgZm9yICh2YXIgaSA9IDI7IGkgPCBsZW5ndGg7IGkgKz0gMikgewogICAgICBzdHJCdWYucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKHN0ci5jaGFyQ29kZUF0KGkpIDw8IDggfCBzdHIuY2hhckNvZGVBdChpICsgMSkpKTsKICAgIH0KICB9IGVsc2UgaWYgKHN0clswXSA9PT0gIlx4RkYiICYmIHN0clsxXSA9PT0gIlx4RkUiKSB7CiAgICBmb3IgKHZhciBfaTIgPSAyOyBfaTIgPCBsZW5ndGg7IF9pMiArPSAyKSB7CiAgICAgIHN0ckJ1Zi5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoc3RyLmNoYXJDb2RlQXQoX2kyICsgMSkgPDwgOCB8IHN0ci5jaGFyQ29kZUF0KF9pMikpKTsKICAgIH0KICB9IGVsc2UgewogICAgZm9yICh2YXIgX2kzID0gMDsgX2kzIDwgbGVuZ3RoOyArK19pMykgewogICAgICB2YXIgY29kZSA9IFBERlN0cmluZ1RyYW5zbGF0ZVRhYmxlW3N0ci5jaGFyQ29kZUF0KF9pMyldOwogICAgICBzdHJCdWYucHVzaChjb2RlID8gU3RyaW5nLmZyb21DaGFyQ29kZShjb2RlKSA6IHN0ci5jaGFyQXQoX2kzKSk7CiAgICB9CiAgfQoKICByZXR1cm4gc3RyQnVmLmpvaW4oIiIpOwp9CgpmdW5jdGlvbiBzdHJpbmdUb1VURjhTdHJpbmcoc3RyKSB7CiAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoc3RyKSk7Cn0KCmZ1bmN0aW9uIHV0ZjhTdHJpbmdUb1N0cmluZyhzdHIpIHsKICByZXR1cm4gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpOwp9CgpmdW5jdGlvbiBpc0VtcHR5T2JqKG9iaikgewogIGZvciAodmFyIGtleSBpbiBvYmopIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHJldHVybiB0cnVlOwp9CgpmdW5jdGlvbiBpc0Jvb2wodikgewogIHJldHVybiB0eXBlb2YgdiA9PT0gImJvb2xlYW4iOwp9CgpmdW5jdGlvbiBpc051bSh2KSB7CiAgcmV0dXJuIHR5cGVvZiB2ID09PSAibnVtYmVyIjsKfQoKZnVuY3Rpb24gaXNTdHJpbmcodikgewogIHJldHVybiB0eXBlb2YgdiA9PT0gInN0cmluZyI7Cn0KCmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXIodikgewogIHJldHVybiBfdHlwZW9mKHYpID09PSAib2JqZWN0IiAmJiB2ICE9PSBudWxsICYmIHYuYnl0ZUxlbmd0aCAhPT0gdW5kZWZpbmVkOwp9CgpmdW5jdGlvbiBpc0FycmF5RXF1YWwoYXJyMSwgYXJyMikgewogIGlmIChhcnIxLmxlbmd0aCAhPT0gYXJyMi5sZW5ndGgpIHsKICAgIHJldHVybiBmYWxzZTsKICB9CgogIHJldHVybiBhcnIxLmV2ZXJ5KGZ1bmN0aW9uIChlbGVtZW50LCBpbmRleCkgewogICAgcmV0dXJuIGVsZW1lbnQgPT09IGFycjJbaW5kZXhdOwogIH0pOwp9CgpmdW5jdGlvbiBjcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSgpIHsKICB2YXIgY2FwYWJpbGl0eSA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgdmFyIGlzU2V0dGxlZCA9IGZhbHNlOwogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjYXBhYmlsaXR5LCAic2V0dGxlZCIsIHsKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gaXNTZXR0bGVkOwogICAgfQogIH0pOwogIGNhcGFiaWxpdHkucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIGNhcGFiaWxpdHkucmVzb2x2ZSA9IGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgIGlzU2V0dGxlZCA9IHRydWU7CiAgICAgIHJlc29sdmUoZGF0YSk7CiAgICB9OwoKICAgIGNhcGFiaWxpdHkucmVqZWN0ID0gZnVuY3Rpb24gKHJlYXNvbikgewogICAgICBpc1NldHRsZWQgPSB0cnVlOwogICAgICByZWplY3QocmVhc29uKTsKICAgIH07CiAgfSk7CiAgcmV0dXJuIGNhcGFiaWxpdHk7Cn0KCnZhciBjcmVhdGVPYmplY3RVUkwgPSBmdW5jdGlvbiBjcmVhdGVPYmplY3RVUkxDbG9zdXJlKCkgewogIHZhciBkaWdpdHMgPSAiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLz0iOwogIHJldHVybiBmdW5jdGlvbiBjcmVhdGVPYmplY3RVUkwoZGF0YSwgY29udGVudFR5cGUpIHsKICAgIHZhciBmb3JjZURhdGFTY2hlbWEgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlOwoKICAgIGlmICghZm9yY2VEYXRhU2NoZW1hICYmIFVSTC5jcmVhdGVPYmplY3RVUkwpIHsKICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbZGF0YV0sIHsKICAgICAgICB0eXBlOiBjb250ZW50VHlwZQogICAgICB9KTsKICAgICAgcmV0dXJuIFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7CiAgICB9CgogICAgdmFyIGJ1ZmZlciA9ICJkYXRhOiIuY29uY2F0KGNvbnRlbnRUeXBlLCAiO2Jhc2U2NCwiKTsKCiAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBkYXRhLmxlbmd0aDsgaSA8IGlpOyBpICs9IDMpIHsKICAgICAgdmFyIGIxID0gZGF0YVtpXSAmIDB4ZmY7CiAgICAgIHZhciBiMiA9IGRhdGFbaSArIDFdICYgMHhmZjsKICAgICAgdmFyIGIzID0gZGF0YVtpICsgMl0gJiAweGZmOwogICAgICB2YXIgZDEgPSBiMSA+PiAyLAogICAgICAgICAgZDIgPSAoYjEgJiAzKSA8PCA0IHwgYjIgPj4gNDsKICAgICAgdmFyIGQzID0gaSArIDEgPCBpaSA/IChiMiAmIDB4ZikgPDwgMiB8IGIzID4+IDYgOiA2NDsKICAgICAgdmFyIGQ0ID0gaSArIDIgPCBpaSA/IGIzICYgMHgzZiA6IDY0OwogICAgICBidWZmZXIgKz0gZGlnaXRzW2QxXSArIGRpZ2l0c1tkMl0gKyBkaWdpdHNbZDNdICsgZGlnaXRzW2Q0XTsKICAgIH0KCiAgICByZXR1cm4gYnVmZmVyOwogIH07Cn0oKTsKCmV4cG9ydHMuY3JlYXRlT2JqZWN0VVJMID0gY3JlYXRlT2JqZWN0VVJMOwoKLyoqKi8gfSksCi8qIDYgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKCnZhciBfaXNfbm9kZSA9IF9fd19wZGZqc19yZXF1aXJlX18oNyk7CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gInVuZGVmaW5lZCIgfHwgIWdsb2JhbFRoaXMuX3BkZmpzQ29tcGF0aWJpbGl0eUNoZWNrZWQpIHsKICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICJ1bmRlZmluZWQiIHx8IGdsb2JhbFRoaXMuTWF0aCAhPT0gTWF0aCkgewogICAgZ2xvYmFsVGhpcyA9IF9fd19wZGZqc19yZXF1aXJlX18oOCk7CiAgfQoKICBnbG9iYWxUaGlzLl9wZGZqc0NvbXBhdGliaWxpdHlDaGVja2VkID0gdHJ1ZTsKICB2YXIgaGFzRE9NID0gKHR5cGVvZiB3aW5kb3cgPT09ICJ1bmRlZmluZWQiID8gInVuZGVmaW5lZCIgOiBfdHlwZW9mKHdpbmRvdykpID09PSAib2JqZWN0IiAmJiAodHlwZW9mIGRvY3VtZW50ID09PSAidW5kZWZpbmVkIiA/ICJ1bmRlZmluZWQiIDogX3R5cGVvZihkb2N1bWVudCkpID09PSAib2JqZWN0IjsKICB2YXIgdXNlckFnZW50ID0gdHlwZW9mIG5hdmlnYXRvciAhPT0gInVuZGVmaW5lZCIgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAiIjsKICB2YXIgaXNJRSA9IC9UcmlkZW50Ly50ZXN0KHVzZXJBZ2VudCk7CgogIChmdW5jdGlvbiBjaGVja05vZGVCdG9hKCkgewogICAgaWYgKGdsb2JhbFRoaXMuYnRvYSB8fCAhX2lzX25vZGUuaXNOb2RlSlMpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGdsb2JhbFRoaXMuYnRvYSA9IGZ1bmN0aW9uIChjaGFycykgewogICAgICByZXR1cm4gQnVmZmVyLmZyb20oY2hhcnMsICJiaW5hcnkiKS50b1N0cmluZygiYmFzZTY0Iik7CiAgICB9OwogIH0pKCk7CgogIChmdW5jdGlvbiBjaGVja05vZGVBdG9iKCkgewogICAgaWYgKGdsb2JhbFRoaXMuYXRvYiB8fCAhX2lzX25vZGUuaXNOb2RlSlMpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGdsb2JhbFRoaXMuYXRvYiA9IGZ1bmN0aW9uIChpbnB1dCkgewogICAgICByZXR1cm4gQnVmZmVyLmZyb20oaW5wdXQsICJiYXNlNjQiKS50b1N0cmluZygiYmluYXJ5Iik7CiAgICB9OwogIH0pKCk7CgogIChmdW5jdGlvbiBjaGVja0NoaWxkTm9kZVJlbW92ZSgpIHsKICAgIGlmICghaGFzRE9NKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBpZiAodHlwZW9mIEVsZW1lbnQucHJvdG90eXBlLnJlbW92ZSAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIEVsZW1lbnQucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgaWYgKHRoaXMucGFyZW50Tm9kZSkgewogICAgICAgIHRoaXMucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzKTsKICAgICAgfQogICAgfTsKICB9KSgpOwoKICAoZnVuY3Rpb24gY2hlY2tET01Ub2tlbkxpc3RBZGRSZW1vdmUoKSB7CiAgICBpZiAoIWhhc0RPTSB8fCBfaXNfbm9kZS5pc05vZGVKUykgewogICAgICByZXR1cm47CiAgICB9CgogICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwogICAgZGl2LmNsYXNzTGlzdC5hZGQoInRlc3RPbmUiLCAidGVzdFR3byIpOwoKICAgIGlmIChkaXYuY2xhc3NMaXN0LmNvbnRhaW5zKCJ0ZXN0T25lIikgPT09IHRydWUgJiYgZGl2LmNsYXNzTGlzdC5jb250YWlucygidGVzdFR3byIpID09PSB0cnVlKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICB2YXIgT3JpZ2luYWxET01Ub2tlbkxpc3RBZGQgPSBET01Ub2tlbkxpc3QucHJvdG90eXBlLmFkZDsKICAgIHZhciBPcmlnaW5hbERPTVRva2VuTGlzdFJlbW92ZSA9IERPTVRva2VuTGlzdC5wcm90b3R5cGUucmVtb3ZlOwoKICAgIERPTVRva2VuTGlzdC5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKCkgewogICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgdG9rZW5zID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykgewogICAgICAgIHRva2Vuc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgICAgfQoKICAgICAgZm9yICh2YXIgX2kgPSAwLCBfdG9rZW5zID0gdG9rZW5zOyBfaSA8IF90b2tlbnMubGVuZ3RoOyBfaSsrKSB7CiAgICAgICAgdmFyIHRva2VuID0gX3Rva2Vuc1tfaV07CiAgICAgICAgT3JpZ2luYWxET01Ub2tlbkxpc3RBZGQuY2FsbCh0aGlzLCB0b2tlbik7CiAgICAgIH0KICAgIH07CgogICAgRE9NVG9rZW5MaXN0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoKSB7CiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgdG9rZW5zID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7CiAgICAgICAgdG9rZW5zW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07CiAgICAgIH0KCiAgICAgIGZvciAodmFyIF9pMiA9IDAsIF90b2tlbnMyID0gdG9rZW5zOyBfaTIgPCBfdG9rZW5zMi5sZW5ndGg7IF9pMisrKSB7CiAgICAgICAgdmFyIHRva2VuID0gX3Rva2VuczJbX2kyXTsKICAgICAgICBPcmlnaW5hbERPTVRva2VuTGlzdFJlbW92ZS5jYWxsKHRoaXMsIHRva2VuKTsKICAgICAgfQogICAgfTsKICB9KSgpOwoKICAoZnVuY3Rpb24gY2hlY2tET01Ub2tlbkxpc3RUb2dnbGUoKSB7CiAgICBpZiAoIWhhc0RPTSB8fCBfaXNfbm9kZS5pc05vZGVKUykgewogICAgICByZXR1cm47CiAgICB9CgogICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpOwoKICAgIGlmIChkaXYuY2xhc3NMaXN0LnRvZ2dsZSgidGVzdCIsIDApID09PSBmYWxzZSkgewogICAgICByZXR1cm47CiAgICB9CgogICAgRE9NVG9rZW5MaXN0LnByb3RvdHlwZS50b2dnbGUgPSBmdW5jdGlvbiAodG9rZW4pIHsKICAgICAgdmFyIGZvcmNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyAhIWFyZ3VtZW50c1sxXSA6ICF0aGlzLmNvbnRhaW5zKHRva2VuKTsKICAgICAgcmV0dXJuIHRoaXNbZm9yY2UgPyAiYWRkIiA6ICJyZW1vdmUiXSh0b2tlbiksIGZvcmNlOwogICAgfTsKICB9KSgpOwoKICAoZnVuY3Rpb24gY2hlY2tXaW5kb3dIaXN0b3J5UHVzaFN0YXRlUmVwbGFjZVN0YXRlKCkgewogICAgaWYgKCFoYXNET00gfHwgIWlzSUUpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHZhciBPcmlnaW5hbFB1c2hTdGF0ZSA9IHdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZTsKICAgIHZhciBPcmlnaW5hbFJlcGxhY2VTdGF0ZSA9IHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZTsKCiAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUgPSBmdW5jdGlvbiAoc3RhdGUsIHRpdGxlLCB1cmwpIHsKICAgICAgdmFyIGFyZ3MgPSB1cmwgPT09IHVuZGVmaW5lZCA/IFtzdGF0ZSwgdGl0bGVdIDogW3N0YXRlLCB0aXRsZSwgdXJsXTsKICAgICAgT3JpZ2luYWxQdXNoU3RhdGUuYXBwbHkodGhpcywgYXJncyk7CiAgICB9OwoKICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSA9IGZ1bmN0aW9uIChzdGF0ZSwgdGl0bGUsIHVybCkgewogICAgICB2YXIgYXJncyA9IHVybCA9PT0gdW5kZWZpbmVkID8gW3N0YXRlLCB0aXRsZV0gOiBbc3RhdGUsIHRpdGxlLCB1cmxdOwogICAgICBPcmlnaW5hbFJlcGxhY2VTdGF0ZS5hcHBseSh0aGlzLCBhcmdzKTsKICAgIH07CiAgfSkoKTsKCiAgKGZ1bmN0aW9uIGNoZWNrU3RyaW5nU3RhcnRzV2l0aCgpIHsKICAgIGlmIChTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGgpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIF9fd19wZGZqc19yZXF1aXJlX18oNTMpOwogIH0pKCk7CgogIChmdW5jdGlvbiBjaGVja1N0cmluZ0VuZHNXaXRoKCkgewogICAgaWYgKFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIF9fd19wZGZqc19yZXF1aXJlX18oNjQpOwogIH0pKCk7CgogIChmdW5jdGlvbiBjaGVja1N0cmluZ0luY2x1ZGVzKCkgewogICAgaWYgKFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIF9fd19wZGZqc19yZXF1aXJlX18oNjYpOwogIH0pKCk7CgogIChmdW5jdGlvbiBjaGVja0FycmF5SW5jbHVkZXMoKSB7CiAgICBpZiAoQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBfX3dfcGRmanNfcmVxdWlyZV9fKDY4KTsKICB9KSgpOwoKICAoZnVuY3Rpb24gY2hlY2tBcnJheUZyb20oKSB7CiAgICBpZiAoQXJyYXkuZnJvbSkgewogICAgICByZXR1cm47CiAgICB9CgogICAgX193X3BkZmpzX3JlcXVpcmVfXyg3Nik7CiAgfSkoKTsKCiAgKGZ1bmN0aW9uIGNoZWNrT2JqZWN0QXNzaWduKCkgewogICAgaWYgKE9iamVjdC5hc3NpZ24pIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIF9fd19wZGZqc19yZXF1aXJlX18oOTgpOwogIH0pKCk7CgogIChmdW5jdGlvbiBjaGVja01hdGhMb2cyKCkgewogICAgaWYgKE1hdGgubG9nMikgewogICAgICByZXR1cm47CiAgICB9CgogICAgTWF0aC5sb2cyID0gX193X3BkZmpzX3JlcXVpcmVfXygxMDEpOwogIH0pKCk7CgogIChmdW5jdGlvbiBjaGVja051bWJlcklzTmFOKCkgewogICAgaWYgKE51bWJlci5pc05hTikgewogICAgICByZXR1cm47CiAgICB9CgogICAgTnVtYmVyLmlzTmFOID0gX193X3BkZmpzX3JlcXVpcmVfXygxMDMpOwogIH0pKCk7CgogIChmdW5jdGlvbiBjaGVja051bWJlcklzSW50ZWdlcigpIHsKICAgIGlmIChOdW1iZXIuaXNJbnRlZ2VyKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBOdW1iZXIuaXNJbnRlZ2VyID0gX193X3BkZmpzX3JlcXVpcmVfXygxMDUpOwogIH0pKCk7CgogIChmdW5jdGlvbiBjaGVja1R5cGVkQXJyYXlTbGljZSgpIHsKICAgIGlmIChVaW50OEFycmF5LnByb3RvdHlwZS5zbGljZSkgewogICAgICByZXR1cm47CiAgICB9CgogICAgX193X3BkZmpzX3JlcXVpcmVfXygxMDgpOwogIH0pKCk7CgogIChmdW5jdGlvbiBjaGVja1Byb21pc2UoKSB7CiAgICBpZiAoZ2xvYmFsVGhpcy5Qcm9taXNlICYmIGdsb2JhbFRoaXMuUHJvbWlzZS5hbGxTZXR0bGVkKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBnbG9iYWxUaGlzLlByb21pc2UgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDExMyk7CiAgfSkoKTsKCiAgKGZ1bmN0aW9uIGNoZWNrVVJMKCkgewogICAgZ2xvYmFsVGhpcy5VUkwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEzNik7CiAgfSkoKTsKCiAgKGZ1bmN0aW9uIGNoZWNrUmVhZGFibGVTdHJlYW0oKSB7CiAgICB2YXIgaXNSZWFkYWJsZVN0cmVhbVN1cHBvcnRlZCA9IGZhbHNlOwoKICAgIGlmICh0eXBlb2YgUmVhZGFibGVTdHJlYW0gIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgIHRyeSB7CiAgICAgICAgbmV3IFJlYWRhYmxlU3RyZWFtKHsKICAgICAgICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydChjb250cm9sbGVyKSB7CiAgICAgICAgICAgIGNvbnRyb2xsZXIuY2xvc2UoKTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBpc1JlYWRhYmxlU3RyZWFtU3VwcG9ydGVkID0gdHJ1ZTsKICAgICAgfSBjYXRjaCAoZSkge30KICAgIH0KCiAgICBpZiAoaXNSZWFkYWJsZVN0cmVhbVN1cHBvcnRlZCkgewogICAgICByZXR1cm47CiAgICB9CgogICAgZ2xvYmFsVGhpcy5SZWFkYWJsZVN0cmVhbSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTQzKS5SZWFkYWJsZVN0cmVhbTsKICB9KSgpOwoKICAoZnVuY3Rpb24gY2hlY2tNYXBFbnRyaWVzKCkgewogICAgaWYgKGdsb2JhbFRoaXMuTWFwICYmIGdsb2JhbFRoaXMuTWFwLnByb3RvdHlwZS5lbnRyaWVzKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBnbG9iYWxUaGlzLk1hcCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTQ0KTsKICB9KSgpOwoKICAoZnVuY3Rpb24gY2hlY2tTZXRFbnRyaWVzKCkgewogICAgaWYgKGdsb2JhbFRoaXMuU2V0ICYmIGdsb2JhbFRoaXMuU2V0LnByb3RvdHlwZS5lbnRyaWVzKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBnbG9iYWxUaGlzLlNldCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTUxKTsKICB9KSgpOwoKICAoZnVuY3Rpb24gY2hlY2tXZWFrTWFwKCkgewogICAgaWYgKGdsb2JhbFRoaXMuV2Vha01hcCkgewogICAgICByZXR1cm47CiAgICB9CgogICAgZ2xvYmFsVGhpcy5XZWFrTWFwID0gX193X3BkZmpzX3JlcXVpcmVfXygxNTMpOwogIH0pKCk7CgogIChmdW5jdGlvbiBjaGVja1dlYWtTZXQoKSB7CiAgICBpZiAoZ2xvYmFsVGhpcy5XZWFrU2V0KSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBnbG9iYWxUaGlzLldlYWtTZXQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE1OSk7CiAgfSkoKTsKCiAgKGZ1bmN0aW9uIGNoZWNrU3RyaW5nQ29kZVBvaW50QXQoKSB7CiAgICBpZiAoU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdCkgewogICAgICByZXR1cm47CiAgICB9CgogICAgX193X3BkZmpzX3JlcXVpcmVfXygxNjEpOwogIH0pKCk7CgogIChmdW5jdGlvbiBjaGVja1N0cmluZ0Zyb21Db2RlUG9pbnQoKSB7CiAgICBpZiAoU3RyaW5nLmZyb21Db2RlUG9pbnQpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIFN0cmluZy5mcm9tQ29kZVBvaW50ID0gX193X3BkZmpzX3JlcXVpcmVfXygxNjMpOwogIH0pKCk7CgogIChmdW5jdGlvbiBjaGVja1N5bWJvbCgpIHsKICAgIGlmIChnbG9iYWxUaGlzLlN5bWJvbCkgewogICAgICByZXR1cm47CiAgICB9CgogICAgX193X3BkZmpzX3JlcXVpcmVfXygxNjUpOwogIH0pKCk7CgogIChmdW5jdGlvbiBjaGVja1N0cmluZ1BhZFN0YXJ0KCkgewogICAgaWYgKFN0cmluZy5wcm90b3R5cGUucGFkU3RhcnQpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIF9fd19wZGZqc19yZXF1aXJlX18oMTg4KTsKICB9KSgpOwoKICAoZnVuY3Rpb24gY2hlY2tTdHJpbmdQYWRFbmQoKSB7CiAgICBpZiAoU3RyaW5nLnByb3RvdHlwZS5wYWRFbmQpIHsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIF9fd19wZGZqc19yZXF1aXJlX18oMTkzKTsKICB9KSgpOwoKICAoZnVuY3Rpb24gY2hlY2tPYmplY3RWYWx1ZXMoKSB7CiAgICBpZiAoT2JqZWN0LnZhbHVlcykgewogICAgICByZXR1cm47CiAgICB9CgogICAgT2JqZWN0LnZhbHVlcyA9IF9fd19wZGZqc19yZXF1aXJlX18oMTk1KTsKICB9KSgpOwp9CgovKioqLyB9KSwKLyogNyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7CgoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmlzTm9kZUpTID0gdm9pZCAwOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9Cgp2YXIgaXNOb2RlSlMgPSAodHlwZW9mIHByb2Nlc3MgPT09ICJ1bmRlZmluZWQiID8gInVuZGVmaW5lZCIgOiBfdHlwZW9mKHByb2Nlc3MpKSA9PT0gIm9iamVjdCIgJiYgcHJvY2VzcyArICIiID09PSAiW29iamVjdCBwcm9jZXNzXSIgJiYgIXByb2Nlc3MudmVyc2lvbnMubncgJiYgIXByb2Nlc3MudmVyc2lvbnMuZWxlY3Ryb247CmV4cG9ydHMuaXNOb2RlSlMgPSBpc05vZGVKUzsKCi8qKiovIH0pLAovKiA4ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCl9fd19wZGZqc19yZXF1aXJlX18oOSk7Cm1vZHVsZS5leHBvcnRzID0gX193X3BkZmpzX3JlcXVpcmVfXygxMSk7CgovKioqLyB9KSwKLyogOSAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgJCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTApOwp2YXIgZ2xvYmFsID0gX193X3BkZmpzX3JlcXVpcmVfXygxMSk7CiQoeyBnbG9iYWw6IHRydWUgfSwgeyBnbG9iYWxUaGlzOiBnbG9iYWwgfSk7CgovKioqLyB9KSwKLyogMTAgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIGdsb2JhbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTEpOwp2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gX193X3BkZmpzX3JlcXVpcmVfXygxMikuZjsKdmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IF9fd19wZGZqc19yZXF1aXJlX18oMjYpOwp2YXIgcmVkZWZpbmUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI5KTsKdmFyIHNldEdsb2JhbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMzApOwp2YXIgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyA9IF9fd19wZGZqc19yZXF1aXJlX18oNDApOwp2YXIgaXNGb3JjZWQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDUyKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7CiB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7CiB2YXIgR0xPQkFMID0gb3B0aW9ucy5nbG9iYWw7CiB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0OwogdmFyIEZPUkNFRCwgdGFyZ2V0LCBrZXksIHRhcmdldFByb3BlcnR5LCBzb3VyY2VQcm9wZXJ0eSwgZGVzY3JpcHRvcjsKIGlmIChHTE9CQUwpIHsKICB0YXJnZXQgPSBnbG9iYWw7CiB9IGVsc2UgaWYgKFNUQVRJQykgewogIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IHNldEdsb2JhbChUQVJHRVQsIHt9KTsKIH0gZWxzZSB7CiAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7CiB9CiBpZiAodGFyZ2V0KQogIGZvciAoa2V5IGluIHNvdXJjZSkgewogICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldOwogICBpZiAob3B0aW9ucy5ub1RhcmdldEdldCkgewogICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7CiAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTsKICAgfSBlbHNlCiAgICB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldOwogICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpOwogICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7CiAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpCiAgICAgY29udGludWU7CiAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7CiAgIH0KICAgaWYgKG9wdGlvbnMuc2hhbSB8fCB0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSB7CiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoc291cmNlUHJvcGVydHksICdzaGFtJywgdHJ1ZSk7CiAgIH0KICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTsKICB9Cn07CgovKioqLyB9KSwKLyogMTEgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKdmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7CiByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0Owp9Owptb2R1bGUuZXhwb3J0cyA9IGNoZWNrKHR5cGVvZiBnbG9iYWxUaGlzID09ICdvYmplY3QnICYmIGdsb2JhbFRoaXMpIHx8IGNoZWNrKHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93KSB8fCBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fCBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTsKCi8qKiovIH0pLAovKiAxMiAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgREVTQ1JJUFRPUlMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEzKTsKdmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gX193X3BkZmpzX3JlcXVpcmVfXygxNSk7CnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE2KTsKdmFyIHRvSW5kZXhlZE9iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTcpOwp2YXIgdG9QcmltaXRpdmUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIxKTsKdmFyIGhhcyA9IF9fd19wZGZqc19yZXF1aXJlX18oMjMpOwp2YXIgSUU4X0RPTV9ERUZJTkUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI0KTsKdmFyIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7CmV4cG9ydHMuZiA9IERFU0NSSVBUT1JTID8gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHsKIE8gPSB0b0luZGV4ZWRPYmplY3QoTyk7CiBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7CiBpZiAoSUU4X0RPTV9ERUZJTkUpCiAgdHJ5IHsKICAgcmV0dXJuIG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKTsKICB9IGNhdGNoIChlcnJvcikgewogIH0KIGlmIChoYXMoTywgUCkpCiAgcmV0dXJuIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcighcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZi5jYWxsKE8sIFApLCBPW1BdKTsKfTsKCi8qKiovIH0pLAovKiAxMyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgZmFpbHMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE0KTsKbW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkgewogcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgMSwgewogIGdldDogZnVuY3Rpb24gKCkgewogICByZXR1cm4gNzsKICB9CiB9KVsxXSAhPSA3Owp9KTsKCi8qKiovIH0pLAovKiAxNCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7CiB0cnkgewogIHJldHVybiAhIWV4ZWMoKTsKIH0gY2F0Y2ggKGVycm9yKSB7CiAgcmV0dXJuIHRydWU7CiB9Cn07CgovKioqLyB9KSwKLyogMTUgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKdmFyIG5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7CnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOwp2YXIgTkFTSE9STl9CVUcgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgIW5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoeyAxOiAyIH0sIDEpOwpleHBvcnRzLmYgPSBOQVNIT1JOX0JVRyA/IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKFYpIHsKIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpOwogcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7Cn0gOiBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZTsKCi8qKiovIH0pLAovKiAxNiAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7CiByZXR1cm4gewogIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksCiAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLAogIHdyaXRhYmxlOiAhKGJpdG1hcCAmIDQpLAogIHZhbHVlOiB2YWx1ZQogfTsKfTsKCi8qKiovIH0pLAovKiAxNyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgSW5kZXhlZE9iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTgpOwp2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMjApOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkgewogcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpOwp9OwoKLyoqKi8gfSksCi8qIDE4ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBmYWlscyA9IF9fd19wZGZqc19yZXF1aXJlX18oMTQpOwp2YXIgY2xhc3NvZiA9IF9fd19wZGZqc19yZXF1aXJlX18oMTkpOwp2YXIgc3BsaXQgPSAnJy5zcGxpdDsKbW9kdWxlLmV4cG9ydHMgPSBmYWlscyhmdW5jdGlvbiAoKSB7CiByZXR1cm4gIU9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApOwp9KSA/IGZ1bmN0aW9uIChpdCkgewogcmV0dXJuIGNsYXNzb2YoaXQpID09ICdTdHJpbmcnID8gc3BsaXQuY2FsbChpdCwgJycpIDogT2JqZWN0KGl0KTsKfSA6IE9iamVjdDsKCi8qKiovIH0pLAovKiAxOSAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7Cgp2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZzsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHsKIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7Cn07CgovKioqLyB9KSwKLyogMjAgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHsKIGlmIChpdCA9PSB1bmRlZmluZWQpCiAgdGhyb3cgVHlwZUVycm9yKCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAiICsgaXQpOwogcmV0dXJuIGl0Owp9OwoKLyoqKi8gfSksCi8qIDIxICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBpc09iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oMjIpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgUFJFRkVSUkVEX1NUUklORykgewogaWYgKCFpc09iamVjdChpbnB1dCkpCiAgcmV0dXJuIGlucHV0OwogdmFyIGZuLCB2YWw7CiBpZiAoUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkKICByZXR1cm4gdmFsOwogaWYgKHR5cGVvZiAoZm4gPSBpbnB1dC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpCiAgcmV0dXJuIHZhbDsKIGlmICghUFJFRkVSUkVEX1NUUklORyAmJiB0eXBlb2YgKGZuID0gaW5wdXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaW5wdXQpKSkKICByZXR1cm4gdmFsOwogdGhyb3cgVHlwZUVycm9yKCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWUiKTsKfTsKCi8qKiovIH0pLAovKiAyMiAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7Cgptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkgewogcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJzsKfTsKCi8qKiovIH0pLAovKiAyMyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7Cgp2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkgewogcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7Cn07CgovKioqLyB9KSwKLyogMjQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIERFU0NSSVBUT1JTID0gX193X3BkZmpzX3JlcXVpcmVfXygxMyk7CnZhciBmYWlscyA9IF9fd19wZGZqc19yZXF1aXJlX18oMTQpOwp2YXIgY3JlYXRlRWxlbWVudCA9IF9fd19wZGZqc19yZXF1aXJlX18oMjUpOwptb2R1bGUuZXhwb3J0cyA9ICFERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkgewogcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7CiAgZ2V0OiBmdW5jdGlvbiAoKSB7CiAgIHJldHVybiA3OwogIH0KIH0pLmEgIT0gNzsKfSk7CgovKioqLyB9KSwKLyogMjUgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIGdsb2JhbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTEpOwp2YXIgaXNPYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIyKTsKdmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50Owp2YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkgewogcmV0dXJuIEVYSVNUUyA/IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoaXQpIDoge307Cn07CgovKioqLyB9KSwKLyogMjYgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIERFU0NSSVBUT1JTID0gX193X3BkZmpzX3JlcXVpcmVfXygxMyk7CnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMjcpOwp2YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gX193X3BkZmpzX3JlcXVpcmVfXygxNik7Cm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7CiByZXR1cm4gZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIGtleSwgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7Cn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7CiBvYmplY3Rba2V5XSA9IHZhbHVlOwogcmV0dXJuIG9iamVjdDsKfTsKCi8qKiovIH0pLAovKiAyNyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgREVTQ1JJUFRPUlMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEzKTsKdmFyIElFOF9ET01fREVGSU5FID0gX193X3BkZmpzX3JlcXVpcmVfXygyNCk7CnZhciBhbk9iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oMjgpOwp2YXIgdG9QcmltaXRpdmUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIxKTsKdmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5OwpleHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZURlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykgewogYW5PYmplY3QoTyk7CiBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7CiBhbk9iamVjdChBdHRyaWJ1dGVzKTsKIGlmIChJRThfRE9NX0RFRklORSkKICB0cnkgewogICByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7CiAgfSBjYXRjaCAoZXJyb3IpIHsKICB9CiBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKQogIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQnKTsKIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpCiAgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7CiByZXR1cm4gTzsKfTsKCi8qKiovIH0pLAovKiAyOCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgaXNPYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIyKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHsKIGlmICghaXNPYmplY3QoaXQpKSB7CiAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTsKIH0KIHJldHVybiBpdDsKfTsKCi8qKiovIH0pLAovKiAyOSAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgZ2xvYmFsID0gX193X3BkZmpzX3JlcXVpcmVfXygxMSk7CnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI2KTsKdmFyIGhhcyA9IF9fd19wZGZqc19yZXF1aXJlX18oMjMpOwp2YXIgc2V0R2xvYmFsID0gX193X3BkZmpzX3JlcXVpcmVfXygzMCk7CnZhciBpbnNwZWN0U291cmNlID0gX193X3BkZmpzX3JlcXVpcmVfXygzMSk7CnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gX193X3BkZmpzX3JlcXVpcmVfXygzMyk7CnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7CnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTsKdmFyIFRFTVBMQVRFID0gU3RyaW5nKFN0cmluZykuc3BsaXQoJ1N0cmluZycpOwoobW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWx1ZSwgb3B0aW9ucykgewogdmFyIHVuc2FmZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMudW5zYWZlIDogZmFsc2U7CiB2YXIgc2ltcGxlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5lbnVtZXJhYmxlIDogZmFsc2U7CiB2YXIgbm9UYXJnZXRHZXQgPSBvcHRpb25zID8gISFvcHRpb25zLm5vVGFyZ2V0R2V0IDogZmFsc2U7CiBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHsKICBpZiAodHlwZW9mIGtleSA9PSAnc3RyaW5nJyAmJiAhaGFzKHZhbHVlLCAnbmFtZScpKQogICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodmFsdWUsICduYW1lJywga2V5KTsKICBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh2YWx1ZSkuc291cmNlID0gVEVNUExBVEUuam9pbih0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8ga2V5IDogJycpOwogfQogaWYgKE8gPT09IGdsb2JhbCkgewogIGlmIChzaW1wbGUpCiAgIE9ba2V5XSA9IHZhbHVlOwogIGVsc2UKICAgc2V0R2xvYmFsKGtleSwgdmFsdWUpOwogIHJldHVybjsKIH0gZWxzZSBpZiAoIXVuc2FmZSkgewogIGRlbGV0ZSBPW2tleV07CiB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHsKICBzaW1wbGUgPSB0cnVlOwogfQogaWYgKHNpbXBsZSkKICBPW2tleV0gPSB2YWx1ZTsKIGVsc2UKICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoTywga2V5LCB2YWx1ZSk7Cn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7CiByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBpbnNwZWN0U291cmNlKHRoaXMpOwp9KTsKCi8qKiovIH0pLAovKiAzMCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgZ2xvYmFsID0gX193X3BkZmpzX3JlcXVpcmVfXygxMSk7CnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI2KTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkgewogdHJ5IHsKICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoZ2xvYmFsLCBrZXksIHZhbHVlKTsKIH0gY2F0Y2ggKGVycm9yKSB7CiAgZ2xvYmFsW2tleV0gPSB2YWx1ZTsKIH0KIHJldHVybiB2YWx1ZTsKfTsKCi8qKiovIH0pLAovKiAzMSAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgc3RvcmUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDMyKTsKdmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi50b1N0cmluZzsKaWYgKHR5cGVvZiBzdG9yZS5pbnNwZWN0U291cmNlICE9ICdmdW5jdGlvbicpIHsKIHN0b3JlLmluc3BlY3RTb3VyY2UgPSBmdW5jdGlvbiAoaXQpIHsKICByZXR1cm4gZnVuY3Rpb25Ub1N0cmluZy5jYWxsKGl0KTsKIH07Cn0KbW9kdWxlLmV4cG9ydHMgPSBzdG9yZS5pbnNwZWN0U291cmNlOwoKLyoqKi8gfSksCi8qIDMyICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBnbG9iYWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDExKTsKdmFyIHNldEdsb2JhbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMzApOwp2YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7CnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTsKbW9kdWxlLmV4cG9ydHMgPSBzdG9yZTsKCi8qKiovIH0pLAovKiAzMyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgTkFUSVZFX1dFQUtfTUFQID0gX193X3BkZmpzX3JlcXVpcmVfXygzNCk7CnZhciBnbG9iYWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDExKTsKdmFyIGlzT2JqZWN0ID0gX193X3BkZmpzX3JlcXVpcmVfXygyMik7CnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI2KTsKdmFyIG9iamVjdEhhcyA9IF9fd19wZGZqc19yZXF1aXJlX18oMjMpOwp2YXIgc2hhcmVkS2V5ID0gX193X3BkZmpzX3JlcXVpcmVfXygzNSk7CnZhciBoaWRkZW5LZXlzID0gX193X3BkZmpzX3JlcXVpcmVfXygzOSk7CnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7CnZhciBzZXQsIGdldCwgaGFzOwp2YXIgZW5mb3JjZSA9IGZ1bmN0aW9uIChpdCkgewogcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7Cn07CnZhciBnZXR0ZXJGb3IgPSBmdW5jdGlvbiAoVFlQRSkgewogcmV0dXJuIGZ1bmN0aW9uIChpdCkgewogIHZhciBzdGF0ZTsKICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7CiAgIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQnKTsKICB9CiAgcmV0dXJuIHN0YXRlOwogfTsKfTsKaWYgKE5BVElWRV9XRUFLX01BUCkgewogdmFyIHN0b3JlID0gbmV3IFdlYWtNYXAoKTsKIHZhciB3bWdldCA9IHN0b3JlLmdldDsKIHZhciB3bWhhcyA9IHN0b3JlLmhhczsKIHZhciB3bXNldCA9IHN0b3JlLnNldDsKIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHsKICB3bXNldC5jYWxsKHN0b3JlLCBpdCwgbWV0YWRhdGEpOwogIHJldHVybiBtZXRhZGF0YTsKIH07CiBnZXQgPSBmdW5jdGlvbiAoaXQpIHsKICByZXR1cm4gd21nZXQuY2FsbChzdG9yZSwgaXQpIHx8IHt9OwogfTsKIGhhcyA9IGZ1bmN0aW9uIChpdCkgewogIHJldHVybiB3bWhhcy5jYWxsKHN0b3JlLCBpdCk7CiB9Owp9IGVsc2UgewogdmFyIFNUQVRFID0gc2hhcmVkS2V5KCdzdGF0ZScpOwogaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlOwogc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkgewogIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShpdCwgU1RBVEUsIG1ldGFkYXRhKTsKICByZXR1cm4gbWV0YWRhdGE7CiB9OwogZ2V0ID0gZnVuY3Rpb24gKGl0KSB7CiAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307CiB9OwogaGFzID0gZnVuY3Rpb24gKGl0KSB7CiAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpOwogfTsKfQptb2R1bGUuZXhwb3J0cyA9IHsKIHNldDogc2V0LAogZ2V0OiBnZXQsCiBoYXM6IGhhcywKIGVuZm9yY2U6IGVuZm9yY2UsCiBnZXR0ZXJGb3I6IGdldHRlckZvcgp9OwoKLyoqKi8gfSksCi8qIDM0ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBnbG9iYWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDExKTsKdmFyIGluc3BlY3RTb3VyY2UgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDMxKTsKdmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDsKbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoaW5zcGVjdFNvdXJjZShXZWFrTWFwKSk7CgovKioqLyB9KSwKLyogMzUgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIHNoYXJlZCA9IF9fd19wZGZqc19yZXF1aXJlX18oMzYpOwp2YXIgdWlkID0gX193X3BkZmpzX3JlcXVpcmVfXygzOCk7CnZhciBrZXlzID0gc2hhcmVkKCdrZXlzJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkgewogcmV0dXJuIGtleXNba2V5XSB8fCAoa2V5c1trZXldID0gdWlkKGtleSkpOwp9OwoKLyoqKi8gfSksCi8qIDM2ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBJU19QVVJFID0gX193X3BkZmpzX3JlcXVpcmVfXygzNyk7CnZhciBzdG9yZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMzIpOwoobW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkgewogcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7Cn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHsKIHZlcnNpb246ICczLjYuNScsCiBtb2RlOiBJU19QVVJFID8gJ3B1cmUnIDogJ2dsb2JhbCcsCiBjb3B5cmlnaHQ6ICfCqSAyMDIwIERlbmlzIFB1c2hrYXJldiAoemxvaXJvY2sucnUpJwp9KTsKCi8qKiovIH0pLAovKiAzNyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7Cgptb2R1bGUuZXhwb3J0cyA9IGZhbHNlOwoKLyoqKi8gfSksCi8qIDM4ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCnZhciBpZCA9IDA7CnZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7CiByZXR1cm4gJ1N5bWJvbCgnICsgU3RyaW5nKGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXkpICsgJylfJyArICgrK2lkICsgcG9zdGZpeCkudG9TdHJpbmcoMzYpOwp9OwoKLyoqKi8gfSksCi8qIDM5ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCm1vZHVsZS5leHBvcnRzID0ge307CgovKioqLyB9KSwKLyogNDAgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIGhhcyA9IF9fd19wZGZqc19yZXF1aXJlX18oMjMpOwp2YXIgb3duS2V5cyA9IF9fd19wZGZqc19yZXF1aXJlX18oNDEpOwp2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlID0gX193X3BkZmpzX3JlcXVpcmVfXygxMik7CnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMjcpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkgewogdmFyIGtleXMgPSBvd25LZXlzKHNvdXJjZSk7CiB2YXIgZGVmaW5lUHJvcGVydHkgPSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mOwogdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mOwogZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7CiAgdmFyIGtleSA9IGtleXNbaV07CiAgaWYgKCFoYXModGFyZ2V0LCBrZXkpKQogICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7CiB9Cn07CgovKioqLyB9KSwKLyogNDEgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIGdldEJ1aWx0SW4gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQyKTsKdmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQ0KTsKdmFyIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSA9IF9fd19wZGZqc19yZXF1aXJlX18oNTEpOwp2YXIgYW5PYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI4KTsKbW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ293bktleXMnKSB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7CiB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZihhbk9iamVjdChpdCkpOwogdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mOwogcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhpdCkpIDoga2V5czsKfTsKCi8qKiovIH0pLAovKiA0MiAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgcGF0aCA9IF9fd19wZGZqc19yZXF1aXJlX18oNDMpOwp2YXIgZ2xvYmFsID0gX193X3BkZmpzX3JlcXVpcmVfXygxMSk7CnZhciBhRnVuY3Rpb24gPSBmdW5jdGlvbiAodmFyaWFibGUpIHsKIHJldHVybiB0eXBlb2YgdmFyaWFibGUgPT0gJ2Z1bmN0aW9uJyA/IHZhcmlhYmxlIDogdW5kZWZpbmVkOwp9Owptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lc3BhY2UsIG1ldGhvZCkgewogcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gYUZ1bmN0aW9uKHBhdGhbbmFtZXNwYWNlXSkgfHwgYUZ1bmN0aW9uKGdsb2JhbFtuYW1lc3BhY2VdKSA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdOwp9OwoKLyoqKi8gfSksCi8qIDQzICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBnbG9iYWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDExKTsKbW9kdWxlLmV4cG9ydHMgPSBnbG9iYWw7CgovKioqLyB9KSwKLyogNDQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIGludGVybmFsT2JqZWN0S2V5cyA9IF9fd19wZGZqc19yZXF1aXJlX18oNDUpOwp2YXIgZW51bUJ1Z0tleXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDUwKTsKdmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTsKZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7CiByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpOwp9OwoKLyoqKi8gfSksCi8qIDQ1ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBoYXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIzKTsKdmFyIHRvSW5kZXhlZE9iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTcpOwp2YXIgaW5kZXhPZiA9IF9fd19wZGZqc19yZXF1aXJlX18oNDYpLmluZGV4T2Y7CnZhciBoaWRkZW5LZXlzID0gX193X3BkZmpzX3JlcXVpcmVfXygzOSk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHsKIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7CiB2YXIgaSA9IDA7CiB2YXIgcmVzdWx0ID0gW107CiB2YXIga2V5OwogZm9yIChrZXkgaW4gTykKICAhaGFzKGhpZGRlbktleXMsIGtleSkgJiYgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTsKIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKQogIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHsKICAgfmluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7CiAgfQogcmV0dXJuIHJlc3VsdDsKfTsKCi8qKiovIH0pLAovKiA0NiAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgdG9JbmRleGVkT2JqZWN0ID0gX193X3BkZmpzX3JlcXVpcmVfXygxNyk7CnZhciB0b0xlbmd0aCA9IF9fd19wZGZqc19yZXF1aXJlX18oNDcpOwp2YXIgdG9BYnNvbHV0ZUluZGV4ID0gX193X3BkZmpzX3JlcXVpcmVfXyg0OSk7CnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHsKIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHsKICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCgkdGhpcyk7CiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTsKICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpOwogIHZhciB2YWx1ZTsKICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpCiAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgewogICAgdmFsdWUgPSBPW2luZGV4KytdOwogICAgaWYgKHZhbHVlICE9IHZhbHVlKQogICAgIHJldHVybiB0cnVlOwogICB9CiAgZWxzZQogICBmb3IgKDsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHsKICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKQogICAgIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwOwogICB9CiAgcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTsKIH07Cn07Cm1vZHVsZS5leHBvcnRzID0gewogaW5jbHVkZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSwKIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSkKfTsKCi8qKiovIH0pLAovKiA0NyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgdG9JbnRlZ2VyID0gX193X3BkZmpzX3JlcXVpcmVfXyg0OCk7CnZhciBtaW4gPSBNYXRoLm1pbjsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHsKIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyKGFyZ3VtZW50KSwgMHgxRkZGRkZGRkZGRkZGRikgOiAwOwp9OwoKLyoqKi8gfSksCi8qIDQ4ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCnZhciBjZWlsID0gTWF0aC5jZWlsOwp2YXIgZmxvb3IgPSBNYXRoLmZsb29yOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkgewogcmV0dXJuIGlzTmFOKGFyZ3VtZW50ID0gK2FyZ3VtZW50KSA/IDAgOiAoYXJndW1lbnQgPiAwID8gZmxvb3IgOiBjZWlsKShhcmd1bWVudCk7Cn07CgovKioqLyB9KSwKLyogNDkgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIHRvSW50ZWdlciA9IF9fd19wZGZqc19yZXF1aXJlX18oNDgpOwp2YXIgbWF4ID0gTWF0aC5tYXg7CnZhciBtaW4gPSBNYXRoLm1pbjsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkgewogdmFyIGludGVnZXIgPSB0b0ludGVnZXIoaW5kZXgpOwogcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluKGludGVnZXIsIGxlbmd0aCk7Cn07CgovKioqLyB9KSwKLyogNTAgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKbW9kdWxlLmV4cG9ydHMgPSBbCiAnY29uc3RydWN0b3InLAogJ2hhc093blByb3BlcnR5JywKICdpc1Byb3RvdHlwZU9mJywKICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsCiAndG9Mb2NhbGVTdHJpbmcnLAogJ3RvU3RyaW5nJywKICd2YWx1ZU9mJwpdOwoKLyoqKi8gfSksCi8qIDUxICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7CgovKioqLyB9KSwKLyogNTIgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIGZhaWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygxNCk7CnZhciByZXBsYWNlbWVudCA9IC8jfFwucHJvdG90eXBlXC4vOwp2YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7CiB2YXIgdmFsdWUgPSBkYXRhW25vcm1hbGl6ZShmZWF0dXJlKV07CiByZXR1cm4gdmFsdWUgPT0gUE9MWUZJTEwgPyB0cnVlIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2UgOiB0eXBlb2YgZGV0ZWN0aW9uID09ICdmdW5jdGlvbicgPyBmYWlscyhkZXRlY3Rpb24pIDogISFkZXRlY3Rpb247Cn07CnZhciBub3JtYWxpemUgPSBpc0ZvcmNlZC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7CiByZXR1cm4gU3RyaW5nKHN0cmluZykucmVwbGFjZShyZXBsYWNlbWVudCwgJy4nKS50b0xvd2VyQ2FzZSgpOwp9Owp2YXIgZGF0YSA9IGlzRm9yY2VkLmRhdGEgPSB7fTsKdmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJzsKdmFyIFBPTFlGSUxMID0gaXNGb3JjZWQuUE9MWUZJTEwgPSAnUCc7Cm1vZHVsZS5leHBvcnRzID0gaXNGb3JjZWQ7CgovKioqLyB9KSwKLyogNTMgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKX193X3BkZmpzX3JlcXVpcmVfXyg1NCk7CnZhciBlbnRyeVVuYmluZCA9IF9fd19wZGZqc19yZXF1aXJlX18oNjEpOwptb2R1bGUuZXhwb3J0cyA9IGVudHJ5VW5iaW5kKCdTdHJpbmcnLCAnc3RhcnRzV2l0aCcpOwoKLyoqKi8gfSksCi8qIDU0ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCnZhciAkID0gX193X3BkZmpzX3JlcXVpcmVfXygxMCk7CnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEyKS5mOwp2YXIgdG9MZW5ndGggPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQ3KTsKdmFyIG5vdEFSZWdFeHAgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDU1KTsKdmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIwKTsKdmFyIGNvcnJlY3RJc1JlZ0V4cExvZ2ljID0gX193X3BkZmpzX3JlcXVpcmVfXyg2MCk7CnZhciBJU19QVVJFID0gX193X3BkZmpzX3JlcXVpcmVfXygzNyk7CnZhciBuYXRpdmVTdGFydHNXaXRoID0gJycuc3RhcnRzV2l0aDsKdmFyIG1pbiA9IE1hdGgubWluOwp2YXIgQ09SUkVDVF9JU19SRUdFWFBfTE9HSUMgPSBjb3JyZWN0SXNSZWdFeHBMb2dpYygnc3RhcnRzV2l0aCcpOwp2YXIgTUROX1BPTFlGSUxMX0JVRyA9ICFJU19QVVJFICYmICFDT1JSRUNUX0lTX1JFR0VYUF9MT0dJQyAmJiAhIWZ1bmN0aW9uICgpIHsKIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFN0cmluZy5wcm90b3R5cGUsICdzdGFydHNXaXRoJyk7CiByZXR1cm4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci53cml0YWJsZTsKfSgpOwokKHsKIHRhcmdldDogJ1N0cmluZycsCiBwcm90bzogdHJ1ZSwKIGZvcmNlZDogIU1ETl9QT0xZRklMTF9CVUcgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDCn0sIHsKIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nKSB7CiAgdmFyIHRoYXQgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7CiAgbm90QVJlZ0V4cChzZWFyY2hTdHJpbmcpOwogIHZhciBpbmRleCA9IHRvTGVuZ3RoKG1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTsKICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7CiAgcmV0dXJuIG5hdGl2ZVN0YXJ0c1dpdGggPyBuYXRpdmVTdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleCkgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7CiB9Cn0pOwoKLyoqKi8gfSksCi8qIDU1ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBpc1JlZ0V4cCA9IF9fd19wZGZqc19yZXF1aXJlX18oNTYpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkgewogaWYgKGlzUmVnRXhwKGl0KSkgewogIHRocm93IFR5cGVFcnJvcigiVGhlIG1ldGhvZCBkb2Vzbid0IGFjY2VwdCByZWd1bGFyIGV4cHJlc3Npb25zIik7CiB9CiByZXR1cm4gaXQ7Cn07CgovKioqLyB9KSwKLyogNTYgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIGlzT2JqZWN0ID0gX193X3BkZmpzX3JlcXVpcmVfXygyMik7CnZhciBjbGFzc29mID0gX193X3BkZmpzX3JlcXVpcmVfXygxOSk7CnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDU3KTsKdmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkgewogdmFyIGlzUmVnRXhwOwogcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNsYXNzb2YoaXQpID09ICdSZWdFeHAnKTsKfTsKCi8qKiovIH0pLAovKiA1NyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgZ2xvYmFsID0gX193X3BkZmpzX3JlcXVpcmVfXygxMSk7CnZhciBzaGFyZWQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDM2KTsKdmFyIGhhcyA9IF9fd19wZGZqc19yZXF1aXJlX18oMjMpOwp2YXIgdWlkID0gX193X3BkZmpzX3JlcXVpcmVfXygzOCk7CnZhciBOQVRJVkVfU1lNQk9MID0gX193X3BkZmpzX3JlcXVpcmVfXyg1OCk7CnZhciBVU0VfU1lNQk9MX0FTX1VJRCA9IF9fd19wZGZqc19yZXF1aXJlX18oNTkpOwp2YXIgV2VsbEtub3duU3ltYm9sc1N0b3JlID0gc2hhcmVkKCd3a3MnKTsKdmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7CnZhciBjcmVhdGVXZWxsS25vd25TeW1ib2wgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IFN5bWJvbCA6IFN5bWJvbCAmJiBTeW1ib2wud2l0aG91dFNldHRlciB8fCB1aWQ7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHsKIGlmICghaGFzKFdlbGxLbm93blN5bWJvbHNTdG9yZSwgbmFtZSkpIHsKICBpZiAoTkFUSVZFX1NZTUJPTCAmJiBoYXMoU3ltYm9sLCBuYW1lKSkKICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gU3ltYm9sW25hbWVdOwogIGVsc2UKICAgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gY3JlYXRlV2VsbEtub3duU3ltYm9sKCdTeW1ib2wuJyArIG5hbWUpOwogfQogcmV0dXJuIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXTsKfTsKCi8qKiovIH0pLAovKiA1OCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgZmFpbHMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE0KTsKbW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHsKIHJldHVybiAhU3RyaW5nKFN5bWJvbCgpKTsKfSk7CgovKioqLyB9KSwKLyogNTkgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIE5BVElWRV9TWU1CT0wgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDU4KTsKbW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MICYmICFTeW1ib2wuc2hhbSAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09ICdzeW1ib2wnOwoKLyoqKi8gfSksCi8qIDYwICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDU3KTsKdmFyIE1BVENIID0gd2VsbEtub3duU3ltYm9sKCdtYXRjaCcpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSkgewogdmFyIHJlZ2V4cCA9IC8uLzsKIHRyeSB7CiAgJy8uLydbTUVUSE9EX05BTUVdKHJlZ2V4cCk7CiB9IGNhdGNoIChlKSB7CiAgdHJ5IHsKICAgcmVnZXhwW01BVENIXSA9IGZhbHNlOwogICByZXR1cm4gJy8uLydbTUVUSE9EX05BTUVdKHJlZ2V4cCk7CiAgfSBjYXRjaCAoZikgewogIH0KIH0KIHJldHVybiBmYWxzZTsKfTsKCi8qKiovIH0pLAovKiA2MSAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgZ2xvYmFsID0gX193X3BkZmpzX3JlcXVpcmVfXygxMSk7CnZhciBiaW5kID0gX193X3BkZmpzX3JlcXVpcmVfXyg2Mik7CnZhciBjYWxsID0gRnVuY3Rpb24uY2FsbDsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1IsIE1FVEhPRCwgbGVuZ3RoKSB7CiByZXR1cm4gYmluZChjYWxsLCBnbG9iYWxbQ09OU1RSVUNUT1JdLnByb3RvdHlwZVtNRVRIT0RdLCBsZW5ndGgpOwp9OwoKLyoqKi8gfSksCi8qIDYyICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBhRnVuY3Rpb24gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDYzKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIHRoYXQsIGxlbmd0aCkgewogYUZ1bmN0aW9uKGZuKTsKIGlmICh0aGF0ID09PSB1bmRlZmluZWQpCiAgcmV0dXJuIGZuOwogc3dpdGNoIChsZW5ndGgpIHsKIGNhc2UgMDoKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICByZXR1cm4gZm4uY2FsbCh0aGF0KTsKICB9OwogY2FzZSAxOgogIHJldHVybiBmdW5jdGlvbiAoYSkgewogICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTsKICB9OwogY2FzZSAyOgogIHJldHVybiBmdW5jdGlvbiAoYSwgYikgewogICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTsKICB9OwogY2FzZSAzOgogIHJldHVybiBmdW5jdGlvbiAoYSwgYiwgYykgewogICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTsKICB9OwogfQogcmV0dXJuIGZ1bmN0aW9uICgpIHsKICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTsKIH07Cn07CgovKioqLyB9KSwKLyogNjMgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHsKIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgewogIHRocm93IFR5cGVFcnJvcihTdHJpbmcoaXQpICsgJyBpcyBub3QgYSBmdW5jdGlvbicpOwogfQogcmV0dXJuIGl0Owp9OwoKLyoqKi8gfSksCi8qIDY0ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCl9fd19wZGZqc19yZXF1aXJlX18oNjUpOwp2YXIgZW50cnlVbmJpbmQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDYxKTsKbW9kdWxlLmV4cG9ydHMgPSBlbnRyeVVuYmluZCgnU3RyaW5nJywgJ2VuZHNXaXRoJyk7CgovKioqLyB9KSwKLyogNjUgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKdmFyICQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwKTsKdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IF9fd19wZGZqc19yZXF1aXJlX18oMTIpLmY7CnZhciB0b0xlbmd0aCA9IF9fd19wZGZqc19yZXF1aXJlX18oNDcpOwp2YXIgbm90QVJlZ0V4cCA9IF9fd19wZGZqc19yZXF1aXJlX18oNTUpOwp2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMjApOwp2YXIgY29ycmVjdElzUmVnRXhwTG9naWMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDYwKTsKdmFyIElTX1BVUkUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDM3KTsKdmFyIG5hdGl2ZUVuZHNXaXRoID0gJycuZW5kc1dpdGg7CnZhciBtaW4gPSBNYXRoLm1pbjsKdmFyIENPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDID0gY29ycmVjdElzUmVnRXhwTG9naWMoJ2VuZHNXaXRoJyk7CnZhciBNRE5fUE9MWUZJTExfQlVHID0gIUlTX1BVUkUgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDICYmICEhZnVuY3Rpb24gKCkgewogdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoU3RyaW5nLnByb3RvdHlwZSwgJ2VuZHNXaXRoJyk7CiByZXR1cm4gZGVzY3JpcHRvciAmJiAhZGVzY3JpcHRvci53cml0YWJsZTsKfSgpOwokKHsKIHRhcmdldDogJ1N0cmluZycsCiBwcm90bzogdHJ1ZSwKIGZvcmNlZDogIU1ETl9QT0xZRklMTF9CVUcgJiYgIUNPUlJFQ1RfSVNfUkVHRVhQX0xPR0lDCn0sIHsKIGVuZHNXaXRoOiBmdW5jdGlvbiBlbmRzV2l0aChzZWFyY2hTdHJpbmcpIHsKICB2YXIgdGhhdCA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKHRoaXMpKTsKICBub3RBUmVnRXhwKHNlYXJjaFN0cmluZyk7CiAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7CiAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTsKICB2YXIgZW5kID0gZW5kUG9zaXRpb24gPT09IHVuZGVmaW5lZCA/IGxlbiA6IG1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7CiAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpOwogIHJldHVybiBuYXRpdmVFbmRzV2l0aCA/IG5hdGl2ZUVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7CiB9Cn0pOwoKLyoqKi8gfSksCi8qIDY2ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCl9fd19wZGZqc19yZXF1aXJlX18oNjcpOwp2YXIgZW50cnlVbmJpbmQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDYxKTsKbW9kdWxlLmV4cG9ydHMgPSBlbnRyeVVuYmluZCgnU3RyaW5nJywgJ2luY2x1ZGVzJyk7CgovKioqLyB9KSwKLyogNjcgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKdmFyICQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwKTsKdmFyIG5vdEFSZWdFeHAgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDU1KTsKdmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIwKTsKdmFyIGNvcnJlY3RJc1JlZ0V4cExvZ2ljID0gX193X3BkZmpzX3JlcXVpcmVfXyg2MCk7CiQoewogdGFyZ2V0OiAnU3RyaW5nJywKIHByb3RvOiB0cnVlLAogZm9yY2VkOiAhY29ycmVjdElzUmVnRXhwTG9naWMoJ2luY2x1ZGVzJykKfSwgewogaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZykgewogIHJldHVybiAhIX5TdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSkuaW5kZXhPZihub3RBUmVnRXhwKHNlYXJjaFN0cmluZyksIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKIH0KfSk7CgovKioqLyB9KSwKLyogNjggKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKX193X3BkZmpzX3JlcXVpcmVfXyg2OSk7CnZhciBlbnRyeVVuYmluZCA9IF9fd19wZGZqc19yZXF1aXJlX18oNjEpOwptb2R1bGUuZXhwb3J0cyA9IGVudHJ5VW5iaW5kKCdBcnJheScsICdpbmNsdWRlcycpOwoKLyoqKi8gfSksCi8qIDY5ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCnZhciAkID0gX193X3BkZmpzX3JlcXVpcmVfXygxMCk7CnZhciAkaW5jbHVkZXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQ2KS5pbmNsdWRlczsKdmFyIGFkZFRvVW5zY29wYWJsZXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDcwKTsKdmFyIGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoID0gX193X3BkZmpzX3JlcXVpcmVfXyg3NSk7CnZhciBVU0VTX1RPX0xFTkdUSCA9IGFycmF5TWV0aG9kVXNlc1RvTGVuZ3RoKCdpbmRleE9mJywgewogQUNDRVNTT1JTOiB0cnVlLAogMTogMAp9KTsKJCh7CiB0YXJnZXQ6ICdBcnJheScsCiBwcm90bzogdHJ1ZSwKIGZvcmNlZDogIVVTRVNfVE9fTEVOR1RICn0sIHsKIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCkgewogIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTsKIH0KfSk7CmFkZFRvVW5zY29wYWJsZXMoJ2luY2x1ZGVzJyk7CgovKioqLyB9KSwKLyogNzAgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNTcpOwp2YXIgY3JlYXRlID0gX193X3BkZmpzX3JlcXVpcmVfXyg3MSk7CnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMjcpOwp2YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7CnZhciBBcnJheVByb3RvdHlwZSA9IEFycmF5LnByb3RvdHlwZTsKaWYgKEFycmF5UHJvdG90eXBlW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHsKIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoQXJyYXlQcm90b3R5cGUsIFVOU0NPUEFCTEVTLCB7CiAgY29uZmlndXJhYmxlOiB0cnVlLAogIHZhbHVlOiBjcmVhdGUobnVsbCkKIH0pOwp9Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkgewogQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlOwp9OwoKLyoqKi8gfSksCi8qIDcxICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBhbk9iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oMjgpOwp2YXIgZGVmaW5lUHJvcGVydGllcyA9IF9fd19wZGZqc19yZXF1aXJlX18oNzIpOwp2YXIgZW51bUJ1Z0tleXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDUwKTsKdmFyIGhpZGRlbktleXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDM5KTsKdmFyIGh0bWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDc0KTsKdmFyIGRvY3VtZW50Q3JlYXRlRWxlbWVudCA9IF9fd19wZGZqc19yZXF1aXJlX18oMjUpOwp2YXIgc2hhcmVkS2V5ID0gX193X3BkZmpzX3JlcXVpcmVfXygzNSk7CnZhciBHVCA9ICc+JzsKdmFyIExUID0gJzwnOwp2YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7CnZhciBTQ1JJUFQgPSAnc2NyaXB0JzsKdmFyIElFX1BST1RPID0gc2hhcmVkS2V5KCdJRV9QUk9UTycpOwp2YXIgRW1wdHlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uICgpIHsKfTsKdmFyIHNjcmlwdFRhZyA9IGZ1bmN0aW9uIChjb250ZW50KSB7CiByZXR1cm4gTFQgKyBTQ1JJUFQgKyBHVCArIGNvbnRlbnQgKyBMVCArICcvJyArIFNDUklQVCArIEdUOwp9Owp2YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHsKIGFjdGl2ZVhEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJycpKTsKIGFjdGl2ZVhEb2N1bWVudC5jbG9zZSgpOwogdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDsKIGFjdGl2ZVhEb2N1bWVudCA9IG51bGw7CiByZXR1cm4gdGVtcDsKfTsKdmFyIE51bGxQcm90b09iamVjdFZpYUlGcmFtZSA9IGZ1bmN0aW9uICgpIHsKIHZhciBpZnJhbWUgPSBkb2N1bWVudENyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpOwogdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonOwogdmFyIGlmcmFtZURvY3VtZW50OwogaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7CiBpZnJhbWUuc3JjID0gU3RyaW5nKEpTKTsKIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7CiBpZnJhbWVEb2N1bWVudC5vcGVuKCk7CiBpZnJhbWVEb2N1bWVudC53cml0ZShzY3JpcHRUYWcoJ2RvY3VtZW50LkY9T2JqZWN0JykpOwogaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTsKIHJldHVybiBpZnJhbWVEb2N1bWVudC5GOwp9Owp2YXIgYWN0aXZlWERvY3VtZW50Owp2YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkgewogdHJ5IHsKICBhY3RpdmVYRG9jdW1lbnQgPSBkb2N1bWVudC5kb21haW4gJiYgbmV3IEFjdGl2ZVhPYmplY3QoJ2h0bWxmaWxlJyk7CiB9IGNhdGNoIChlcnJvcikgewogfQogTnVsbFByb3RvT2JqZWN0ID0gYWN0aXZlWERvY3VtZW50ID8gTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWChhY3RpdmVYRG9jdW1lbnQpIDogTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lKCk7CiB2YXIgbGVuZ3RoID0gZW51bUJ1Z0tleXMubGVuZ3RoOwogd2hpbGUgKGxlbmd0aC0tKQogIGRlbGV0ZSBOdWxsUHJvdG9PYmplY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tsZW5ndGhdXTsKIHJldHVybiBOdWxsUHJvdG9PYmplY3QoKTsKfTsKaGlkZGVuS2V5c1tJRV9QUk9UT10gPSB0cnVlOwptb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHsKIHZhciByZXN1bHQ7CiBpZiAoTyAhPT0gbnVsbCkgewogIEVtcHR5Q29uc3RydWN0b3JbUFJPVE9UWVBFXSA9IGFuT2JqZWN0KE8pOwogIHJlc3VsdCA9IG5ldyBFbXB0eUNvbnN0cnVjdG9yKCk7CiAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gbnVsbDsKICByZXN1bHRbSUVfUFJPVE9dID0gTzsKIH0gZWxzZQogIHJlc3VsdCA9IE51bGxQcm90b09iamVjdCgpOwogcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IGRlZmluZVByb3BlcnRpZXMocmVzdWx0LCBQcm9wZXJ0aWVzKTsKfTsKCi8qKiovIH0pLAovKiA3MiAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgREVTQ1JJUFRPUlMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEzKTsKdmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gX193X3BkZmpzX3JlcXVpcmVfXygyNyk7CnZhciBhbk9iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oMjgpOwp2YXIgb2JqZWN0S2V5cyA9IF9fd19wZGZqc19yZXF1aXJlX18oNzMpOwptb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHsKIGFuT2JqZWN0KE8pOwogdmFyIGtleXMgPSBvYmplY3RLZXlzKFByb3BlcnRpZXMpOwogdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoOwogdmFyIGluZGV4ID0gMDsKIHZhciBrZXk7CiB3aGlsZSAobGVuZ3RoID4gaW5kZXgpCiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihPLCBrZXkgPSBrZXlzW2luZGV4KytdLCBQcm9wZXJ0aWVzW2tleV0pOwogcmV0dXJuIE87Cn07CgovKioqLyB9KSwKLyogNzMgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIGludGVybmFsT2JqZWN0S2V5cyA9IF9fd19wZGZqc19yZXF1aXJlX18oNDUpOwp2YXIgZW51bUJ1Z0tleXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDUwKTsKbW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHsKIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpOwp9OwoKLyoqKi8gfSksCi8qIDc0ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBnZXRCdWlsdEluID0gX193X3BkZmpzX3JlcXVpcmVfXyg0Mik7Cm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignZG9jdW1lbnQnLCAnZG9jdW1lbnRFbGVtZW50Jyk7CgovKioqLyB9KSwKLyogNzUgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIERFU0NSSVBUT1JTID0gX193X3BkZmpzX3JlcXVpcmVfXygxMyk7CnZhciBmYWlscyA9IF9fd19wZGZqc19yZXF1aXJlX18oMTQpOwp2YXIgaGFzID0gX193X3BkZmpzX3JlcXVpcmVfXygyMyk7CnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTsKdmFyIGNhY2hlID0ge307CnZhciB0aHJvd2VyID0gZnVuY3Rpb24gKGl0KSB7CiB0aHJvdyBpdDsKfTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUsIG9wdGlvbnMpIHsKIGlmIChoYXMoY2FjaGUsIE1FVEhPRF9OQU1FKSkKICByZXR1cm4gY2FjaGVbTUVUSE9EX05BTUVdOwogaWYgKCFvcHRpb25zKQogIG9wdGlvbnMgPSB7fTsKIHZhciBtZXRob2QgPSBbXVtNRVRIT0RfTkFNRV07CiB2YXIgQUNDRVNTT1JTID0gaGFzKG9wdGlvbnMsICdBQ0NFU1NPUlMnKSA/IG9wdGlvbnMuQUNDRVNTT1JTIDogZmFsc2U7CiB2YXIgYXJndW1lbnQwID0gaGFzKG9wdGlvbnMsIDApID8gb3B0aW9uc1swXSA6IHRocm93ZXI7CiB2YXIgYXJndW1lbnQxID0gaGFzKG9wdGlvbnMsIDEpID8gb3B0aW9uc1sxXSA6IHVuZGVmaW5lZDsKIHJldHVybiBjYWNoZVtNRVRIT0RfTkFNRV0gPSAhIW1ldGhvZCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkgewogIGlmIChBQ0NFU1NPUlMgJiYgIURFU0NSSVBUT1JTKQogICByZXR1cm4gdHJ1ZTsKICB2YXIgTyA9IHsgbGVuZ3RoOiAtMSB9OwogIGlmIChBQ0NFU1NPUlMpCiAgIGRlZmluZVByb3BlcnR5KE8sIDEsIHsKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBnZXQ6IHRocm93ZXIKICAgfSk7CiAgZWxzZQogICBPWzFdID0gMTsKICBtZXRob2QuY2FsbChPLCBhcmd1bWVudDAsIGFyZ3VtZW50MSk7CiB9KTsKfTsKCi8qKiovIH0pLAovKiA3NiAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgpfX3dfcGRmanNfcmVxdWlyZV9fKDc3KTsKX193X3BkZmpzX3JlcXVpcmVfXyg4OSk7CnZhciBwYXRoID0gX193X3BkZmpzX3JlcXVpcmVfXyg0Myk7Cm1vZHVsZS5leHBvcnRzID0gcGF0aC5BcnJheS5mcm9tOwoKLyoqKi8gfSksCi8qIDc3ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCnZhciBjaGFyQXQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDc4KS5jaGFyQXQ7CnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gX193X3BkZmpzX3JlcXVpcmVfXygzMyk7CnZhciBkZWZpbmVJdGVyYXRvciA9IF9fd19wZGZqc19yZXF1aXJlX18oNzkpOwp2YXIgU1RSSU5HX0lURVJBVE9SID0gJ1N0cmluZyBJdGVyYXRvcic7CnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7CnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoU1RSSU5HX0lURVJBVE9SKTsKZGVmaW5lSXRlcmF0b3IoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7CiBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHsKICB0eXBlOiBTVFJJTkdfSVRFUkFUT1IsCiAgc3RyaW5nOiBTdHJpbmcoaXRlcmF0ZWQpLAogIGluZGV4OiAwCiB9KTsKfSwgZnVuY3Rpb24gbmV4dCgpIHsKIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7CiB2YXIgc3RyaW5nID0gc3RhdGUuc3RyaW5nOwogdmFyIGluZGV4ID0gc3RhdGUuaW5kZXg7CiB2YXIgcG9pbnQ7CiBpZiAoaW5kZXggPj0gc3RyaW5nLmxlbmd0aCkKICByZXR1cm4gewogICB2YWx1ZTogdW5kZWZpbmVkLAogICBkb25lOiB0cnVlCiAgfTsKIHBvaW50ID0gY2hhckF0KHN0cmluZywgaW5kZXgpOwogc3RhdGUuaW5kZXggKz0gcG9pbnQubGVuZ3RoOwogcmV0dXJuIHsKICB2YWx1ZTogcG9pbnQsCiAgZG9uZTogZmFsc2UKIH07Cn0pOwoKLyoqKi8gfSksCi8qIDc4ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciB0b0ludGVnZXIgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQ4KTsKdmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIwKTsKdmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChDT05WRVJUX1RPX1NUUklORykgewogcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgcG9zKSB7CiAgdmFyIFMgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpOwogIHZhciBwb3NpdGlvbiA9IHRvSW50ZWdlcihwb3MpOwogIHZhciBzaXplID0gUy5sZW5ndGg7CiAgdmFyIGZpcnN0LCBzZWNvbmQ7CiAgaWYgKHBvc2l0aW9uIDwgMCB8fCBwb3NpdGlvbiA+PSBzaXplKQogICByZXR1cm4gQ09OVkVSVF9UT19TVFJJTkcgPyAnJyA6IHVuZGVmaW5lZDsKICBmaXJzdCA9IFMuY2hhckNvZGVBdChwb3NpdGlvbik7CiAgcmV0dXJuIGZpcnN0IDwgMHhEODAwIHx8IGZpcnN0ID4gMHhEQkZGIHx8IHBvc2l0aW9uICsgMSA9PT0gc2l6ZSB8fCAoc2Vjb25kID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkpIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRiA/IENPTlZFUlRfVE9fU1RSSU5HID8gUy5jaGFyQXQocG9zaXRpb24pIDogZmlyc3QgOiBDT05WRVJUX1RPX1NUUklORyA/IFMuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgMikgOiAoZmlyc3QgLSAweEQ4MDAgPDwgMTApICsgKHNlY29uZCAtIDB4REMwMCkgKyAweDEwMDAwOwogfTsKfTsKbW9kdWxlLmV4cG9ydHMgPSB7CiBjb2RlQXQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksCiBjaGFyQXQ6IGNyZWF0ZU1ldGhvZCh0cnVlKQp9OwoKLyoqKi8gfSksCi8qIDc5ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCnZhciAkID0gX193X3BkZmpzX3JlcXVpcmVfXygxMCk7CnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gX193X3BkZmpzX3JlcXVpcmVfXyg4MCk7CnZhciBnZXRQcm90b3R5cGVPZiA9IF9fd19wZGZqc19yZXF1aXJlX18oODIpOwp2YXIgc2V0UHJvdG90eXBlT2YgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDg3KTsKdmFyIHNldFRvU3RyaW5nVGFnID0gX193X3BkZmpzX3JlcXVpcmVfXyg4NSk7CnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI2KTsKdmFyIHJlZGVmaW5lID0gX193X3BkZmpzX3JlcXVpcmVfXygyOSk7CnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDU3KTsKdmFyIElTX1BVUkUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDM3KTsKdmFyIEl0ZXJhdG9ycyA9IF9fd19wZGZqc19yZXF1aXJlX18oODYpOwp2YXIgSXRlcmF0b3JzQ29yZSA9IF9fd19wZGZqc19yZXF1aXJlX18oODEpOwp2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSBJdGVyYXRvcnNDb3JlLkl0ZXJhdG9yUHJvdG90eXBlOwp2YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IEl0ZXJhdG9yc0NvcmUuQlVHR1lfU0FGQVJJX0lURVJBVE9SUzsKdmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpOwp2YXIgS0VZUyA9ICdrZXlzJzsKdmFyIFZBTFVFUyA9ICd2YWx1ZXMnOwp2YXIgRU5UUklFUyA9ICdlbnRyaWVzJzsKdmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7CiByZXR1cm4gdGhpczsKfTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmFibGUsIE5BTUUsIEl0ZXJhdG9yQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7CiBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yKEl0ZXJhdG9yQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpOwogdmFyIGdldEl0ZXJhdGlvbk1ldGhvZCA9IGZ1bmN0aW9uIChLSU5EKSB7CiAgaWYgKEtJTkQgPT09IERFRkFVTFQgJiYgZGVmYXVsdEl0ZXJhdG9yKQogICByZXR1cm4gZGVmYXVsdEl0ZXJhdG9yOwogIGlmICghQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBLSU5EIGluIEl0ZXJhYmxlUHJvdG90eXBlKQogICByZXR1cm4gSXRlcmFibGVQcm90b3R5cGVbS0lORF07CiAgc3dpdGNoIChLSU5EKSB7CiAgY2FzZSBLRVlTOgogICByZXR1cm4gZnVuY3Rpb24ga2V5cygpIHsKICAgIHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsKICAgfTsKICBjYXNlIFZBTFVFUzoKICAgcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsKICAgIHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsKICAgfTsKICBjYXNlIEVOVFJJRVM6CiAgIHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgewogICAgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOwogICB9OwogIH0KICByZXR1cm4gZnVuY3Rpb24gKCkgewogICByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7CiAgfTsKIH07CiB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJzsKIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTsKIHZhciBJdGVyYWJsZVByb3RvdHlwZSA9IEl0ZXJhYmxlLnByb3RvdHlwZTsKIHZhciBuYXRpdmVJdGVyYXRvciA9IEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXSB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddIHx8IERFRkFVTFQgJiYgSXRlcmFibGVQcm90b3R5cGVbREVGQVVMVF07CiB2YXIgZGVmYXVsdEl0ZXJhdG9yID0gIUJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgJiYgbmF0aXZlSXRlcmF0b3IgfHwgZ2V0SXRlcmF0aW9uTWV0aG9kKERFRkFVTFQpOwogdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yOwogdmFyIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgbWV0aG9kcywgS0VZOwogaWYgKGFueU5hdGl2ZUl0ZXJhdG9yKSB7CiAgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoYW55TmF0aXZlSXRlcmF0b3IuY2FsbChuZXcgSXRlcmFibGUoKSkpOwogIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkgewogICBpZiAoIUlTX1BVUkUgJiYgZ2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlKSAhPT0gSXRlcmF0b3JQcm90b3R5cGUpIHsKICAgIGlmIChzZXRQcm90b3R5cGVPZikgewogICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpOwogICAgfSBlbHNlIGlmICh0eXBlb2YgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSB7CiAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpOwogICAgfQogICB9CiAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7CiAgIGlmIChJU19QVVJFKQogICAgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpczsKICB9CiB9CiBpZiAoREVGQVVMVCA9PSBWQUxVRVMgJiYgbmF0aXZlSXRlcmF0b3IgJiYgbmF0aXZlSXRlcmF0b3IubmFtZSAhPT0gVkFMVUVTKSB7CiAgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gdHJ1ZTsKICBkZWZhdWx0SXRlcmF0b3IgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7CiAgIHJldHVybiBuYXRpdmVJdGVyYXRvci5jYWxsKHRoaXMpOwogIH07CiB9CiBpZiAoKCFJU19QVVJFIHx8IEZPUkNFRCkgJiYgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdICE9PSBkZWZhdWx0SXRlcmF0b3IpIHsKICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmFibGVQcm90b3R5cGUsIElURVJBVE9SLCBkZWZhdWx0SXRlcmF0b3IpOwogfQogSXRlcmF0b3JzW05BTUVdID0gZGVmYXVsdEl0ZXJhdG9yOwogaWYgKERFRkFVTFQpIHsKICBtZXRob2RzID0gewogICB2YWx1ZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChWQUxVRVMpLAogICBrZXlzOiBJU19TRVQgPyBkZWZhdWx0SXRlcmF0b3IgOiBnZXRJdGVyYXRpb25NZXRob2QoS0VZUyksCiAgIGVudHJpZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChFTlRSSUVTKQogIH07CiAgaWYgKEZPUkNFRCkKICAgZm9yIChLRVkgaW4gbWV0aG9kcykgewogICAgaWYgKEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIHx8ICEoS0VZIGluIEl0ZXJhYmxlUHJvdG90eXBlKSkgewogICAgIHJlZGVmaW5lKEl0ZXJhYmxlUHJvdG90eXBlLCBLRVksIG1ldGhvZHNbS0VZXSk7CiAgICB9CiAgIH0KICBlbHNlCiAgICQoewogICAgdGFyZ2V0OiBOQU1FLAogICAgcHJvdG86IHRydWUsCiAgICBmb3JjZWQ6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FCiAgIH0sIG1ldGhvZHMpOwogfQogcmV0dXJuIG1ldGhvZHM7Cn07CgovKioqLyB9KSwKLyogODAgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gX193X3BkZmpzX3JlcXVpcmVfXyg4MSkuSXRlcmF0b3JQcm90b3R5cGU7CnZhciBjcmVhdGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDcxKTsKdmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IF9fd19wZGZqc19yZXF1aXJlX18oMTYpOwp2YXIgc2V0VG9TdHJpbmdUYWcgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDg1KTsKdmFyIEl0ZXJhdG9ycyA9IF9fd19wZGZqc19yZXF1aXJlX18oODYpOwp2YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsKIHJldHVybiB0aGlzOwp9Owptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7CiB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJzsKIEl0ZXJhdG9yQ29uc3RydWN0b3IucHJvdG90eXBlID0gY3JlYXRlKEl0ZXJhdG9yUHJvdG90eXBlLCB7IG5leHQ6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCBuZXh0KSB9KTsKIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yQ29uc3RydWN0b3IsIFRPX1NUUklOR19UQUcsIGZhbHNlLCB0cnVlKTsKIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7CiByZXR1cm4gSXRlcmF0b3JDb25zdHJ1Y3RvcjsKfTsKCi8qKiovIH0pLAovKiA4MSAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7Cgp2YXIgZ2V0UHJvdG90eXBlT2YgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDgyKTsKdmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IF9fd19wZGZqc19yZXF1aXJlX18oMjYpOwp2YXIgaGFzID0gX193X3BkZmpzX3JlcXVpcmVfXygyMyk7CnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDU3KTsKdmFyIElTX1BVUkUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDM3KTsKdmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpOwp2YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IGZhbHNlOwp2YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsKIHJldHVybiB0aGlzOwp9Owp2YXIgSXRlcmF0b3JQcm90b3R5cGUsIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSwgYXJyYXlJdGVyYXRvcjsKaWYgKFtdLmtleXMpIHsKIGFycmF5SXRlcmF0b3IgPSBbXS5rZXlzKCk7CiBpZiAoISgnbmV4dCcgaW4gYXJyYXlJdGVyYXRvcikpCiAgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IHRydWU7CiBlbHNlIHsKICBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihnZXRQcm90b3R5cGVPZihhcnJheUl0ZXJhdG9yKSk7CiAgaWYgKFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSkKICAgSXRlcmF0b3JQcm90b3R5cGUgPSBQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGU7CiB9Cn0KaWYgKEl0ZXJhdG9yUHJvdG90eXBlID09IHVuZGVmaW5lZCkKIEl0ZXJhdG9yUHJvdG90eXBlID0ge307CmlmICghSVNfUFVSRSAmJiAhaGFzKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUikpIHsKIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShJdGVyYXRvclByb3RvdHlwZSwgSVRFUkFUT1IsIHJldHVyblRoaXMpOwp9Cm1vZHVsZS5leHBvcnRzID0gewogSXRlcmF0b3JQcm90b3R5cGU6IEl0ZXJhdG9yUHJvdG90eXBlLAogQlVHR1lfU0FGQVJJX0lURVJBVE9SUzogQlVHR1lfU0FGQVJJX0lURVJBVE9SUwp9OwoKLyoqKi8gfSksCi8qIDgyICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBoYXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIzKTsKdmFyIHRvT2JqZWN0ID0gX193X3BkZmpzX3JlcXVpcmVfXyg4Myk7CnZhciBzaGFyZWRLZXkgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDM1KTsKdmFyIENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA9IF9fd19wZGZqc19yZXF1aXJlX18oODQpOwp2YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7CnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlOwptb2R1bGUuZXhwb3J0cyA9IENPUlJFQ1RfUFJPVE9UWVBFX0dFVFRFUiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIChPKSB7CiBPID0gdG9PYmplY3QoTyk7CiBpZiAoaGFzKE8sIElFX1BST1RPKSkKICByZXR1cm4gT1tJRV9QUk9UT107CiBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3RvcikgewogIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTsKIH0KIHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDsKfTsKCi8qKiovIH0pLAovKiA4MyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMjApOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkgewogcmV0dXJuIE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7Cn07CgovKioqLyB9KSwKLyogODQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIGZhaWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygxNCk7Cm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHsKIGZ1bmN0aW9uIEYoKSB7CiB9CiBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7CiByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBGKCkpICE9PSBGLnByb3RvdHlwZTsKfSk7CgovKioqLyB9KSwKLyogODUgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIGRlZmluZVByb3BlcnR5ID0gX193X3BkZmpzX3JlcXVpcmVfXygyNykuZjsKdmFyIGhhcyA9IF9fd19wZGZqc19yZXF1aXJlX18oMjMpOwp2YXIgd2VsbEtub3duU3ltYm9sID0gX193X3BkZmpzX3JlcXVpcmVfXyg1Nyk7CnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVEFHLCBTVEFUSUMpIHsKIGlmIChpdCAmJiAhaGFzKGl0ID0gU1RBVElDID8gaXQgOiBpdC5wcm90b3R5cGUsIFRPX1NUUklOR19UQUcpKSB7CiAgZGVmaW5lUHJvcGVydHkoaXQsIFRPX1NUUklOR19UQUcsIHsKICAgY29uZmlndXJhYmxlOiB0cnVlLAogICB2YWx1ZTogVEFHCiAgfSk7CiB9Cn07CgovKioqLyB9KSwKLyogODYgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykgewoKbW9kdWxlLmV4cG9ydHMgPSB7fTsKCi8qKiovIH0pLAovKiA4NyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgYW5PYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI4KTsKdmFyIGFQb3NzaWJsZVByb3RvdHlwZSA9IF9fd19wZGZqc19yZXF1aXJlX18oODgpOwptb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyBmdW5jdGlvbiAoKSB7CiB2YXIgQ09SUkVDVF9TRVRURVIgPSBmYWxzZTsKIHZhciB0ZXN0ID0ge307CiB2YXIgc2V0dGVyOwogdHJ5IHsKICBzZXR0ZXIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQ7CiAgc2V0dGVyLmNhbGwodGVzdCwgW10pOwogIENPUlJFQ1RfU0VUVEVSID0gdGVzdCBpbnN0YW5jZW9mIEFycmF5OwogfSBjYXRjaCAoZXJyb3IpIHsKIH0KIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykgewogIGFuT2JqZWN0KE8pOwogIGFQb3NzaWJsZVByb3RvdHlwZShwcm90byk7CiAgaWYgKENPUlJFQ1RfU0VUVEVSKQogICBzZXR0ZXIuY2FsbChPLCBwcm90byk7CiAgZWxzZQogICBPLl9fcHJvdG9fXyA9IHByb3RvOwogIHJldHVybiBPOwogfTsKfSgpIDogdW5kZWZpbmVkKTsKCi8qKiovIH0pLAovKiA4OCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgaXNPYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIyKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHsKIGlmICghaXNPYmplY3QoaXQpICYmIGl0ICE9PSBudWxsKSB7CiAgdGhyb3cgVHlwZUVycm9yKCJDYW4ndCBzZXQgIiArIFN0cmluZyhpdCkgKyAnIGFzIGEgcHJvdG90eXBlJyk7CiB9CiByZXR1cm4gaXQ7Cn07CgovKioqLyB9KSwKLyogODkgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyICQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwKTsKdmFyIGZyb20gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDkwKTsKdmFyIGNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbiA9IF9fd19wZGZqc19yZXF1aXJlX18oOTcpOwp2YXIgSU5DT1JSRUNUX0lURVJBVElPTiA9ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7CiBBcnJheS5mcm9tKGl0ZXJhYmxlKTsKfSk7CiQoewogdGFyZ2V0OiAnQXJyYXknLAogc3RhdDogdHJ1ZSwKIGZvcmNlZDogSU5DT1JSRUNUX0lURVJBVElPTgp9LCB7IGZyb206IGZyb20gfSk7CgovKioqLyB9KSwKLyogOTAgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKdmFyIGJpbmQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDYyKTsKdmFyIHRvT2JqZWN0ID0gX193X3BkZmpzX3JlcXVpcmVfXyg4Myk7CnZhciBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nID0gX193X3BkZmpzX3JlcXVpcmVfXyg5MSk7CnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDkyKTsKdmFyIHRvTGVuZ3RoID0gX193X3BkZmpzX3JlcXVpcmVfXyg0Nyk7CnZhciBjcmVhdGVQcm9wZXJ0eSA9IF9fd19wZGZqc19yZXF1aXJlX18oOTMpOwp2YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDk0KTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSkgewogdmFyIE8gPSB0b09iamVjdChhcnJheUxpa2UpOwogdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5OwogdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7CiB2YXIgbWFwZm4gPSBhcmd1bWVudHNMZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkOwogdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkOwogdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoTyk7CiB2YXIgaW5kZXggPSAwOwogdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvciwgbmV4dCwgdmFsdWU7CiBpZiAobWFwcGluZykKICBtYXBmbiA9IGJpbmQobWFwZm4sIGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpOwogaWYgKGl0ZXJhdG9yTWV0aG9kICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJhdG9yTWV0aG9kKSkpIHsKICBpdGVyYXRvciA9IGl0ZXJhdG9yTWV0aG9kLmNhbGwoTyk7CiAgbmV4dCA9IGl0ZXJhdG9yLm5leHQ7CiAgcmVzdWx0ID0gbmV3IEMoKTsKICBmb3IgKDsgIShzdGVwID0gbmV4dC5jYWxsKGl0ZXJhdG9yKSkuZG9uZTsgaW5kZXgrKykgewogICB2YWx1ZSA9IG1hcHBpbmcgPyBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nKGl0ZXJhdG9yLCBtYXBmbiwgWwogICAgc3RlcC52YWx1ZSwKICAgIGluZGV4CiAgIF0sIHRydWUpIDogc3RlcC52YWx1ZTsKICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpOwogIH0KIH0gZWxzZSB7CiAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpOwogIHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7CiAgZm9yICg7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7CiAgIHZhbHVlID0gbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XTsKICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgdmFsdWUpOwogIH0KIH0KIHJlc3VsdC5sZW5ndGggPSBpbmRleDsKIHJldHVybiByZXN1bHQ7Cn07CgovKioqLyB9KSwKLyogOTEgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIGFuT2JqZWN0ID0gX193X3BkZmpzX3JlcXVpcmVfXygyOCk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIEVOVFJJRVMpIHsKIHRyeSB7CiAgcmV0dXJuIEVOVFJJRVMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTsKIH0gY2F0Y2ggKGVycm9yKSB7CiAgdmFyIHJldHVybk1ldGhvZCA9IGl0ZXJhdG9yWydyZXR1cm4nXTsKICBpZiAocmV0dXJuTWV0aG9kICE9PSB1bmRlZmluZWQpCiAgIGFuT2JqZWN0KHJldHVybk1ldGhvZC5jYWxsKGl0ZXJhdG9yKSk7CiAgdGhyb3cgZXJyb3I7CiB9Cn07CgovKioqLyB9KSwKLyogOTIgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNTcpOwp2YXIgSXRlcmF0b3JzID0gX193X3BkZmpzX3JlcXVpcmVfXyg4Nik7CnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTsKdmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkgewogcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdID09PSBpdCk7Cn07CgovKioqLyB9KSwKLyogOTMgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKdmFyIHRvUHJpbWl0aXZlID0gX193X3BkZmpzX3JlcXVpcmVfXygyMSk7CnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMjcpOwp2YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gX193X3BkZmpzX3JlcXVpcmVfXygxNik7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkgewogdmFyIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUoa2V5KTsKIGlmIChwcm9wZXJ0eUtleSBpbiBvYmplY3QpCiAgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgdmFsdWUpKTsKIGVsc2UKICBvYmplY3RbcHJvcGVydHlLZXldID0gdmFsdWU7Cn07CgovKioqLyB9KSwKLyogOTQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIGNsYXNzb2YgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDk1KTsKdmFyIEl0ZXJhdG9ycyA9IF9fd19wZGZqc19yZXF1aXJlX18oODYpOwp2YXIgd2VsbEtub3duU3ltYm9sID0gX193X3BkZmpzX3JlcXVpcmVfXyg1Nyk7CnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHsKIGlmIChpdCAhPSB1bmRlZmluZWQpCiAgcmV0dXJuIGl0W0lURVJBVE9SXSB8fCBpdFsnQEBpdGVyYXRvciddIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07Cn07CgovKioqLyB9KSwKLyogOTUgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IF9fd19wZGZqc19yZXF1aXJlX18oOTYpOwp2YXIgY2xhc3NvZlJhdyA9IF9fd19wZGZqc19yZXF1aXJlX18oMTkpOwp2YXIgd2VsbEtub3duU3ltYm9sID0gX193X3BkZmpzX3JlcXVpcmVfXyg1Nyk7CnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpOwp2YXIgQ09SUkVDVF9BUkdVTUVOVFMgPSBjbGFzc29mUmF3KGZ1bmN0aW9uICgpIHsKIHJldHVybiBhcmd1bWVudHM7Cn0oKSkgPT0gJ0FyZ3VtZW50cyc7CnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkgewogdHJ5IHsKICByZXR1cm4gaXRba2V5XTsKIH0gY2F0Y2ggKGVycm9yKSB7CiB9Cn07Cm1vZHVsZS5leHBvcnRzID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUID8gY2xhc3NvZlJhdyA6IGZ1bmN0aW9uIChpdCkgewogdmFyIE8sIHRhZywgcmVzdWx0OwogcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnIDogdHlwZW9mICh0YWcgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRPX1NUUklOR19UQUcpKSA9PSAnc3RyaW5nJyA/IHRhZyA6IENPUlJFQ1RfQVJHVU1FTlRTID8gY2xhc3NvZlJhdyhPKSA6IChyZXN1bHQgPSBjbGFzc29mUmF3KE8pKSA9PSAnT2JqZWN0JyAmJiB0eXBlb2YgTy5jYWxsZWUgPT0gJ2Z1bmN0aW9uJyA/ICdBcmd1bWVudHMnIDogcmVzdWx0Owp9OwoKLyoqKi8gfSksCi8qIDk2ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDU3KTsKdmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7CnZhciB0ZXN0ID0ge307CnRlc3RbVE9fU1RSSU5HX1RBR10gPSAneic7Cm1vZHVsZS5leHBvcnRzID0gU3RyaW5nKHRlc3QpID09PSAnW29iamVjdCB6XSc7CgovKioqLyB9KSwKLyogOTcgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNTcpOwp2YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7CnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTsKdHJ5IHsKIHZhciBjYWxsZWQgPSAwOwogdmFyIGl0ZXJhdG9yV2l0aFJldHVybiA9IHsKICBuZXh0OiBmdW5jdGlvbiAoKSB7CiAgIHJldHVybiB7IGRvbmU6ICEhY2FsbGVkKysgfTsKICB9LAogICdyZXR1cm4nOiBmdW5jdGlvbiAoKSB7CiAgIFNBRkVfQ0xPU0lORyA9IHRydWU7CiAgfQogfTsKIGl0ZXJhdG9yV2l0aFJldHVybltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIHRoaXM7CiB9OwogQXJyYXkuZnJvbShpdGVyYXRvcldpdGhSZXR1cm4sIGZ1bmN0aW9uICgpIHsKICB0aHJvdyAyOwogfSk7Cn0gY2F0Y2ggKGVycm9yKSB7Cn0KbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgU0tJUF9DTE9TSU5HKSB7CiBpZiAoIVNLSVBfQ0xPU0lORyAmJiAhU0FGRV9DTE9TSU5HKQogIHJldHVybiBmYWxzZTsKIHZhciBJVEVSQVRJT05fU1VQUE9SVCA9IGZhbHNlOwogdHJ5IHsKICB2YXIgb2JqZWN0ID0ge307CiAgb2JqZWN0W0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHsKICAgcmV0dXJuIHsKICAgIG5leHQ6IGZ1bmN0aW9uICgpIHsKICAgICByZXR1cm4geyBkb25lOiBJVEVSQVRJT05fU1VQUE9SVCA9IHRydWUgfTsKICAgIH0KICAgfTsKICB9OwogIGV4ZWMob2JqZWN0KTsKIH0gY2F0Y2ggKGVycm9yKSB7CiB9CiByZXR1cm4gSVRFUkFUSU9OX1NVUFBPUlQ7Cn07CgovKioqLyB9KSwKLyogOTggKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKX193X3BkZmpzX3JlcXVpcmVfXyg5OSk7CnZhciBwYXRoID0gX193X3BkZmpzX3JlcXVpcmVfXyg0Myk7Cm1vZHVsZS5leHBvcnRzID0gcGF0aC5PYmplY3QuYXNzaWduOwoKLyoqKi8gfSksCi8qIDk5ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciAkID0gX193X3BkZmpzX3JlcXVpcmVfXygxMCk7CnZhciBhc3NpZ24gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwMCk7CiQoewogdGFyZ2V0OiAnT2JqZWN0JywKIHN0YXQ6IHRydWUsCiBmb3JjZWQ6IE9iamVjdC5hc3NpZ24gIT09IGFzc2lnbgp9LCB7IGFzc2lnbjogYXNzaWduIH0pOwoKLyoqKi8gfSksCi8qIDEwMCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7Cgp2YXIgREVTQ1JJUFRPUlMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEzKTsKdmFyIGZhaWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygxNCk7CnZhciBvYmplY3RLZXlzID0gX193X3BkZmpzX3JlcXVpcmVfXyg3Myk7CnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDUxKTsKdmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlID0gX193X3BkZmpzX3JlcXVpcmVfXygxNSk7CnZhciB0b09iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oODMpOwp2YXIgSW5kZXhlZE9iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTgpOwp2YXIgbmF0aXZlQXNzaWduID0gT2JqZWN0LmFzc2lnbjsKdmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5Owptb2R1bGUuZXhwb3J0cyA9ICFuYXRpdmVBc3NpZ24gfHwgZmFpbHMoZnVuY3Rpb24gKCkgewogaWYgKERFU0NSSVBUT1JTICYmIG5hdGl2ZUFzc2lnbih7IGI6IDEgfSwgbmF0aXZlQXNzaWduKGRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsKICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgZ2V0OiBmdW5jdGlvbiAoKSB7CiAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYicsIHsKICAgICB2YWx1ZTogMywKICAgICBlbnVtZXJhYmxlOiBmYWxzZQogICAgfSk7CiAgIH0KICB9KSwgeyBiOiAyIH0pKS5iICE9PSAxKQogIHJldHVybiB0cnVlOwogdmFyIEEgPSB7fTsKIHZhciBCID0ge307CiB2YXIgc3ltYm9sID0gU3ltYm9sKCk7CiB2YXIgYWxwaGFiZXQgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3QnOwogQVtzeW1ib2xdID0gNzsKIGFscGhhYmV0LnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChjaHIpIHsKICBCW2Nocl0gPSBjaHI7CiB9KTsKIHJldHVybiBuYXRpdmVBc3NpZ24oe30sIEEpW3N5bWJvbF0gIT0gNyB8fCBvYmplY3RLZXlzKG5hdGl2ZUFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IGFscGhhYmV0Owp9KSA/IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHNvdXJjZSkgewogdmFyIFQgPSB0b09iamVjdCh0YXJnZXQpOwogdmFyIGFyZ3VtZW50c0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7CiB2YXIgaW5kZXggPSAxOwogdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mOwogdmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gcHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUuZjsKIHdoaWxlIChhcmd1bWVudHNMZW5ndGggPiBpbmRleCkgewogIHZhciBTID0gSW5kZXhlZE9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pOwogIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8gb2JqZWN0S2V5cyhTKS5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKFMpKSA6IG9iamVjdEtleXMoUyk7CiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoOwogIHZhciBqID0gMDsKICB2YXIga2V5OwogIHdoaWxlIChsZW5ndGggPiBqKSB7CiAgIGtleSA9IGtleXNbaisrXTsKICAgaWYgKCFERVNDUklQVE9SUyB8fCBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKFMsIGtleSkpCiAgICBUW2tleV0gPSBTW2tleV07CiAgfQogfQogcmV0dXJuIFQ7Cn0gOiBuYXRpdmVBc3NpZ247CgovKioqLyB9KSwKLyogMTAxICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCl9fd19wZGZqc19yZXF1aXJlX18oMTAyKTsKdmFyIHBhdGggPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQzKTsKbW9kdWxlLmV4cG9ydHMgPSBwYXRoLk1hdGgubG9nMjsKCi8qKiovIH0pLAovKiAxMDIgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyICQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwKTsKdmFyIGxvZyA9IE1hdGgubG9nOwp2YXIgTE4yID0gTWF0aC5MTjI7CiQoewogdGFyZ2V0OiAnTWF0aCcsCiBzdGF0OiB0cnVlCn0sIHsKIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCkgewogIHJldHVybiBsb2coeCkgLyBMTjI7CiB9Cn0pOwoKLyoqKi8gfSksCi8qIDEwMyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgpfX3dfcGRmanNfcmVxdWlyZV9fKDEwNCk7CnZhciBwYXRoID0gX193X3BkZmpzX3JlcXVpcmVfXyg0Myk7Cm1vZHVsZS5leHBvcnRzID0gcGF0aC5OdW1iZXIuaXNOYU47CgovKioqLyB9KSwKLyogMTA0ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciAkID0gX193X3BkZmpzX3JlcXVpcmVfXygxMCk7CiQoewogdGFyZ2V0OiAnTnVtYmVyJywKIHN0YXQ6IHRydWUKfSwgewogaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcikgewogIHJldHVybiBudW1iZXIgIT0gbnVtYmVyOwogfQp9KTsKCi8qKiovIH0pLAovKiAxMDUgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKX193X3BkZmpzX3JlcXVpcmVfXygxMDYpOwp2YXIgcGF0aCA9IF9fd19wZGZqc19yZXF1aXJlX18oNDMpOwptb2R1bGUuZXhwb3J0cyA9IHBhdGguTnVtYmVyLmlzSW50ZWdlcjsKCi8qKiovIH0pLAovKiAxMDYgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyICQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwKTsKdmFyIGlzSW50ZWdlciA9IF9fd19wZGZqc19yZXF1aXJlX18oMTA3KTsKJCh7CiB0YXJnZXQ6ICdOdW1iZXInLAogc3RhdDogdHJ1ZQp9LCB7IGlzSW50ZWdlcjogaXNJbnRlZ2VyIH0pOwoKLyoqKi8gfSksCi8qIDEwNyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgaXNPYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIyKTsKdmFyIGZsb29yID0gTWF0aC5mbG9vcjsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0ludGVnZXIoaXQpIHsKIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0Owp9OwoKLyoqKi8gfSksCi8qIDEwOCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgpfX3dfcGRmanNfcmVxdWlyZV9fKDEwOSk7CgovKioqLyB9KSwKLyogMTA5ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCnZhciBBcnJheUJ1ZmZlclZpZXdDb3JlID0gX193X3BkZmpzX3JlcXVpcmVfXygxMTApOwp2YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gX193X3BkZmpzX3JlcXVpcmVfXygxMTIpOwp2YXIgZmFpbHMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE0KTsKdmFyIGFUeXBlZEFycmF5ID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5hVHlwZWRBcnJheTsKdmFyIGFUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBBcnJheUJ1ZmZlclZpZXdDb3JlLmFUeXBlZEFycmF5Q29uc3RydWN0b3I7CnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gQXJyYXlCdWZmZXJWaWV3Q29yZS5leHBvcnRUeXBlZEFycmF5TWV0aG9kOwp2YXIgJHNsaWNlID0gW10uc2xpY2U7CnZhciBGT1JDRUQgPSBmYWlscyhmdW5jdGlvbiAoKSB7CiBuZXcgSW50OEFycmF5KDEpLnNsaWNlKCk7Cn0pOwpleHBvcnRUeXBlZEFycmF5TWV0aG9kKCdzbGljZScsIGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHsKIHZhciBsaXN0ID0gJHNsaWNlLmNhbGwoYVR5cGVkQXJyYXkodGhpcyksIHN0YXJ0LCBlbmQpOwogdmFyIEMgPSBzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7CiB2YXIgaW5kZXggPSAwOwogdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoOwogdmFyIHJlc3VsdCA9IG5ldyAoYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcihDKSkobGVuZ3RoKTsKIHdoaWxlIChsZW5ndGggPiBpbmRleCkKICByZXN1bHRbaW5kZXhdID0gbGlzdFtpbmRleCsrXTsKIHJldHVybiByZXN1bHQ7Cn0sIEZPUkNFRCk7CgovKioqLyB9KSwKLyogMTEwICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCnZhciBOQVRJVkVfQVJSQVlfQlVGRkVSID0gX193X3BkZmpzX3JlcXVpcmVfXygxMTEpOwp2YXIgREVTQ1JJUFRPUlMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEzKTsKdmFyIGdsb2JhbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTEpOwp2YXIgaXNPYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIyKTsKdmFyIGhhcyA9IF9fd19wZGZqc19yZXF1aXJlX18oMjMpOwp2YXIgY2xhc3NvZiA9IF9fd19wZGZqc19yZXF1aXJlX18oOTUpOwp2YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gX193X3BkZmpzX3JlcXVpcmVfXygyNik7CnZhciByZWRlZmluZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMjkpOwp2YXIgZGVmaW5lUHJvcGVydHkgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI3KS5mOwp2YXIgZ2V0UHJvdG90eXBlT2YgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDgyKTsKdmFyIHNldFByb3RvdHlwZU9mID0gX193X3BkZmpzX3JlcXVpcmVfXyg4Nyk7CnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDU3KTsKdmFyIHVpZCA9IF9fd19wZGZqc19yZXF1aXJlX18oMzgpOwp2YXIgSW50OEFycmF5ID0gZ2xvYmFsLkludDhBcnJheTsKdmFyIEludDhBcnJheVByb3RvdHlwZSA9IEludDhBcnJheSAmJiBJbnQ4QXJyYXkucHJvdG90eXBlOwp2YXIgVWludDhDbGFtcGVkQXJyYXkgPSBnbG9iYWwuVWludDhDbGFtcGVkQXJyYXk7CnZhciBVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSA9IFVpbnQ4Q2xhbXBlZEFycmF5ICYmIFVpbnQ4Q2xhbXBlZEFycmF5LnByb3RvdHlwZTsKdmFyIFR5cGVkQXJyYXkgPSBJbnQ4QXJyYXkgJiYgZ2V0UHJvdG90eXBlT2YoSW50OEFycmF5KTsKdmFyIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBJbnQ4QXJyYXlQcm90b3R5cGUgJiYgZ2V0UHJvdG90eXBlT2YoSW50OEFycmF5UHJvdG90eXBlKTsKdmFyIE9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7CnZhciBpc1Byb3RvdHlwZU9mID0gT2JqZWN0UHJvdG90eXBlLmlzUHJvdG90eXBlT2Y7CnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpOwp2YXIgVFlQRURfQVJSQVlfVEFHID0gdWlkKCdUWVBFRF9BUlJBWV9UQUcnKTsKdmFyIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgPSBOQVRJVkVfQVJSQVlfQlVGRkVSICYmICEhc2V0UHJvdG90eXBlT2YgJiYgY2xhc3NvZihnbG9iYWwub3BlcmEpICE9PSAnT3BlcmEnOwp2YXIgVFlQRURfQVJSQVlfVEFHX1JFUUlSRUQgPSBmYWxzZTsKdmFyIE5BTUU7CnZhciBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCA9IHsKIEludDhBcnJheTogMSwKIFVpbnQ4QXJyYXk6IDEsCiBVaW50OENsYW1wZWRBcnJheTogMSwKIEludDE2QXJyYXk6IDIsCiBVaW50MTZBcnJheTogMiwKIEludDMyQXJyYXk6IDQsCiBVaW50MzJBcnJheTogNCwKIEZsb2F0MzJBcnJheTogNCwKIEZsb2F0NjRBcnJheTogOAp9Owp2YXIgaXNWaWV3ID0gZnVuY3Rpb24gaXNWaWV3KGl0KSB7CiB2YXIga2xhc3MgPSBjbGFzc29mKGl0KTsKIHJldHVybiBrbGFzcyA9PT0gJ0RhdGFWaWV3JyB8fCBoYXMoVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QsIGtsYXNzKTsKfTsKdmFyIGlzVHlwZWRBcnJheSA9IGZ1bmN0aW9uIChpdCkgewogcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiBoYXMoVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QsIGNsYXNzb2YoaXQpKTsKfTsKdmFyIGFUeXBlZEFycmF5ID0gZnVuY3Rpb24gKGl0KSB7CiBpZiAoaXNUeXBlZEFycmF5KGl0KSkKICByZXR1cm4gaXQ7CiB0aHJvdyBUeXBlRXJyb3IoJ1RhcmdldCBpcyBub3QgYSB0eXBlZCBhcnJheScpOwp9Owp2YXIgYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIChDKSB7CiBpZiAoc2V0UHJvdG90eXBlT2YpIHsKICBpZiAoaXNQcm90b3R5cGVPZi5jYWxsKFR5cGVkQXJyYXksIEMpKQogICByZXR1cm4gQzsKIH0gZWxzZQogIGZvciAodmFyIEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KQogICBpZiAoaGFzKFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0LCBOQU1FKSkgewogICAgdmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvciA9IGdsb2JhbFtBUlJBWV07CiAgICBpZiAoVHlwZWRBcnJheUNvbnN0cnVjdG9yICYmIChDID09PSBUeXBlZEFycmF5Q29uc3RydWN0b3IgfHwgaXNQcm90b3R5cGVPZi5jYWxsKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgQykpKSB7CiAgICAgcmV0dXJuIEM7CiAgICB9CiAgIH0KIHRocm93IFR5cGVFcnJvcignVGFyZ2V0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yJyk7Cn07CnZhciBleHBvcnRUeXBlZEFycmF5TWV0aG9kID0gZnVuY3Rpb24gKEtFWSwgcHJvcGVydHksIGZvcmNlZCkgewogaWYgKCFERVNDUklQVE9SUykKICByZXR1cm47CiBpZiAoZm9yY2VkKQogIGZvciAodmFyIEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7CiAgIHZhciBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQVJSQVldOwogICBpZiAoVHlwZWRBcnJheUNvbnN0cnVjdG9yICYmIGhhcyhUeXBlZEFycmF5Q29uc3RydWN0b3IucHJvdG90eXBlLCBLRVkpKSB7CiAgICBkZWxldGUgVHlwZWRBcnJheUNvbnN0cnVjdG9yLnByb3RvdHlwZVtLRVldOwogICB9CiAgfQogaWYgKCFUeXBlZEFycmF5UHJvdG90eXBlW0tFWV0gfHwgZm9yY2VkKSB7CiAgcmVkZWZpbmUoVHlwZWRBcnJheVByb3RvdHlwZSwgS0VZLCBmb3JjZWQgPyBwcm9wZXJ0eSA6IE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgJiYgSW50OEFycmF5UHJvdG90eXBlW0tFWV0gfHwgcHJvcGVydHkpOwogfQp9Owp2YXIgZXhwb3J0VHlwZWRBcnJheVN0YXRpY01ldGhvZCA9IGZ1bmN0aW9uIChLRVksIHByb3BlcnR5LCBmb3JjZWQpIHsKIHZhciBBUlJBWSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yOwogaWYgKCFERVNDUklQVE9SUykKICByZXR1cm47CiBpZiAoc2V0UHJvdG90eXBlT2YpIHsKICBpZiAoZm9yY2VkKQogICBmb3IgKEFSUkFZIGluIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnNMaXN0KSB7CiAgICBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQVJSQVldOwogICAgaWYgKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciAmJiBoYXMoVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBLRVkpKSB7CiAgICAgZGVsZXRlIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcltLRVldOwogICAgfQogICB9CiAgaWYgKCFUeXBlZEFycmF5W0tFWV0gfHwgZm9yY2VkKSB7CiAgIHRyeSB7CiAgICByZXR1cm4gcmVkZWZpbmUoVHlwZWRBcnJheSwgS0VZLCBmb3JjZWQgPyBwcm9wZXJ0eSA6IE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgJiYgSW50OEFycmF5W0tFWV0gfHwgcHJvcGVydHkpOwogICB9IGNhdGNoIChlcnJvcikgewogICB9CiAgfSBlbHNlCiAgIHJldHVybjsKIH0KIGZvciAoQVJSQVkgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHsKICBUeXBlZEFycmF5Q29uc3RydWN0b3IgPSBnbG9iYWxbQVJSQVldOwogIGlmIChUeXBlZEFycmF5Q29uc3RydWN0b3IgJiYgKCFUeXBlZEFycmF5Q29uc3RydWN0b3JbS0VZXSB8fCBmb3JjZWQpKSB7CiAgIHJlZGVmaW5lKFR5cGVkQXJyYXlDb25zdHJ1Y3RvciwgS0VZLCBwcm9wZXJ0eSk7CiAgfQogfQp9Owpmb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHsKIGlmICghZ2xvYmFsW05BTUVdKQogIE5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgPSBmYWxzZTsKfQppZiAoIU5BVElWRV9BUlJBWV9CVUZGRVJfVklFV1MgfHwgdHlwZW9mIFR5cGVkQXJyYXkgIT0gJ2Z1bmN0aW9uJyB8fCBUeXBlZEFycmF5ID09PSBGdW5jdGlvbi5wcm90b3R5cGUpIHsKIFR5cGVkQXJyYXkgPSBmdW5jdGlvbiBUeXBlZEFycmF5KCkgewogIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGludm9jYXRpb24nKTsKIH07CiBpZiAoTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUykKICBmb3IgKE5BTUUgaW4gVHlwZWRBcnJheUNvbnN0cnVjdG9yc0xpc3QpIHsKICAgaWYgKGdsb2JhbFtOQU1FXSkKICAgIHNldFByb3RvdHlwZU9mKGdsb2JhbFtOQU1FXSwgVHlwZWRBcnJheSk7CiAgfQp9CmlmICghTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUyB8fCAhVHlwZWRBcnJheVByb3RvdHlwZSB8fCBUeXBlZEFycmF5UHJvdG90eXBlID09PSBPYmplY3RQcm90b3R5cGUpIHsKIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5LnByb3RvdHlwZTsKIGlmIChOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTKQogIGZvciAoTkFNRSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkgewogICBpZiAoZ2xvYmFsW05BTUVdKQogICAgc2V0UHJvdG90eXBlT2YoZ2xvYmFsW05BTUVdLnByb3RvdHlwZSwgVHlwZWRBcnJheVByb3RvdHlwZSk7CiAgfQp9CmlmIChOQVRJVkVfQVJSQVlfQlVGRkVSX1ZJRVdTICYmIGdldFByb3RvdHlwZU9mKFVpbnQ4Q2xhbXBlZEFycmF5UHJvdG90eXBlKSAhPT0gVHlwZWRBcnJheVByb3RvdHlwZSkgewogc2V0UHJvdG90eXBlT2YoVWludDhDbGFtcGVkQXJyYXlQcm90b3R5cGUsIFR5cGVkQXJyYXlQcm90b3R5cGUpOwp9CmlmIChERVNDUklQVE9SUyAmJiAhaGFzKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRPX1NUUklOR19UQUcpKSB7CiBUWVBFRF9BUlJBWV9UQUdfUkVRSVJFRCA9IHRydWU7CiBkZWZpbmVQcm9wZXJ0eShUeXBlZEFycmF5UHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCB7CiAgZ2V0OiBmdW5jdGlvbiAoKSB7CiAgIHJldHVybiBpc09iamVjdCh0aGlzKSA/IHRoaXNbVFlQRURfQVJSQVlfVEFHXSA6IHVuZGVmaW5lZDsKICB9CiB9KTsKIGZvciAoTkFNRSBpbiBUeXBlZEFycmF5Q29uc3RydWN0b3JzTGlzdCkKICBpZiAoZ2xvYmFsW05BTUVdKSB7CiAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShnbG9iYWxbTkFNRV0sIFRZUEVEX0FSUkFZX1RBRywgTkFNRSk7CiAgfQp9Cm1vZHVsZS5leHBvcnRzID0gewogTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUzogTkFUSVZFX0FSUkFZX0JVRkZFUl9WSUVXUywKIFRZUEVEX0FSUkFZX1RBRzogVFlQRURfQVJSQVlfVEFHX1JFUUlSRUQgJiYgVFlQRURfQVJSQVlfVEFHLAogYVR5cGVkQXJyYXk6IGFUeXBlZEFycmF5LAogYVR5cGVkQXJyYXlDb25zdHJ1Y3RvcjogYVR5cGVkQXJyYXlDb25zdHJ1Y3RvciwKIGV4cG9ydFR5cGVkQXJyYXlNZXRob2Q6IGV4cG9ydFR5cGVkQXJyYXlNZXRob2QsCiBleHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kOiBleHBvcnRUeXBlZEFycmF5U3RhdGljTWV0aG9kLAogaXNWaWV3OiBpc1ZpZXcsCiBpc1R5cGVkQXJyYXk6IGlzVHlwZWRBcnJheSwKIFR5cGVkQXJyYXk6IFR5cGVkQXJyYXksCiBUeXBlZEFycmF5UHJvdG90eXBlOiBUeXBlZEFycmF5UHJvdG90eXBlCn07CgovKioqLyB9KSwKLyogMTExICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCm1vZHVsZS5leHBvcnRzID0gdHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgRGF0YVZpZXcgIT09ICd1bmRlZmluZWQnOwoKLyoqKi8gfSksCi8qIDExMiAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgYW5PYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI4KTsKdmFyIGFGdW5jdGlvbiA9IF9fd19wZGZqc19yZXF1aXJlX18oNjMpOwp2YXIgd2VsbEtub3duU3ltYm9sID0gX193X3BkZmpzX3JlcXVpcmVfXyg1Nyk7CnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcikgewogdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjsKIHZhciBTOwogcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBkZWZhdWx0Q29uc3RydWN0b3IgOiBhRnVuY3Rpb24oUyk7Cn07CgovKioqLyB9KSwKLyogMTEzICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCl9fd19wZGZqc19yZXF1aXJlX18oMTE0KTsKX193X3BkZmpzX3JlcXVpcmVfXyg3Nyk7Cl9fd19wZGZqc19yZXF1aXJlX18oMTE2KTsKX193X3BkZmpzX3JlcXVpcmVfXygxMTkpOwpfX3dfcGRmanNfcmVxdWlyZV9fKDEzNCk7Cl9fd19wZGZqc19yZXF1aXJlX18oMTM1KTsKdmFyIHBhdGggPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQzKTsKbW9kdWxlLmV4cG9ydHMgPSBwYXRoLlByb21pc2U7CgovKioqLyB9KSwKLyogMTE0ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDk2KTsKdmFyIHJlZGVmaW5lID0gX193X3BkZmpzX3JlcXVpcmVfXygyOSk7CnZhciB0b1N0cmluZyA9IF9fd19wZGZqc19yZXF1aXJlX18oMTE1KTsKaWYgKCFUT19TVFJJTkdfVEFHX1NVUFBPUlQpIHsKIHJlZGVmaW5lKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIHRvU3RyaW5nLCB7IHVuc2FmZTogdHJ1ZSB9KTsKfQoKLyoqKi8gfSksCi8qIDExNSAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7Cgp2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gX193X3BkZmpzX3JlcXVpcmVfXyg5Nik7CnZhciBjbGFzc29mID0gX193X3BkZmpzX3JlcXVpcmVfXyg5NSk7Cm1vZHVsZS5leHBvcnRzID0gVE9fU1RSSU5HX1RBR19TVVBQT1JUID8ge30udG9TdHJpbmcgOiBmdW5jdGlvbiB0b1N0cmluZygpIHsKIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJzsKfTsKCi8qKiovIH0pLAovKiAxMTYgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIGdsb2JhbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTEpOwp2YXIgRE9NSXRlcmFibGVzID0gX193X3BkZmpzX3JlcXVpcmVfXygxMTcpOwp2YXIgQXJyYXlJdGVyYXRvck1ldGhvZHMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDExOCk7CnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI2KTsKdmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNTcpOwp2YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7CnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpOwp2YXIgQXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9yTWV0aG9kcy52YWx1ZXM7CmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHsKIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV07CiB2YXIgQ29sbGVjdGlvblByb3RvdHlwZSA9IENvbGxlY3Rpb24gJiYgQ29sbGVjdGlvbi5wcm90b3R5cGU7CiBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSkgewogIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gQXJyYXlWYWx1ZXMpCiAgIHRyeSB7CiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTsKICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdID0gQXJyYXlWYWx1ZXM7CiAgIH0KICBpZiAoIUNvbGxlY3Rpb25Qcm90b3R5cGVbVE9fU1RSSU5HX1RBR10pIHsKICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIENPTExFQ1RJT05fTkFNRSk7CiAgfQogIGlmIChET01JdGVyYWJsZXNbQ09MTEVDVElPTl9OQU1FXSkKICAgZm9yICh2YXIgTUVUSE9EX05BTUUgaW4gQXJyYXlJdGVyYXRvck1ldGhvZHMpIHsKICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSAhPT0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKQogICAgIHRyeSB7CiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBNRVRIT0RfTkFNRSwgQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKTsKICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICBDb2xsZWN0aW9uUHJvdG90eXBlW01FVEhPRF9OQU1FXSA9IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXTsKICAgICB9CiAgIH0KIH0KfQoKLyoqKi8gfSksCi8qIDExNyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7Cgptb2R1bGUuZXhwb3J0cyA9IHsKIENTU1J1bGVMaXN0OiAwLAogQ1NTU3R5bGVEZWNsYXJhdGlvbjogMCwKIENTU1ZhbHVlTGlzdDogMCwKIENsaWVudFJlY3RMaXN0OiAwLAogRE9NUmVjdExpc3Q6IDAsCiBET01TdHJpbmdMaXN0OiAwLAogRE9NVG9rZW5MaXN0OiAxLAogRGF0YVRyYW5zZmVySXRlbUxpc3Q6IDAsCiBGaWxlTGlzdDogMCwKIEhUTUxBbGxDb2xsZWN0aW9uOiAwLAogSFRNTENvbGxlY3Rpb246IDAsCiBIVE1MRm9ybUVsZW1lbnQ6IDAsCiBIVE1MU2VsZWN0RWxlbWVudDogMCwKIE1lZGlhTGlzdDogMCwKIE1pbWVUeXBlQXJyYXk6IDAsCiBOYW1lZE5vZGVNYXA6IDAsCiBOb2RlTGlzdDogMSwKIFBhaW50UmVxdWVzdExpc3Q6IDAsCiBQbHVnaW46IDAsCiBQbHVnaW5BcnJheTogMCwKIFNWR0xlbmd0aExpc3Q6IDAsCiBTVkdOdW1iZXJMaXN0OiAwLAogU1ZHUGF0aFNlZ0xpc3Q6IDAsCiBTVkdQb2ludExpc3Q6IDAsCiBTVkdTdHJpbmdMaXN0OiAwLAogU1ZHVHJhbnNmb3JtTGlzdDogMCwKIFNvdXJjZUJ1ZmZlckxpc3Q6IDAsCiBTdHlsZVNoZWV0TGlzdDogMCwKIFRleHRUcmFja0N1ZUxpc3Q6IDAsCiBUZXh0VHJhY2tMaXN0OiAwLAogVG91Y2hMaXN0OiAwCn07CgovKioqLyB9KSwKLyogMTE4ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCnZhciB0b0luZGV4ZWRPYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE3KTsKdmFyIGFkZFRvVW5zY29wYWJsZXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDcwKTsKdmFyIEl0ZXJhdG9ycyA9IF9fd19wZGZqc19yZXF1aXJlX18oODYpOwp2YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMzMpOwp2YXIgZGVmaW5lSXRlcmF0b3IgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDc5KTsKdmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJzsKdmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDsKdmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihBUlJBWV9JVEVSQVRPUik7Cm1vZHVsZS5leHBvcnRzID0gZGVmaW5lSXRlcmF0b3IoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkgewogc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7CiAgdHlwZTogQVJSQVlfSVRFUkFUT1IsCiAgdGFyZ2V0OiB0b0luZGV4ZWRPYmplY3QoaXRlcmF0ZWQpLAogIGluZGV4OiAwLAogIGtpbmQ6IGtpbmQKIH0pOwp9LCBmdW5jdGlvbiAoKSB7CiB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpOwogdmFyIHRhcmdldCA9IHN0YXRlLnRhcmdldDsKIHZhciBraW5kID0gc3RhdGUua2luZDsKIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7CiBpZiAoIXRhcmdldCB8fCBpbmRleCA+PSB0YXJnZXQubGVuZ3RoKSB7CiAgc3RhdGUudGFyZ2V0ID0gdW5kZWZpbmVkOwogIHJldHVybiB7CiAgIHZhbHVlOiB1bmRlZmluZWQsCiAgIGRvbmU6IHRydWUKICB9OwogfQogaWYgKGtpbmQgPT0gJ2tleXMnKQogIHJldHVybiB7CiAgIHZhbHVlOiBpbmRleCwKICAgZG9uZTogZmFsc2UKICB9OwogaWYgKGtpbmQgPT0gJ3ZhbHVlcycpCiAgcmV0dXJuIHsKICAgdmFsdWU6IHRhcmdldFtpbmRleF0sCiAgIGRvbmU6IGZhbHNlCiAgfTsKIHJldHVybiB7CiAgdmFsdWU6IFsKICAgaW5kZXgsCiAgIHRhcmdldFtpbmRleF0KICBdLAogIGRvbmU6IGZhbHNlCiB9Owp9LCAndmFsdWVzJyk7Ckl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7CmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTsKYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7CmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTsKCi8qKiovIH0pLAovKiAxMTkgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKdmFyICQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwKTsKdmFyIElTX1BVUkUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDM3KTsKdmFyIGdsb2JhbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTEpOwp2YXIgZ2V0QnVpbHRJbiA9IF9fd19wZGZqc19yZXF1aXJlX18oNDIpOwp2YXIgTmF0aXZlUHJvbWlzZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTIwKTsKdmFyIHJlZGVmaW5lID0gX193X3BkZmpzX3JlcXVpcmVfXygyOSk7CnZhciByZWRlZmluZUFsbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTIxKTsKdmFyIHNldFRvU3RyaW5nVGFnID0gX193X3BkZmpzX3JlcXVpcmVfXyg4NSk7CnZhciBzZXRTcGVjaWVzID0gX193X3BkZmpzX3JlcXVpcmVfXygxMjIpOwp2YXIgaXNPYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIyKTsKdmFyIGFGdW5jdGlvbiA9IF9fd19wZGZqc19yZXF1aXJlX18oNjMpOwp2YXIgYW5JbnN0YW5jZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTIzKTsKdmFyIGNsYXNzb2YgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE5KTsKdmFyIGluc3BlY3RTb3VyY2UgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDMxKTsKdmFyIGl0ZXJhdGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEyNCk7CnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDk3KTsKdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IF9fd19wZGZqc19yZXF1aXJlX18oMTEyKTsKdmFyIHRhc2sgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEyNSkuc2V0Owp2YXIgbWljcm90YXNrID0gX193X3BkZmpzX3JlcXVpcmVfXygxMjgpOwp2YXIgcHJvbWlzZVJlc29sdmUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEyOSk7CnZhciBob3N0UmVwb3J0RXJyb3JzID0gX193X3BkZmpzX3JlcXVpcmVfXygxMzEpOwp2YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEzMCk7CnZhciBwZXJmb3JtID0gX193X3BkZmpzX3JlcXVpcmVfXygxMzIpOwp2YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMzMpOwp2YXIgaXNGb3JjZWQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDUyKTsKdmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNTcpOwp2YXIgVjhfVkVSU0lPTiA9IF9fd19wZGZqc19yZXF1aXJlX18oMTMzKTsKdmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTsKdmFyIFBST01JU0UgPSAnUHJvbWlzZSc7CnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7CnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7CnZhciBnZXRJbnRlcm5hbFByb21pc2VTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKFBST01JU0UpOwp2YXIgUHJvbWlzZUNvbnN0cnVjdG9yID0gTmF0aXZlUHJvbWlzZTsKdmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7CnZhciBkb2N1bWVudCA9IGdsb2JhbC5kb2N1bWVudDsKdmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzczsKdmFyICRmZXRjaCA9IGdldEJ1aWx0SW4oJ2ZldGNoJyk7CnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmY7CnZhciBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eTsKdmFyIElTX05PREUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJzsKdmFyIERJU1BBVENIX0VWRU5UID0gISEoZG9jdW1lbnQgJiYgZG9jdW1lbnQuY3JlYXRlRXZlbnQgJiYgZ2xvYmFsLmRpc3BhdGNoRXZlbnQpOwp2YXIgVU5IQU5ETEVEX1JFSkVDVElPTiA9ICd1bmhhbmRsZWRyZWplY3Rpb24nOwp2YXIgUkVKRUNUSU9OX0hBTkRMRUQgPSAncmVqZWN0aW9uaGFuZGxlZCc7CnZhciBQRU5ESU5HID0gMDsKdmFyIEZVTEZJTExFRCA9IDE7CnZhciBSRUpFQ1RFRCA9IDI7CnZhciBIQU5ETEVEID0gMTsKdmFyIFVOSEFORExFRCA9IDI7CnZhciBJbnRlcm5hbCwgT3duUHJvbWlzZUNhcGFiaWxpdHksIFByb21pc2VXcmFwcGVyLCBuYXRpdmVUaGVuOwp2YXIgRk9SQ0VEID0gaXNGb3JjZWQoUFJPTUlTRSwgZnVuY3Rpb24gKCkgewogdmFyIEdMT0JBTF9DT1JFX0pTX1BST01JU0UgPSBpbnNwZWN0U291cmNlKFByb21pc2VDb25zdHJ1Y3RvcikgIT09IFN0cmluZyhQcm9taXNlQ29uc3RydWN0b3IpOwogaWYgKCFHTE9CQUxfQ09SRV9KU19QUk9NSVNFKSB7CiAgaWYgKFY4X1ZFUlNJT04gPT09IDY2KQogICByZXR1cm4gdHJ1ZTsKICBpZiAoIUlTX05PREUgJiYgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCAhPSAnZnVuY3Rpb24nKQogICByZXR1cm4gdHJ1ZTsKIH0KIGlmIChJU19QVVJFICYmICFQcm9taXNlQ29uc3RydWN0b3IucHJvdG90eXBlWydmaW5hbGx5J10pCiAgcmV0dXJuIHRydWU7CiBpZiAoVjhfVkVSU0lPTiA+PSA1MSAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoUHJvbWlzZUNvbnN0cnVjdG9yKSkKICByZXR1cm4gZmFsc2U7CiB2YXIgcHJvbWlzZSA9IFByb21pc2VDb25zdHJ1Y3Rvci5yZXNvbHZlKDEpOwogdmFyIEZha2VQcm9taXNlID0gZnVuY3Rpb24gKGV4ZWMpIHsKICBleGVjKGZ1bmN0aW9uICgpIHsKICB9LCBmdW5jdGlvbiAoKSB7CiAgfSk7CiB9OwogdmFyIGNvbnN0cnVjdG9yID0gcHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9OwogY29uc3RydWN0b3JbU1BFQ0lFU10gPSBGYWtlUHJvbWlzZTsKIHJldHVybiAhKHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7CiB9KSBpbnN0YW5jZW9mIEZha2VQcm9taXNlKTsKfSk7CnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gRk9SQ0VEIHx8ICFjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24oZnVuY3Rpb24gKGl0ZXJhYmxlKSB7CiBQcm9taXNlQ29uc3RydWN0b3IuYWxsKGl0ZXJhYmxlKVsnY2F0Y2gnXShmdW5jdGlvbiAoKSB7CiB9KTsKfSk7CnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7CiB2YXIgdGhlbjsKIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTsKfTsKdmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSwgaXNSZWplY3QpIHsKIGlmIChzdGF0ZS5ub3RpZmllZCkKICByZXR1cm47CiBzdGF0ZS5ub3RpZmllZCA9IHRydWU7CiB2YXIgY2hhaW4gPSBzdGF0ZS5yZWFjdGlvbnM7CiBtaWNyb3Rhc2soZnVuY3Rpb24gKCkgewogIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlOwogIHZhciBvayA9IHN0YXRlLnN0YXRlID09IEZVTEZJTExFRDsKICB2YXIgaW5kZXggPSAwOwogIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpbmRleCkgewogICB2YXIgcmVhY3Rpb24gPSBjaGFpbltpbmRleCsrXTsKICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDsKICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlOwogICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0OwogICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluOwogICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7CiAgIHRyeSB7CiAgICBpZiAoaGFuZGxlcikgewogICAgIGlmICghb2spIHsKICAgICAgaWYgKHN0YXRlLnJlamVjdGlvbiA9PT0gVU5IQU5ETEVEKQogICAgICAgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSwgc3RhdGUpOwogICAgICBzdGF0ZS5yZWplY3Rpb24gPSBIQU5ETEVEOwogICAgIH0KICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkKICAgICAgcmVzdWx0ID0gdmFsdWU7CiAgICAgZWxzZSB7CiAgICAgIGlmIChkb21haW4pCiAgICAgICBkb21haW4uZW50ZXIoKTsKICAgICAgcmVzdWx0ID0gaGFuZGxlcih2YWx1ZSk7CiAgICAgIGlmIChkb21haW4pIHsKICAgICAgIGRvbWFpbi5leGl0KCk7CiAgICAgICBleGl0ZWQgPSB0cnVlOwogICAgICB9CiAgICAgfQogICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHsKICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTsKICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHsKICAgICAgdGhlbi5jYWxsKHJlc3VsdCwgcmVzb2x2ZSwgcmVqZWN0KTsKICAgICB9IGVsc2UKICAgICAgcmVzb2x2ZShyZXN1bHQpOwogICAgfSBlbHNlCiAgICAgcmVqZWN0KHZhbHVlKTsKICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkKICAgICBkb21haW4uZXhpdCgpOwogICAgcmVqZWN0KGVycm9yKTsKICAgfQogIH0KICBzdGF0ZS5yZWFjdGlvbnMgPSBbXTsKICBzdGF0ZS5ub3RpZmllZCA9IGZhbHNlOwogIGlmIChpc1JlamVjdCAmJiAhc3RhdGUucmVqZWN0aW9uKQogICBvblVuaGFuZGxlZChwcm9taXNlLCBzdGF0ZSk7CiB9KTsKfTsKdmFyIGRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiAobmFtZSwgcHJvbWlzZSwgcmVhc29uKSB7CiB2YXIgZXZlbnQsIGhhbmRsZXI7CiBpZiAoRElTUEFUQ0hfRVZFTlQpIHsKICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpOwogIGV2ZW50LnByb21pc2UgPSBwcm9taXNlOwogIGV2ZW50LnJlYXNvbiA9IHJlYXNvbjsKICBldmVudC5pbml0RXZlbnQobmFtZSwgZmFsc2UsIHRydWUpOwogIGdsb2JhbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKIH0gZWxzZQogIGV2ZW50ID0gewogICBwcm9taXNlOiBwcm9taXNlLAogICByZWFzb246IHJlYXNvbgogIH07CiBpZiAoaGFuZGxlciA9IGdsb2JhbFsnb24nICsgbmFtZV0pCiAgaGFuZGxlcihldmVudCk7CiBlbHNlIGlmIChuYW1lID09PSBVTkhBTkRMRURfUkVKRUNUSU9OKQogIGhvc3RSZXBvcnRFcnJvcnMoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHJlYXNvbik7Cn07CnZhciBvblVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSkgewogdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkgewogIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlOwogIHZhciBJU19VTkhBTkRMRUQgPSBpc1VuaGFuZGxlZChzdGF0ZSk7CiAgdmFyIHJlc3VsdDsKICBpZiAoSVNfVU5IQU5ETEVEKSB7CiAgIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkgewogICAgaWYgKElTX05PREUpIHsKICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTsKICAgIH0gZWxzZQogICAgIGRpc3BhdGNoRXZlbnQoVU5IQU5ETEVEX1JFSkVDVElPTiwgcHJvbWlzZSwgdmFsdWUpOwogICB9KTsKICAgc3RhdGUucmVqZWN0aW9uID0gSVNfTk9ERSB8fCBpc1VuaGFuZGxlZChzdGF0ZSkgPyBVTkhBTkRMRUQgOiBIQU5ETEVEOwogICBpZiAocmVzdWx0LmVycm9yKQogICAgdGhyb3cgcmVzdWx0LnZhbHVlOwogIH0KIH0pOwp9Owp2YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAoc3RhdGUpIHsKIHJldHVybiBzdGF0ZS5yZWplY3Rpb24gIT09IEhBTkRMRUQgJiYgIXN0YXRlLnBhcmVudDsKfTsKdmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlKSB7CiB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7CiAgaWYgKElTX05PREUpIHsKICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7CiAgfSBlbHNlCiAgIGRpc3BhdGNoRXZlbnQoUkVKRUNUSU9OX0hBTkRMRUQsIHByb21pc2UsIHN0YXRlLnZhbHVlKTsKIH0pOwp9Owp2YXIgYmluZCA9IGZ1bmN0aW9uIChmbiwgcHJvbWlzZSwgc3RhdGUsIHVud3JhcCkgewogcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkgewogIGZuKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKTsKIH07Cn07CnZhciBpbnRlcm5hbFJlamVjdCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSwgdmFsdWUsIHVud3JhcCkgewogaWYgKHN0YXRlLmRvbmUpCiAgcmV0dXJuOwogc3RhdGUuZG9uZSA9IHRydWU7CiBpZiAodW53cmFwKQogIHN0YXRlID0gdW53cmFwOwogc3RhdGUudmFsdWUgPSB2YWx1ZTsKIHN0YXRlLnN0YXRlID0gUkVKRUNURUQ7CiBub3RpZnkocHJvbWlzZSwgc3RhdGUsIHRydWUpOwp9Owp2YXIgaW50ZXJuYWxSZXNvbHZlID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7CiBpZiAoc3RhdGUuZG9uZSkKICByZXR1cm47CiBzdGF0ZS5kb25lID0gdHJ1ZTsKIGlmICh1bndyYXApCiAgc3RhdGUgPSB1bndyYXA7CiB0cnkgewogIGlmIChwcm9taXNlID09PSB2YWx1ZSkKICAgdGhyb3cgVHlwZUVycm9yKCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZiIpOwogIHZhciB0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSk7CiAgaWYgKHRoZW4pIHsKICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHsKICAgIHZhciB3cmFwcGVyID0geyBkb25lOiBmYWxzZSB9OwogICAgdHJ5IHsKICAgICB0aGVuLmNhbGwodmFsdWUsIGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBwcm9taXNlLCB3cmFwcGVyLCBzdGF0ZSksIGJpbmQoaW50ZXJuYWxSZWplY3QsIHByb21pc2UsIHdyYXBwZXIsIHN0YXRlKSk7CiAgICB9IGNhdGNoIChlcnJvcikgewogICAgIGludGVybmFsUmVqZWN0KHByb21pc2UsIHdyYXBwZXIsIGVycm9yLCBzdGF0ZSk7CiAgICB9CiAgIH0pOwogIH0gZWxzZSB7CiAgIHN0YXRlLnZhbHVlID0gdmFsdWU7CiAgIHN0YXRlLnN0YXRlID0gRlVMRklMTEVEOwogICBub3RpZnkocHJvbWlzZSwgc3RhdGUsIGZhbHNlKTsKICB9CiB9IGNhdGNoIChlcnJvcikgewogIGludGVybmFsUmVqZWN0KHByb21pc2UsIHsgZG9uZTogZmFsc2UgfSwgZXJyb3IsIHN0YXRlKTsKIH0KfTsKaWYgKEZPUkNFRCkgewogUHJvbWlzZUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikgewogIGFuSW5zdGFuY2UodGhpcywgUHJvbWlzZUNvbnN0cnVjdG9yLCBQUk9NSVNFKTsKICBhRnVuY3Rpb24oZXhlY3V0b3IpOwogIEludGVybmFsLmNhbGwodGhpcyk7CiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKTsKICB0cnkgewogICBleGVjdXRvcihiaW5kKGludGVybmFsUmVzb2x2ZSwgdGhpcywgc3RhdGUpLCBiaW5kKGludGVybmFsUmVqZWN0LCB0aGlzLCBzdGF0ZSkpOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgIGludGVybmFsUmVqZWN0KHRoaXMsIHN0YXRlLCBlcnJvcik7CiAgfQogfTsKIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikgewogIHNldEludGVybmFsU3RhdGUodGhpcywgewogICB0eXBlOiBQUk9NSVNFLAogICBkb25lOiBmYWxzZSwKICAgbm90aWZpZWQ6IGZhbHNlLAogICBwYXJlbnQ6IGZhbHNlLAogICByZWFjdGlvbnM6IFtdLAogICByZWplY3Rpb246IGZhbHNlLAogICBzdGF0ZTogUEVORElORywKICAgdmFsdWU6IHVuZGVmaW5lZAogIH0pOwogfTsKIEludGVybmFsLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKFByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHsKICB0aGVuOiBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7CiAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUHJvbWlzZVN0YXRlKHRoaXMpOwogICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgUHJvbWlzZUNvbnN0cnVjdG9yKSk7CiAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7CiAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7CiAgIHJlYWN0aW9uLmRvbWFpbiA9IElTX05PREUgPyBwcm9jZXNzLmRvbWFpbiA6IHVuZGVmaW5lZDsKICAgc3RhdGUucGFyZW50ID0gdHJ1ZTsKICAgc3RhdGUucmVhY3Rpb25zLnB1c2gocmVhY3Rpb24pOwogICBpZiAoc3RhdGUuc3RhdGUgIT0gUEVORElORykKICAgIG5vdGlmeSh0aGlzLCBzdGF0ZSwgZmFsc2UpOwogICByZXR1cm4gcmVhY3Rpb24ucHJvbWlzZTsKICB9LAogICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7CiAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTsKICB9CiB9KTsKIE93blByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKCkgewogIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7CiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZShwcm9taXNlKTsKICB0aGlzLnByb21pc2UgPSBwcm9taXNlOwogIHRoaXMucmVzb2x2ZSA9IGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBwcm9taXNlLCBzdGF0ZSk7CiAgdGhpcy5yZWplY3QgPSBiaW5kKGludGVybmFsUmVqZWN0LCBwcm9taXNlLCBzdGF0ZSk7CiB9OwogbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHsKICByZXR1cm4gQyA9PT0gUHJvbWlzZUNvbnN0cnVjdG9yIHx8IEMgPT09IFByb21pc2VXcmFwcGVyID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpOwogfTsKIGlmICghSVNfUFVSRSAmJiB0eXBlb2YgTmF0aXZlUHJvbWlzZSA9PSAnZnVuY3Rpb24nKSB7CiAgbmF0aXZlVGhlbiA9IE5hdGl2ZVByb21pc2UucHJvdG90eXBlLnRoZW47CiAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZS5wcm90b3R5cGUsICd0aGVuJywgZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkgewogICB2YXIgdGhhdCA9IHRoaXM7CiAgIHJldHVybiBuZXcgUHJvbWlzZUNvbnN0cnVjdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgIG5hdGl2ZVRoZW4uY2FsbCh0aGF0LCByZXNvbHZlLCByZWplY3QpOwogICB9KS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKTsKICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTsKICBpZiAodHlwZW9mICRmZXRjaCA9PSAnZnVuY3Rpb24nKQogICAkKHsKICAgIGdsb2JhbDogdHJ1ZSwKICAgIGVudW1lcmFibGU6IHRydWUsCiAgICBmb3JjZWQ6IHRydWUKICAgfSwgewogICAgZmV0Y2g6IGZ1bmN0aW9uIGZldGNoKGlucHV0KSB7CiAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKFByb21pc2VDb25zdHJ1Y3RvciwgJGZldGNoLmFwcGx5KGdsb2JhbCwgYXJndW1lbnRzKSk7CiAgICB9CiAgIH0pOwogfQp9CiQoewogZ2xvYmFsOiB0cnVlLAogd3JhcDogdHJ1ZSwKIGZvcmNlZDogRk9SQ0VECn0sIHsgUHJvbWlzZTogUHJvbWlzZUNvbnN0cnVjdG9yIH0pOwpzZXRUb1N0cmluZ1RhZyhQcm9taXNlQ29uc3RydWN0b3IsIFBST01JU0UsIGZhbHNlLCB0cnVlKTsKc2V0U3BlY2llcyhQUk9NSVNFKTsKUHJvbWlzZVdyYXBwZXIgPSBnZXRCdWlsdEluKFBST01JU0UpOwokKHsKIHRhcmdldDogUFJPTUlTRSwKIHN0YXQ6IHRydWUsCiBmb3JjZWQ6IEZPUkNFRAp9LCB7CiByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7CiAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTsKICBjYXBhYmlsaXR5LnJlamVjdC5jYWxsKHVuZGVmaW5lZCwgcik7CiAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTsKIH0KfSk7CiQoewogdGFyZ2V0OiBQUk9NSVNFLAogc3RhdDogdHJ1ZSwKIGZvcmNlZDogSVNfUFVSRSB8fCBGT1JDRUQKfSwgewogcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7CiAgcmV0dXJuIHByb21pc2VSZXNvbHZlKElTX1BVUkUgJiYgdGhpcyA9PT0gUHJvbWlzZVdyYXBwZXIgPyBQcm9taXNlQ29uc3RydWN0b3IgOiB0aGlzLCB4KTsKIH0KfSk7CiQoewogdGFyZ2V0OiBQUk9NSVNFLAogc3RhdDogdHJ1ZSwKIGZvcmNlZDogSU5DT1JSRUNUX0lURVJBVElPTgp9LCB7CiBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkgewogIHZhciBDID0gdGhpczsKICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpOwogIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlOwogIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDsKICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7CiAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhRnVuY3Rpb24oQy5yZXNvbHZlKTsKICAgdmFyIHZhbHVlcyA9IFtdOwogICB2YXIgY291bnRlciA9IDA7CiAgIHZhciByZW1haW5pbmcgPSAxOwogICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkgewogICAgdmFyIGluZGV4ID0gY291bnRlcisrOwogICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTsKICAgIHZhbHVlcy5wdXNoKHVuZGVmaW5lZCk7CiAgICByZW1haW5pbmcrKzsKICAgICRwcm9taXNlUmVzb2x2ZS5jYWxsKEMsIHByb21pc2UpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgaWYgKGFscmVhZHlDYWxsZWQpCiAgICAgIHJldHVybjsKICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTsKICAgICB2YWx1ZXNbaW5kZXhdID0gdmFsdWU7CiAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpOwogICAgfSwgcmVqZWN0KTsKICAgfSk7CiAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTsKICB9KTsKICBpZiAocmVzdWx0LmVycm9yKQogICByZWplY3QocmVzdWx0LnZhbHVlKTsKICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlOwogfSwKIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHsKICB2YXIgQyA9IHRoaXM7CiAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTsKICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7CiAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkgewogICB2YXIgJHByb21pc2VSZXNvbHZlID0gYUZ1bmN0aW9uKEMucmVzb2x2ZSk7CiAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7CiAgICAkcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGNhcGFiaWxpdHkucmVzb2x2ZSwgcmVqZWN0KTsKICAgfSk7CiAgfSk7CiAgaWYgKHJlc3VsdC5lcnJvcikKICAgcmVqZWN0KHJlc3VsdC52YWx1ZSk7CiAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTsKIH0KfSk7CgovKioqLyB9KSwKLyogMTIwICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBnbG9iYWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDExKTsKbW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuUHJvbWlzZTsKCi8qKiovIH0pLAovKiAxMjEgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIHJlZGVmaW5lID0gX193X3BkZmpzX3JlcXVpcmVfXygyOSk7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRhcmdldCwgc3JjLCBvcHRpb25zKSB7CiBmb3IgKHZhciBrZXkgaW4gc3JjKQogIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgb3B0aW9ucyk7CiByZXR1cm4gdGFyZ2V0Owp9OwoKLyoqKi8gfSksCi8qIDEyMiAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7Cgp2YXIgZ2V0QnVpbHRJbiA9IF9fd19wZGZqc19yZXF1aXJlX18oNDIpOwp2YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI3KTsKdmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNTcpOwp2YXIgREVTQ1JJUFRPUlMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEzKTsKdmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSkgewogdmFyIENvbnN0cnVjdG9yID0gZ2V0QnVpbHRJbihDT05TVFJVQ1RPUl9OQU1FKTsKIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7CiBpZiAoREVTQ1JJUFRPUlMgJiYgQ29uc3RydWN0b3IgJiYgIUNvbnN0cnVjdG9yW1NQRUNJRVNdKSB7CiAgZGVmaW5lUHJvcGVydHkoQ29uc3RydWN0b3IsIFNQRUNJRVMsIHsKICAgY29uZmlndXJhYmxlOiB0cnVlLAogICBnZXQ6IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzOwogICB9CiAgfSk7CiB9Cn07CgovKioqLyB9KSwKLyogMTIzICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSkgewogaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsKICB0aHJvdyBUeXBlRXJyb3IoJ0luY29ycmVjdCAnICsgKG5hbWUgPyBuYW1lICsgJyAnIDogJycpICsgJ2ludm9jYXRpb24nKTsKIH0KIHJldHVybiBpdDsKfTsKCi8qKiovIH0pLAovKiAxMjQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIGFuT2JqZWN0ID0gX193X3BkZmpzX3JlcXVpcmVfXygyOCk7CnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDkyKTsKdmFyIHRvTGVuZ3RoID0gX193X3BkZmpzX3JlcXVpcmVfXyg0Nyk7CnZhciBiaW5kID0gX193X3BkZmpzX3JlcXVpcmVfXyg2Mik7CnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IF9fd19wZGZqc19yZXF1aXJlX18oOTQpOwp2YXIgY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyA9IF9fd19wZGZqc19yZXF1aXJlX18oOTEpOwp2YXIgUmVzdWx0ID0gZnVuY3Rpb24gKHN0b3BwZWQsIHJlc3VsdCkgewogdGhpcy5zdG9wcGVkID0gc3RvcHBlZDsKIHRoaXMucmVzdWx0ID0gcmVzdWx0Owp9Owp2YXIgaXRlcmF0ZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhYmxlLCBmbiwgdGhhdCwgQVNfRU5UUklFUywgSVNfSVRFUkFUT1IpIHsKIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChmbiwgdGhhdCwgQVNfRU5UUklFUyA/IDIgOiAxKTsKIHZhciBpdGVyYXRvciwgaXRlckZuLCBpbmRleCwgbGVuZ3RoLCByZXN1bHQsIG5leHQsIHN0ZXA7CiBpZiAoSVNfSVRFUkFUT1IpIHsKICBpdGVyYXRvciA9IGl0ZXJhYmxlOwogfSBlbHNlIHsKICBpdGVyRm4gPSBnZXRJdGVyYXRvck1ldGhvZChpdGVyYWJsZSk7CiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykKICAgdGhyb3cgVHlwZUVycm9yKCdUYXJnZXQgaXMgbm90IGl0ZXJhYmxlJyk7CiAgaWYgKGlzQXJyYXlJdGVyYXRvck1ldGhvZChpdGVyRm4pKSB7CiAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgewogICAgcmVzdWx0ID0gQVNfRU5UUklFUyA/IGJvdW5kRnVuY3Rpb24oYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogYm91bmRGdW5jdGlvbihpdGVyYWJsZVtpbmRleF0pOwogICAgaWYgKHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpCiAgICAgcmV0dXJuIHJlc3VsdDsKICAgfQogICByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7CiAgfQogIGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOwogfQogbmV4dCA9IGl0ZXJhdG9yLm5leHQ7CiB3aGlsZSAoIShzdGVwID0gbmV4dC5jYWxsKGl0ZXJhdG9yKSkuZG9uZSkgewogIHJlc3VsdCA9IGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcoaXRlcmF0b3IsIGJvdW5kRnVuY3Rpb24sIHN0ZXAudmFsdWUsIEFTX0VOVFJJRVMpOwogIGlmICh0eXBlb2YgcmVzdWx0ID09ICdvYmplY3QnICYmIHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpCiAgIHJldHVybiByZXN1bHQ7CiB9CiByZXR1cm4gbmV3IFJlc3VsdChmYWxzZSk7Cn07Cml0ZXJhdGUuc3RvcCA9IGZ1bmN0aW9uIChyZXN1bHQpIHsKIHJldHVybiBuZXcgUmVzdWx0KHRydWUsIHJlc3VsdCk7Cn07CgovKioqLyB9KSwKLyogMTI1ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBnbG9iYWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDExKTsKdmFyIGZhaWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygxNCk7CnZhciBjbGFzc29mID0gX193X3BkZmpzX3JlcXVpcmVfXygxOSk7CnZhciBiaW5kID0gX193X3BkZmpzX3JlcXVpcmVfXyg2Mik7CnZhciBodG1sID0gX193X3BkZmpzX3JlcXVpcmVfXyg3NCk7CnZhciBjcmVhdGVFbGVtZW50ID0gX193X3BkZmpzX3JlcXVpcmVfXygyNSk7CnZhciBJU19JT1MgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEyNik7CnZhciBsb2NhdGlvbiA9IGdsb2JhbC5sb2NhdGlvbjsKdmFyIHNldCA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7CnZhciBjbGVhciA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTsKdmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzczsKdmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsOwp2YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7CnZhciBjb3VudGVyID0gMDsKdmFyIHF1ZXVlID0ge307CnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJzsKdmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0Owp2YXIgcnVuID0gZnVuY3Rpb24gKGlkKSB7CiBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7CiAgdmFyIGZuID0gcXVldWVbaWRdOwogIGRlbGV0ZSBxdWV1ZVtpZF07CiAgZm4oKTsKIH0KfTsKdmFyIHJ1bm5lciA9IGZ1bmN0aW9uIChpZCkgewogcmV0dXJuIGZ1bmN0aW9uICgpIHsKICBydW4oaWQpOwogfTsKfTsKdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7CiBydW4oZXZlbnQuZGF0YSk7Cn07CnZhciBwb3N0ID0gZnVuY3Rpb24gKGlkKSB7CiBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgbG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgbG9jYXRpb24uaG9zdCk7Cn07CmlmICghc2V0IHx8ICFjbGVhcikgewogc2V0ID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7CiAgdmFyIGFyZ3MgPSBbXTsKICB2YXIgaSA9IDE7CiAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKQogICBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pOwogIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7CiAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh1bmRlZmluZWQsIGFyZ3MpOwogIH07CiAgZGVmZXIoY291bnRlcik7CiAgcmV0dXJuIGNvdW50ZXI7CiB9OwogY2xlYXIgPSBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkgewogIGRlbGV0ZSBxdWV1ZVtpZF07CiB9OwogaWYgKGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7CiAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHsKICAgcHJvY2Vzcy5uZXh0VGljayhydW5uZXIoaWQpKTsKICB9OwogfSBlbHNlIGlmIChEaXNwYXRjaCAmJiBEaXNwYXRjaC5ub3cpIHsKICBkZWZlciA9IGZ1bmN0aW9uIChpZCkgewogICBEaXNwYXRjaC5ub3cocnVubmVyKGlkKSk7CiAgfTsKIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwgJiYgIUlTX0lPUykgewogIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTsKICBwb3J0ID0gY2hhbm5lbC5wb3J0MjsKICBjaGFubmVsLnBvcnQxLm9ubWVzc2FnZSA9IGxpc3RlbmVyOwogIGRlZmVyID0gYmluZChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTsKIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzICYmICFmYWlscyhwb3N0KSAmJiBsb2NhdGlvbi5wcm90b2NvbCAhPT0gJ2ZpbGU6JykgewogIGRlZmVyID0gcG9zdDsKICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7CiB9IGVsc2UgaWYgKE9OUkVBRFlTVEFURUNIQU5HRSBpbiBjcmVhdGVFbGVtZW50KCdzY3JpcHQnKSkgewogIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7CiAgIGh0bWwuYXBwZW5kQ2hpbGQoY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7CiAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpOwogICAgcnVuKGlkKTsKICAgfTsKICB9OwogfSBlbHNlIHsKICBkZWZlciA9IGZ1bmN0aW9uIChpZCkgewogICBzZXRUaW1lb3V0KHJ1bm5lcihpZCksIDApOwogIH07CiB9Cn0KbW9kdWxlLmV4cG9ydHMgPSB7CiBzZXQ6IHNldCwKIGNsZWFyOiBjbGVhcgp9OwoKLyoqKi8gfSksCi8qIDEyNiAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgdXNlckFnZW50ID0gX193X3BkZmpzX3JlcXVpcmVfXygxMjcpOwptb2R1bGUuZXhwb3J0cyA9IC8oaXBob25lfGlwb2R8aXBhZCkuKmFwcGxld2Via2l0L2kudGVzdCh1c2VyQWdlbnQpOwoKLyoqKi8gfSksCi8qIDEyNyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgZ2V0QnVpbHRJbiA9IF9fd19wZGZqc19yZXF1aXJlX18oNDIpOwptb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ25hdmlnYXRvcicsICd1c2VyQWdlbnQnKSB8fCAnJzsKCi8qKiovIH0pLAovKiAxMjggKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIGdsb2JhbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTEpOwp2YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gX193X3BkZmpzX3JlcXVpcmVfXygxMikuZjsKdmFyIGNsYXNzb2YgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE5KTsKdmFyIG1hY3JvdGFzayA9IF9fd19wZGZqc19yZXF1aXJlX18oMTI1KS5zZXQ7CnZhciBJU19JT1MgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEyNik7CnZhciBNdXRhdGlvbk9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7CnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7CnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7CnZhciBJU19OT0RFID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7CnZhciBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2xvYmFsLCAncXVldWVNaWNyb3Rhc2snKTsKdmFyIHF1ZXVlTWljcm90YXNrID0gcXVldWVNaWNyb3Rhc2tEZXNjcmlwdG9yICYmIHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvci52YWx1ZTsKdmFyIGZsdXNoLCBoZWFkLCBsYXN0LCBub3RpZnksIHRvZ2dsZSwgbm9kZSwgcHJvbWlzZSwgdGhlbjsKaWYgKCFxdWV1ZU1pY3JvdGFzaykgewogZmx1c2ggPSBmdW5jdGlvbiAoKSB7CiAgdmFyIHBhcmVudCwgZm47CiAgaWYgKElTX05PREUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkKICAgcGFyZW50LmV4aXQoKTsKICB3aGlsZSAoaGVhZCkgewogICBmbiA9IGhlYWQuZm47CiAgIGhlYWQgPSBoZWFkLm5leHQ7CiAgIHRyeSB7CiAgICBmbigpOwogICB9IGNhdGNoIChlcnJvcikgewogICAgaWYgKGhlYWQpCiAgICAgbm90aWZ5KCk7CiAgICBlbHNlCiAgICAgbGFzdCA9IHVuZGVmaW5lZDsKICAgIHRocm93IGVycm9yOwogICB9CiAgfQogIGxhc3QgPSB1bmRlZmluZWQ7CiAgaWYgKHBhcmVudCkKICAgcGFyZW50LmVudGVyKCk7CiB9OwogaWYgKElTX05PREUpIHsKICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7CiAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpOwogIH07CiB9IGVsc2UgaWYgKE11dGF0aW9uT2JzZXJ2ZXIgJiYgIUlTX0lPUykgewogIHRvZ2dsZSA9IHRydWU7CiAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTsKICBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7CiAgbm90aWZ5ID0gZnVuY3Rpb24gKCkgewogICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlOwogIH07CiB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7CiAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpOwogIHRoZW4gPSBwcm9taXNlLnRoZW47CiAgbm90aWZ5ID0gZnVuY3Rpb24gKCkgewogICB0aGVuLmNhbGwocHJvbWlzZSwgZmx1c2gpOwogIH07CiB9IGVsc2UgewogIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHsKICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7CiAgfTsKIH0KfQptb2R1bGUuZXhwb3J0cyA9IHF1ZXVlTWljcm90YXNrIHx8IGZ1bmN0aW9uIChmbikgewogdmFyIHRhc2sgPSB7CiAgZm46IGZuLAogIG5leHQ6IHVuZGVmaW5lZAogfTsKIGlmIChsYXN0KQogIGxhc3QubmV4dCA9IHRhc2s7CiBpZiAoIWhlYWQpIHsKICBoZWFkID0gdGFzazsKICBub3RpZnkoKTsKIH0KIGxhc3QgPSB0YXNrOwp9OwoKLyoqKi8gfSksCi8qIDEyOSAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgYW5PYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI4KTsKdmFyIGlzT2JqZWN0ID0gX193X3BkZmpzX3JlcXVpcmVfXygyMik7CnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTMwKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkgewogYW5PYmplY3QoQyk7CiBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykKICByZXR1cm4geDsKIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7CiB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7CiByZXNvbHZlKHgpOwogcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7Cn07CgovKioqLyB9KSwKLyogMTMwICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCnZhciBhRnVuY3Rpb24gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDYzKTsKdmFyIFByb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHsKIHZhciByZXNvbHZlLCByZWplY3Q7CiB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkgewogIGlmIChyZXNvbHZlICE9PSB1bmRlZmluZWQgfHwgcmVqZWN0ICE9PSB1bmRlZmluZWQpCiAgIHRocm93IFR5cGVFcnJvcignQmFkIFByb21pc2UgY29uc3RydWN0b3InKTsKICByZXNvbHZlID0gJCRyZXNvbHZlOwogIHJlamVjdCA9ICQkcmVqZWN0OwogfSk7CiB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7CiB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpOwp9Owptb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHsKIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7Cn07CgovKioqLyB9KSwKLyogMTMxICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBnbG9iYWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDExKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYSwgYikgewogdmFyIGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZTsKIGlmIChjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIHsKICBhcmd1bWVudHMubGVuZ3RoID09PSAxID8gY29uc29sZS5lcnJvcihhKSA6IGNvbnNvbGUuZXJyb3IoYSwgYik7CiB9Cn07CgovKioqLyB9KSwKLyogMTMyICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHsKCm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHsKIHRyeSB7CiAgcmV0dXJuIHsKICAgZXJyb3I6IGZhbHNlLAogICB2YWx1ZTogZXhlYygpCiAgfTsKIH0gY2F0Y2ggKGVycm9yKSB7CiAgcmV0dXJuIHsKICAgZXJyb3I6IHRydWUsCiAgIHZhbHVlOiBlcnJvcgogIH07CiB9Cn07CgovKioqLyB9KSwKLyogMTMzICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBnbG9iYWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDExKTsKdmFyIHVzZXJBZ2VudCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTI3KTsKdmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzczsKdmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zOwp2YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52ODsKdmFyIG1hdGNoLCB2ZXJzaW9uOwppZiAodjgpIHsKIG1hdGNoID0gdjguc3BsaXQoJy4nKTsKIHZlcnNpb24gPSBtYXRjaFswXSArIG1hdGNoWzFdOwp9IGVsc2UgaWYgKHVzZXJBZ2VudCkgewogbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0VkZ2VcLyhcZCspLyk7CiBpZiAoIW1hdGNoIHx8IG1hdGNoWzFdID49IDc0KSB7CiAgbWF0Y2ggPSB1c2VyQWdlbnQubWF0Y2goL0Nocm9tZVwvKFxkKykvKTsKICBpZiAobWF0Y2gpCiAgIHZlcnNpb24gPSBtYXRjaFsxXTsKIH0KfQptb2R1bGUuZXhwb3J0cyA9IHZlcnNpb24gJiYgK3ZlcnNpb247CgovKioqLyB9KSwKLyogMTM0ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCnZhciAkID0gX193X3BkZmpzX3JlcXVpcmVfXygxMCk7CnZhciBhRnVuY3Rpb24gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDYzKTsKdmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gX193X3BkZmpzX3JlcXVpcmVfXygxMzApOwp2YXIgcGVyZm9ybSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTMyKTsKdmFyIGl0ZXJhdGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEyNCk7CiQoewogdGFyZ2V0OiAnUHJvbWlzZScsCiBzdGF0OiB0cnVlCn0sIHsKIGFsbFNldHRsZWQ6IGZ1bmN0aW9uIGFsbFNldHRsZWQoaXRlcmFibGUpIHsKICB2YXIgQyA9IHRoaXM7CiAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mKEMpOwogIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlOwogIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDsKICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7CiAgIHZhciBwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpOwogICB2YXIgdmFsdWVzID0gW107CiAgIHZhciBjb3VudGVyID0gMDsKICAgdmFyIHJlbWFpbmluZyA9IDE7CiAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7CiAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7CiAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlOwogICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTsKICAgIHJlbWFpbmluZysrOwogICAgcHJvbWlzZVJlc29sdmUuY2FsbChDLCBwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkgewogICAgIGlmIChhbHJlYWR5Q2FsbGVkKQogICAgICByZXR1cm47CiAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7CiAgICAgdmFsdWVzW2luZGV4XSA9IHsKICAgICAgc3RhdHVzOiAnZnVsZmlsbGVkJywKICAgICAgdmFsdWU6IHZhbHVlCiAgICAgfTsKICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7CiAgICB9LCBmdW5jdGlvbiAoZSkgewogICAgIGlmIChhbHJlYWR5Q2FsbGVkKQogICAgICByZXR1cm47CiAgICAgYWxyZWFkeUNhbGxlZCA9IHRydWU7CiAgICAgdmFsdWVzW2luZGV4XSA9IHsKICAgICAgc3RhdHVzOiAncmVqZWN0ZWQnLAogICAgICByZWFzb246IGUKICAgICB9OwogICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTsKICAgIH0pOwogICB9KTsKICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpOwogIH0pOwogIGlmIChyZXN1bHQuZXJyb3IpCiAgIHJlamVjdChyZXN1bHQudmFsdWUpOwogIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7CiB9Cn0pOwoKLyoqKi8gfSksCi8qIDEzNSAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7Cgp2YXIgJCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTApOwp2YXIgSVNfUFVSRSA9IF9fd19wZGZqc19yZXF1aXJlX18oMzcpOwp2YXIgTmF0aXZlUHJvbWlzZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTIwKTsKdmFyIGZhaWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygxNCk7CnZhciBnZXRCdWlsdEluID0gX193X3BkZmpzX3JlcXVpcmVfXyg0Mik7CnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDExMik7CnZhciBwcm9taXNlUmVzb2x2ZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTI5KTsKdmFyIHJlZGVmaW5lID0gX193X3BkZmpzX3JlcXVpcmVfXygyOSk7CnZhciBOT05fR0VORVJJQyA9ICEhTmF0aXZlUHJvbWlzZSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7CiBOYXRpdmVQcm9taXNlLnByb3RvdHlwZVsnZmluYWxseSddLmNhbGwoewogIHRoZW46IGZ1bmN0aW9uICgpIHsKICB9CiB9LCBmdW5jdGlvbiAoKSB7CiB9KTsKfSk7CiQoewogdGFyZ2V0OiAnUHJvbWlzZScsCiBwcm90bzogdHJ1ZSwKIHJlYWw6IHRydWUsCiBmb3JjZWQ6IE5PTl9HRU5FUklDCn0sIHsKICdmaW5hbGx5JzogZnVuY3Rpb24gKG9uRmluYWxseSkgewogIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGdldEJ1aWx0SW4oJ1Byb21pc2UnKSk7CiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7CiAgcmV0dXJuIHRoaXMudGhlbihpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKHgpIHsKICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB4OwogICB9KTsKICB9IDogb25GaW5hbGx5LCBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKGUpIHsKICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgIHRocm93IGU7CiAgIH0pOwogIH0gOiBvbkZpbmFsbHkpOwogfQp9KTsKaWYgKCFJU19QVVJFICYmIHR5cGVvZiBOYXRpdmVQcm9taXNlID09ICdmdW5jdGlvbicgJiYgIU5hdGl2ZVByb21pc2UucHJvdG90eXBlWydmaW5hbGx5J10pIHsKIHJlZGVmaW5lKE5hdGl2ZVByb21pc2UucHJvdG90eXBlLCAnZmluYWxseScsIGdldEJ1aWx0SW4oJ1Byb21pc2UnKS5wcm90b3R5cGVbJ2ZpbmFsbHknXSk7Cn0KCi8qKiovIH0pLAovKiAxMzYgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKX193X3BkZmpzX3JlcXVpcmVfXygxMzcpOwpfX3dfcGRmanNfcmVxdWlyZV9fKDE0Mik7Cl9fd19wZGZqc19yZXF1aXJlX18oMTQwKTsKdmFyIHBhdGggPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQzKTsKbW9kdWxlLmV4cG9ydHMgPSBwYXRoLlVSTDsKCi8qKiovIH0pLAovKiAxMzcgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKX193X3BkZmpzX3JlcXVpcmVfXyg3Nyk7CnZhciAkID0gX193X3BkZmpzX3JlcXVpcmVfXygxMCk7CnZhciBERVNDUklQVE9SUyA9IF9fd19wZGZqc19yZXF1aXJlX18oMTMpOwp2YXIgVVNFX05BVElWRV9VUkwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEzOCk7CnZhciBnbG9iYWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDExKTsKdmFyIGRlZmluZVByb3BlcnRpZXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDcyKTsKdmFyIHJlZGVmaW5lID0gX193X3BkZmpzX3JlcXVpcmVfXygyOSk7CnZhciBhbkluc3RhbmNlID0gX193X3BkZmpzX3JlcXVpcmVfXygxMjMpOwp2YXIgaGFzID0gX193X3BkZmpzX3JlcXVpcmVfXygyMyk7CnZhciBhc3NpZ24gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwMCk7CnZhciBhcnJheUZyb20gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDkwKTsKdmFyIGNvZGVBdCA9IF9fd19wZGZqc19yZXF1aXJlX18oNzgpLmNvZGVBdDsKdmFyIHRvQVNDSUkgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEzOSk7CnZhciBzZXRUb1N0cmluZ1RhZyA9IF9fd19wZGZqc19yZXF1aXJlX18oODUpOwp2YXIgVVJMU2VhcmNoUGFyYW1zTW9kdWxlID0gX193X3BkZmpzX3JlcXVpcmVfXygxNDApOwp2YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMzMpOwp2YXIgTmF0aXZlVVJMID0gZ2xvYmFsLlVSTDsKdmFyIFVSTFNlYXJjaFBhcmFtcyA9IFVSTFNlYXJjaFBhcmFtc01vZHVsZS5VUkxTZWFyY2hQYXJhbXM7CnZhciBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlID0gVVJMU2VhcmNoUGFyYW1zTW9kdWxlLmdldFN0YXRlOwp2YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0Owp2YXIgZ2V0SW50ZXJuYWxVUkxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKCdVUkwnKTsKdmFyIGZsb29yID0gTWF0aC5mbG9vcjsKdmFyIHBvdyA9IE1hdGgucG93Owp2YXIgSU5WQUxJRF9BVVRIT1JJVFkgPSAnSW52YWxpZCBhdXRob3JpdHknOwp2YXIgSU5WQUxJRF9TQ0hFTUUgPSAnSW52YWxpZCBzY2hlbWUnOwp2YXIgSU5WQUxJRF9IT1NUID0gJ0ludmFsaWQgaG9zdCc7CnZhciBJTlZBTElEX1BPUlQgPSAnSW52YWxpZCBwb3J0JzsKdmFyIEFMUEhBID0gL1tBLVphLXpdLzsKdmFyIEFMUEhBTlVNRVJJQyA9IC9bXGQrLS5BLVphLXpdLzsKdmFyIERJR0lUID0gL1xkLzsKdmFyIEhFWF9TVEFSVCA9IC9eKDB4fDBYKS87CnZhciBPQ1QgPSAvXlswLTddKyQvOwp2YXIgREVDID0gL15cZCskLzsKdmFyIEhFWCA9IC9eW1xkQS1GYS1mXSskLzsKdmFyIEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlQgPSAvW1x1MDAwMFx1MDAwOVx1MDAwQVx1MDAwRCAjJS86P0BbXFxdXS87CnZhciBGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5UID0gL1tcdTAwMDBcdTAwMDlcdTAwMEFcdTAwMEQgIy86P0BbXFxdXS87CnZhciBMRUFESU5HX0FORF9UUkFJTElOR19DMF9DT05UUk9MX09SX1NQQUNFID0gL15bXHUwMDAwLVx1MDAxRiBdK3xbXHUwMDAwLVx1MDAxRiBdKyQvZzsKdmFyIFRBQl9BTkRfTkVXX0xJTkUgPSAvW1x1MDAwOVx1MDAwQVx1MDAwRF0vZzsKdmFyIEVPRjsKdmFyIHBhcnNlSG9zdCA9IGZ1bmN0aW9uICh1cmwsIGlucHV0KSB7CiB2YXIgcmVzdWx0LCBjb2RlUG9pbnRzLCBpbmRleDsKIGlmIChpbnB1dC5jaGFyQXQoMCkgPT0gJ1snKSB7CiAgaWYgKGlucHV0LmNoYXJBdChpbnB1dC5sZW5ndGggLSAxKSAhPSAnXScpCiAgIHJldHVybiBJTlZBTElEX0hPU1Q7CiAgcmVzdWx0ID0gcGFyc2VJUHY2KGlucHV0LnNsaWNlKDEsIC0xKSk7CiAgaWYgKCFyZXN1bHQpCiAgIHJldHVybiBJTlZBTElEX0hPU1Q7CiAgdXJsLmhvc3QgPSByZXN1bHQ7CiB9IGVsc2UgaWYgKCFpc1NwZWNpYWwodXJsKSkgewogIGlmIChGT1JCSURERU5fSE9TVF9DT0RFX1BPSU5UX0VYQ0xVRElOR19QRVJDRU5ULnRlc3QoaW5wdXQpKQogICByZXR1cm4gSU5WQUxJRF9IT1NUOwogIHJlc3VsdCA9ICcnOwogIGNvZGVQb2ludHMgPSBhcnJheUZyb20oaW5wdXQpOwogIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IGNvZGVQb2ludHMubGVuZ3RoOyBpbmRleCsrKSB7CiAgIHJlc3VsdCArPSBwZXJjZW50RW5jb2RlKGNvZGVQb2ludHNbaW5kZXhdLCBDMENvbnRyb2xQZXJjZW50RW5jb2RlU2V0KTsKICB9CiAgdXJsLmhvc3QgPSByZXN1bHQ7CiB9IGVsc2UgewogIGlucHV0ID0gdG9BU0NJSShpbnB1dCk7CiAgaWYgKEZPUkJJRERFTl9IT1NUX0NPREVfUE9JTlQudGVzdChpbnB1dCkpCiAgIHJldHVybiBJTlZBTElEX0hPU1Q7CiAgcmVzdWx0ID0gcGFyc2VJUHY0KGlucHV0KTsKICBpZiAocmVzdWx0ID09PSBudWxsKQogICByZXR1cm4gSU5WQUxJRF9IT1NUOwogIHVybC5ob3N0ID0gcmVzdWx0OwogfQp9Owp2YXIgcGFyc2VJUHY0ID0gZnVuY3Rpb24gKGlucHV0KSB7CiB2YXIgcGFydHMgPSBpbnB1dC5zcGxpdCgnLicpOwogdmFyIHBhcnRzTGVuZ3RoLCBudW1iZXJzLCBpbmRleCwgcGFydCwgcmFkaXgsIG51bWJlciwgaXB2NDsKIGlmIChwYXJ0cy5sZW5ndGggJiYgcGFydHNbcGFydHMubGVuZ3RoIC0gMV0gPT0gJycpIHsKICBwYXJ0cy5wb3AoKTsKIH0KIHBhcnRzTGVuZ3RoID0gcGFydHMubGVuZ3RoOwogaWYgKHBhcnRzTGVuZ3RoID4gNCkKICByZXR1cm4gaW5wdXQ7CiBudW1iZXJzID0gW107CiBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBwYXJ0c0xlbmd0aDsgaW5kZXgrKykgewogIHBhcnQgPSBwYXJ0c1tpbmRleF07CiAgaWYgKHBhcnQgPT0gJycpCiAgIHJldHVybiBpbnB1dDsKICByYWRpeCA9IDEwOwogIGlmIChwYXJ0Lmxlbmd0aCA+IDEgJiYgcGFydC5jaGFyQXQoMCkgPT0gJzAnKSB7CiAgIHJhZGl4ID0gSEVYX1NUQVJULnRlc3QocGFydCkgPyAxNiA6IDg7CiAgIHBhcnQgPSBwYXJ0LnNsaWNlKHJhZGl4ID09IDggPyAxIDogMik7CiAgfQogIGlmIChwYXJ0ID09PSAnJykgewogICBudW1iZXIgPSAwOwogIH0gZWxzZSB7CiAgIGlmICghKHJhZGl4ID09IDEwID8gREVDIDogcmFkaXggPT0gOCA/IE9DVCA6IEhFWCkudGVzdChwYXJ0KSkKICAgIHJldHVybiBpbnB1dDsKICAgbnVtYmVyID0gcGFyc2VJbnQocGFydCwgcmFkaXgpOwogIH0KICBudW1iZXJzLnB1c2gobnVtYmVyKTsKIH0KIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IHBhcnRzTGVuZ3RoOyBpbmRleCsrKSB7CiAgbnVtYmVyID0gbnVtYmVyc1tpbmRleF07CiAgaWYgKGluZGV4ID09IHBhcnRzTGVuZ3RoIC0gMSkgewogICBpZiAobnVtYmVyID49IHBvdygyNTYsIDUgLSBwYXJ0c0xlbmd0aCkpCiAgICByZXR1cm4gbnVsbDsKICB9IGVsc2UgaWYgKG51bWJlciA+IDI1NSkKICAgcmV0dXJuIG51bGw7CiB9CiBpcHY0ID0gbnVtYmVycy5wb3AoKTsKIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IG51bWJlcnMubGVuZ3RoOyBpbmRleCsrKSB7CiAgaXB2NCArPSBudW1iZXJzW2luZGV4XSAqIHBvdygyNTYsIDMgLSBpbmRleCk7CiB9CiByZXR1cm4gaXB2NDsKfTsKdmFyIHBhcnNlSVB2NiA9IGZ1bmN0aW9uIChpbnB1dCkgewogdmFyIGFkZHJlc3MgPSBbCiAgMCwKICAwLAogIDAsCiAgMCwKICAwLAogIDAsCiAgMCwKICAwCiBdOwogdmFyIHBpZWNlSW5kZXggPSAwOwogdmFyIGNvbXByZXNzID0gbnVsbDsKIHZhciBwb2ludGVyID0gMDsKIHZhciB2YWx1ZSwgbGVuZ3RoLCBudW1iZXJzU2VlbiwgaXB2NFBpZWNlLCBudW1iZXIsIHN3YXBzLCBzd2FwOwogdmFyIGNoYXIgPSBmdW5jdGlvbiAoKSB7CiAgcmV0dXJuIGlucHV0LmNoYXJBdChwb2ludGVyKTsKIH07CiBpZiAoY2hhcigpID09ICc6JykgewogIGlmIChpbnB1dC5jaGFyQXQoMSkgIT0gJzonKQogICByZXR1cm47CiAgcG9pbnRlciArPSAyOwogIHBpZWNlSW5kZXgrKzsKICBjb21wcmVzcyA9IHBpZWNlSW5kZXg7CiB9CiB3aGlsZSAoY2hhcigpKSB7CiAgaWYgKHBpZWNlSW5kZXggPT0gOCkKICAgcmV0dXJuOwogIGlmIChjaGFyKCkgPT0gJzonKSB7CiAgIGlmIChjb21wcmVzcyAhPT0gbnVsbCkKICAgIHJldHVybjsKICAgcG9pbnRlcisrOwogICBwaWVjZUluZGV4Kys7CiAgIGNvbXByZXNzID0gcGllY2VJbmRleDsKICAgY29udGludWU7CiAgfQogIHZhbHVlID0gbGVuZ3RoID0gMDsKICB3aGlsZSAobGVuZ3RoIDwgNCAmJiBIRVgudGVzdChjaGFyKCkpKSB7CiAgIHZhbHVlID0gdmFsdWUgKiAxNiArIHBhcnNlSW50KGNoYXIoKSwgMTYpOwogICBwb2ludGVyKys7CiAgIGxlbmd0aCsrOwogIH0KICBpZiAoY2hhcigpID09ICcuJykgewogICBpZiAobGVuZ3RoID09IDApCiAgICByZXR1cm47CiAgIHBvaW50ZXIgLT0gbGVuZ3RoOwogICBpZiAocGllY2VJbmRleCA+IDYpCiAgICByZXR1cm47CiAgIG51bWJlcnNTZWVuID0gMDsKICAgd2hpbGUgKGNoYXIoKSkgewogICAgaXB2NFBpZWNlID0gbnVsbDsKICAgIGlmIChudW1iZXJzU2VlbiA+IDApIHsKICAgICBpZiAoY2hhcigpID09ICcuJyAmJiBudW1iZXJzU2VlbiA8IDQpCiAgICAgIHBvaW50ZXIrKzsKICAgICBlbHNlCiAgICAgIHJldHVybjsKICAgIH0KICAgIGlmICghRElHSVQudGVzdChjaGFyKCkpKQogICAgIHJldHVybjsKICAgIHdoaWxlIChESUdJVC50ZXN0KGNoYXIoKSkpIHsKICAgICBudW1iZXIgPSBwYXJzZUludChjaGFyKCksIDEwKTsKICAgICBpZiAoaXB2NFBpZWNlID09PSBudWxsKQogICAgICBpcHY0UGllY2UgPSBudW1iZXI7CiAgICAgZWxzZSBpZiAoaXB2NFBpZWNlID09IDApCiAgICAgIHJldHVybjsKICAgICBlbHNlCiAgICAgIGlwdjRQaWVjZSA9IGlwdjRQaWVjZSAqIDEwICsgbnVtYmVyOwogICAgIGlmIChpcHY0UGllY2UgPiAyNTUpCiAgICAgIHJldHVybjsKICAgICBwb2ludGVyKys7CiAgICB9CiAgICBhZGRyZXNzW3BpZWNlSW5kZXhdID0gYWRkcmVzc1twaWVjZUluZGV4XSAqIDI1NiArIGlwdjRQaWVjZTsKICAgIG51bWJlcnNTZWVuKys7CiAgICBpZiAobnVtYmVyc1NlZW4gPT0gMiB8fCBudW1iZXJzU2VlbiA9PSA0KQogICAgIHBpZWNlSW5kZXgrKzsKICAgfQogICBpZiAobnVtYmVyc1NlZW4gIT0gNCkKICAgIHJldHVybjsKICAgYnJlYWs7CiAgfSBlbHNlIGlmIChjaGFyKCkgPT0gJzonKSB7CiAgIHBvaW50ZXIrKzsKICAgaWYgKCFjaGFyKCkpCiAgICByZXR1cm47CiAgfSBlbHNlIGlmIChjaGFyKCkpCiAgIHJldHVybjsKICBhZGRyZXNzW3BpZWNlSW5kZXgrK10gPSB2YWx1ZTsKIH0KIGlmIChjb21wcmVzcyAhPT0gbnVsbCkgewogIHN3YXBzID0gcGllY2VJbmRleCAtIGNvbXByZXNzOwogIHBpZWNlSW5kZXggPSA3OwogIHdoaWxlIChwaWVjZUluZGV4ICE9IDAgJiYgc3dhcHMgPiAwKSB7CiAgIHN3YXAgPSBhZGRyZXNzW3BpZWNlSW5kZXhdOwogICBhZGRyZXNzW3BpZWNlSW5kZXgtLV0gPSBhZGRyZXNzW2NvbXByZXNzICsgc3dhcHMgLSAxXTsKICAgYWRkcmVzc1tjb21wcmVzcyArIC0tc3dhcHNdID0gc3dhcDsKICB9CiB9IGVsc2UgaWYgKHBpZWNlSW5kZXggIT0gOCkKICByZXR1cm47CiByZXR1cm4gYWRkcmVzczsKfTsKdmFyIGZpbmRMb25nZXN0WmVyb1NlcXVlbmNlID0gZnVuY3Rpb24gKGlwdjYpIHsKIHZhciBtYXhJbmRleCA9IG51bGw7CiB2YXIgbWF4TGVuZ3RoID0gMTsKIHZhciBjdXJyU3RhcnQgPSBudWxsOwogdmFyIGN1cnJMZW5ndGggPSAwOwogdmFyIGluZGV4ID0gMDsKIGZvciAoOyBpbmRleCA8IDg7IGluZGV4KyspIHsKICBpZiAoaXB2NltpbmRleF0gIT09IDApIHsKICAgaWYgKGN1cnJMZW5ndGggPiBtYXhMZW5ndGgpIHsKICAgIG1heEluZGV4ID0gY3VyclN0YXJ0OwogICAgbWF4TGVuZ3RoID0gY3Vyckxlbmd0aDsKICAgfQogICBjdXJyU3RhcnQgPSBudWxsOwogICBjdXJyTGVuZ3RoID0gMDsKICB9IGVsc2UgewogICBpZiAoY3VyclN0YXJ0ID09PSBudWxsKQogICAgY3VyclN0YXJ0ID0gaW5kZXg7CiAgICsrY3Vyckxlbmd0aDsKICB9CiB9CiBpZiAoY3Vyckxlbmd0aCA+IG1heExlbmd0aCkgewogIG1heEluZGV4ID0gY3VyclN0YXJ0OwogIG1heExlbmd0aCA9IGN1cnJMZW5ndGg7CiB9CiByZXR1cm4gbWF4SW5kZXg7Cn07CnZhciBzZXJpYWxpemVIb3N0ID0gZnVuY3Rpb24gKGhvc3QpIHsKIHZhciByZXN1bHQsIGluZGV4LCBjb21wcmVzcywgaWdub3JlMDsKIGlmICh0eXBlb2YgaG9zdCA9PSAnbnVtYmVyJykgewogIHJlc3VsdCA9IFtdOwogIGZvciAoaW5kZXggPSAwOyBpbmRleCA8IDQ7IGluZGV4KyspIHsKICAgcmVzdWx0LnVuc2hpZnQoaG9zdCAlIDI1Nik7CiAgIGhvc3QgPSBmbG9vcihob3N0IC8gMjU2KTsKICB9CiAgcmV0dXJuIHJlc3VsdC5qb2luKCcuJyk7CiB9IGVsc2UgaWYgKHR5cGVvZiBob3N0ID09ICdvYmplY3QnKSB7CiAgcmVzdWx0ID0gJyc7CiAgY29tcHJlc3MgPSBmaW5kTG9uZ2VzdFplcm9TZXF1ZW5jZShob3N0KTsKICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCA4OyBpbmRleCsrKSB7CiAgIGlmIChpZ25vcmUwICYmIGhvc3RbaW5kZXhdID09PSAwKQogICAgY29udGludWU7CiAgIGlmIChpZ25vcmUwKQogICAgaWdub3JlMCA9IGZhbHNlOwogICBpZiAoY29tcHJlc3MgPT09IGluZGV4KSB7CiAgICByZXN1bHQgKz0gaW5kZXggPyAnOicgOiAnOjonOwogICAgaWdub3JlMCA9IHRydWU7CiAgIH0gZWxzZSB7CiAgICByZXN1bHQgKz0gaG9zdFtpbmRleF0udG9TdHJpbmcoMTYpOwogICAgaWYgKGluZGV4IDwgNykKICAgICByZXN1bHQgKz0gJzonOwogICB9CiAgfQogIHJldHVybiAnWycgKyByZXN1bHQgKyAnXSc7CiB9CiByZXR1cm4gaG9zdDsKfTsKdmFyIEMwQ29udHJvbFBlcmNlbnRFbmNvZGVTZXQgPSB7fTsKdmFyIGZyYWdtZW50UGVyY2VudEVuY29kZVNldCA9IGFzc2lnbih7fSwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCwgewogJyAnOiAxLAogJyInOiAxLAogJzwnOiAxLAogJz4nOiAxLAogJ2AnOiAxCn0pOwp2YXIgcGF0aFBlcmNlbnRFbmNvZGVTZXQgPSBhc3NpZ24oe30sIGZyYWdtZW50UGVyY2VudEVuY29kZVNldCwgewogJyMnOiAxLAogJz8nOiAxLAogJ3snOiAxLAogJ30nOiAxCn0pOwp2YXIgdXNlcmluZm9QZXJjZW50RW5jb2RlU2V0ID0gYXNzaWduKHt9LCBwYXRoUGVyY2VudEVuY29kZVNldCwgewogJy8nOiAxLAogJzonOiAxLAogJzsnOiAxLAogJz0nOiAxLAogJ0AnOiAxLAogJ1snOiAxLAogJ1xcJzogMSwKICddJzogMSwKICdeJzogMSwKICd8JzogMQp9KTsKdmFyIHBlcmNlbnRFbmNvZGUgPSBmdW5jdGlvbiAoY2hhciwgc2V0KSB7CiB2YXIgY29kZSA9IGNvZGVBdChjaGFyLCAwKTsKIHJldHVybiBjb2RlID4gMHgyMCAmJiBjb2RlIDwgMHg3RiAmJiAhaGFzKHNldCwgY2hhcikgPyBjaGFyIDogZW5jb2RlVVJJQ29tcG9uZW50KGNoYXIpOwp9Owp2YXIgc3BlY2lhbFNjaGVtZXMgPSB7CiBmdHA6IDIxLAogZmlsZTogbnVsbCwKIGh0dHA6IDgwLAogaHR0cHM6IDQ0MywKIHdzOiA4MCwKIHdzczogNDQzCn07CnZhciBpc1NwZWNpYWwgPSBmdW5jdGlvbiAodXJsKSB7CiByZXR1cm4gaGFzKHNwZWNpYWxTY2hlbWVzLCB1cmwuc2NoZW1lKTsKfTsKdmFyIGluY2x1ZGVzQ3JlZGVudGlhbHMgPSBmdW5jdGlvbiAodXJsKSB7CiByZXR1cm4gdXJsLnVzZXJuYW1lICE9ICcnIHx8IHVybC5wYXNzd29yZCAhPSAnJzsKfTsKdmFyIGNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydCA9IGZ1bmN0aW9uICh1cmwpIHsKIHJldHVybiAhdXJsLmhvc3QgfHwgdXJsLmNhbm5vdEJlQUJhc2VVUkwgfHwgdXJsLnNjaGVtZSA9PSAnZmlsZSc7Cn07CnZhciBpc1dpbmRvd3NEcml2ZUxldHRlciA9IGZ1bmN0aW9uIChzdHJpbmcsIG5vcm1hbGl6ZWQpIHsKIHZhciBzZWNvbmQ7CiByZXR1cm4gc3RyaW5nLmxlbmd0aCA9PSAyICYmIEFMUEhBLnRlc3Qoc3RyaW5nLmNoYXJBdCgwKSkgJiYgKChzZWNvbmQgPSBzdHJpbmcuY2hhckF0KDEpKSA9PSAnOicgfHwgIW5vcm1hbGl6ZWQgJiYgc2Vjb25kID09ICd8Jyk7Cn07CnZhciBzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyID0gZnVuY3Rpb24gKHN0cmluZykgewogdmFyIHRoaXJkOwogcmV0dXJuIHN0cmluZy5sZW5ndGggPiAxICYmIGlzV2luZG93c0RyaXZlTGV0dGVyKHN0cmluZy5zbGljZSgwLCAyKSkgJiYgKHN0cmluZy5sZW5ndGggPT0gMiB8fCAoKHRoaXJkID0gc3RyaW5nLmNoYXJBdCgyKSkgPT09ICcvJyB8fCB0aGlyZCA9PT0gJ1xcJyB8fCB0aGlyZCA9PT0gJz8nIHx8IHRoaXJkID09PSAnIycpKTsKfTsKdmFyIHNob3J0ZW5VUkxzUGF0aCA9IGZ1bmN0aW9uICh1cmwpIHsKIHZhciBwYXRoID0gdXJsLnBhdGg7CiB2YXIgcGF0aFNpemUgPSBwYXRoLmxlbmd0aDsKIGlmIChwYXRoU2l6ZSAmJiAodXJsLnNjaGVtZSAhPSAnZmlsZScgfHwgcGF0aFNpemUgIT0gMSB8fCAhaXNXaW5kb3dzRHJpdmVMZXR0ZXIocGF0aFswXSwgdHJ1ZSkpKSB7CiAgcGF0aC5wb3AoKTsKIH0KfTsKdmFyIGlzU2luZ2xlRG90ID0gZnVuY3Rpb24gKHNlZ21lbnQpIHsKIHJldHVybiBzZWdtZW50ID09PSAnLicgfHwgc2VnbWVudC50b0xvd2VyQ2FzZSgpID09PSAnJTJlJzsKfTsKdmFyIGlzRG91YmxlRG90ID0gZnVuY3Rpb24gKHNlZ21lbnQpIHsKIHNlZ21lbnQgPSBzZWdtZW50LnRvTG93ZXJDYXNlKCk7CiByZXR1cm4gc2VnbWVudCA9PT0gJy4uJyB8fCBzZWdtZW50ID09PSAnJTJlLicgfHwgc2VnbWVudCA9PT0gJy4lMmUnIHx8IHNlZ21lbnQgPT09ICclMmUlMmUnOwp9Owp2YXIgU0NIRU1FX1NUQVJUID0ge307CnZhciBTQ0hFTUUgPSB7fTsKdmFyIE5PX1NDSEVNRSA9IHt9Owp2YXIgU1BFQ0lBTF9SRUxBVElWRV9PUl9BVVRIT1JJVFkgPSB7fTsKdmFyIFBBVEhfT1JfQVVUSE9SSVRZID0ge307CnZhciBSRUxBVElWRSA9IHt9Owp2YXIgUkVMQVRJVkVfU0xBU0ggPSB7fTsKdmFyIFNQRUNJQUxfQVVUSE9SSVRZX1NMQVNIRVMgPSB7fTsKdmFyIFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTID0ge307CnZhciBBVVRIT1JJVFkgPSB7fTsKdmFyIEhPU1QgPSB7fTsKdmFyIEhPU1ROQU1FID0ge307CnZhciBQT1JUID0ge307CnZhciBGSUxFID0ge307CnZhciBGSUxFX1NMQVNIID0ge307CnZhciBGSUxFX0hPU1QgPSB7fTsKdmFyIFBBVEhfU1RBUlQgPSB7fTsKdmFyIFBBVEggPSB7fTsKdmFyIENBTk5PVF9CRV9BX0JBU0VfVVJMX1BBVEggPSB7fTsKdmFyIFFVRVJZID0ge307CnZhciBGUkFHTUVOVCA9IHt9Owp2YXIgcGFyc2VVUkwgPSBmdW5jdGlvbiAodXJsLCBpbnB1dCwgc3RhdGVPdmVycmlkZSwgYmFzZSkgewogdmFyIHN0YXRlID0gc3RhdGVPdmVycmlkZSB8fCBTQ0hFTUVfU1RBUlQ7CiB2YXIgcG9pbnRlciA9IDA7CiB2YXIgYnVmZmVyID0gJyc7CiB2YXIgc2VlbkF0ID0gZmFsc2U7CiB2YXIgc2VlbkJyYWNrZXQgPSBmYWxzZTsKIHZhciBzZWVuUGFzc3dvcmRUb2tlbiA9IGZhbHNlOwogdmFyIGNvZGVQb2ludHMsIGNoYXIsIGJ1ZmZlckNvZGVQb2ludHMsIGZhaWx1cmU7CiBpZiAoIXN0YXRlT3ZlcnJpZGUpIHsKICB1cmwuc2NoZW1lID0gJyc7CiAgdXJsLnVzZXJuYW1lID0gJyc7CiAgdXJsLnBhc3N3b3JkID0gJyc7CiAgdXJsLmhvc3QgPSBudWxsOwogIHVybC5wb3J0ID0gbnVsbDsKICB1cmwucGF0aCA9IFtdOwogIHVybC5xdWVyeSA9IG51bGw7CiAgdXJsLmZyYWdtZW50ID0gbnVsbDsKICB1cmwuY2Fubm90QmVBQmFzZVVSTCA9IGZhbHNlOwogIGlucHV0ID0gaW5wdXQucmVwbGFjZShMRUFESU5HX0FORF9UUkFJTElOR19DMF9DT05UUk9MX09SX1NQQUNFLCAnJyk7CiB9CiBpbnB1dCA9IGlucHV0LnJlcGxhY2UoVEFCX0FORF9ORVdfTElORSwgJycpOwogY29kZVBvaW50cyA9IGFycmF5RnJvbShpbnB1dCk7CiB3aGlsZSAocG9pbnRlciA8PSBjb2RlUG9pbnRzLmxlbmd0aCkgewogIGNoYXIgPSBjb2RlUG9pbnRzW3BvaW50ZXJdOwogIHN3aXRjaCAoc3RhdGUpIHsKICBjYXNlIFNDSEVNRV9TVEFSVDoKICAgaWYgKGNoYXIgJiYgQUxQSEEudGVzdChjaGFyKSkgewogICAgYnVmZmVyICs9IGNoYXIudG9Mb3dlckNhc2UoKTsKICAgIHN0YXRlID0gU0NIRU1FOwogICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlKSB7CiAgICBzdGF0ZSA9IE5PX1NDSEVNRTsKICAgIGNvbnRpbnVlOwogICB9IGVsc2UKICAgIHJldHVybiBJTlZBTElEX1NDSEVNRTsKICAgYnJlYWs7CiAgY2FzZSBTQ0hFTUU6CiAgIGlmIChjaGFyICYmIChBTFBIQU5VTUVSSUMudGVzdChjaGFyKSB8fCBjaGFyID09ICcrJyB8fCBjaGFyID09ICctJyB8fCBjaGFyID09ICcuJykpIHsKICAgIGJ1ZmZlciArPSBjaGFyLnRvTG93ZXJDYXNlKCk7CiAgIH0gZWxzZSBpZiAoY2hhciA9PSAnOicpIHsKICAgIGlmIChzdGF0ZU92ZXJyaWRlICYmIChpc1NwZWNpYWwodXJsKSAhPSBoYXMoc3BlY2lhbFNjaGVtZXMsIGJ1ZmZlcikgfHwgYnVmZmVyID09ICdmaWxlJyAmJiAoaW5jbHVkZXNDcmVkZW50aWFscyh1cmwpIHx8IHVybC5wb3J0ICE9PSBudWxsKSB8fCB1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAhdXJsLmhvc3QpKQogICAgIHJldHVybjsKICAgIHVybC5zY2hlbWUgPSBidWZmZXI7CiAgICBpZiAoc3RhdGVPdmVycmlkZSkgewogICAgIGlmIChpc1NwZWNpYWwodXJsKSAmJiBzcGVjaWFsU2NoZW1lc1t1cmwuc2NoZW1lXSA9PSB1cmwucG9ydCkKICAgICAgdXJsLnBvcnQgPSBudWxsOwogICAgIHJldHVybjsKICAgIH0KICAgIGJ1ZmZlciA9ICcnOwogICAgaWYgKHVybC5zY2hlbWUgPT0gJ2ZpbGUnKSB7CiAgICAgc3RhdGUgPSBGSUxFOwogICAgfSBlbHNlIGlmIChpc1NwZWNpYWwodXJsKSAmJiBiYXNlICYmIGJhc2Uuc2NoZW1lID09IHVybC5zY2hlbWUpIHsKICAgICBzdGF0ZSA9IFNQRUNJQUxfUkVMQVRJVkVfT1JfQVVUSE9SSVRZOwogICAgfSBlbHNlIGlmIChpc1NwZWNpYWwodXJsKSkgewogICAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfU0xBU0hFUzsKICAgIH0gZWxzZSBpZiAoY29kZVBvaW50c1twb2ludGVyICsgMV0gPT0gJy8nKSB7CiAgICAgc3RhdGUgPSBQQVRIX09SX0FVVEhPUklUWTsKICAgICBwb2ludGVyKys7CiAgICB9IGVsc2UgewogICAgIHVybC5jYW5ub3RCZUFCYXNlVVJMID0gdHJ1ZTsKICAgICB1cmwucGF0aC5wdXNoKCcnKTsKICAgICBzdGF0ZSA9IENBTk5PVF9CRV9BX0JBU0VfVVJMX1BBVEg7CiAgICB9CiAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUpIHsKICAgIGJ1ZmZlciA9ICcnOwogICAgc3RhdGUgPSBOT19TQ0hFTUU7CiAgICBwb2ludGVyID0gMDsKICAgIGNvbnRpbnVlOwogICB9IGVsc2UKICAgIHJldHVybiBJTlZBTElEX1NDSEVNRTsKICAgYnJlYWs7CiAgY2FzZSBOT19TQ0hFTUU6CiAgIGlmICghYmFzZSB8fCBiYXNlLmNhbm5vdEJlQUJhc2VVUkwgJiYgY2hhciAhPSAnIycpCiAgICByZXR1cm4gSU5WQUxJRF9TQ0hFTUU7CiAgIGlmIChiYXNlLmNhbm5vdEJlQUJhc2VVUkwgJiYgY2hhciA9PSAnIycpIHsKICAgIHVybC5zY2hlbWUgPSBiYXNlLnNjaGVtZTsKICAgIHVybC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKCk7CiAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5OwogICAgdXJsLmZyYWdtZW50ID0gJyc7CiAgICB1cmwuY2Fubm90QmVBQmFzZVVSTCA9IHRydWU7CiAgICBzdGF0ZSA9IEZSQUdNRU5UOwogICAgYnJlYWs7CiAgIH0KICAgc3RhdGUgPSBiYXNlLnNjaGVtZSA9PSAnZmlsZScgPyBGSUxFIDogUkVMQVRJVkU7CiAgIGNvbnRpbnVlOwogIGNhc2UgU1BFQ0lBTF9SRUxBVElWRV9PUl9BVVRIT1JJVFk6CiAgIGlmIChjaGFyID09ICcvJyAmJiBjb2RlUG9pbnRzW3BvaW50ZXIgKyAxXSA9PSAnLycpIHsKICAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVM7CiAgICBwb2ludGVyKys7CiAgIH0gZWxzZSB7CiAgICBzdGF0ZSA9IFJFTEFUSVZFOwogICAgY29udGludWU7CiAgIH0KICAgYnJlYWs7CiAgY2FzZSBQQVRIX09SX0FVVEhPUklUWToKICAgaWYgKGNoYXIgPT0gJy8nKSB7CiAgICBzdGF0ZSA9IEFVVEhPUklUWTsKICAgIGJyZWFrOwogICB9IGVsc2UgewogICAgc3RhdGUgPSBQQVRIOwogICAgY29udGludWU7CiAgIH0KICBjYXNlIFJFTEFUSVZFOgogICB1cmwuc2NoZW1lID0gYmFzZS5zY2hlbWU7CiAgIGlmIChjaGFyID09IEVPRikgewogICAgdXJsLnVzZXJuYW1lID0gYmFzZS51c2VybmFtZTsKICAgIHVybC5wYXNzd29yZCA9IGJhc2UucGFzc3dvcmQ7CiAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDsKICAgIHVybC5wb3J0ID0gYmFzZS5wb3J0OwogICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTsKICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7CiAgIH0gZWxzZSBpZiAoY2hhciA9PSAnLycgfHwgY2hhciA9PSAnXFwnICYmIGlzU3BlY2lhbCh1cmwpKSB7CiAgICBzdGF0ZSA9IFJFTEFUSVZFX1NMQVNIOwogICB9IGVsc2UgaWYgKGNoYXIgPT0gJz8nKSB7CiAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lOwogICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDsKICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0OwogICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7CiAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpOwogICAgdXJsLnF1ZXJ5ID0gJyc7CiAgICBzdGF0ZSA9IFFVRVJZOwogICB9IGVsc2UgaWYgKGNoYXIgPT0gJyMnKSB7CiAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lOwogICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDsKICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0OwogICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7CiAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpOwogICAgdXJsLnF1ZXJ5ID0gYmFzZS5xdWVyeTsKICAgIHVybC5mcmFnbWVudCA9ICcnOwogICAgc3RhdGUgPSBGUkFHTUVOVDsKICAgfSBlbHNlIHsKICAgIHVybC51c2VybmFtZSA9IGJhc2UudXNlcm5hbWU7CiAgICB1cmwucGFzc3dvcmQgPSBiYXNlLnBhc3N3b3JkOwogICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7CiAgICB1cmwucG9ydCA9IGJhc2UucG9ydDsKICAgIHVybC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKCk7CiAgICB1cmwucGF0aC5wb3AoKTsKICAgIHN0YXRlID0gUEFUSDsKICAgIGNvbnRpbnVlOwogICB9CiAgIGJyZWFrOwogIGNhc2UgUkVMQVRJVkVfU0xBU0g6CiAgIGlmIChpc1NwZWNpYWwodXJsKSAmJiAoY2hhciA9PSAnLycgfHwgY2hhciA9PSAnXFwnKSkgewogICAgc3RhdGUgPSBTUEVDSUFMX0FVVEhPUklUWV9JR05PUkVfU0xBU0hFUzsKICAgfSBlbHNlIGlmIChjaGFyID09ICcvJykgewogICAgc3RhdGUgPSBBVVRIT1JJVFk7CiAgIH0gZWxzZSB7CiAgICB1cmwudXNlcm5hbWUgPSBiYXNlLnVzZXJuYW1lOwogICAgdXJsLnBhc3N3b3JkID0gYmFzZS5wYXNzd29yZDsKICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0OwogICAgdXJsLnBvcnQgPSBiYXNlLnBvcnQ7CiAgICBzdGF0ZSA9IFBBVEg7CiAgICBjb250aW51ZTsKICAgfQogICBicmVhazsKICBjYXNlIFNQRUNJQUxfQVVUSE9SSVRZX1NMQVNIRVM6CiAgIHN0YXRlID0gU1BFQ0lBTF9BVVRIT1JJVFlfSUdOT1JFX1NMQVNIRVM7CiAgIGlmIChjaGFyICE9ICcvJyB8fCBidWZmZXIuY2hhckF0KHBvaW50ZXIgKyAxKSAhPSAnLycpCiAgICBjb250aW51ZTsKICAgcG9pbnRlcisrOwogICBicmVhazsKICBjYXNlIFNQRUNJQUxfQVVUSE9SSVRZX0lHTk9SRV9TTEFTSEVTOgogICBpZiAoY2hhciAhPSAnLycgJiYgY2hhciAhPSAnXFwnKSB7CiAgICBzdGF0ZSA9IEFVVEhPUklUWTsKICAgIGNvbnRpbnVlOwogICB9CiAgIGJyZWFrOwogIGNhc2UgQVVUSE9SSVRZOgogICBpZiAoY2hhciA9PSAnQCcpIHsKICAgIGlmIChzZWVuQXQpCiAgICAgYnVmZmVyID0gJyU0MCcgKyBidWZmZXI7CiAgICBzZWVuQXQgPSB0cnVlOwogICAgYnVmZmVyQ29kZVBvaW50cyA9IGFycmF5RnJvbShidWZmZXIpOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBidWZmZXJDb2RlUG9pbnRzLmxlbmd0aDsgaSsrKSB7CiAgICAgdmFyIGNvZGVQb2ludCA9IGJ1ZmZlckNvZGVQb2ludHNbaV07CiAgICAgaWYgKGNvZGVQb2ludCA9PSAnOicgJiYgIXNlZW5QYXNzd29yZFRva2VuKSB7CiAgICAgIHNlZW5QYXNzd29yZFRva2VuID0gdHJ1ZTsKICAgICAgY29udGludWU7CiAgICAgfQogICAgIHZhciBlbmNvZGVkQ29kZVBvaW50cyA9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50LCB1c2VyaW5mb1BlcmNlbnRFbmNvZGVTZXQpOwogICAgIGlmIChzZWVuUGFzc3dvcmRUb2tlbikKICAgICAgdXJsLnBhc3N3b3JkICs9IGVuY29kZWRDb2RlUG9pbnRzOwogICAgIGVsc2UKICAgICAgdXJsLnVzZXJuYW1lICs9IGVuY29kZWRDb2RlUG9pbnRzOwogICAgfQogICAgYnVmZmVyID0gJyc7CiAgIH0gZWxzZSBpZiAoY2hhciA9PSBFT0YgfHwgY2hhciA9PSAnLycgfHwgY2hhciA9PSAnPycgfHwgY2hhciA9PSAnIycgfHwgY2hhciA9PSAnXFwnICYmIGlzU3BlY2lhbCh1cmwpKSB7CiAgICBpZiAoc2VlbkF0ICYmIGJ1ZmZlciA9PSAnJykKICAgICByZXR1cm4gSU5WQUxJRF9BVVRIT1JJVFk7CiAgICBwb2ludGVyIC09IGFycmF5RnJvbShidWZmZXIpLmxlbmd0aCArIDE7CiAgICBidWZmZXIgPSAnJzsKICAgIHN0YXRlID0gSE9TVDsKICAgfSBlbHNlCiAgICBidWZmZXIgKz0gY2hhcjsKICAgYnJlYWs7CiAgY2FzZSBIT1NUOgogIGNhc2UgSE9TVE5BTUU6CiAgIGlmIChzdGF0ZU92ZXJyaWRlICYmIHVybC5zY2hlbWUgPT0gJ2ZpbGUnKSB7CiAgICBzdGF0ZSA9IEZJTEVfSE9TVDsKICAgIGNvbnRpbnVlOwogICB9IGVsc2UgaWYgKGNoYXIgPT0gJzonICYmICFzZWVuQnJhY2tldCkgewogICAgaWYgKGJ1ZmZlciA9PSAnJykKICAgICByZXR1cm4gSU5WQUxJRF9IT1NUOwogICAgZmFpbHVyZSA9IHBhcnNlSG9zdCh1cmwsIGJ1ZmZlcik7CiAgICBpZiAoZmFpbHVyZSkKICAgICByZXR1cm4gZmFpbHVyZTsKICAgIGJ1ZmZlciA9ICcnOwogICAgc3RhdGUgPSBQT1JUOwogICAgaWYgKHN0YXRlT3ZlcnJpZGUgPT0gSE9TVE5BTUUpCiAgICAgcmV0dXJuOwogICB9IGVsc2UgaWYgKGNoYXIgPT0gRU9GIHx8IGNoYXIgPT0gJy8nIHx8IGNoYXIgPT0gJz8nIHx8IGNoYXIgPT0gJyMnIHx8IGNoYXIgPT0gJ1xcJyAmJiBpc1NwZWNpYWwodXJsKSkgewogICAgaWYgKGlzU3BlY2lhbCh1cmwpICYmIGJ1ZmZlciA9PSAnJykKICAgICByZXR1cm4gSU5WQUxJRF9IT1NUOwogICAgaWYgKHN0YXRlT3ZlcnJpZGUgJiYgYnVmZmVyID09ICcnICYmIChpbmNsdWRlc0NyZWRlbnRpYWxzKHVybCkgfHwgdXJsLnBvcnQgIT09IG51bGwpKQogICAgIHJldHVybjsKICAgIGZhaWx1cmUgPSBwYXJzZUhvc3QodXJsLCBidWZmZXIpOwogICAgaWYgKGZhaWx1cmUpCiAgICAgcmV0dXJuIGZhaWx1cmU7CiAgICBidWZmZXIgPSAnJzsKICAgIHN0YXRlID0gUEFUSF9TVEFSVDsKICAgIGlmIChzdGF0ZU92ZXJyaWRlKQogICAgIHJldHVybjsKICAgIGNvbnRpbnVlOwogICB9IGVsc2UgewogICAgaWYgKGNoYXIgPT0gJ1snKQogICAgIHNlZW5CcmFja2V0ID0gdHJ1ZTsKICAgIGVsc2UgaWYgKGNoYXIgPT0gJ10nKQogICAgIHNlZW5CcmFja2V0ID0gZmFsc2U7CiAgICBidWZmZXIgKz0gY2hhcjsKICAgfQogICBicmVhazsKICBjYXNlIFBPUlQ6CiAgIGlmIChESUdJVC50ZXN0KGNoYXIpKSB7CiAgICBidWZmZXIgKz0gY2hhcjsKICAgfSBlbHNlIGlmIChjaGFyID09IEVPRiB8fCBjaGFyID09ICcvJyB8fCBjaGFyID09ICc/JyB8fCBjaGFyID09ICcjJyB8fCBjaGFyID09ICdcXCcgJiYgaXNTcGVjaWFsKHVybCkgfHwgc3RhdGVPdmVycmlkZSkgewogICAgaWYgKGJ1ZmZlciAhPSAnJykgewogICAgIHZhciBwb3J0ID0gcGFyc2VJbnQoYnVmZmVyLCAxMCk7CiAgICAgaWYgKHBvcnQgPiAweEZGRkYpCiAgICAgIHJldHVybiBJTlZBTElEX1BPUlQ7CiAgICAgdXJsLnBvcnQgPSBpc1NwZWNpYWwodXJsKSAmJiBwb3J0ID09PSBzcGVjaWFsU2NoZW1lc1t1cmwuc2NoZW1lXSA/IG51bGwgOiBwb3J0OwogICAgIGJ1ZmZlciA9ICcnOwogICAgfQogICAgaWYgKHN0YXRlT3ZlcnJpZGUpCiAgICAgcmV0dXJuOwogICAgc3RhdGUgPSBQQVRIX1NUQVJUOwogICAgY29udGludWU7CiAgIH0gZWxzZQogICAgcmV0dXJuIElOVkFMSURfUE9SVDsKICAgYnJlYWs7CiAgY2FzZSBGSUxFOgogICB1cmwuc2NoZW1lID0gJ2ZpbGUnOwogICBpZiAoY2hhciA9PSAnLycgfHwgY2hhciA9PSAnXFwnKQogICAgc3RhdGUgPSBGSUxFX1NMQVNIOwogICBlbHNlIGlmIChiYXNlICYmIGJhc2Uuc2NoZW1lID09ICdmaWxlJykgewogICAgaWYgKGNoYXIgPT0gRU9GKSB7CiAgICAgdXJsLmhvc3QgPSBiYXNlLmhvc3Q7CiAgICAgdXJsLnBhdGggPSBiYXNlLnBhdGguc2xpY2UoKTsKICAgICB1cmwucXVlcnkgPSBiYXNlLnF1ZXJ5OwogICAgfSBlbHNlIGlmIChjaGFyID09ICc/JykgewogICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0OwogICAgIHVybC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKCk7CiAgICAgdXJsLnF1ZXJ5ID0gJyc7CiAgICAgc3RhdGUgPSBRVUVSWTsKICAgIH0gZWxzZSBpZiAoY2hhciA9PSAnIycpIHsKICAgICB1cmwuaG9zdCA9IGJhc2UuaG9zdDsKICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpOwogICAgIHVybC5xdWVyeSA9IGJhc2UucXVlcnk7CiAgICAgdXJsLmZyYWdtZW50ID0gJyc7CiAgICAgc3RhdGUgPSBGUkFHTUVOVDsKICAgIH0gZWxzZSB7CiAgICAgaWYgKCFzdGFydHNXaXRoV2luZG93c0RyaXZlTGV0dGVyKGNvZGVQb2ludHMuc2xpY2UocG9pbnRlcikuam9pbignJykpKSB7CiAgICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0OwogICAgICB1cmwucGF0aCA9IGJhc2UucGF0aC5zbGljZSgpOwogICAgICBzaG9ydGVuVVJMc1BhdGgodXJsKTsKICAgICB9CiAgICAgc3RhdGUgPSBQQVRIOwogICAgIGNvbnRpbnVlOwogICAgfQogICB9IGVsc2UgewogICAgc3RhdGUgPSBQQVRIOwogICAgY29udGludWU7CiAgIH0KICAgYnJlYWs7CiAgY2FzZSBGSUxFX1NMQVNIOgogICBpZiAoY2hhciA9PSAnLycgfHwgY2hhciA9PSAnXFwnKSB7CiAgICBzdGF0ZSA9IEZJTEVfSE9TVDsKICAgIGJyZWFrOwogICB9CiAgIGlmIChiYXNlICYmIGJhc2Uuc2NoZW1lID09ICdmaWxlJyAmJiAhc3RhcnRzV2l0aFdpbmRvd3NEcml2ZUxldHRlcihjb2RlUG9pbnRzLnNsaWNlKHBvaW50ZXIpLmpvaW4oJycpKSkgewogICAgaWYgKGlzV2luZG93c0RyaXZlTGV0dGVyKGJhc2UucGF0aFswXSwgdHJ1ZSkpCiAgICAgdXJsLnBhdGgucHVzaChiYXNlLnBhdGhbMF0pOwogICAgZWxzZQogICAgIHVybC5ob3N0ID0gYmFzZS5ob3N0OwogICB9CiAgIHN0YXRlID0gUEFUSDsKICAgY29udGludWU7CiAgY2FzZSBGSUxFX0hPU1Q6CiAgIGlmIChjaGFyID09IEVPRiB8fCBjaGFyID09ICcvJyB8fCBjaGFyID09ICdcXCcgfHwgY2hhciA9PSAnPycgfHwgY2hhciA9PSAnIycpIHsKICAgIGlmICghc3RhdGVPdmVycmlkZSAmJiBpc1dpbmRvd3NEcml2ZUxldHRlcihidWZmZXIpKSB7CiAgICAgc3RhdGUgPSBQQVRIOwogICAgfSBlbHNlIGlmIChidWZmZXIgPT0gJycpIHsKICAgICB1cmwuaG9zdCA9ICcnOwogICAgIGlmIChzdGF0ZU92ZXJyaWRlKQogICAgICByZXR1cm47CiAgICAgc3RhdGUgPSBQQVRIX1NUQVJUOwogICAgfSBlbHNlIHsKICAgICBmYWlsdXJlID0gcGFyc2VIb3N0KHVybCwgYnVmZmVyKTsKICAgICBpZiAoZmFpbHVyZSkKICAgICAgcmV0dXJuIGZhaWx1cmU7CiAgICAgaWYgKHVybC5ob3N0ID09ICdsb2NhbGhvc3QnKQogICAgICB1cmwuaG9zdCA9ICcnOwogICAgIGlmIChzdGF0ZU92ZXJyaWRlKQogICAgICByZXR1cm47CiAgICAgYnVmZmVyID0gJyc7CiAgICAgc3RhdGUgPSBQQVRIX1NUQVJUOwogICAgfQogICAgY29udGludWU7CiAgIH0gZWxzZQogICAgYnVmZmVyICs9IGNoYXI7CiAgIGJyZWFrOwogIGNhc2UgUEFUSF9TVEFSVDoKICAgaWYgKGlzU3BlY2lhbCh1cmwpKSB7CiAgICBzdGF0ZSA9IFBBVEg7CiAgICBpZiAoY2hhciAhPSAnLycgJiYgY2hhciAhPSAnXFwnKQogICAgIGNvbnRpbnVlOwogICB9IGVsc2UgaWYgKCFzdGF0ZU92ZXJyaWRlICYmIGNoYXIgPT0gJz8nKSB7CiAgICB1cmwucXVlcnkgPSAnJzsKICAgIHN0YXRlID0gUVVFUlk7CiAgIH0gZWxzZSBpZiAoIXN0YXRlT3ZlcnJpZGUgJiYgY2hhciA9PSAnIycpIHsKICAgIHVybC5mcmFnbWVudCA9ICcnOwogICAgc3RhdGUgPSBGUkFHTUVOVDsKICAgfSBlbHNlIGlmIChjaGFyICE9IEVPRikgewogICAgc3RhdGUgPSBQQVRIOwogICAgaWYgKGNoYXIgIT0gJy8nKQogICAgIGNvbnRpbnVlOwogICB9CiAgIGJyZWFrOwogIGNhc2UgUEFUSDoKICAgaWYgKGNoYXIgPT0gRU9GIHx8IGNoYXIgPT0gJy8nIHx8IGNoYXIgPT0gJ1xcJyAmJiBpc1NwZWNpYWwodXJsKSB8fCAhc3RhdGVPdmVycmlkZSAmJiAoY2hhciA9PSAnPycgfHwgY2hhciA9PSAnIycpKSB7CiAgICBpZiAoaXNEb3VibGVEb3QoYnVmZmVyKSkgewogICAgIHNob3J0ZW5VUkxzUGF0aCh1cmwpOwogICAgIGlmIChjaGFyICE9ICcvJyAmJiAhKGNoYXIgPT0gJ1xcJyAmJiBpc1NwZWNpYWwodXJsKSkpIHsKICAgICAgdXJsLnBhdGgucHVzaCgnJyk7CiAgICAgfQogICAgfSBlbHNlIGlmIChpc1NpbmdsZURvdChidWZmZXIpKSB7CiAgICAgaWYgKGNoYXIgIT0gJy8nICYmICEoY2hhciA9PSAnXFwnICYmIGlzU3BlY2lhbCh1cmwpKSkgewogICAgICB1cmwucGF0aC5wdXNoKCcnKTsKICAgICB9CiAgICB9IGVsc2UgewogICAgIGlmICh1cmwuc2NoZW1lID09ICdmaWxlJyAmJiAhdXJsLnBhdGgubGVuZ3RoICYmIGlzV2luZG93c0RyaXZlTGV0dGVyKGJ1ZmZlcikpIHsKICAgICAgaWYgKHVybC5ob3N0KQogICAgICAgdXJsLmhvc3QgPSAnJzsKICAgICAgYnVmZmVyID0gYnVmZmVyLmNoYXJBdCgwKSArICc6JzsKICAgICB9CiAgICAgdXJsLnBhdGgucHVzaChidWZmZXIpOwogICAgfQogICAgYnVmZmVyID0gJyc7CiAgICBpZiAodXJsLnNjaGVtZSA9PSAnZmlsZScgJiYgKGNoYXIgPT0gRU9GIHx8IGNoYXIgPT0gJz8nIHx8IGNoYXIgPT0gJyMnKSkgewogICAgIHdoaWxlICh1cmwucGF0aC5sZW5ndGggPiAxICYmIHVybC5wYXRoWzBdID09PSAnJykgewogICAgICB1cmwucGF0aC5zaGlmdCgpOwogICAgIH0KICAgIH0KICAgIGlmIChjaGFyID09ICc/JykgewogICAgIHVybC5xdWVyeSA9ICcnOwogICAgIHN0YXRlID0gUVVFUlk7CiAgICB9IGVsc2UgaWYgKGNoYXIgPT0gJyMnKSB7CiAgICAgdXJsLmZyYWdtZW50ID0gJyc7CiAgICAgc3RhdGUgPSBGUkFHTUVOVDsKICAgIH0KICAgfSBlbHNlIHsKICAgIGJ1ZmZlciArPSBwZXJjZW50RW5jb2RlKGNoYXIsIHBhdGhQZXJjZW50RW5jb2RlU2V0KTsKICAgfQogICBicmVhazsKICBjYXNlIENBTk5PVF9CRV9BX0JBU0VfVVJMX1BBVEg6CiAgIGlmIChjaGFyID09ICc/JykgewogICAgdXJsLnF1ZXJ5ID0gJyc7CiAgICBzdGF0ZSA9IFFVRVJZOwogICB9IGVsc2UgaWYgKGNoYXIgPT0gJyMnKSB7CiAgICB1cmwuZnJhZ21lbnQgPSAnJzsKICAgIHN0YXRlID0gRlJBR01FTlQ7CiAgIH0gZWxzZSBpZiAoY2hhciAhPSBFT0YpIHsKICAgIHVybC5wYXRoWzBdICs9IHBlcmNlbnRFbmNvZGUoY2hhciwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCk7CiAgIH0KICAgYnJlYWs7CiAgY2FzZSBRVUVSWToKICAgaWYgKCFzdGF0ZU92ZXJyaWRlICYmIGNoYXIgPT0gJyMnKSB7CiAgICB1cmwuZnJhZ21lbnQgPSAnJzsKICAgIHN0YXRlID0gRlJBR01FTlQ7CiAgIH0gZWxzZSBpZiAoY2hhciAhPSBFT0YpIHsKICAgIGlmIChjaGFyID09ICInIiAmJiBpc1NwZWNpYWwodXJsKSkKICAgICB1cmwucXVlcnkgKz0gJyUyNyc7CiAgICBlbHNlIGlmIChjaGFyID09ICcjJykKICAgICB1cmwucXVlcnkgKz0gJyUyMyc7CiAgICBlbHNlCiAgICAgdXJsLnF1ZXJ5ICs9IHBlcmNlbnRFbmNvZGUoY2hhciwgQzBDb250cm9sUGVyY2VudEVuY29kZVNldCk7CiAgIH0KICAgYnJlYWs7CiAgY2FzZSBGUkFHTUVOVDoKICAgaWYgKGNoYXIgIT0gRU9GKQogICAgdXJsLmZyYWdtZW50ICs9IHBlcmNlbnRFbmNvZGUoY2hhciwgZnJhZ21lbnRQZXJjZW50RW5jb2RlU2V0KTsKICAgYnJlYWs7CiAgfQogIHBvaW50ZXIrKzsKIH0KfTsKdmFyIFVSTENvbnN0cnVjdG9yID0gZnVuY3Rpb24gVVJMKHVybCkgewogdmFyIHRoYXQgPSBhbkluc3RhbmNlKHRoaXMsIFVSTENvbnN0cnVjdG9yLCAnVVJMJyk7CiB2YXIgYmFzZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkOwogdmFyIHVybFN0cmluZyA9IFN0cmluZyh1cmwpOwogdmFyIHN0YXRlID0gc2V0SW50ZXJuYWxTdGF0ZSh0aGF0LCB7IHR5cGU6ICdVUkwnIH0pOwogdmFyIGJhc2VTdGF0ZSwgZmFpbHVyZTsKIGlmIChiYXNlICE9PSB1bmRlZmluZWQpIHsKICBpZiAoYmFzZSBpbnN0YW5jZW9mIFVSTENvbnN0cnVjdG9yKQogICBiYXNlU3RhdGUgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKGJhc2UpOwogIGVsc2UgewogICBmYWlsdXJlID0gcGFyc2VVUkwoYmFzZVN0YXRlID0ge30sIFN0cmluZyhiYXNlKSk7CiAgIGlmIChmYWlsdXJlKQogICAgdGhyb3cgVHlwZUVycm9yKGZhaWx1cmUpOwogIH0KIH0KIGZhaWx1cmUgPSBwYXJzZVVSTChzdGF0ZSwgdXJsU3RyaW5nLCBudWxsLCBiYXNlU3RhdGUpOwogaWYgKGZhaWx1cmUpCiAgdGhyb3cgVHlwZUVycm9yKGZhaWx1cmUpOwogdmFyIHNlYXJjaFBhcmFtcyA9IHN0YXRlLnNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTsKIHZhciBzZWFyY2hQYXJhbXNTdGF0ZSA9IGdldEludGVybmFsU2VhcmNoUGFyYW1zU3RhdGUoc2VhcmNoUGFyYW1zKTsKIHNlYXJjaFBhcmFtc1N0YXRlLnVwZGF0ZVNlYXJjaFBhcmFtcyhzdGF0ZS5xdWVyeSk7CiBzZWFyY2hQYXJhbXNTdGF0ZS51cGRhdGVVUkwgPSBmdW5jdGlvbiAoKSB7CiAgc3RhdGUucXVlcnkgPSBTdHJpbmcoc2VhcmNoUGFyYW1zKSB8fCBudWxsOwogfTsKIGlmICghREVTQ1JJUFRPUlMpIHsKICB0aGF0LmhyZWYgPSBzZXJpYWxpemVVUkwuY2FsbCh0aGF0KTsKICB0aGF0Lm9yaWdpbiA9IGdldE9yaWdpbi5jYWxsKHRoYXQpOwogIHRoYXQucHJvdG9jb2wgPSBnZXRQcm90b2NvbC5jYWxsKHRoYXQpOwogIHRoYXQudXNlcm5hbWUgPSBnZXRVc2VybmFtZS5jYWxsKHRoYXQpOwogIHRoYXQucGFzc3dvcmQgPSBnZXRQYXNzd29yZC5jYWxsKHRoYXQpOwogIHRoYXQuaG9zdCA9IGdldEhvc3QuY2FsbCh0aGF0KTsKICB0aGF0Lmhvc3RuYW1lID0gZ2V0SG9zdG5hbWUuY2FsbCh0aGF0KTsKICB0aGF0LnBvcnQgPSBnZXRQb3J0LmNhbGwodGhhdCk7CiAgdGhhdC5wYXRobmFtZSA9IGdldFBhdGhuYW1lLmNhbGwodGhhdCk7CiAgdGhhdC5zZWFyY2ggPSBnZXRTZWFyY2guY2FsbCh0aGF0KTsKICB0aGF0LnNlYXJjaFBhcmFtcyA9IGdldFNlYXJjaFBhcmFtcy5jYWxsKHRoYXQpOwogIHRoYXQuaGFzaCA9IGdldEhhc2guY2FsbCh0aGF0KTsKIH0KfTsKdmFyIFVSTFByb3RvdHlwZSA9IFVSTENvbnN0cnVjdG9yLnByb3RvdHlwZTsKdmFyIHNlcmlhbGl6ZVVSTCA9IGZ1bmN0aW9uICgpIHsKIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpOwogdmFyIHNjaGVtZSA9IHVybC5zY2hlbWU7CiB2YXIgdXNlcm5hbWUgPSB1cmwudXNlcm5hbWU7CiB2YXIgcGFzc3dvcmQgPSB1cmwucGFzc3dvcmQ7CiB2YXIgaG9zdCA9IHVybC5ob3N0OwogdmFyIHBvcnQgPSB1cmwucG9ydDsKIHZhciBwYXRoID0gdXJsLnBhdGg7CiB2YXIgcXVlcnkgPSB1cmwucXVlcnk7CiB2YXIgZnJhZ21lbnQgPSB1cmwuZnJhZ21lbnQ7CiB2YXIgb3V0cHV0ID0gc2NoZW1lICsgJzonOwogaWYgKGhvc3QgIT09IG51bGwpIHsKICBvdXRwdXQgKz0gJy8vJzsKICBpZiAoaW5jbHVkZXNDcmVkZW50aWFscyh1cmwpKSB7CiAgIG91dHB1dCArPSB1c2VybmFtZSArIChwYXNzd29yZCA/ICc6JyArIHBhc3N3b3JkIDogJycpICsgJ0AnOwogIH0KICBvdXRwdXQgKz0gc2VyaWFsaXplSG9zdChob3N0KTsKICBpZiAocG9ydCAhPT0gbnVsbCkKICAgb3V0cHV0ICs9ICc6JyArIHBvcnQ7CiB9IGVsc2UgaWYgKHNjaGVtZSA9PSAnZmlsZScpCiAgb3V0cHV0ICs9ICcvLyc7CiBvdXRwdXQgKz0gdXJsLmNhbm5vdEJlQUJhc2VVUkwgPyBwYXRoWzBdIDogcGF0aC5sZW5ndGggPyAnLycgKyBwYXRoLmpvaW4oJy8nKSA6ICcnOwogaWYgKHF1ZXJ5ICE9PSBudWxsKQogIG91dHB1dCArPSAnPycgKyBxdWVyeTsKIGlmIChmcmFnbWVudCAhPT0gbnVsbCkKICBvdXRwdXQgKz0gJyMnICsgZnJhZ21lbnQ7CiByZXR1cm4gb3V0cHV0Owp9Owp2YXIgZ2V0T3JpZ2luID0gZnVuY3Rpb24gKCkgewogdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7CiB2YXIgc2NoZW1lID0gdXJsLnNjaGVtZTsKIHZhciBwb3J0ID0gdXJsLnBvcnQ7CiBpZiAoc2NoZW1lID09ICdibG9iJykKICB0cnkgewogICByZXR1cm4gbmV3IFVSTChzY2hlbWUucGF0aFswXSkub3JpZ2luOwogIH0gY2F0Y2ggKGVycm9yKSB7CiAgIHJldHVybiAnbnVsbCc7CiAgfQogaWYgKHNjaGVtZSA9PSAnZmlsZScgfHwgIWlzU3BlY2lhbCh1cmwpKQogIHJldHVybiAnbnVsbCc7CiByZXR1cm4gc2NoZW1lICsgJzovLycgKyBzZXJpYWxpemVIb3N0KHVybC5ob3N0KSArIChwb3J0ICE9PSBudWxsID8gJzonICsgcG9ydCA6ICcnKTsKfTsKdmFyIGdldFByb3RvY29sID0gZnVuY3Rpb24gKCkgewogcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcykuc2NoZW1lICsgJzonOwp9Owp2YXIgZ2V0VXNlcm5hbWUgPSBmdW5jdGlvbiAoKSB7CiByZXR1cm4gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS51c2VybmFtZTsKfTsKdmFyIGdldFBhc3N3b3JkID0gZnVuY3Rpb24gKCkgewogcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcykucGFzc3dvcmQ7Cn07CnZhciBnZXRIb3N0ID0gZnVuY3Rpb24gKCkgewogdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7CiB2YXIgaG9zdCA9IHVybC5ob3N0OwogdmFyIHBvcnQgPSB1cmwucG9ydDsKIHJldHVybiBob3N0ID09PSBudWxsID8gJycgOiBwb3J0ID09PSBudWxsID8gc2VyaWFsaXplSG9zdChob3N0KSA6IHNlcmlhbGl6ZUhvc3QoaG9zdCkgKyAnOicgKyBwb3J0Owp9Owp2YXIgZ2V0SG9zdG5hbWUgPSBmdW5jdGlvbiAoKSB7CiB2YXIgaG9zdCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcykuaG9zdDsKIHJldHVybiBob3N0ID09PSBudWxsID8gJycgOiBzZXJpYWxpemVIb3N0KGhvc3QpOwp9Owp2YXIgZ2V0UG9ydCA9IGZ1bmN0aW9uICgpIHsKIHZhciBwb3J0ID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKS5wb3J0OwogcmV0dXJuIHBvcnQgPT09IG51bGwgPyAnJyA6IFN0cmluZyhwb3J0KTsKfTsKdmFyIGdldFBhdGhuYW1lID0gZnVuY3Rpb24gKCkgewogdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7CiB2YXIgcGF0aCA9IHVybC5wYXRoOwogcmV0dXJuIHVybC5jYW5ub3RCZUFCYXNlVVJMID8gcGF0aFswXSA6IHBhdGgubGVuZ3RoID8gJy8nICsgcGF0aC5qb2luKCcvJykgOiAnJzsKfTsKdmFyIGdldFNlYXJjaCA9IGZ1bmN0aW9uICgpIHsKIHZhciBxdWVyeSA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcykucXVlcnk7CiByZXR1cm4gcXVlcnkgPyAnPycgKyBxdWVyeSA6ICcnOwp9Owp2YXIgZ2V0U2VhcmNoUGFyYW1zID0gZnVuY3Rpb24gKCkgewogcmV0dXJuIGdldEludGVybmFsVVJMU3RhdGUodGhpcykuc2VhcmNoUGFyYW1zOwp9Owp2YXIgZ2V0SGFzaCA9IGZ1bmN0aW9uICgpIHsKIHZhciBmcmFnbWVudCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcykuZnJhZ21lbnQ7CiByZXR1cm4gZnJhZ21lbnQgPyAnIycgKyBmcmFnbWVudCA6ICcnOwp9Owp2YXIgYWNjZXNzb3JEZXNjcmlwdG9yID0gZnVuY3Rpb24gKGdldHRlciwgc2V0dGVyKSB7CiByZXR1cm4gewogIGdldDogZ2V0dGVyLAogIHNldDogc2V0dGVyLAogIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICBlbnVtZXJhYmxlOiB0cnVlCiB9Owp9OwppZiAoREVTQ1JJUFRPUlMpIHsKIGRlZmluZVByb3BlcnRpZXMoVVJMUHJvdG90eXBlLCB7CiAgaHJlZjogYWNjZXNzb3JEZXNjcmlwdG9yKHNlcmlhbGl6ZVVSTCwgZnVuY3Rpb24gKGhyZWYpIHsKICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7CiAgIHZhciB1cmxTdHJpbmcgPSBTdHJpbmcoaHJlZik7CiAgIHZhciBmYWlsdXJlID0gcGFyc2VVUkwodXJsLCB1cmxTdHJpbmcpOwogICBpZiAoZmFpbHVyZSkKICAgIHRocm93IFR5cGVFcnJvcihmYWlsdXJlKTsKICAgZ2V0SW50ZXJuYWxTZWFyY2hQYXJhbXNTdGF0ZSh1cmwuc2VhcmNoUGFyYW1zKS51cGRhdGVTZWFyY2hQYXJhbXModXJsLnF1ZXJ5KTsKICB9KSwKICBvcmlnaW46IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRPcmlnaW4pLAogIHByb3RvY29sOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0UHJvdG9jb2wsIGZ1bmN0aW9uIChwcm90b2NvbCkgewogICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTsKICAgcGFyc2VVUkwodXJsLCBTdHJpbmcocHJvdG9jb2wpICsgJzonLCBTQ0hFTUVfU1RBUlQpOwogIH0pLAogIHVzZXJuYW1lOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0VXNlcm5hbWUsIGZ1bmN0aW9uICh1c2VybmFtZSkgewogICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTsKICAgdmFyIGNvZGVQb2ludHMgPSBhcnJheUZyb20oU3RyaW5nKHVzZXJuYW1lKSk7CiAgIGlmIChjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQodXJsKSkKICAgIHJldHVybjsKICAgdXJsLnVzZXJuYW1lID0gJyc7CiAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZVBvaW50cy5sZW5ndGg7IGkrKykgewogICAgdXJsLnVzZXJuYW1lICs9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50c1tpXSwgdXNlcmluZm9QZXJjZW50RW5jb2RlU2V0KTsKICAgfQogIH0pLAogIHBhc3N3b3JkOiBhY2Nlc3NvckRlc2NyaXB0b3IoZ2V0UGFzc3dvcmQsIGZ1bmN0aW9uIChwYXNzd29yZCkgewogICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTsKICAgdmFyIGNvZGVQb2ludHMgPSBhcnJheUZyb20oU3RyaW5nKHBhc3N3b3JkKSk7CiAgIGlmIChjYW5ub3RIYXZlVXNlcm5hbWVQYXNzd29yZFBvcnQodXJsKSkKICAgIHJldHVybjsKICAgdXJsLnBhc3N3b3JkID0gJyc7CiAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29kZVBvaW50cy5sZW5ndGg7IGkrKykgewogICAgdXJsLnBhc3N3b3JkICs9IHBlcmNlbnRFbmNvZGUoY29kZVBvaW50c1tpXSwgdXNlcmluZm9QZXJjZW50RW5jb2RlU2V0KTsKICAgfQogIH0pLAogIGhvc3Q6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRIb3N0LCBmdW5jdGlvbiAoaG9zdCkgewogICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTsKICAgaWYgKHVybC5jYW5ub3RCZUFCYXNlVVJMKQogICAgcmV0dXJuOwogICBwYXJzZVVSTCh1cmwsIFN0cmluZyhob3N0KSwgSE9TVCk7CiAgfSksCiAgaG9zdG5hbWU6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRIb3N0bmFtZSwgZnVuY3Rpb24gKGhvc3RuYW1lKSB7CiAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpOwogICBpZiAodXJsLmNhbm5vdEJlQUJhc2VVUkwpCiAgICByZXR1cm47CiAgIHBhcnNlVVJMKHVybCwgU3RyaW5nKGhvc3RuYW1lKSwgSE9TVE5BTUUpOwogIH0pLAogIHBvcnQ6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRQb3J0LCBmdW5jdGlvbiAocG9ydCkgewogICB2YXIgdXJsID0gZ2V0SW50ZXJuYWxVUkxTdGF0ZSh0aGlzKTsKICAgaWYgKGNhbm5vdEhhdmVVc2VybmFtZVBhc3N3b3JkUG9ydCh1cmwpKQogICAgcmV0dXJuOwogICBwb3J0ID0gU3RyaW5nKHBvcnQpOwogICBpZiAocG9ydCA9PSAnJykKICAgIHVybC5wb3J0ID0gbnVsbDsKICAgZWxzZQogICAgcGFyc2VVUkwodXJsLCBwb3J0LCBQT1JUKTsKICB9KSwKICBwYXRobmFtZTogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFBhdGhuYW1lLCBmdW5jdGlvbiAocGF0aG5hbWUpIHsKICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7CiAgIGlmICh1cmwuY2Fubm90QmVBQmFzZVVSTCkKICAgIHJldHVybjsKICAgdXJsLnBhdGggPSBbXTsKICAgcGFyc2VVUkwodXJsLCBwYXRobmFtZSArICcnLCBQQVRIX1NUQVJUKTsKICB9KSwKICBzZWFyY2g6IGFjY2Vzc29yRGVzY3JpcHRvcihnZXRTZWFyY2gsIGZ1bmN0aW9uIChzZWFyY2gpIHsKICAgdmFyIHVybCA9IGdldEludGVybmFsVVJMU3RhdGUodGhpcyk7CiAgIHNlYXJjaCA9IFN0cmluZyhzZWFyY2gpOwogICBpZiAoc2VhcmNoID09ICcnKSB7CiAgICB1cmwucXVlcnkgPSBudWxsOwogICB9IGVsc2UgewogICAgaWYgKCc/JyA9PSBzZWFyY2guY2hhckF0KDApKQogICAgIHNlYXJjaCA9IHNlYXJjaC5zbGljZSgxKTsKICAgIHVybC5xdWVyeSA9ICcnOwogICAgcGFyc2VVUkwodXJsLCBzZWFyY2gsIFFVRVJZKTsKICAgfQogICBnZXRJbnRlcm5hbFNlYXJjaFBhcmFtc1N0YXRlKHVybC5zZWFyY2hQYXJhbXMpLnVwZGF0ZVNlYXJjaFBhcmFtcyh1cmwucXVlcnkpOwogIH0pLAogIHNlYXJjaFBhcmFtczogYWNjZXNzb3JEZXNjcmlwdG9yKGdldFNlYXJjaFBhcmFtcyksCiAgaGFzaDogYWNjZXNzb3JEZXNjcmlwdG9yKGdldEhhc2gsIGZ1bmN0aW9uIChoYXNoKSB7CiAgIHZhciB1cmwgPSBnZXRJbnRlcm5hbFVSTFN0YXRlKHRoaXMpOwogICBoYXNoID0gU3RyaW5nKGhhc2gpOwogICBpZiAoaGFzaCA9PSAnJykgewogICAgdXJsLmZyYWdtZW50ID0gbnVsbDsKICAgIHJldHVybjsKICAgfQogICBpZiAoJyMnID09IGhhc2guY2hhckF0KDApKQogICAgaGFzaCA9IGhhc2guc2xpY2UoMSk7CiAgIHVybC5mcmFnbWVudCA9ICcnOwogICBwYXJzZVVSTCh1cmwsIGhhc2gsIEZSQUdNRU5UKTsKICB9KQogfSk7Cn0KcmVkZWZpbmUoVVJMUHJvdG90eXBlLCAndG9KU09OJywgZnVuY3Rpb24gdG9KU09OKCkgewogcmV0dXJuIHNlcmlhbGl6ZVVSTC5jYWxsKHRoaXMpOwp9LCB7IGVudW1lcmFibGU6IHRydWUgfSk7CnJlZGVmaW5lKFVSTFByb3RvdHlwZSwgJ3RvU3RyaW5nJywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7CiByZXR1cm4gc2VyaWFsaXplVVJMLmNhbGwodGhpcyk7Cn0sIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTsKaWYgKE5hdGl2ZVVSTCkgewogdmFyIG5hdGl2ZUNyZWF0ZU9iamVjdFVSTCA9IE5hdGl2ZVVSTC5jcmVhdGVPYmplY3RVUkw7CiB2YXIgbmF0aXZlUmV2b2tlT2JqZWN0VVJMID0gTmF0aXZlVVJMLnJldm9rZU9iamVjdFVSTDsKIGlmIChuYXRpdmVDcmVhdGVPYmplY3RVUkwpCiAgcmVkZWZpbmUoVVJMQ29uc3RydWN0b3IsICdjcmVhdGVPYmplY3RVUkwnLCBmdW5jdGlvbiBjcmVhdGVPYmplY3RVUkwoYmxvYikgewogICByZXR1cm4gbmF0aXZlQ3JlYXRlT2JqZWN0VVJMLmFwcGx5KE5hdGl2ZVVSTCwgYXJndW1lbnRzKTsKICB9KTsKIGlmIChuYXRpdmVSZXZva2VPYmplY3RVUkwpCiAgcmVkZWZpbmUoVVJMQ29uc3RydWN0b3IsICdyZXZva2VPYmplY3RVUkwnLCBmdW5jdGlvbiByZXZva2VPYmplY3RVUkwodXJsKSB7CiAgIHJldHVybiBuYXRpdmVSZXZva2VPYmplY3RVUkwuYXBwbHkoTmF0aXZlVVJMLCBhcmd1bWVudHMpOwogIH0pOwp9CnNldFRvU3RyaW5nVGFnKFVSTENvbnN0cnVjdG9yLCAnVVJMJyk7CiQoewogZ2xvYmFsOiB0cnVlLAogZm9yY2VkOiAhVVNFX05BVElWRV9VUkwsCiBzaGFtOiAhREVTQ1JJUFRPUlMKfSwgeyBVUkw6IFVSTENvbnN0cnVjdG9yIH0pOwoKLyoqKi8gfSksCi8qIDEzOCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgZmFpbHMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE0KTsKdmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNTcpOwp2YXIgSVNfUFVSRSA9IF9fd19wZGZqc19yZXF1aXJlX18oMzcpOwp2YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7Cm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHsKIHZhciB1cmwgPSBuZXcgVVJMKCdiP2E9MSZiPTImYz0zJywgJ2h0dHA6Ly9hJyk7CiB2YXIgc2VhcmNoUGFyYW1zID0gdXJsLnNlYXJjaFBhcmFtczsKIHZhciByZXN1bHQgPSAnJzsKIHVybC5wYXRobmFtZSA9ICdjJTIwZCc7CiBzZWFyY2hQYXJhbXMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUsIGtleSkgewogIHNlYXJjaFBhcmFtc1snZGVsZXRlJ10oJ2InKTsKICByZXN1bHQgKz0ga2V5ICsgdmFsdWU7CiB9KTsKIHJldHVybiBJU19QVVJFICYmICF1cmwudG9KU09OIHx8ICFzZWFyY2hQYXJhbXMuc29ydCB8fCB1cmwuaHJlZiAhPT0gJ2h0dHA6Ly9hL2MlMjBkP2E9MSZjPTMnIHx8IHNlYXJjaFBhcmFtcy5nZXQoJ2MnKSAhPT0gJzMnIHx8IFN0cmluZyhuZXcgVVJMU2VhcmNoUGFyYW1zKCc/YT0xJykpICE9PSAnYT0xJyB8fCAhc2VhcmNoUGFyYW1zW0lURVJBVE9SXSB8fCBuZXcgVVJMKCdodHRwczovL2FAYicpLnVzZXJuYW1lICE9PSAnYScgfHwgbmV3IFVSTFNlYXJjaFBhcmFtcyhuZXcgVVJMU2VhcmNoUGFyYW1zKCdhPWInKSkuZ2V0KCdhJykgIT09ICdiJyB8fCBuZXcgVVJMKCdodHRwOi8v0YLQtdGB0YInKS5ob3N0ICE9PSAneG4tLWUxYXliYycgfHwgbmV3IFVSTCgnaHR0cDovL2Ej0LEnKS5oYXNoICE9PSAnIyVEMCVCMScgfHwgcmVzdWx0ICE9PSAnYTFjMycgfHwgbmV3IFVSTCgnaHR0cDovL3gnLCB1bmRlZmluZWQpLmhvc3QgIT09ICd4JzsKfSk7CgovKioqLyB9KSwKLyogMTM5ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCnZhciBtYXhJbnQgPSAyMTQ3NDgzNjQ3Owp2YXIgYmFzZSA9IDM2Owp2YXIgdE1pbiA9IDE7CnZhciB0TWF4ID0gMjY7CnZhciBza2V3ID0gMzg7CnZhciBkYW1wID0gNzAwOwp2YXIgaW5pdGlhbEJpYXMgPSA3MjsKdmFyIGluaXRpYWxOID0gMTI4Owp2YXIgZGVsaW1pdGVyID0gJy0nOwp2YXIgcmVnZXhOb25BU0NJSSA9IC9bXlwwLVx1MDA3RV0vOwp2YXIgcmVnZXhTZXBhcmF0b3JzID0gL1suXHUzMDAyXHVGRjBFXHVGRjYxXS9nOwp2YXIgT1ZFUkZMT1dfRVJST1IgPSAnT3ZlcmZsb3c6IGlucHV0IG5lZWRzIHdpZGVyIGludGVnZXJzIHRvIHByb2Nlc3MnOwp2YXIgYmFzZU1pbnVzVE1pbiA9IGJhc2UgLSB0TWluOwp2YXIgZmxvb3IgPSBNYXRoLmZsb29yOwp2YXIgc3RyaW5nRnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTsKdmFyIHVjczJkZWNvZGUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7CiB2YXIgb3V0cHV0ID0gW107CiB2YXIgY291bnRlciA9IDA7CiB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDsKIHdoaWxlIChjb3VudGVyIDwgbGVuZ3RoKSB7CiAgdmFyIHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTsKICBpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7CiAgIHZhciBleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KGNvdW50ZXIrKyk7CiAgIGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgewogICAgb3V0cHV0LnB1c2goKCh2YWx1ZSAmIDB4M0ZGKSA8PCAxMCkgKyAoZXh0cmEgJiAweDNGRikgKyAweDEwMDAwKTsKICAgfSBlbHNlIHsKICAgIG91dHB1dC5wdXNoKHZhbHVlKTsKICAgIGNvdW50ZXItLTsKICAgfQogIH0gZWxzZSB7CiAgIG91dHB1dC5wdXNoKHZhbHVlKTsKICB9CiB9CiByZXR1cm4gb3V0cHV0Owp9Owp2YXIgZGlnaXRUb0Jhc2ljID0gZnVuY3Rpb24gKGRpZ2l0KSB7CiByZXR1cm4gZGlnaXQgKyAyMiArIDc1ICogKGRpZ2l0IDwgMjYpOwp9Owp2YXIgYWRhcHQgPSBmdW5jdGlvbiAoZGVsdGEsIG51bVBvaW50cywgZmlyc3RUaW1lKSB7CiB2YXIgayA9IDA7CiBkZWx0YSA9IGZpcnN0VGltZSA/IGZsb29yKGRlbHRhIC8gZGFtcCkgOiBkZWx0YSA+PiAxOwogZGVsdGEgKz0gZmxvb3IoZGVsdGEgLyBudW1Qb2ludHMpOwogZm9yICg7IGRlbHRhID4gYmFzZU1pbnVzVE1pbiAqIHRNYXggPj4gMTsgayArPSBiYXNlKSB7CiAgZGVsdGEgPSBmbG9vcihkZWx0YSAvIGJhc2VNaW51c1RNaW4pOwogfQogcmV0dXJuIGZsb29yKGsgKyAoYmFzZU1pbnVzVE1pbiArIDEpICogZGVsdGEgLyAoZGVsdGEgKyBza2V3KSk7Cn07CnZhciBlbmNvZGUgPSBmdW5jdGlvbiAoaW5wdXQpIHsKIHZhciBvdXRwdXQgPSBbXTsKIGlucHV0ID0gdWNzMmRlY29kZShpbnB1dCk7CiB2YXIgaW5wdXRMZW5ndGggPSBpbnB1dC5sZW5ndGg7CiB2YXIgbiA9IGluaXRpYWxOOwogdmFyIGRlbHRhID0gMDsKIHZhciBiaWFzID0gaW5pdGlhbEJpYXM7CiB2YXIgaSwgY3VycmVudFZhbHVlOwogZm9yIChpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7CiAgY3VycmVudFZhbHVlID0gaW5wdXRbaV07CiAgaWYgKGN1cnJlbnRWYWx1ZSA8IDB4ODApIHsKICAgb3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGN1cnJlbnRWYWx1ZSkpOwogIH0KIH0KIHZhciBiYXNpY0xlbmd0aCA9IG91dHB1dC5sZW5ndGg7CiB2YXIgaGFuZGxlZENQQ291bnQgPSBiYXNpY0xlbmd0aDsKIGlmIChiYXNpY0xlbmd0aCkgewogIG91dHB1dC5wdXNoKGRlbGltaXRlcik7CiB9CiB3aGlsZSAoaGFuZGxlZENQQ291bnQgPCBpbnB1dExlbmd0aCkgewogIHZhciBtID0gbWF4SW50OwogIGZvciAoaSA9IDA7IGkgPCBpbnB1dC5sZW5ndGg7IGkrKykgewogICBjdXJyZW50VmFsdWUgPSBpbnB1dFtpXTsKICAgaWYgKGN1cnJlbnRWYWx1ZSA+PSBuICYmIGN1cnJlbnRWYWx1ZSA8IG0pIHsKICAgIG0gPSBjdXJyZW50VmFsdWU7CiAgIH0KICB9CiAgdmFyIGhhbmRsZWRDUENvdW50UGx1c09uZSA9IGhhbmRsZWRDUENvdW50ICsgMTsKICBpZiAobSAtIG4gPiBmbG9vcigobWF4SW50IC0gZGVsdGEpIC8gaGFuZGxlZENQQ291bnRQbHVzT25lKSkgewogICB0aHJvdyBSYW5nZUVycm9yKE9WRVJGTE9XX0VSUk9SKTsKICB9CiAgZGVsdGEgKz0gKG0gLSBuKSAqIGhhbmRsZWRDUENvdW50UGx1c09uZTsKICBuID0gbTsKICBmb3IgKGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpKyspIHsKICAgY3VycmVudFZhbHVlID0gaW5wdXRbaV07CiAgIGlmIChjdXJyZW50VmFsdWUgPCBuICYmICsrZGVsdGEgPiBtYXhJbnQpIHsKICAgIHRocm93IFJhbmdlRXJyb3IoT1ZFUkZMT1dfRVJST1IpOwogICB9CiAgIGlmIChjdXJyZW50VmFsdWUgPT0gbikgewogICAgdmFyIHEgPSBkZWx0YTsKICAgIGZvciAodmFyIGsgPSBiYXNlOzsgayArPSBiYXNlKSB7CiAgICAgdmFyIHQgPSBrIDw9IGJpYXMgPyB0TWluIDogayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhczsKICAgICBpZiAocSA8IHQpCiAgICAgIGJyZWFrOwogICAgIHZhciBxTWludXNUID0gcSAtIHQ7CiAgICAgdmFyIGJhc2VNaW51c1QgPSBiYXNlIC0gdDsKICAgICBvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHQgKyBxTWludXNUICUgYmFzZU1pbnVzVCkpKTsKICAgICBxID0gZmxvb3IocU1pbnVzVCAvIGJhc2VNaW51c1QpOwogICAgfQogICAgb3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGRpZ2l0VG9CYXNpYyhxKSkpOwogICAgYmlhcyA9IGFkYXB0KGRlbHRhLCBoYW5kbGVkQ1BDb3VudFBsdXNPbmUsIGhhbmRsZWRDUENvdW50ID09IGJhc2ljTGVuZ3RoKTsKICAgIGRlbHRhID0gMDsKICAgICsraGFuZGxlZENQQ291bnQ7CiAgIH0KICB9CiAgKytkZWx0YTsKICArK247CiB9CiByZXR1cm4gb3V0cHV0LmpvaW4oJycpOwp9Owptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCkgewogdmFyIGVuY29kZWQgPSBbXTsKIHZhciBsYWJlbHMgPSBpbnB1dC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UocmVnZXhTZXBhcmF0b3JzLCAnXHUwMDJFJykuc3BsaXQoJy4nKTsKIHZhciBpLCBsYWJlbDsKIGZvciAoaSA9IDA7IGkgPCBsYWJlbHMubGVuZ3RoOyBpKyspIHsKICBsYWJlbCA9IGxhYmVsc1tpXTsKICBlbmNvZGVkLnB1c2gocmVnZXhOb25BU0NJSS50ZXN0KGxhYmVsKSA/ICd4bi0tJyArIGVuY29kZShsYWJlbCkgOiBsYWJlbCk7CiB9CiByZXR1cm4gZW5jb2RlZC5qb2luKCcuJyk7Cn07CgovKioqLyB9KSwKLyogMTQwICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCl9fd19wZGZqc19yZXF1aXJlX18oMTE4KTsKdmFyICQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwKTsKdmFyIGdldEJ1aWx0SW4gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQyKTsKdmFyIFVTRV9OQVRJVkVfVVJMID0gX193X3BkZmpzX3JlcXVpcmVfXygxMzgpOwp2YXIgcmVkZWZpbmUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI5KTsKdmFyIHJlZGVmaW5lQWxsID0gX193X3BkZmpzX3JlcXVpcmVfXygxMjEpOwp2YXIgc2V0VG9TdHJpbmdUYWcgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDg1KTsKdmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDgwKTsKdmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDMzKTsKdmFyIGFuSW5zdGFuY2UgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEyMyk7CnZhciBoYXNPd24gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIzKTsKdmFyIGJpbmQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDYyKTsKdmFyIGNsYXNzb2YgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDk1KTsKdmFyIGFuT2JqZWN0ID0gX193X3BkZmpzX3JlcXVpcmVfXygyOCk7CnZhciBpc09iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oMjIpOwp2YXIgY3JlYXRlID0gX193X3BkZmpzX3JlcXVpcmVfXyg3MSk7CnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE2KTsKdmFyIGdldEl0ZXJhdG9yID0gX193X3BkZmpzX3JlcXVpcmVfXygxNDEpOwp2YXIgZ2V0SXRlcmF0b3JNZXRob2QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDk0KTsKdmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNTcpOwp2YXIgJGZldGNoID0gZ2V0QnVpbHRJbignZmV0Y2gnKTsKdmFyIEhlYWRlcnMgPSBnZXRCdWlsdEluKCdIZWFkZXJzJyk7CnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTsKdmFyIFVSTF9TRUFSQ0hfUEFSQU1TID0gJ1VSTFNlYXJjaFBhcmFtcyc7CnZhciBVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUiA9IFVSTF9TRUFSQ0hfUEFSQU1TICsgJ0l0ZXJhdG9yJzsKdmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDsKdmFyIGdldEludGVybmFsUGFyYW1zU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihVUkxfU0VBUkNIX1BBUkFNUyk7CnZhciBnZXRJbnRlcm5hbEl0ZXJhdG9yU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUik7CnZhciBwbHVzID0gL1wrL2c7CnZhciBzZXF1ZW5jZXMgPSBBcnJheSg0KTsKdmFyIHBlcmNlbnRTZXF1ZW5jZSA9IGZ1bmN0aW9uIChieXRlcykgewogcmV0dXJuIHNlcXVlbmNlc1tieXRlcyAtIDFdIHx8IChzZXF1ZW5jZXNbYnl0ZXMgLSAxXSA9IFJlZ0V4cCgnKCg/OiVbXFxkYS1mXXsyfSl7JyArIGJ5dGVzICsgJ30pJywgJ2dpJykpOwp9Owp2YXIgcGVyY2VudERlY29kZSA9IGZ1bmN0aW9uIChzZXF1ZW5jZSkgewogdHJ5IHsKICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHNlcXVlbmNlKTsKIH0gY2F0Y2ggKGVycm9yKSB7CiAgcmV0dXJuIHNlcXVlbmNlOwogfQp9Owp2YXIgZGVzZXJpYWxpemUgPSBmdW5jdGlvbiAoaXQpIHsKIHZhciByZXN1bHQgPSBpdC5yZXBsYWNlKHBsdXMsICcgJyk7CiB2YXIgYnl0ZXMgPSA0OwogdHJ5IHsKICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHJlc3VsdCk7CiB9IGNhdGNoIChlcnJvcikgewogIHdoaWxlIChieXRlcykgewogICByZXN1bHQgPSByZXN1bHQucmVwbGFjZShwZXJjZW50U2VxdWVuY2UoYnl0ZXMtLSksIHBlcmNlbnREZWNvZGUpOwogIH0KICByZXR1cm4gcmVzdWx0OwogfQp9Owp2YXIgZmluZCA9IC9bIScoKX5dfCUyMC9nOwp2YXIgcmVwbGFjZSA9IHsKICchJzogJyUyMScsCiAiJyI6ICclMjcnLAogJygnOiAnJTI4JywKICcpJzogJyUyOScsCiAnfic6ICclN0UnLAogJyUyMCc6ICcrJwp9Owp2YXIgcmVwbGFjZXIgPSBmdW5jdGlvbiAobWF0Y2gpIHsKIHJldHVybiByZXBsYWNlW21hdGNoXTsKfTsKdmFyIHNlcmlhbGl6ZSA9IGZ1bmN0aW9uIChpdCkgewogcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChpdCkucmVwbGFjZShmaW5kLCByZXBsYWNlcik7Cn07CnZhciBwYXJzZVNlYXJjaFBhcmFtcyA9IGZ1bmN0aW9uIChyZXN1bHQsIHF1ZXJ5KSB7CiBpZiAocXVlcnkpIHsKICB2YXIgYXR0cmlidXRlcyA9IHF1ZXJ5LnNwbGl0KCcmJyk7CiAgdmFyIGluZGV4ID0gMDsKICB2YXIgYXR0cmlidXRlLCBlbnRyeTsKICB3aGlsZSAoaW5kZXggPCBhdHRyaWJ1dGVzLmxlbmd0aCkgewogICBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW2luZGV4KytdOwogICBpZiAoYXR0cmlidXRlLmxlbmd0aCkgewogICAgZW50cnkgPSBhdHRyaWJ1dGUuc3BsaXQoJz0nKTsKICAgIHJlc3VsdC5wdXNoKHsKICAgICBrZXk6IGRlc2VyaWFsaXplKGVudHJ5LnNoaWZ0KCkpLAogICAgIHZhbHVlOiBkZXNlcmlhbGl6ZShlbnRyeS5qb2luKCc9JykpCiAgICB9KTsKICAgfQogIH0KIH0KfTsKdmFyIHVwZGF0ZVNlYXJjaFBhcmFtcyA9IGZ1bmN0aW9uIChxdWVyeSkgewogdGhpcy5lbnRyaWVzLmxlbmd0aCA9IDA7CiBwYXJzZVNlYXJjaFBhcmFtcyh0aGlzLmVudHJpZXMsIHF1ZXJ5KTsKfTsKdmFyIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoID0gZnVuY3Rpb24gKHBhc3NlZCwgcmVxdWlyZWQpIHsKIGlmIChwYXNzZWQgPCByZXF1aXJlZCkKICB0aHJvdyBUeXBlRXJyb3IoJ05vdCBlbm91Z2ggYXJndW1lbnRzJyk7Cn07CnZhciBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvciA9IGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoZnVuY3Rpb24gSXRlcmF0b3IocGFyYW1zLCBraW5kKSB7CiBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHsKICB0eXBlOiBVUkxfU0VBUkNIX1BBUkFNU19JVEVSQVRPUiwKICBpdGVyYXRvcjogZ2V0SXRlcmF0b3IoZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZShwYXJhbXMpLmVudHJpZXMpLAogIGtpbmQ6IGtpbmQKIH0pOwp9LCAnSXRlcmF0b3InLCBmdW5jdGlvbiBuZXh0KCkgewogdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlKHRoaXMpOwogdmFyIGtpbmQgPSBzdGF0ZS5raW5kOwogdmFyIHN0ZXAgPSBzdGF0ZS5pdGVyYXRvci5uZXh0KCk7CiB2YXIgZW50cnkgPSBzdGVwLnZhbHVlOwogaWYgKCFzdGVwLmRvbmUpIHsKICBzdGVwLnZhbHVlID0ga2luZCA9PT0gJ2tleXMnID8gZW50cnkua2V5IDoga2luZCA9PT0gJ3ZhbHVlcycgPyBlbnRyeS52YWx1ZSA6IFsKICAgZW50cnkua2V5LAogICBlbnRyeS52YWx1ZQogIF07CiB9CiByZXR1cm4gc3RlcDsKfSk7CnZhciBVUkxTZWFyY2hQYXJhbXNDb25zdHJ1Y3RvciA9IGZ1bmN0aW9uIFVSTFNlYXJjaFBhcmFtcygpIHsKIGFuSW5zdGFuY2UodGhpcywgVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IsIFVSTF9TRUFSQ0hfUEFSQU1TKTsKIHZhciBpbml0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQ7CiB2YXIgdGhhdCA9IHRoaXM7CiB2YXIgZW50cmllcyA9IFtdOwogdmFyIGl0ZXJhdG9yTWV0aG9kLCBpdGVyYXRvciwgbmV4dCwgc3RlcCwgZW50cnlJdGVyYXRvciwgZW50cnlOZXh0LCBmaXJzdCwgc2Vjb25kLCBrZXk7CiBzZXRJbnRlcm5hbFN0YXRlKHRoYXQsIHsKICB0eXBlOiBVUkxfU0VBUkNIX1BBUkFNUywKICBlbnRyaWVzOiBlbnRyaWVzLAogIHVwZGF0ZVVSTDogZnVuY3Rpb24gKCkgewogIH0sCiAgdXBkYXRlU2VhcmNoUGFyYW1zOiB1cGRhdGVTZWFyY2hQYXJhbXMKIH0pOwogaWYgKGluaXQgIT09IHVuZGVmaW5lZCkgewogIGlmIChpc09iamVjdChpbml0KSkgewogICBpdGVyYXRvck1ldGhvZCA9IGdldEl0ZXJhdG9yTWV0aG9kKGluaXQpOwogICBpZiAodHlwZW9mIGl0ZXJhdG9yTWV0aG9kID09PSAnZnVuY3Rpb24nKSB7CiAgICBpdGVyYXRvciA9IGl0ZXJhdG9yTWV0aG9kLmNhbGwoaW5pdCk7CiAgICBuZXh0ID0gaXRlcmF0b3IubmV4dDsKICAgIHdoaWxlICghKHN0ZXAgPSBuZXh0LmNhbGwoaXRlcmF0b3IpKS5kb25lKSB7CiAgICAgZW50cnlJdGVyYXRvciA9IGdldEl0ZXJhdG9yKGFuT2JqZWN0KHN0ZXAudmFsdWUpKTsKICAgICBlbnRyeU5leHQgPSBlbnRyeUl0ZXJhdG9yLm5leHQ7CiAgICAgaWYgKChmaXJzdCA9IGVudHJ5TmV4dC5jYWxsKGVudHJ5SXRlcmF0b3IpKS5kb25lIHx8IChzZWNvbmQgPSBlbnRyeU5leHQuY2FsbChlbnRyeUl0ZXJhdG9yKSkuZG9uZSB8fCAhZW50cnlOZXh0LmNhbGwoZW50cnlJdGVyYXRvcikuZG9uZSkKICAgICAgdGhyb3cgVHlwZUVycm9yKCdFeHBlY3RlZCBzZXF1ZW5jZSB3aXRoIGxlbmd0aCAyJyk7CiAgICAgZW50cmllcy5wdXNoKHsKICAgICAga2V5OiBmaXJzdC52YWx1ZSArICcnLAogICAgICB2YWx1ZTogc2Vjb25kLnZhbHVlICsgJycKICAgICB9KTsKICAgIH0KICAgfSBlbHNlCiAgICBmb3IgKGtleSBpbiBpbml0KQogICAgIGlmIChoYXNPd24oaW5pdCwga2V5KSkKICAgICAgZW50cmllcy5wdXNoKHsKICAgICAgIGtleToga2V5LAogICAgICAgdmFsdWU6IGluaXRba2V5XSArICcnCiAgICAgIH0pOwogIH0gZWxzZSB7CiAgIHBhcnNlU2VhcmNoUGFyYW1zKGVudHJpZXMsIHR5cGVvZiBpbml0ID09PSAnc3RyaW5nJyA/IGluaXQuY2hhckF0KDApID09PSAnPycgPyBpbml0LnNsaWNlKDEpIDogaW5pdCA6IGluaXQgKyAnJyk7CiAgfQogfQp9Owp2YXIgVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlID0gVVJMU2VhcmNoUGFyYW1zQ29uc3RydWN0b3IucHJvdG90eXBlOwpyZWRlZmluZUFsbChVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUsIHsKIGFwcGVuZDogZnVuY3Rpb24gYXBwZW5kKG5hbWUsIHZhbHVlKSB7CiAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMik7CiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTsKICBzdGF0ZS5lbnRyaWVzLnB1c2goewogICBrZXk6IG5hbWUgKyAnJywKICAgdmFsdWU6IHZhbHVlICsgJycKICB9KTsKICBzdGF0ZS51cGRhdGVVUkwoKTsKIH0sCiAnZGVsZXRlJzogZnVuY3Rpb24gKG5hbWUpIHsKICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTsKICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpOwogIHZhciBlbnRyaWVzID0gc3RhdGUuZW50cmllczsKICB2YXIga2V5ID0gbmFtZSArICcnOwogIHZhciBpbmRleCA9IDA7CiAgd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHsKICAgaWYgKGVudHJpZXNbaW5kZXhdLmtleSA9PT0ga2V5KQogICAgZW50cmllcy5zcGxpY2UoaW5kZXgsIDEpOwogICBlbHNlCiAgICBpbmRleCsrOwogIH0KICBzdGF0ZS51cGRhdGVVUkwoKTsKIH0sCiBnZXQ6IGZ1bmN0aW9uIGdldChuYW1lKSB7CiAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7CiAgdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7CiAgdmFyIGtleSA9IG5hbWUgKyAnJzsKICB2YXIgaW5kZXggPSAwOwogIGZvciAoOyBpbmRleCA8IGVudHJpZXMubGVuZ3RoOyBpbmRleCsrKSB7CiAgIGlmIChlbnRyaWVzW2luZGV4XS5rZXkgPT09IGtleSkKICAgIHJldHVybiBlbnRyaWVzW2luZGV4XS52YWx1ZTsKICB9CiAgcmV0dXJuIG51bGw7CiB9LAogZ2V0QWxsOiBmdW5jdGlvbiBnZXRBbGwobmFtZSkgewogIHZhbGlkYXRlQXJndW1lbnRzTGVuZ3RoKGFyZ3VtZW50cy5sZW5ndGgsIDEpOwogIHZhciBlbnRyaWVzID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKS5lbnRyaWVzOwogIHZhciBrZXkgPSBuYW1lICsgJyc7CiAgdmFyIHJlc3VsdCA9IFtdOwogIHZhciBpbmRleCA9IDA7CiAgZm9yICg7IGluZGV4IDwgZW50cmllcy5sZW5ndGg7IGluZGV4KyspIHsKICAgaWYgKGVudHJpZXNbaW5kZXhdLmtleSA9PT0ga2V5KQogICAgcmVzdWx0LnB1c2goZW50cmllc1tpbmRleF0udmFsdWUpOwogIH0KICByZXR1cm4gcmVzdWx0OwogfSwKIGhhczogZnVuY3Rpb24gaGFzKG5hbWUpIHsKICB2YWxpZGF0ZUFyZ3VtZW50c0xlbmd0aChhcmd1bWVudHMubGVuZ3RoLCAxKTsKICB2YXIgZW50cmllcyA9IGdldEludGVybmFsUGFyYW1zU3RhdGUodGhpcykuZW50cmllczsKICB2YXIga2V5ID0gbmFtZSArICcnOwogIHZhciBpbmRleCA9IDA7CiAgd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHsKICAgaWYgKGVudHJpZXNbaW5kZXgrK10ua2V5ID09PSBrZXkpCiAgICByZXR1cm4gdHJ1ZTsKICB9CiAgcmV0dXJuIGZhbHNlOwogfSwKIHNldDogZnVuY3Rpb24gc2V0KG5hbWUsIHZhbHVlKSB7CiAgdmFsaWRhdGVBcmd1bWVudHNMZW5ndGgoYXJndW1lbnRzLmxlbmd0aCwgMSk7CiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTsKICB2YXIgZW50cmllcyA9IHN0YXRlLmVudHJpZXM7CiAgdmFyIGZvdW5kID0gZmFsc2U7CiAgdmFyIGtleSA9IG5hbWUgKyAnJzsKICB2YXIgdmFsID0gdmFsdWUgKyAnJzsKICB2YXIgaW5kZXggPSAwOwogIHZhciBlbnRyeTsKICBmb3IgKDsgaW5kZXggPCBlbnRyaWVzLmxlbmd0aDsgaW5kZXgrKykgewogICBlbnRyeSA9IGVudHJpZXNbaW5kZXhdOwogICBpZiAoZW50cnkua2V5ID09PSBrZXkpIHsKICAgIGlmIChmb3VuZCkKICAgICBlbnRyaWVzLnNwbGljZShpbmRleC0tLCAxKTsKICAgIGVsc2UgewogICAgIGZvdW5kID0gdHJ1ZTsKICAgICBlbnRyeS52YWx1ZSA9IHZhbDsKICAgIH0KICAgfQogIH0KICBpZiAoIWZvdW5kKQogICBlbnRyaWVzLnB1c2goewogICAga2V5OiBrZXksCiAgICB2YWx1ZTogdmFsCiAgIH0pOwogIHN0YXRlLnVwZGF0ZVVSTCgpOwogfSwKIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoKSB7CiAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKTsKICB2YXIgZW50cmllcyA9IHN0YXRlLmVudHJpZXM7CiAgdmFyIHNsaWNlID0gZW50cmllcy5zbGljZSgpOwogIHZhciBlbnRyeSwgZW50cmllc0luZGV4LCBzbGljZUluZGV4OwogIGVudHJpZXMubGVuZ3RoID0gMDsKICBmb3IgKHNsaWNlSW5kZXggPSAwOyBzbGljZUluZGV4IDwgc2xpY2UubGVuZ3RoOyBzbGljZUluZGV4KyspIHsKICAgZW50cnkgPSBzbGljZVtzbGljZUluZGV4XTsKICAgZm9yIChlbnRyaWVzSW5kZXggPSAwOyBlbnRyaWVzSW5kZXggPCBzbGljZUluZGV4OyBlbnRyaWVzSW5kZXgrKykgewogICAgaWYgKGVudHJpZXNbZW50cmllc0luZGV4XS5rZXkgPiBlbnRyeS5rZXkpIHsKICAgICBlbnRyaWVzLnNwbGljZShlbnRyaWVzSW5kZXgsIDAsIGVudHJ5KTsKICAgICBicmVhazsKICAgIH0KICAgfQogICBpZiAoZW50cmllc0luZGV4ID09PSBzbGljZUluZGV4KQogICAgZW50cmllcy5wdXNoKGVudHJ5KTsKICB9CiAgc3RhdGUudXBkYXRlVVJMKCk7CiB9LAogZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFjaykgewogIHZhciBlbnRyaWVzID0gZ2V0SW50ZXJuYWxQYXJhbXNTdGF0ZSh0aGlzKS5lbnRyaWVzOwogIHZhciBib3VuZEZ1bmN0aW9uID0gYmluZChjYWxsYmFjaywgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpOwogIHZhciBpbmRleCA9IDA7CiAgdmFyIGVudHJ5OwogIHdoaWxlIChpbmRleCA8IGVudHJpZXMubGVuZ3RoKSB7CiAgIGVudHJ5ID0gZW50cmllc1tpbmRleCsrXTsKICAgYm91bmRGdW5jdGlvbihlbnRyeS52YWx1ZSwgZW50cnkua2V5LCB0aGlzKTsKICB9CiB9LAoga2V5czogZnVuY3Rpb24ga2V5cygpIHsKICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yKHRoaXMsICdrZXlzJyk7CiB9LAogdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7CiAgcmV0dXJuIG5ldyBVUkxTZWFyY2hQYXJhbXNJdGVyYXRvcih0aGlzLCAndmFsdWVzJyk7CiB9LAogZW50cmllczogZnVuY3Rpb24gZW50cmllcygpIHsKICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtc0l0ZXJhdG9yKHRoaXMsICdlbnRyaWVzJyk7CiB9Cn0sIHsgZW51bWVyYWJsZTogdHJ1ZSB9KTsKcmVkZWZpbmUoVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLCBJVEVSQVRPUiwgVVJMU2VhcmNoUGFyYW1zUHJvdG90eXBlLmVudHJpZXMpOwpyZWRlZmluZShVUkxTZWFyY2hQYXJhbXNQcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkgewogdmFyIGVudHJpZXMgPSBnZXRJbnRlcm5hbFBhcmFtc1N0YXRlKHRoaXMpLmVudHJpZXM7CiB2YXIgcmVzdWx0ID0gW107CiB2YXIgaW5kZXggPSAwOwogdmFyIGVudHJ5Owogd2hpbGUgKGluZGV4IDwgZW50cmllcy5sZW5ndGgpIHsKICBlbnRyeSA9IGVudHJpZXNbaW5kZXgrK107CiAgcmVzdWx0LnB1c2goc2VyaWFsaXplKGVudHJ5LmtleSkgKyAnPScgKyBzZXJpYWxpemUoZW50cnkudmFsdWUpKTsKIH0KIHJldHVybiByZXN1bHQuam9pbignJicpOwp9LCB7IGVudW1lcmFibGU6IHRydWUgfSk7CnNldFRvU3RyaW5nVGFnKFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yLCBVUkxfU0VBUkNIX1BBUkFNUyk7CiQoewogZ2xvYmFsOiB0cnVlLAogZm9yY2VkOiAhVVNFX05BVElWRV9VUkwKfSwgeyBVUkxTZWFyY2hQYXJhbXM6IFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yIH0pOwppZiAoIVVTRV9OQVRJVkVfVVJMICYmIHR5cGVvZiAkZmV0Y2ggPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgSGVhZGVycyA9PSAnZnVuY3Rpb24nKSB7CiAkKHsKICBnbG9iYWw6IHRydWUsCiAgZW51bWVyYWJsZTogdHJ1ZSwKICBmb3JjZWQ6IHRydWUKIH0sIHsKICBmZXRjaDogZnVuY3Rpb24gZmV0Y2goaW5wdXQpIHsKICAgdmFyIGFyZ3MgPSBbaW5wdXRdOwogICB2YXIgaW5pdCwgYm9keSwgaGVhZGVyczsKICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7CiAgICBpbml0ID0gYXJndW1lbnRzWzFdOwogICAgaWYgKGlzT2JqZWN0KGluaXQpKSB7CiAgICAgYm9keSA9IGluaXQuYm9keTsKICAgICBpZiAoY2xhc3NvZihib2R5KSA9PT0gVVJMX1NFQVJDSF9QQVJBTVMpIHsKICAgICAgaGVhZGVycyA9IGluaXQuaGVhZGVycyA/IG5ldyBIZWFkZXJzKGluaXQuaGVhZGVycykgOiBuZXcgSGVhZGVycygpOwogICAgICBpZiAoIWhlYWRlcnMuaGFzKCdjb250ZW50LXR5cGUnKSkgewogICAgICAgaGVhZGVycy5zZXQoJ2NvbnRlbnQtdHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD1VVEYtOCcpOwogICAgICB9CiAgICAgIGluaXQgPSBjcmVhdGUoaW5pdCwgewogICAgICAgYm9keTogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDAsIFN0cmluZyhib2R5KSksCiAgICAgICBoZWFkZXJzOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgaGVhZGVycykKICAgICAgfSk7CiAgICAgfQogICAgfQogICAgYXJncy5wdXNoKGluaXQpOwogICB9CiAgIHJldHVybiAkZmV0Y2guYXBwbHkodGhpcywgYXJncyk7CiAgfQogfSk7Cn0KbW9kdWxlLmV4cG9ydHMgPSB7CiBVUkxTZWFyY2hQYXJhbXM6IFVSTFNlYXJjaFBhcmFtc0NvbnN0cnVjdG9yLAogZ2V0U3RhdGU6IGdldEludGVybmFsUGFyYW1zU3RhdGUKfTsKCi8qKiovIH0pLAovKiAxNDEgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIGFuT2JqZWN0ID0gX193X3BkZmpzX3JlcXVpcmVfXygyOCk7CnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IF9fd19wZGZqc19yZXF1aXJlX18oOTQpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkgewogdmFyIGl0ZXJhdG9yTWV0aG9kID0gZ2V0SXRlcmF0b3JNZXRob2QoaXQpOwogaWYgKHR5cGVvZiBpdGVyYXRvck1ldGhvZCAhPSAnZnVuY3Rpb24nKSB7CiAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBpdGVyYWJsZScpOwogfQogcmV0dXJuIGFuT2JqZWN0KGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXQpKTsKfTsKCi8qKiovIH0pLAovKiAxNDIgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKdmFyICQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwKTsKJCh7CiB0YXJnZXQ6ICdVUkwnLAogcHJvdG86IHRydWUsCiBlbnVtZXJhYmxlOiB0cnVlCn0sIHsKIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKCkgewogIHJldHVybiBVUkwucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodGhpcyk7CiB9Cn0pOwoKLyoqKi8gfSksCi8qIDE0MyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgooZnVuY3Rpb24gKGdsb2JhbCwgZmFjdG9yeSkgewogIHRydWUgPyBmYWN0b3J5KGV4cG9ydHMpIDogdW5kZWZpbmVkOwp9KHRoaXMsIGZ1bmN0aW9uIChleHBvcnRzKSB7CiAndXNlIHN0cmljdCc7CiB2YXIgU3ltYm9sUG9seWZpbGwgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnID8gU3ltYm9sIDogZnVuY3Rpb24gKGRlc2NyaXB0aW9uKSB7CiAgcmV0dXJuICJTeW1ib2woIiArIGRlc2NyaXB0aW9uICsgIikiOwogfTsKIGZ1bmN0aW9uIG5vb3AoKSB7CiB9CiB2YXIgTnVtYmVySXNOYU4gPSBOdW1iZXIuaXNOYU4gfHwgZnVuY3Rpb24gKHgpIHsKICByZXR1cm4geCAhPT0geDsKIH07CiB2YXIgcmV0aHJvd0Fzc2VydGlvbkVycm9yUmVqZWN0aW9uID0gbm9vcDsKIGZ1bmN0aW9uIHR5cGVJc09iamVjdCh4KSB7CiAgcmV0dXJuIHR5cGVvZiB4ID09PSAnb2JqZWN0JyAmJiB4ICE9PSBudWxsIHx8IHR5cGVvZiB4ID09PSAnZnVuY3Rpb24nOwogfQogZnVuY3Rpb24gY3JlYXRlQXJyYXlGcm9tTGlzdChlbGVtZW50cykgewogIHJldHVybiBlbGVtZW50cy5zbGljZSgpOwogfQogZnVuY3Rpb24gQXJyYXlCdWZmZXJDb3B5KGRlc3QsIGRlc3RPZmZzZXQsIHNyYywgc3JjT2Zmc2V0LCBuKSB7CiAgbmV3IFVpbnQ4QXJyYXkoZGVzdCkuc2V0KG5ldyBVaW50OEFycmF5KHNyYywgc3JjT2Zmc2V0LCBuKSwgZGVzdE9mZnNldCk7CiB9CiBmdW5jdGlvbiBJc0Zpbml0ZU5vbk5lZ2F0aXZlTnVtYmVyKHYpIHsKICBpZiAoSXNOb25OZWdhdGl2ZU51bWJlcih2KSA9PT0gZmFsc2UpIHsKICAgcmV0dXJuIGZhbHNlOwogIH0KICBpZiAodiA9PT0gSW5maW5pdHkpIHsKICAgcmV0dXJuIGZhbHNlOwogIH0KICByZXR1cm4gdHJ1ZTsKIH0KIGZ1bmN0aW9uIElzTm9uTmVnYXRpdmVOdW1iZXIodikgewogIGlmICh0eXBlb2YgdiAhPT0gJ251bWJlcicpIHsKICAgcmV0dXJuIGZhbHNlOwogIH0KICBpZiAoTnVtYmVySXNOYU4odikpIHsKICAgcmV0dXJuIGZhbHNlOwogIH0KICBpZiAodiA8IDApIHsKICAgcmV0dXJuIGZhbHNlOwogIH0KICByZXR1cm4gdHJ1ZTsKIH0KIGZ1bmN0aW9uIENhbGwoRiwgViwgYXJncykgewogIGlmICh0eXBlb2YgRiAhPT0gJ2Z1bmN0aW9uJykgewogICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBpcyBub3QgYSBmdW5jdGlvbicpOwogIH0KICByZXR1cm4gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoRiwgViwgYXJncyk7CiB9CiBmdW5jdGlvbiBDcmVhdGVBbGdvcml0aG1Gcm9tVW5kZXJseWluZ01ldGhvZCh1bmRlcmx5aW5nT2JqZWN0LCBtZXRob2ROYW1lLCBhbGdvQXJnQ291bnQsIGV4dHJhQXJncykgewogIHZhciBtZXRob2QgPSB1bmRlcmx5aW5nT2JqZWN0W21ldGhvZE5hbWVdOwogIGlmIChtZXRob2QgIT09IHVuZGVmaW5lZCkgewogICBpZiAodHlwZW9mIG1ldGhvZCAhPT0gJ2Z1bmN0aW9uJykgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcihtZXRob2QgKyAiIGlzIG5vdCBhIG1ldGhvZCIpOwogICB9CiAgIHN3aXRjaCAoYWxnb0FyZ0NvdW50KSB7CiAgIGNhc2UgMDogewogICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBQcm9taXNlQ2FsbChtZXRob2QsIHVuZGVybHlpbmdPYmplY3QsIGV4dHJhQXJncyk7CiAgICAgfTsKICAgIH0KICAgY2FzZSAxOiB7CiAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHsKICAgICAgdmFyIGZ1bGxBcmdzID0gW2FyZ10uY29uY2F0KGV4dHJhQXJncyk7CiAgICAgIHJldHVybiBQcm9taXNlQ2FsbChtZXRob2QsIHVuZGVybHlpbmdPYmplY3QsIGZ1bGxBcmdzKTsKICAgICB9OwogICAgfQogICB9CiAgfQogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7CiAgfTsKIH0KIGZ1bmN0aW9uIEludm9rZU9yTm9vcChPLCBQLCBhcmdzKSB7CiAgdmFyIG1ldGhvZCA9IE9bUF07CiAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7CiAgIHJldHVybiB1bmRlZmluZWQ7CiAgfQogIHJldHVybiBDYWxsKG1ldGhvZCwgTywgYXJncyk7CiB9CiBmdW5jdGlvbiBQcm9taXNlQ2FsbChGLCBWLCBhcmdzKSB7CiAgdHJ5IHsKICAgcmV0dXJuIHByb21pc2VSZXNvbHZlZFdpdGgoQ2FsbChGLCBWLCBhcmdzKSk7CiAgfSBjYXRjaCAodmFsdWUpIHsKICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgodmFsdWUpOwogIH0KIH0KIGZ1bmN0aW9uIFRyYW5zZmVyQXJyYXlCdWZmZXIoTykgewogIHJldHVybiBPOwogfQogZnVuY3Rpb24gSXNEZXRhY2hlZEJ1ZmZlcihPKSB7CiAgcmV0dXJuIGZhbHNlOwogfQogZnVuY3Rpb24gVmFsaWRhdGVBbmROb3JtYWxpemVIaWdoV2F0ZXJNYXJrKGhpZ2hXYXRlck1hcmspIHsKICBoaWdoV2F0ZXJNYXJrID0gTnVtYmVyKGhpZ2hXYXRlck1hcmspOwogIGlmIChOdW1iZXJJc05hTihoaWdoV2F0ZXJNYXJrKSB8fCBoaWdoV2F0ZXJNYXJrIDwgMCkgewogICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignaGlnaFdhdGVyTWFyayBwcm9wZXJ0eSBvZiBhIHF1ZXVpbmcgc3RyYXRlZ3kgbXVzdCBiZSBub24tbmVnYXRpdmUgYW5kIG5vbi1OYU4nKTsKICB9CiAgcmV0dXJuIGhpZ2hXYXRlck1hcms7CiB9CiBmdW5jdGlvbiBNYWtlU2l6ZUFsZ29yaXRobUZyb21TaXplRnVuY3Rpb24oc2l6ZSkgewogIGlmIChzaXplID09PSB1bmRlZmluZWQpIHsKICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiAxOwogICB9OwogIH0KICBpZiAodHlwZW9mIHNpemUgIT09ICdmdW5jdGlvbicpIHsKICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2l6ZSBwcm9wZXJ0eSBvZiBhIHF1ZXVpbmcgc3RyYXRlZ3kgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7CiAgfQogIHJldHVybiBmdW5jdGlvbiAoY2h1bmspIHsKICAgcmV0dXJuIHNpemUoY2h1bmspOwogIH07CiB9CiB2YXIgb3JpZ2luYWxQcm9taXNlID0gUHJvbWlzZTsKIHZhciBvcmlnaW5hbFByb21pc2VUaGVuID0gUHJvbWlzZS5wcm90b3R5cGUudGhlbjsKIHZhciBvcmlnaW5hbFByb21pc2VSZXNvbHZlID0gUHJvbWlzZS5yZXNvbHZlLmJpbmQob3JpZ2luYWxQcm9taXNlKTsKIHZhciBvcmlnaW5hbFByb21pc2VSZWplY3QgPSBQcm9taXNlLnJlamVjdC5iaW5kKG9yaWdpbmFsUHJvbWlzZSk7CiBmdW5jdGlvbiBuZXdQcm9taXNlKGV4ZWN1dG9yKSB7CiAgcmV0dXJuIG5ldyBvcmlnaW5hbFByb21pc2UoZXhlY3V0b3IpOwogfQogZnVuY3Rpb24gcHJvbWlzZVJlc29sdmVkV2l0aCh2YWx1ZSkgewogIHJldHVybiBvcmlnaW5hbFByb21pc2VSZXNvbHZlKHZhbHVlKTsKIH0KIGZ1bmN0aW9uIHByb21pc2VSZWplY3RlZFdpdGgocmVhc29uKSB7CiAgcmV0dXJuIG9yaWdpbmFsUHJvbWlzZVJlamVjdChyZWFzb24pOwogfQogZnVuY3Rpb24gUGVyZm9ybVByb21pc2VUaGVuKHByb21pc2UsIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7CiAgcmV0dXJuIG9yaWdpbmFsUHJvbWlzZVRoZW4uY2FsbChwcm9taXNlLCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCk7CiB9CiBmdW5jdGlvbiB1cG9uUHJvbWlzZShwcm9taXNlLCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkgewogIFBlcmZvcm1Qcm9taXNlVGhlbihQZXJmb3JtUHJvbWlzZVRoZW4ocHJvbWlzZSwgb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpLCB1bmRlZmluZWQsIHJldGhyb3dBc3NlcnRpb25FcnJvclJlamVjdGlvbik7CiB9CiBmdW5jdGlvbiB1cG9uRnVsZmlsbG1lbnQocHJvbWlzZSwgb25GdWxmaWxsZWQpIHsKICB1cG9uUHJvbWlzZShwcm9taXNlLCBvbkZ1bGZpbGxlZCk7CiB9CiBmdW5jdGlvbiB1cG9uUmVqZWN0aW9uKHByb21pc2UsIG9uUmVqZWN0ZWQpIHsKICB1cG9uUHJvbWlzZShwcm9taXNlLCB1bmRlZmluZWQsIG9uUmVqZWN0ZWQpOwogfQogZnVuY3Rpb24gdHJhbnNmb3JtUHJvbWlzZVdpdGgocHJvbWlzZSwgZnVsZmlsbG1lbnRIYW5kbGVyLCByZWplY3Rpb25IYW5kbGVyKSB7CiAgcmV0dXJuIFBlcmZvcm1Qcm9taXNlVGhlbihwcm9taXNlLCBmdWxmaWxsbWVudEhhbmRsZXIsIHJlamVjdGlvbkhhbmRsZXIpOwogfQogZnVuY3Rpb24gc2V0UHJvbWlzZUlzSGFuZGxlZFRvVHJ1ZShwcm9taXNlKSB7CiAgUGVyZm9ybVByb21pc2VUaGVuKHByb21pc2UsIHVuZGVmaW5lZCwgcmV0aHJvd0Fzc2VydGlvbkVycm9yUmVqZWN0aW9uKTsKIH0KIHZhciBRVUVVRV9NQVhfQVJSQVlfU0laRSA9IDE2Mzg0OwogdmFyIFNpbXBsZVF1ZXVlID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFNpbXBsZVF1ZXVlKCkgewogICB0aGlzLl9jdXJzb3IgPSAwOwogICB0aGlzLl9zaXplID0gMDsKICAgdGhpcy5fZnJvbnQgPSB7CiAgICBfZWxlbWVudHM6IFtdLAogICAgX25leHQ6IHVuZGVmaW5lZAogICB9OwogICB0aGlzLl9iYWNrID0gdGhpcy5fZnJvbnQ7CiAgIHRoaXMuX2N1cnNvciA9IDA7CiAgIHRoaXMuX3NpemUgPSAwOwogIH0KICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2ltcGxlUXVldWUucHJvdG90eXBlLCAibGVuZ3RoIiwgewogICBnZXQ6IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiB0aGlzLl9zaXplOwogICB9LAogICBlbnVtZXJhYmxlOiB0cnVlLAogICBjb25maWd1cmFibGU6IHRydWUKICB9KTsKICBTaW1wbGVRdWV1ZS5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uIChlbGVtZW50KSB7CiAgIHZhciBvbGRCYWNrID0gdGhpcy5fYmFjazsKICAgdmFyIG5ld0JhY2sgPSBvbGRCYWNrOwogICBpZiAob2xkQmFjay5fZWxlbWVudHMubGVuZ3RoID09PSBRVUVVRV9NQVhfQVJSQVlfU0laRSAtIDEpIHsKICAgIG5ld0JhY2sgPSB7CiAgICAgX2VsZW1lbnRzOiBbXSwKICAgICBfbmV4dDogdW5kZWZpbmVkCiAgICB9OwogICB9CiAgIG9sZEJhY2suX2VsZW1lbnRzLnB1c2goZWxlbWVudCk7CiAgIGlmIChuZXdCYWNrICE9PSBvbGRCYWNrKSB7CiAgICB0aGlzLl9iYWNrID0gbmV3QmFjazsKICAgIG9sZEJhY2suX25leHQgPSBuZXdCYWNrOwogICB9CiAgICsrdGhpcy5fc2l6ZTsKICB9OwogIFNpbXBsZVF1ZXVlLnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uICgpIHsKICAgdmFyIG9sZEZyb250ID0gdGhpcy5fZnJvbnQ7CiAgIHZhciBuZXdGcm9udCA9IG9sZEZyb250OwogICB2YXIgb2xkQ3Vyc29yID0gdGhpcy5fY3Vyc29yOwogICB2YXIgbmV3Q3Vyc29yID0gb2xkQ3Vyc29yICsgMTsKICAgdmFyIGVsZW1lbnRzID0gb2xkRnJvbnQuX2VsZW1lbnRzOwogICB2YXIgZWxlbWVudCA9IGVsZW1lbnRzW29sZEN1cnNvcl07CiAgIGlmIChuZXdDdXJzb3IgPT09IFFVRVVFX01BWF9BUlJBWV9TSVpFKSB7CiAgICBuZXdGcm9udCA9IG9sZEZyb250Ll9uZXh0OwogICAgbmV3Q3Vyc29yID0gMDsKICAgfQogICAtLXRoaXMuX3NpemU7CiAgIHRoaXMuX2N1cnNvciA9IG5ld0N1cnNvcjsKICAgaWYgKG9sZEZyb250ICE9PSBuZXdGcm9udCkgewogICAgdGhpcy5fZnJvbnQgPSBuZXdGcm9udDsKICAgfQogICBlbGVtZW50c1tvbGRDdXJzb3JdID0gdW5kZWZpbmVkOwogICByZXR1cm4gZWxlbWVudDsKICB9OwogIFNpbXBsZVF1ZXVlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7CiAgIHZhciBpID0gdGhpcy5fY3Vyc29yOwogICB2YXIgbm9kZSA9IHRoaXMuX2Zyb250OwogICB2YXIgZWxlbWVudHMgPSBub2RlLl9lbGVtZW50czsKICAgd2hpbGUgKGkgIT09IGVsZW1lbnRzLmxlbmd0aCB8fCBub2RlLl9uZXh0ICE9PSB1bmRlZmluZWQpIHsKICAgIGlmIChpID09PSBlbGVtZW50cy5sZW5ndGgpIHsKICAgICBub2RlID0gbm9kZS5fbmV4dDsKICAgICBlbGVtZW50cyA9IG5vZGUuX2VsZW1lbnRzOwogICAgIGkgPSAwOwogICAgIGlmIChlbGVtZW50cy5sZW5ndGggPT09IDApIHsKICAgICAgYnJlYWs7CiAgICAgfQogICAgfQogICAgY2FsbGJhY2soZWxlbWVudHNbaV0pOwogICAgKytpOwogICB9CiAgfTsKICBTaW1wbGVRdWV1ZS5wcm90b3R5cGUucGVlayA9IGZ1bmN0aW9uICgpIHsKICAgdmFyIGZyb250ID0gdGhpcy5fZnJvbnQ7CiAgIHZhciBjdXJzb3IgPSB0aGlzLl9jdXJzb3I7CiAgIHJldHVybiBmcm9udC5fZWxlbWVudHNbY3Vyc29yXTsKICB9OwogIHJldHVybiBTaW1wbGVRdWV1ZTsKIH0oKTsKIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtQ3JlYXRlUmVhZFJlc3VsdCh2YWx1ZSwgZG9uZSwgZm9yQXV0aG9yQ29kZSkgewogIHZhciBwcm90b3R5cGUgPSBudWxsOwogIGlmIChmb3JBdXRob3JDb2RlID09PSB0cnVlKSB7CiAgIHByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7CiAgfQogIHZhciBvYmogPSBPYmplY3QuY3JlYXRlKHByb3RvdHlwZSk7CiAgb2JqLnZhbHVlID0gdmFsdWU7CiAgb2JqLmRvbmUgPSBkb25lOwogIHJldHVybiBvYmo7CiB9CiBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbVJlYWRlckdlbmVyaWNJbml0aWFsaXplKHJlYWRlciwgc3RyZWFtKSB7CiAgcmVhZGVyLl9mb3JBdXRob3JDb2RlID0gdHJ1ZTsKICByZWFkZXIuX293bmVyUmVhZGFibGVTdHJlYW0gPSBzdHJlYW07CiAgc3RyZWFtLl9yZWFkZXIgPSByZWFkZXI7CiAgaWYgKHN0cmVhbS5fc3RhdGUgPT09ICdyZWFkYWJsZScpIHsKICAgZGVmYXVsdFJlYWRlckNsb3NlZFByb21pc2VJbml0aWFsaXplKHJlYWRlcik7CiAgfSBlbHNlIGlmIChzdHJlYW0uX3N0YXRlID09PSAnY2xvc2VkJykgewogICBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemVBc1Jlc29sdmVkKHJlYWRlcik7CiAgfSBlbHNlIHsKICAgZGVmYXVsdFJlYWRlckNsb3NlZFByb21pc2VJbml0aWFsaXplQXNSZWplY3RlZChyZWFkZXIsIHN0cmVhbS5fc3RvcmVkRXJyb3IpOwogIH0KIH0KIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY0NhbmNlbChyZWFkZXIsIHJlYXNvbikgewogIHZhciBzdHJlYW0gPSByZWFkZXIuX293bmVyUmVhZGFibGVTdHJlYW07CiAgcmV0dXJuIFJlYWRhYmxlU3RyZWFtQ2FuY2VsKHN0cmVhbSwgcmVhc29uKTsKIH0KIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY1JlbGVhc2UocmVhZGVyKSB7CiAgaWYgKHJlYWRlci5fb3duZXJSZWFkYWJsZVN0cmVhbS5fc3RhdGUgPT09ICdyZWFkYWJsZScpIHsKICAgZGVmYXVsdFJlYWRlckNsb3NlZFByb21pc2VSZWplY3QocmVhZGVyLCBuZXcgVHlwZUVycm9yKCdSZWFkZXIgd2FzIHJlbGVhc2VkIGFuZCBjYW4gbm8gbG9uZ2VyIGJlIHVzZWQgdG8gbW9uaXRvciB0aGUgc3RyZWFtXCdzIGNsb3NlZG5lc3MnKSk7CiAgfSBlbHNlIHsKICAgZGVmYXVsdFJlYWRlckNsb3NlZFByb21pc2VSZXNldFRvUmVqZWN0ZWQocmVhZGVyLCBuZXcgVHlwZUVycm9yKCdSZWFkZXIgd2FzIHJlbGVhc2VkIGFuZCBjYW4gbm8gbG9uZ2VyIGJlIHVzZWQgdG8gbW9uaXRvciB0aGUgc3RyZWFtXCdzIGNsb3NlZG5lc3MnKSk7CiAgfQogIHJlYWRlci5fb3duZXJSZWFkYWJsZVN0cmVhbS5fcmVhZGVyID0gdW5kZWZpbmVkOwogIHJlYWRlci5fb3duZXJSZWFkYWJsZVN0cmVhbSA9IHVuZGVmaW5lZDsKIH0KIGZ1bmN0aW9uIHJlYWRlckxvY2tFeGNlcHRpb24obmFtZSkgewogIHJldHVybiBuZXcgVHlwZUVycm9yKCdDYW5ub3QgJyArIG5hbWUgKyAnIGEgc3RyZWFtIHVzaW5nIGEgcmVsZWFzZWQgcmVhZGVyJyk7CiB9CiBmdW5jdGlvbiBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemUocmVhZGVyKSB7CiAgcmVhZGVyLl9jbG9zZWRQcm9taXNlID0gbmV3UHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgIHJlYWRlci5fY2xvc2VkUHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZTsKICAgcmVhZGVyLl9jbG9zZWRQcm9taXNlX3JlamVjdCA9IHJlamVjdDsKICB9KTsKIH0KIGZ1bmN0aW9uIGRlZmF1bHRSZWFkZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZUFzUmVqZWN0ZWQocmVhZGVyLCByZWFzb24pIHsKICBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemUocmVhZGVyKTsKICBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZVJlamVjdChyZWFkZXIsIHJlYXNvbik7CiB9CiBmdW5jdGlvbiBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemVBc1Jlc29sdmVkKHJlYWRlcikgewogIGRlZmF1bHRSZWFkZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZShyZWFkZXIpOwogIGRlZmF1bHRSZWFkZXJDbG9zZWRQcm9taXNlUmVzb2x2ZShyZWFkZXIpOwogfQogZnVuY3Rpb24gZGVmYXVsdFJlYWRlckNsb3NlZFByb21pc2VSZWplY3QocmVhZGVyLCByZWFzb24pIHsKICBzZXRQcm9taXNlSXNIYW5kbGVkVG9UcnVlKHJlYWRlci5fY2xvc2VkUHJvbWlzZSk7CiAgcmVhZGVyLl9jbG9zZWRQcm9taXNlX3JlamVjdChyZWFzb24pOwogIHJlYWRlci5fY2xvc2VkUHJvbWlzZV9yZXNvbHZlID0gdW5kZWZpbmVkOwogIHJlYWRlci5fY2xvc2VkUHJvbWlzZV9yZWplY3QgPSB1bmRlZmluZWQ7CiB9CiBmdW5jdGlvbiBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZVJlc2V0VG9SZWplY3RlZChyZWFkZXIsIHJlYXNvbikgewogIGRlZmF1bHRSZWFkZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZUFzUmVqZWN0ZWQocmVhZGVyLCByZWFzb24pOwogfQogZnVuY3Rpb24gZGVmYXVsdFJlYWRlckNsb3NlZFByb21pc2VSZXNvbHZlKHJlYWRlcikgewogIHJlYWRlci5fY2xvc2VkUHJvbWlzZV9yZXNvbHZlKHVuZGVmaW5lZCk7CiAgcmVhZGVyLl9jbG9zZWRQcm9taXNlX3Jlc29sdmUgPSB1bmRlZmluZWQ7CiAgcmVhZGVyLl9jbG9zZWRQcm9taXNlX3JlamVjdCA9IHVuZGVmaW5lZDsKIH0KIHZhciBDYW5jZWxTdGVwcyA9IFN5bWJvbFBvbHlmaWxsKCdbW0NhbmNlbFN0ZXBzXV0nKTsKIHZhciBQdWxsU3RlcHMgPSBTeW1ib2xQb2x5ZmlsbCgnW1tQdWxsU3RlcHNdXScpOwogZnVuY3Rpb24gQWNxdWlyZVJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcihzdHJlYW0sIGZvckF1dGhvckNvZGUpIHsKICBpZiAoZm9yQXV0aG9yQ29kZSA9PT0gdm9pZCAwKSB7CiAgIGZvckF1dGhvckNvZGUgPSBmYWxzZTsKICB9CiAgdmFyIHJlYWRlciA9IG5ldyBSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIoc3RyZWFtKTsKICByZWFkZXIuX2ZvckF1dGhvckNvZGUgPSBmb3JBdXRob3JDb2RlOwogIHJldHVybiByZWFkZXI7CiB9CiBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbUFkZFJlYWRSZXF1ZXN0KHN0cmVhbSkgewogIHZhciBwcm9taXNlID0gbmV3UHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgIHZhciByZWFkUmVxdWVzdCA9IHsKICAgIF9yZXNvbHZlOiByZXNvbHZlLAogICAgX3JlamVjdDogcmVqZWN0CiAgIH07CiAgIHN0cmVhbS5fcmVhZGVyLl9yZWFkUmVxdWVzdHMucHVzaChyZWFkUmVxdWVzdCk7CiAgfSk7CiAgcmV0dXJuIHByb21pc2U7CiB9CiBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbUZ1bGZpbGxSZWFkUmVxdWVzdChzdHJlYW0sIGNodW5rLCBkb25lKSB7CiAgdmFyIHJlYWRlciA9IHN0cmVhbS5fcmVhZGVyOwogIHZhciByZWFkUmVxdWVzdCA9IHJlYWRlci5fcmVhZFJlcXVlc3RzLnNoaWZ0KCk7CiAgcmVhZFJlcXVlc3QuX3Jlc29sdmUoUmVhZGFibGVTdHJlYW1DcmVhdGVSZWFkUmVzdWx0KGNodW5rLCBkb25lLCByZWFkZXIuX2ZvckF1dGhvckNvZGUpKTsKIH0KIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtR2V0TnVtUmVhZFJlcXVlc3RzKHN0cmVhbSkgewogIHJldHVybiBzdHJlYW0uX3JlYWRlci5fcmVhZFJlcXVlc3RzLmxlbmd0aDsKIH0KIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtSGFzRGVmYXVsdFJlYWRlcihzdHJlYW0pIHsKICB2YXIgcmVhZGVyID0gc3RyZWFtLl9yZWFkZXI7CiAgaWYgKHJlYWRlciA9PT0gdW5kZWZpbmVkKSB7CiAgIHJldHVybiBmYWxzZTsKICB9CiAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcihyZWFkZXIpKSB7CiAgIHJldHVybiBmYWxzZTsKICB9CiAgcmV0dXJuIHRydWU7CiB9CiB2YXIgUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcihzdHJlYW0pIHsKICAgaWYgKElzUmVhZGFibGVTdHJlYW0oc3RyZWFtKSA9PT0gZmFsc2UpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlciBjYW4gb25seSBiZSBjb25zdHJ1Y3RlZCB3aXRoIGEgUmVhZGFibGVTdHJlYW0gaW5zdGFuY2UnKTsKICAgfQogICBpZiAoSXNSZWFkYWJsZVN0cmVhbUxvY2tlZChzdHJlYW0pID09PSB0cnVlKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGlzIHN0cmVhbSBoYXMgYWxyZWFkeSBiZWVuIGxvY2tlZCBmb3IgZXhjbHVzaXZlIHJlYWRpbmcgYnkgYW5vdGhlciByZWFkZXInKTsKICAgfQogICBSZWFkYWJsZVN0cmVhbVJlYWRlckdlbmVyaWNJbml0aWFsaXplKHRoaXMsIHN0cmVhbSk7CiAgIHRoaXMuX3JlYWRSZXF1ZXN0cyA9IG5ldyBTaW1wbGVRdWV1ZSgpOwogIH0KICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyLnByb3RvdHlwZSwgImNsb3NlZCIsIHsKICAgZ2V0OiBmdW5jdGlvbiAoKSB7CiAgICBpZiAoIUlzUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyKHRoaXMpKSB7CiAgICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgoZGVmYXVsdFJlYWRlckJyYW5kQ2hlY2tFeGNlcHRpb24oJ2Nsb3NlZCcpKTsKICAgIH0KICAgIHJldHVybiB0aGlzLl9jbG9zZWRQcm9taXNlOwogICB9LAogICBlbnVtZXJhYmxlOiB0cnVlLAogICBjb25maWd1cmFibGU6IHRydWUKICB9KTsKICBSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIucHJvdG90eXBlLmNhbmNlbCA9IGZ1bmN0aW9uIChyZWFzb24pIHsKICAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcih0aGlzKSkgewogICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgoZGVmYXVsdFJlYWRlckJyYW5kQ2hlY2tFeGNlcHRpb24oJ2NhbmNlbCcpKTsKICAgfQogICBpZiAodGhpcy5fb3duZXJSZWFkYWJsZVN0cmVhbSA9PT0gdW5kZWZpbmVkKSB7CiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChyZWFkZXJMb2NrRXhjZXB0aW9uKCdjYW5jZWwnKSk7CiAgIH0KICAgcmV0dXJuIFJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY0NhbmNlbCh0aGlzLCByZWFzb24pOwogIH07CiAgUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKCkgewogICBpZiAoIUlzUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyKHRoaXMpKSB7CiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChkZWZhdWx0UmVhZGVyQnJhbmRDaGVja0V4Y2VwdGlvbigncmVhZCcpKTsKICAgfQogICBpZiAodGhpcy5fb3duZXJSZWFkYWJsZVN0cmVhbSA9PT0gdW5kZWZpbmVkKSB7CiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChyZWFkZXJMb2NrRXhjZXB0aW9uKCdyZWFkIGZyb20nKSk7CiAgIH0KICAgcmV0dXJuIFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlclJlYWQodGhpcyk7CiAgfTsKICBSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIucHJvdG90eXBlLnJlbGVhc2VMb2NrID0gZnVuY3Rpb24gKCkgewogICBpZiAoIUlzUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyKHRoaXMpKSB7CiAgICB0aHJvdyBkZWZhdWx0UmVhZGVyQnJhbmRDaGVja0V4Y2VwdGlvbigncmVsZWFzZUxvY2snKTsKICAgfQogICBpZiAodGhpcy5fb3duZXJSZWFkYWJsZVN0cmVhbSA9PT0gdW5kZWZpbmVkKSB7CiAgICByZXR1cm47CiAgIH0KICAgaWYgKHRoaXMuX3JlYWRSZXF1ZXN0cy5sZW5ndGggPiAwKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUcmllZCB0byByZWxlYXNlIGEgcmVhZGVyIGxvY2sgd2hlbiB0aGF0IHJlYWRlciBoYXMgcGVuZGluZyByZWFkKCkgY2FsbHMgdW4tc2V0dGxlZCcpOwogICB9CiAgIFJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY1JlbGVhc2UodGhpcyk7CiAgfTsKICByZXR1cm4gUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyOwogfSgpOwogZnVuY3Rpb24gSXNSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIoeCkgewogIGlmICghdHlwZUlzT2JqZWN0KHgpKSB7CiAgIHJldHVybiBmYWxzZTsKICB9CiAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoeCwgJ19yZWFkUmVxdWVzdHMnKSkgewogICByZXR1cm4gZmFsc2U7CiAgfQogIHJldHVybiB0cnVlOwogfQogZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyUmVhZChyZWFkZXIpIHsKICB2YXIgc3RyZWFtID0gcmVhZGVyLl9vd25lclJlYWRhYmxlU3RyZWFtOwogIHN0cmVhbS5fZGlzdHVyYmVkID0gdHJ1ZTsKICBpZiAoc3RyZWFtLl9zdGF0ZSA9PT0gJ2Nsb3NlZCcpIHsKICAgcmV0dXJuIHByb21pc2VSZXNvbHZlZFdpdGgoUmVhZGFibGVTdHJlYW1DcmVhdGVSZWFkUmVzdWx0KHVuZGVmaW5lZCwgdHJ1ZSwgcmVhZGVyLl9mb3JBdXRob3JDb2RlKSk7CiAgfQogIGlmIChzdHJlYW0uX3N0YXRlID09PSAnZXJyb3JlZCcpIHsKICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgoc3RyZWFtLl9zdG9yZWRFcnJvcik7CiAgfQogIHJldHVybiBzdHJlYW0uX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcltQdWxsU3RlcHNdKCk7CiB9CiBmdW5jdGlvbiBkZWZhdWx0UmVhZGVyQnJhbmRDaGVja0V4Y2VwdGlvbihuYW1lKSB7CiAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoIlJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlci5wcm90b3R5cGUuIiArIG5hbWUgKyAiIGNhbiBvbmx5IGJlIHVzZWQgb24gYSBSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIiKTsKIH0KIHZhciBfYTsKIHZhciBBc3luY0l0ZXJhdG9yUHJvdG90eXBlOwogaWYgKHR5cGVvZiBTeW1ib2xQb2x5ZmlsbC5hc3luY0l0ZXJhdG9yID09PSAnc3ltYm9sJykgewogIEFzeW5jSXRlcmF0b3JQcm90b3R5cGUgPSAoX2EgPSB7fSwgX2FbU3ltYm9sUG9seWZpbGwuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7CiAgIHJldHVybiB0aGlzOwogIH0sIF9hKTsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQXN5bmNJdGVyYXRvclByb3RvdHlwZSwgU3ltYm9sUG9seWZpbGwuYXN5bmNJdGVyYXRvciwgeyBlbnVtZXJhYmxlOiBmYWxzZSB9KTsKIH0KIHZhciBSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3JQcm90b3R5cGUgPSB7CiAgbmV4dDogZnVuY3Rpb24gKCkgewogICBpZiAoSXNSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IodGhpcykgPT09IGZhbHNlKSB7CiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChzdHJlYW1Bc3luY0l0ZXJhdG9yQnJhbmRDaGVja0V4Y2VwdGlvbignbmV4dCcpKTsKICAgfQogICB2YXIgcmVhZGVyID0gdGhpcy5fYXN5bmNJdGVyYXRvclJlYWRlcjsKICAgaWYgKHJlYWRlci5fb3duZXJSZWFkYWJsZVN0cmVhbSA9PT0gdW5kZWZpbmVkKSB7CiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChyZWFkZXJMb2NrRXhjZXB0aW9uKCdpdGVyYXRlJykpOwogICB9CiAgIHJldHVybiB0cmFuc2Zvcm1Qcm9taXNlV2l0aChSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXJSZWFkKHJlYWRlciksIGZ1bmN0aW9uIChyZXN1bHQpIHsKICAgIHZhciBkb25lID0gcmVzdWx0LmRvbmU7CiAgICBpZiAoZG9uZSkgewogICAgIFJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY1JlbGVhc2UocmVhZGVyKTsKICAgIH0KICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTsKICAgIHJldHVybiBSZWFkYWJsZVN0cmVhbUNyZWF0ZVJlYWRSZXN1bHQodmFsdWUsIGRvbmUsIHRydWUpOwogICB9KTsKICB9LAogIHJldHVybjogZnVuY3Rpb24gKHZhbHVlKSB7CiAgIGlmIChJc1JlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvcih0aGlzKSA9PT0gZmFsc2UpIHsKICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKHN0cmVhbUFzeW5jSXRlcmF0b3JCcmFuZENoZWNrRXhjZXB0aW9uKCduZXh0JykpOwogICB9CiAgIHZhciByZWFkZXIgPSB0aGlzLl9hc3luY0l0ZXJhdG9yUmVhZGVyOwogICBpZiAocmVhZGVyLl9vd25lclJlYWRhYmxlU3RyZWFtID09PSB1bmRlZmluZWQpIHsKICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKHJlYWRlckxvY2tFeGNlcHRpb24oJ2ZpbmlzaCBpdGVyYXRpbmcnKSk7CiAgIH0KICAgaWYgKHJlYWRlci5fcmVhZFJlcXVlc3RzLmxlbmd0aCA+IDApIHsKICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKG5ldyBUeXBlRXJyb3IoJ1RyaWVkIHRvIHJlbGVhc2UgYSByZWFkZXIgbG9jayB3aGVuIHRoYXQgcmVhZGVyIGhhcyBwZW5kaW5nIHJlYWQoKSBjYWxscyB1bi1zZXR0bGVkJykpOwogICB9CiAgIGlmICh0aGlzLl9wcmV2ZW50Q2FuY2VsID09PSBmYWxzZSkgewogICAgdmFyIHJlc3VsdCA9IFJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY0NhbmNlbChyZWFkZXIsIHZhbHVlKTsKICAgIFJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY1JlbGVhc2UocmVhZGVyKTsKICAgIHJldHVybiB0cmFuc2Zvcm1Qcm9taXNlV2l0aChyZXN1bHQsIGZ1bmN0aW9uICgpIHsKICAgICByZXR1cm4gUmVhZGFibGVTdHJlYW1DcmVhdGVSZWFkUmVzdWx0KHZhbHVlLCB0cnVlLCB0cnVlKTsKICAgIH0pOwogICB9CiAgIFJlYWRhYmxlU3RyZWFtUmVhZGVyR2VuZXJpY1JlbGVhc2UocmVhZGVyKTsKICAgcmV0dXJuIHByb21pc2VSZXNvbHZlZFdpdGgoUmVhZGFibGVTdHJlYW1DcmVhdGVSZWFkUmVzdWx0KHZhbHVlLCB0cnVlLCB0cnVlKSk7CiAgfQogfTsKIGlmIChBc3luY0l0ZXJhdG9yUHJvdG90eXBlICE9PSB1bmRlZmluZWQpIHsKICBPYmplY3Quc2V0UHJvdG90eXBlT2YoUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yUHJvdG90eXBlLCBBc3luY0l0ZXJhdG9yUHJvdG90eXBlKTsKIH0KIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3JQcm90b3R5cGUsICduZXh0JywgeyBlbnVtZXJhYmxlOiBmYWxzZSB9KTsKIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3JQcm90b3R5cGUsICdyZXR1cm4nLCB7IGVudW1lcmFibGU6IGZhbHNlIH0pOwogZnVuY3Rpb24gQWNxdWlyZVJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvcihzdHJlYW0sIHByZXZlbnRDYW5jZWwpIHsKICBpZiAocHJldmVudENhbmNlbCA9PT0gdm9pZCAwKSB7CiAgIHByZXZlbnRDYW5jZWwgPSBmYWxzZTsKICB9CiAgdmFyIHJlYWRlciA9IEFjcXVpcmVSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIoc3RyZWFtKTsKICB2YXIgaXRlcmF0b3IgPSBPYmplY3QuY3JlYXRlKFJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvclByb3RvdHlwZSk7CiAgaXRlcmF0b3IuX2FzeW5jSXRlcmF0b3JSZWFkZXIgPSByZWFkZXI7CiAgaXRlcmF0b3IuX3ByZXZlbnRDYW5jZWwgPSBCb29sZWFuKHByZXZlbnRDYW5jZWwpOwogIHJldHVybiBpdGVyYXRvcjsKIH0KIGZ1bmN0aW9uIElzUmVhZGFibGVTdHJlYW1Bc3luY0l0ZXJhdG9yKHgpIHsKICBpZiAoIXR5cGVJc09iamVjdCh4KSkgewogICByZXR1cm4gZmFsc2U7CiAgfQogIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdfYXN5bmNJdGVyYXRvclJlYWRlcicpKSB7CiAgIHJldHVybiBmYWxzZTsKICB9CiAgcmV0dXJuIHRydWU7CiB9CiBmdW5jdGlvbiBzdHJlYW1Bc3luY0l0ZXJhdG9yQnJhbmRDaGVja0V4Y2VwdGlvbihuYW1lKSB7CiAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoIlJlYWRhYmxlU3RyZWFtQXN5bmNJdGVyYXRvci4iICsgbmFtZSArICIgY2FuIG9ubHkgYmUgdXNlZCBvbiBhIFJlYWRhYmxlU3RlYW1Bc3luY0l0ZXJhdG9yIik7CiB9CiBmdW5jdGlvbiBEZXF1ZXVlVmFsdWUoY29udGFpbmVyKSB7CiAgdmFyIHBhaXIgPSBjb250YWluZXIuX3F1ZXVlLnNoaWZ0KCk7CiAgY29udGFpbmVyLl9xdWV1ZVRvdGFsU2l6ZSAtPSBwYWlyLnNpemU7CiAgaWYgKGNvbnRhaW5lci5fcXVldWVUb3RhbFNpemUgPCAwKSB7CiAgIGNvbnRhaW5lci5fcXVldWVUb3RhbFNpemUgPSAwOwogIH0KICByZXR1cm4gcGFpci52YWx1ZTsKIH0KIGZ1bmN0aW9uIEVucXVldWVWYWx1ZVdpdGhTaXplKGNvbnRhaW5lciwgdmFsdWUsIHNpemUpIHsKICBzaXplID0gTnVtYmVyKHNpemUpOwogIGlmICghSXNGaW5pdGVOb25OZWdhdGl2ZU51bWJlcihzaXplKSkgewogICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignU2l6ZSBtdXN0IGJlIGEgZmluaXRlLCBub24tTmFOLCBub24tbmVnYXRpdmUgbnVtYmVyLicpOwogIH0KICBjb250YWluZXIuX3F1ZXVlLnB1c2goewogICB2YWx1ZTogdmFsdWUsCiAgIHNpemU6IHNpemUKICB9KTsKICBjb250YWluZXIuX3F1ZXVlVG90YWxTaXplICs9IHNpemU7CiB9CiBmdW5jdGlvbiBQZWVrUXVldWVWYWx1ZShjb250YWluZXIpIHsKICB2YXIgcGFpciA9IGNvbnRhaW5lci5fcXVldWUucGVlaygpOwogIHJldHVybiBwYWlyLnZhbHVlOwogfQogZnVuY3Rpb24gUmVzZXRRdWV1ZShjb250YWluZXIpIHsKICBjb250YWluZXIuX3F1ZXVlID0gbmV3IFNpbXBsZVF1ZXVlKCk7CiAgY29udGFpbmVyLl9xdWV1ZVRvdGFsU2l6ZSA9IDA7CiB9CiB2YXIgQWJvcnRTdGVwcyA9IFN5bWJvbFBvbHlmaWxsKCdbW0Fib3J0U3RlcHNdXScpOwogdmFyIEVycm9yU3RlcHMgPSBTeW1ib2xQb2x5ZmlsbCgnW1tFcnJvclN0ZXBzXV0nKTsKIHZhciBXcml0YWJsZVN0cmVhbSA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbSh1bmRlcmx5aW5nU2luaywgc3RyYXRlZ3kpIHsKICAgaWYgKHVuZGVybHlpbmdTaW5rID09PSB2b2lkIDApIHsKICAgIHVuZGVybHlpbmdTaW5rID0ge307CiAgIH0KICAgaWYgKHN0cmF0ZWd5ID09PSB2b2lkIDApIHsKICAgIHN0cmF0ZWd5ID0ge307CiAgIH0KICAgSW5pdGlhbGl6ZVdyaXRhYmxlU3RyZWFtKHRoaXMpOwogICB2YXIgc2l6ZSA9IHN0cmF0ZWd5LnNpemU7CiAgIHZhciBoaWdoV2F0ZXJNYXJrID0gc3RyYXRlZ3kuaGlnaFdhdGVyTWFyazsKICAgdmFyIHR5cGUgPSB1bmRlcmx5aW5nU2luay50eXBlOwogICBpZiAodHlwZSAhPT0gdW5kZWZpbmVkKSB7CiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlIGlzIHNwZWNpZmllZCcpOwogICB9CiAgIHZhciBzaXplQWxnb3JpdGhtID0gTWFrZVNpemVBbGdvcml0aG1Gcm9tU2l6ZUZ1bmN0aW9uKHNpemUpOwogICBpZiAoaGlnaFdhdGVyTWFyayA9PT0gdW5kZWZpbmVkKSB7CiAgICBoaWdoV2F0ZXJNYXJrID0gMTsKICAgfQogICBoaWdoV2F0ZXJNYXJrID0gVmFsaWRhdGVBbmROb3JtYWxpemVIaWdoV2F0ZXJNYXJrKGhpZ2hXYXRlck1hcmspOwogICBTZXRVcFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJGcm9tVW5kZXJseWluZ1NpbmsodGhpcywgdW5kZXJseWluZ1NpbmssIGhpZ2hXYXRlck1hcmssIHNpemVBbGdvcml0aG0pOwogIH0KICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGVTdHJlYW0ucHJvdG90eXBlLCAibG9ja2VkIiwgewogICBnZXQ6IGZ1bmN0aW9uICgpIHsKICAgIGlmIChJc1dyaXRhYmxlU3RyZWFtKHRoaXMpID09PSBmYWxzZSkgewogICAgIHRocm93IHN0cmVhbUJyYW5kQ2hlY2tFeGNlcHRpb24oJ2xvY2tlZCcpOwogICAgfQogICAgcmV0dXJuIElzV3JpdGFibGVTdHJlYW1Mb2NrZWQodGhpcyk7CiAgIH0sCiAgIGVudW1lcmFibGU6IHRydWUsCiAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogIH0pOwogIFdyaXRhYmxlU3RyZWFtLnByb3RvdHlwZS5hYm9ydCA9IGZ1bmN0aW9uIChyZWFzb24pIHsKICAgaWYgKElzV3JpdGFibGVTdHJlYW0odGhpcykgPT09IGZhbHNlKSB7CiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChzdHJlYW1CcmFuZENoZWNrRXhjZXB0aW9uKCdhYm9ydCcpKTsKICAgfQogICBpZiAoSXNXcml0YWJsZVN0cmVhbUxvY2tlZCh0aGlzKSA9PT0gdHJ1ZSkgewogICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgobmV3IFR5cGVFcnJvcignQ2Fubm90IGFib3J0IGEgc3RyZWFtIHRoYXQgYWxyZWFkeSBoYXMgYSB3cml0ZXInKSk7CiAgIH0KICAgcmV0dXJuIFdyaXRhYmxlU3RyZWFtQWJvcnQodGhpcywgcmVhc29uKTsKICB9OwogIFdyaXRhYmxlU3RyZWFtLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHsKICAgaWYgKElzV3JpdGFibGVTdHJlYW0odGhpcykgPT09IGZhbHNlKSB7CiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChzdHJlYW1CcmFuZENoZWNrRXhjZXB0aW9uKCdjbG9zZScpKTsKICAgfQogICBpZiAoSXNXcml0YWJsZVN0cmVhbUxvY2tlZCh0aGlzKSA9PT0gdHJ1ZSkgewogICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgobmV3IFR5cGVFcnJvcignQ2Fubm90IGNsb3NlIGEgc3RyZWFtIHRoYXQgYWxyZWFkeSBoYXMgYSB3cml0ZXInKSk7CiAgIH0KICAgaWYgKFdyaXRhYmxlU3RyZWFtQ2xvc2VRdWV1ZWRPckluRmxpZ2h0KHRoaXMpID09PSB0cnVlKSB7CiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2xvc2UgYW4gYWxyZWFkeS1jbG9zaW5nIHN0cmVhbScpKTsKICAgfQogICByZXR1cm4gV3JpdGFibGVTdHJlYW1DbG9zZSh0aGlzKTsKICB9OwogIFdyaXRhYmxlU3RyZWFtLnByb3RvdHlwZS5nZXRXcml0ZXIgPSBmdW5jdGlvbiAoKSB7CiAgIGlmIChJc1dyaXRhYmxlU3RyZWFtKHRoaXMpID09PSBmYWxzZSkgewogICAgdGhyb3cgc3RyZWFtQnJhbmRDaGVja0V4Y2VwdGlvbignZ2V0V3JpdGVyJyk7CiAgIH0KICAgcmV0dXJuIEFjcXVpcmVXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIodGhpcyk7CiAgfTsKICByZXR1cm4gV3JpdGFibGVTdHJlYW07CiB9KCk7CiBmdW5jdGlvbiBBY3F1aXJlV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyKHN0cmVhbSkgewogIHJldHVybiBuZXcgV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyKHN0cmVhbSk7CiB9CiBmdW5jdGlvbiBDcmVhdGVXcml0YWJsZVN0cmVhbShzdGFydEFsZ29yaXRobSwgd3JpdGVBbGdvcml0aG0sIGNsb3NlQWxnb3JpdGhtLCBhYm9ydEFsZ29yaXRobSwgaGlnaFdhdGVyTWFyaywgc2l6ZUFsZ29yaXRobSkgewogIGlmIChoaWdoV2F0ZXJNYXJrID09PSB2b2lkIDApIHsKICAgaGlnaFdhdGVyTWFyayA9IDE7CiAgfQogIGlmIChzaXplQWxnb3JpdGhtID09PSB2b2lkIDApIHsKICAgc2l6ZUFsZ29yaXRobSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiAxOwogICB9OwogIH0KICB2YXIgc3RyZWFtID0gT2JqZWN0LmNyZWF0ZShXcml0YWJsZVN0cmVhbS5wcm90b3R5cGUpOwogIEluaXRpYWxpemVXcml0YWJsZVN0cmVhbShzdHJlYW0pOwogIHZhciBjb250cm9sbGVyID0gT2JqZWN0LmNyZWF0ZShXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyLnByb3RvdHlwZSk7CiAgU2V0VXBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyKHN0cmVhbSwgY29udHJvbGxlciwgc3RhcnRBbGdvcml0aG0sIHdyaXRlQWxnb3JpdGhtLCBjbG9zZUFsZ29yaXRobSwgYWJvcnRBbGdvcml0aG0sIGhpZ2hXYXRlck1hcmssIHNpemVBbGdvcml0aG0pOwogIHJldHVybiBzdHJlYW07CiB9CiBmdW5jdGlvbiBJbml0aWFsaXplV3JpdGFibGVTdHJlYW0oc3RyZWFtKSB7CiAgc3RyZWFtLl9zdGF0ZSA9ICd3cml0YWJsZSc7CiAgc3RyZWFtLl9zdG9yZWRFcnJvciA9IHVuZGVmaW5lZDsKICBzdHJlYW0uX3dyaXRlciA9IHVuZGVmaW5lZDsKICBzdHJlYW0uX3dyaXRhYmxlU3RyZWFtQ29udHJvbGxlciA9IHVuZGVmaW5lZDsKICBzdHJlYW0uX3dyaXRlUmVxdWVzdHMgPSBuZXcgU2ltcGxlUXVldWUoKTsKICBzdHJlYW0uX2luRmxpZ2h0V3JpdGVSZXF1ZXN0ID0gdW5kZWZpbmVkOwogIHN0cmVhbS5fY2xvc2VSZXF1ZXN0ID0gdW5kZWZpbmVkOwogIHN0cmVhbS5faW5GbGlnaHRDbG9zZVJlcXVlc3QgPSB1bmRlZmluZWQ7CiAgc3RyZWFtLl9wZW5kaW5nQWJvcnRSZXF1ZXN0ID0gdW5kZWZpbmVkOwogIHN0cmVhbS5fYmFja3ByZXNzdXJlID0gZmFsc2U7CiB9CiBmdW5jdGlvbiBJc1dyaXRhYmxlU3RyZWFtKHgpIHsKICBpZiAoIXR5cGVJc09iamVjdCh4KSkgewogICByZXR1cm4gZmFsc2U7CiAgfQogIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdfd3JpdGFibGVTdHJlYW1Db250cm9sbGVyJykpIHsKICAgcmV0dXJuIGZhbHNlOwogIH0KICByZXR1cm4gdHJ1ZTsKIH0KIGZ1bmN0aW9uIElzV3JpdGFibGVTdHJlYW1Mb2NrZWQoc3RyZWFtKSB7CiAgaWYgKHN0cmVhbS5fd3JpdGVyID09PSB1bmRlZmluZWQpIHsKICAgcmV0dXJuIGZhbHNlOwogIH0KICByZXR1cm4gdHJ1ZTsKIH0KIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtQWJvcnQoc3RyZWFtLCByZWFzb24pIHsKICB2YXIgc3RhdGUgPSBzdHJlYW0uX3N0YXRlOwogIGlmIChzdGF0ZSA9PT0gJ2Nsb3NlZCcgfHwgc3RhdGUgPT09ICdlcnJvcmVkJykgewogICByZXR1cm4gcHJvbWlzZVJlc29sdmVkV2l0aCh1bmRlZmluZWQpOwogIH0KICBpZiAoc3RyZWFtLl9wZW5kaW5nQWJvcnRSZXF1ZXN0ICE9PSB1bmRlZmluZWQpIHsKICAgcmV0dXJuIHN0cmVhbS5fcGVuZGluZ0Fib3J0UmVxdWVzdC5fcHJvbWlzZTsKICB9CiAgdmFyIHdhc0FscmVhZHlFcnJvcmluZyA9IGZhbHNlOwogIGlmIChzdGF0ZSA9PT0gJ2Vycm9yaW5nJykgewogICB3YXNBbHJlYWR5RXJyb3JpbmcgPSB0cnVlOwogICByZWFzb24gPSB1bmRlZmluZWQ7CiAgfQogIHZhciBwcm9taXNlID0gbmV3UHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgIHN0cmVhbS5fcGVuZGluZ0Fib3J0UmVxdWVzdCA9IHsKICAgIF9wcm9taXNlOiB1bmRlZmluZWQsCiAgICBfcmVzb2x2ZTogcmVzb2x2ZSwKICAgIF9yZWplY3Q6IHJlamVjdCwKICAgIF9yZWFzb246IHJlYXNvbiwKICAgIF93YXNBbHJlYWR5RXJyb3Jpbmc6IHdhc0FscmVhZHlFcnJvcmluZwogICB9OwogIH0pOwogIHN0cmVhbS5fcGVuZGluZ0Fib3J0UmVxdWVzdC5fcHJvbWlzZSA9IHByb21pc2U7CiAgaWYgKHdhc0FscmVhZHlFcnJvcmluZyA9PT0gZmFsc2UpIHsKICAgV3JpdGFibGVTdHJlYW1TdGFydEVycm9yaW5nKHN0cmVhbSwgcmVhc29uKTsKICB9CiAgcmV0dXJuIHByb21pc2U7CiB9CiBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbUNsb3NlKHN0cmVhbSkgewogIHZhciBzdGF0ZSA9IHN0cmVhbS5fc3RhdGU7CiAgaWYgKHN0YXRlID09PSAnY2xvc2VkJyB8fCBzdGF0ZSA9PT0gJ2Vycm9yZWQnKSB7CiAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKG5ldyBUeXBlRXJyb3IoIlRoZSBzdHJlYW0gKGluICIgKyBzdGF0ZSArICIgc3RhdGUpIGlzIG5vdCBpbiB0aGUgd3JpdGFibGUgc3RhdGUgYW5kIGNhbm5vdCBiZSBjbG9zZWQiKSk7CiAgfQogIHZhciBwcm9taXNlID0gbmV3UHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgIHZhciBjbG9zZVJlcXVlc3QgPSB7CiAgICBfcmVzb2x2ZTogcmVzb2x2ZSwKICAgIF9yZWplY3Q6IHJlamVjdAogICB9OwogICBzdHJlYW0uX2Nsb3NlUmVxdWVzdCA9IGNsb3NlUmVxdWVzdDsKICB9KTsKICB2YXIgd3JpdGVyID0gc3RyZWFtLl93cml0ZXI7CiAgaWYgKHdyaXRlciAhPT0gdW5kZWZpbmVkICYmIHN0cmVhbS5fYmFja3ByZXNzdXJlID09PSB0cnVlICYmIHN0YXRlID09PSAnd3JpdGFibGUnKSB7CiAgIGRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VSZXNvbHZlKHdyaXRlcik7CiAgfQogIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbG9zZShzdHJlYW0uX3dyaXRhYmxlU3RyZWFtQ29udHJvbGxlcik7CiAgcmV0dXJuIHByb21pc2U7CiB9CiBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbUFkZFdyaXRlUmVxdWVzdChzdHJlYW0pIHsKICB2YXIgcHJvbWlzZSA9IG5ld1Byb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICB2YXIgd3JpdGVSZXF1ZXN0ID0gewogICAgX3Jlc29sdmU6IHJlc29sdmUsCiAgICBfcmVqZWN0OiByZWplY3QKICAgfTsKICAgc3RyZWFtLl93cml0ZVJlcXVlc3RzLnB1c2god3JpdGVSZXF1ZXN0KTsKICB9KTsKICByZXR1cm4gcHJvbWlzZTsKIH0KIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRGVhbFdpdGhSZWplY3Rpb24oc3RyZWFtLCBlcnJvcikgewogIHZhciBzdGF0ZSA9IHN0cmVhbS5fc3RhdGU7CiAgaWYgKHN0YXRlID09PSAnd3JpdGFibGUnKSB7CiAgIFdyaXRhYmxlU3RyZWFtU3RhcnRFcnJvcmluZyhzdHJlYW0sIGVycm9yKTsKICAgcmV0dXJuOwogIH0KICBXcml0YWJsZVN0cmVhbUZpbmlzaEVycm9yaW5nKHN0cmVhbSk7CiB9CiBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbVN0YXJ0RXJyb3Jpbmcoc3RyZWFtLCByZWFzb24pIHsKICB2YXIgY29udHJvbGxlciA9IHN0cmVhbS5fd3JpdGFibGVTdHJlYW1Db250cm9sbGVyOwogIHN0cmVhbS5fc3RhdGUgPSAnZXJyb3JpbmcnOwogIHN0cmVhbS5fc3RvcmVkRXJyb3IgPSByZWFzb247CiAgdmFyIHdyaXRlciA9IHN0cmVhbS5fd3JpdGVyOwogIGlmICh3cml0ZXIgIT09IHVuZGVmaW5lZCkgewogICBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJFbnN1cmVSZWFkeVByb21pc2VSZWplY3RlZCh3cml0ZXIsIHJlYXNvbik7CiAgfQogIGlmIChXcml0YWJsZVN0cmVhbUhhc09wZXJhdGlvbk1hcmtlZEluRmxpZ2h0KHN0cmVhbSkgPT09IGZhbHNlICYmIGNvbnRyb2xsZXIuX3N0YXJ0ZWQgPT09IHRydWUpIHsKICAgV3JpdGFibGVTdHJlYW1GaW5pc2hFcnJvcmluZyhzdHJlYW0pOwogIH0KIH0KIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRmluaXNoRXJyb3Jpbmcoc3RyZWFtKSB7CiAgc3RyZWFtLl9zdGF0ZSA9ICdlcnJvcmVkJzsKICBzdHJlYW0uX3dyaXRhYmxlU3RyZWFtQ29udHJvbGxlcltFcnJvclN0ZXBzXSgpOwogIHZhciBzdG9yZWRFcnJvciA9IHN0cmVhbS5fc3RvcmVkRXJyb3I7CiAgc3RyZWFtLl93cml0ZVJlcXVlc3RzLmZvckVhY2goZnVuY3Rpb24gKHdyaXRlUmVxdWVzdCkgewogICB3cml0ZVJlcXVlc3QuX3JlamVjdChzdG9yZWRFcnJvcik7CiAgfSk7CiAgc3RyZWFtLl93cml0ZVJlcXVlc3RzID0gbmV3IFNpbXBsZVF1ZXVlKCk7CiAgaWYgKHN0cmVhbS5fcGVuZGluZ0Fib3J0UmVxdWVzdCA9PT0gdW5kZWZpbmVkKSB7CiAgIFdyaXRhYmxlU3RyZWFtUmVqZWN0Q2xvc2VBbmRDbG9zZWRQcm9taXNlSWZOZWVkZWQoc3RyZWFtKTsKICAgcmV0dXJuOwogIH0KICB2YXIgYWJvcnRSZXF1ZXN0ID0gc3RyZWFtLl9wZW5kaW5nQWJvcnRSZXF1ZXN0OwogIHN0cmVhbS5fcGVuZGluZ0Fib3J0UmVxdWVzdCA9IHVuZGVmaW5lZDsKICBpZiAoYWJvcnRSZXF1ZXN0Ll93YXNBbHJlYWR5RXJyb3JpbmcgPT09IHRydWUpIHsKICAgYWJvcnRSZXF1ZXN0Ll9yZWplY3Qoc3RvcmVkRXJyb3IpOwogICBXcml0YWJsZVN0cmVhbVJlamVjdENsb3NlQW5kQ2xvc2VkUHJvbWlzZUlmTmVlZGVkKHN0cmVhbSk7CiAgIHJldHVybjsKICB9CiAgdmFyIHByb21pc2UgPSBzdHJlYW0uX3dyaXRhYmxlU3RyZWFtQ29udHJvbGxlcltBYm9ydFN0ZXBzXShhYm9ydFJlcXVlc3QuX3JlYXNvbik7CiAgdXBvblByb21pc2UocHJvbWlzZSwgZnVuY3Rpb24gKCkgewogICBhYm9ydFJlcXVlc3QuX3Jlc29sdmUoKTsKICAgV3JpdGFibGVTdHJlYW1SZWplY3RDbG9zZUFuZENsb3NlZFByb21pc2VJZk5lZWRlZChzdHJlYW0pOwogIH0sIGZ1bmN0aW9uIChyZWFzb24pIHsKICAgYWJvcnRSZXF1ZXN0Ll9yZWplY3QocmVhc29uKTsKICAgV3JpdGFibGVTdHJlYW1SZWplY3RDbG9zZUFuZENsb3NlZFByb21pc2VJZk5lZWRlZChzdHJlYW0pOwogIH0pOwogfQogZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1GaW5pc2hJbkZsaWdodFdyaXRlKHN0cmVhbSkgewogIHN0cmVhbS5faW5GbGlnaHRXcml0ZVJlcXVlc3QuX3Jlc29sdmUodW5kZWZpbmVkKTsKICBzdHJlYW0uX2luRmxpZ2h0V3JpdGVSZXF1ZXN0ID0gdW5kZWZpbmVkOwogfQogZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1GaW5pc2hJbkZsaWdodFdyaXRlV2l0aEVycm9yKHN0cmVhbSwgZXJyb3IpIHsKICBzdHJlYW0uX2luRmxpZ2h0V3JpdGVSZXF1ZXN0Ll9yZWplY3QoZXJyb3IpOwogIHN0cmVhbS5faW5GbGlnaHRXcml0ZVJlcXVlc3QgPSB1bmRlZmluZWQ7CiAgV3JpdGFibGVTdHJlYW1EZWFsV2l0aFJlamVjdGlvbihzdHJlYW0sIGVycm9yKTsKIH0KIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRmluaXNoSW5GbGlnaHRDbG9zZShzdHJlYW0pIHsKICBzdHJlYW0uX2luRmxpZ2h0Q2xvc2VSZXF1ZXN0Ll9yZXNvbHZlKHVuZGVmaW5lZCk7CiAgc3RyZWFtLl9pbkZsaWdodENsb3NlUmVxdWVzdCA9IHVuZGVmaW5lZDsKICB2YXIgc3RhdGUgPSBzdHJlYW0uX3N0YXRlOwogIGlmIChzdGF0ZSA9PT0gJ2Vycm9yaW5nJykgewogICBzdHJlYW0uX3N0b3JlZEVycm9yID0gdW5kZWZpbmVkOwogICBpZiAoc3RyZWFtLl9wZW5kaW5nQWJvcnRSZXF1ZXN0ICE9PSB1bmRlZmluZWQpIHsKICAgIHN0cmVhbS5fcGVuZGluZ0Fib3J0UmVxdWVzdC5fcmVzb2x2ZSgpOwogICAgc3RyZWFtLl9wZW5kaW5nQWJvcnRSZXF1ZXN0ID0gdW5kZWZpbmVkOwogICB9CiAgfQogIHN0cmVhbS5fc3RhdGUgPSAnY2xvc2VkJzsKICB2YXIgd3JpdGVyID0gc3RyZWFtLl93cml0ZXI7CiAgaWYgKHdyaXRlciAhPT0gdW5kZWZpbmVkKSB7CiAgIGRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlUmVzb2x2ZSh3cml0ZXIpOwogIH0KIH0KIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRmluaXNoSW5GbGlnaHRDbG9zZVdpdGhFcnJvcihzdHJlYW0sIGVycm9yKSB7CiAgc3RyZWFtLl9pbkZsaWdodENsb3NlUmVxdWVzdC5fcmVqZWN0KGVycm9yKTsKICBzdHJlYW0uX2luRmxpZ2h0Q2xvc2VSZXF1ZXN0ID0gdW5kZWZpbmVkOwogIGlmIChzdHJlYW0uX3BlbmRpbmdBYm9ydFJlcXVlc3QgIT09IHVuZGVmaW5lZCkgewogICBzdHJlYW0uX3BlbmRpbmdBYm9ydFJlcXVlc3QuX3JlamVjdChlcnJvcik7CiAgIHN0cmVhbS5fcGVuZGluZ0Fib3J0UmVxdWVzdCA9IHVuZGVmaW5lZDsKICB9CiAgV3JpdGFibGVTdHJlYW1EZWFsV2l0aFJlamVjdGlvbihzdHJlYW0sIGVycm9yKTsKIH0KIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtQ2xvc2VRdWV1ZWRPckluRmxpZ2h0KHN0cmVhbSkgewogIGlmIChzdHJlYW0uX2Nsb3NlUmVxdWVzdCA9PT0gdW5kZWZpbmVkICYmIHN0cmVhbS5faW5GbGlnaHRDbG9zZVJlcXVlc3QgPT09IHVuZGVmaW5lZCkgewogICByZXR1cm4gZmFsc2U7CiAgfQogIHJldHVybiB0cnVlOwogfQogZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1IYXNPcGVyYXRpb25NYXJrZWRJbkZsaWdodChzdHJlYW0pIHsKICBpZiAoc3RyZWFtLl9pbkZsaWdodFdyaXRlUmVxdWVzdCA9PT0gdW5kZWZpbmVkICYmIHN0cmVhbS5faW5GbGlnaHRDbG9zZVJlcXVlc3QgPT09IHVuZGVmaW5lZCkgewogICByZXR1cm4gZmFsc2U7CiAgfQogIHJldHVybiB0cnVlOwogfQogZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1NYXJrQ2xvc2VSZXF1ZXN0SW5GbGlnaHQoc3RyZWFtKSB7CiAgc3RyZWFtLl9pbkZsaWdodENsb3NlUmVxdWVzdCA9IHN0cmVhbS5fY2xvc2VSZXF1ZXN0OwogIHN0cmVhbS5fY2xvc2VSZXF1ZXN0ID0gdW5kZWZpbmVkOwogfQogZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1NYXJrRmlyc3RXcml0ZVJlcXVlc3RJbkZsaWdodChzdHJlYW0pIHsKICBzdHJlYW0uX2luRmxpZ2h0V3JpdGVSZXF1ZXN0ID0gc3RyZWFtLl93cml0ZVJlcXVlc3RzLnNoaWZ0KCk7CiB9CiBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbVJlamVjdENsb3NlQW5kQ2xvc2VkUHJvbWlzZUlmTmVlZGVkKHN0cmVhbSkgewogIGlmIChzdHJlYW0uX2Nsb3NlUmVxdWVzdCAhPT0gdW5kZWZpbmVkKSB7CiAgIHN0cmVhbS5fY2xvc2VSZXF1ZXN0Ll9yZWplY3Qoc3RyZWFtLl9zdG9yZWRFcnJvcik7CiAgIHN0cmVhbS5fY2xvc2VSZXF1ZXN0ID0gdW5kZWZpbmVkOwogIH0KICB2YXIgd3JpdGVyID0gc3RyZWFtLl93cml0ZXI7CiAgaWYgKHdyaXRlciAhPT0gdW5kZWZpbmVkKSB7CiAgIGRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlUmVqZWN0KHdyaXRlciwgc3RyZWFtLl9zdG9yZWRFcnJvcik7CiAgfQogfQogZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1VcGRhdGVCYWNrcHJlc3N1cmUoc3RyZWFtLCBiYWNrcHJlc3N1cmUpIHsKICB2YXIgd3JpdGVyID0gc3RyZWFtLl93cml0ZXI7CiAgaWYgKHdyaXRlciAhPT0gdW5kZWZpbmVkICYmIGJhY2twcmVzc3VyZSAhPT0gc3RyZWFtLl9iYWNrcHJlc3N1cmUpIHsKICAgaWYgKGJhY2twcmVzc3VyZSA9PT0gdHJ1ZSkgewogICAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZVJlc2V0KHdyaXRlcik7CiAgIH0gZWxzZSB7CiAgICBkZWZhdWx0V3JpdGVyUmVhZHlQcm9taXNlUmVzb2x2ZSh3cml0ZXIpOwogICB9CiAgfQogIHN0cmVhbS5fYmFja3ByZXNzdXJlID0gYmFja3ByZXNzdXJlOwogfQogdmFyIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlciA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIoc3RyZWFtKSB7CiAgIGlmIChJc1dyaXRhYmxlU3RyZWFtKHN0cmVhbSkgPT09IGZhbHNlKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIgY2FuIG9ubHkgYmUgY29uc3RydWN0ZWQgd2l0aCBhIFdyaXRhYmxlU3RyZWFtIGluc3RhbmNlJyk7CiAgIH0KICAgaWYgKElzV3JpdGFibGVTdHJlYW1Mb2NrZWQoc3RyZWFtKSA9PT0gdHJ1ZSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhpcyBzdHJlYW0gaGFzIGFscmVhZHkgYmVlbiBsb2NrZWQgZm9yIGV4Y2x1c2l2ZSB3cml0aW5nIGJ5IGFub3RoZXIgd3JpdGVyJyk7CiAgIH0KICAgdGhpcy5fb3duZXJXcml0YWJsZVN0cmVhbSA9IHN0cmVhbTsKICAgc3RyZWFtLl93cml0ZXIgPSB0aGlzOwogICB2YXIgc3RhdGUgPSBzdHJlYW0uX3N0YXRlOwogICBpZiAoc3RhdGUgPT09ICd3cml0YWJsZScpIHsKICAgIGlmIChXcml0YWJsZVN0cmVhbUNsb3NlUXVldWVkT3JJbkZsaWdodChzdHJlYW0pID09PSBmYWxzZSAmJiBzdHJlYW0uX2JhY2twcmVzc3VyZSA9PT0gdHJ1ZSkgewogICAgIGRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VJbml0aWFsaXplKHRoaXMpOwogICAgfSBlbHNlIHsKICAgICBkZWZhdWx0V3JpdGVyUmVhZHlQcm9taXNlSW5pdGlhbGl6ZUFzUmVzb2x2ZWQodGhpcyk7CiAgICB9CiAgICBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemUodGhpcyk7CiAgIH0gZWxzZSBpZiAoc3RhdGUgPT09ICdlcnJvcmluZycpIHsKICAgIGRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VJbml0aWFsaXplQXNSZWplY3RlZCh0aGlzLCBzdHJlYW0uX3N0b3JlZEVycm9yKTsKICAgIGRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZSh0aGlzKTsKICAgfSBlbHNlIGlmIChzdGF0ZSA9PT0gJ2Nsb3NlZCcpIHsKICAgIGRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VJbml0aWFsaXplQXNSZXNvbHZlZCh0aGlzKTsKICAgIGRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZUFzUmVzb2x2ZWQodGhpcyk7CiAgIH0gZWxzZSB7CiAgICB2YXIgc3RvcmVkRXJyb3IgPSBzdHJlYW0uX3N0b3JlZEVycm9yOwogICAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZUluaXRpYWxpemVBc1JlamVjdGVkKHRoaXMsIHN0b3JlZEVycm9yKTsKICAgIGRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZUFzUmVqZWN0ZWQodGhpcywgc3RvcmVkRXJyb3IpOwogICB9CiAgfQogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIucHJvdG90eXBlLCAiY2xvc2VkIiwgewogICBnZXQ6IGZ1bmN0aW9uICgpIHsKICAgIGlmIChJc1dyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcih0aGlzKSA9PT0gZmFsc2UpIHsKICAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChkZWZhdWx0V3JpdGVyQnJhbmRDaGVja0V4Y2VwdGlvbignY2xvc2VkJykpOwogICAgfQogICAgcmV0dXJuIHRoaXMuX2Nsb3NlZFByb21pc2U7CiAgIH0sCiAgIGVudW1lcmFibGU6IHRydWUsCiAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogIH0pOwogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIucHJvdG90eXBlLCAiZGVzaXJlZFNpemUiLCB7CiAgIGdldDogZnVuY3Rpb24gKCkgewogICAgaWYgKElzV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyKHRoaXMpID09PSBmYWxzZSkgewogICAgIHRocm93IGRlZmF1bHRXcml0ZXJCcmFuZENoZWNrRXhjZXB0aW9uKCdkZXNpcmVkU2l6ZScpOwogICAgfQogICAgaWYgKHRoaXMuX293bmVyV3JpdGFibGVTdHJlYW0gPT09IHVuZGVmaW5lZCkgewogICAgIHRocm93IGRlZmF1bHRXcml0ZXJMb2NrRXhjZXB0aW9uKCdkZXNpcmVkU2l6ZScpOwogICAgfQogICAgcmV0dXJuIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckdldERlc2lyZWRTaXplKHRoaXMpOwogICB9LAogICBlbnVtZXJhYmxlOiB0cnVlLAogICBjb25maWd1cmFibGU6IHRydWUKICB9KTsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyLnByb3RvdHlwZSwgInJlYWR5IiwgewogICBnZXQ6IGZ1bmN0aW9uICgpIHsKICAgIGlmIChJc1dyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcih0aGlzKSA9PT0gZmFsc2UpIHsKICAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChkZWZhdWx0V3JpdGVyQnJhbmRDaGVja0V4Y2VwdGlvbigncmVhZHknKSk7CiAgICB9CiAgICByZXR1cm4gdGhpcy5fcmVhZHlQcm9taXNlOwogICB9LAogICBlbnVtZXJhYmxlOiB0cnVlLAogICBjb25maWd1cmFibGU6IHRydWUKICB9KTsKICBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIucHJvdG90eXBlLmFib3J0ID0gZnVuY3Rpb24gKHJlYXNvbikgewogICBpZiAoSXNXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIodGhpcykgPT09IGZhbHNlKSB7CiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChkZWZhdWx0V3JpdGVyQnJhbmRDaGVja0V4Y2VwdGlvbignYWJvcnQnKSk7CiAgIH0KICAgaWYgKHRoaXMuX293bmVyV3JpdGFibGVTdHJlYW0gPT09IHVuZGVmaW5lZCkgewogICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgoZGVmYXVsdFdyaXRlckxvY2tFeGNlcHRpb24oJ2Fib3J0JykpOwogICB9CiAgIHJldHVybiBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJBYm9ydCh0aGlzLCByZWFzb24pOwogIH07CiAgV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHsKICAgaWYgKElzV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyKHRoaXMpID09PSBmYWxzZSkgewogICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgoZGVmYXVsdFdyaXRlckJyYW5kQ2hlY2tFeGNlcHRpb24oJ2Nsb3NlJykpOwogICB9CiAgIHZhciBzdHJlYW0gPSB0aGlzLl9vd25lcldyaXRhYmxlU3RyZWFtOwogICBpZiAoc3RyZWFtID09PSB1bmRlZmluZWQpIHsKICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKGRlZmF1bHRXcml0ZXJMb2NrRXhjZXB0aW9uKCdjbG9zZScpKTsKICAgfQogICBpZiAoV3JpdGFibGVTdHJlYW1DbG9zZVF1ZXVlZE9ySW5GbGlnaHQoc3RyZWFtKSA9PT0gdHJ1ZSkgewogICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgobmV3IFR5cGVFcnJvcignQ2Fubm90IGNsb3NlIGFuIGFscmVhZHktY2xvc2luZyBzdHJlYW0nKSk7CiAgIH0KICAgcmV0dXJuIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckNsb3NlKHRoaXMpOwogIH07CiAgV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyLnByb3RvdHlwZS5yZWxlYXNlTG9jayA9IGZ1bmN0aW9uICgpIHsKICAgaWYgKElzV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyKHRoaXMpID09PSBmYWxzZSkgewogICAgdGhyb3cgZGVmYXVsdFdyaXRlckJyYW5kQ2hlY2tFeGNlcHRpb24oJ3JlbGVhc2VMb2NrJyk7CiAgIH0KICAgdmFyIHN0cmVhbSA9IHRoaXMuX293bmVyV3JpdGFibGVTdHJlYW07CiAgIGlmIChzdHJlYW0gPT09IHVuZGVmaW5lZCkgewogICAgcmV0dXJuOwogICB9CiAgIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlclJlbGVhc2UodGhpcyk7CiAgfTsKICBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGNodW5rKSB7CiAgIGlmIChJc1dyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcih0aGlzKSA9PT0gZmFsc2UpIHsKICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKGRlZmF1bHRXcml0ZXJCcmFuZENoZWNrRXhjZXB0aW9uKCd3cml0ZScpKTsKICAgfQogICBpZiAodGhpcy5fb3duZXJXcml0YWJsZVN0cmVhbSA9PT0gdW5kZWZpbmVkKSB7CiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChkZWZhdWx0V3JpdGVyTG9ja0V4Y2VwdGlvbignd3JpdGUgdG8nKSk7CiAgIH0KICAgcmV0dXJuIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcldyaXRlKHRoaXMsIGNodW5rKTsKICB9OwogIHJldHVybiBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXI7CiB9KCk7CiBmdW5jdGlvbiBJc1dyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlcih4KSB7CiAgaWYgKCF0eXBlSXNPYmplY3QoeCkpIHsKICAgcmV0dXJuIGZhbHNlOwogIH0KICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCAnX293bmVyV3JpdGFibGVTdHJlYW0nKSkgewogICByZXR1cm4gZmFsc2U7CiAgfQogIHJldHVybiB0cnVlOwogfQogZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyQWJvcnQod3JpdGVyLCByZWFzb24pIHsKICB2YXIgc3RyZWFtID0gd3JpdGVyLl9vd25lcldyaXRhYmxlU3RyZWFtOwogIHJldHVybiBXcml0YWJsZVN0cmVhbUFib3J0KHN0cmVhbSwgcmVhc29uKTsKIH0KIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckNsb3NlKHdyaXRlcikgewogIHZhciBzdHJlYW0gPSB3cml0ZXIuX293bmVyV3JpdGFibGVTdHJlYW07CiAgcmV0dXJuIFdyaXRhYmxlU3RyZWFtQ2xvc2Uoc3RyZWFtKTsKIH0KIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckNsb3NlV2l0aEVycm9yUHJvcGFnYXRpb24od3JpdGVyKSB7CiAgdmFyIHN0cmVhbSA9IHdyaXRlci5fb3duZXJXcml0YWJsZVN0cmVhbTsKICB2YXIgc3RhdGUgPSBzdHJlYW0uX3N0YXRlOwogIGlmIChXcml0YWJsZVN0cmVhbUNsb3NlUXVldWVkT3JJbkZsaWdodChzdHJlYW0pID09PSB0cnVlIHx8IHN0YXRlID09PSAnY2xvc2VkJykgewogICByZXR1cm4gcHJvbWlzZVJlc29sdmVkV2l0aCh1bmRlZmluZWQpOwogIH0KICBpZiAoc3RhdGUgPT09ICdlcnJvcmVkJykgewogICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChzdHJlYW0uX3N0b3JlZEVycm9yKTsKICB9CiAgcmV0dXJuIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckNsb3NlKHdyaXRlcik7CiB9CiBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJFbnN1cmVDbG9zZWRQcm9taXNlUmVqZWN0ZWQod3JpdGVyLCBlcnJvcikgewogIGlmICh3cml0ZXIuX2Nsb3NlZFByb21pc2VTdGF0ZSA9PT0gJ3BlbmRpbmcnKSB7CiAgIGRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlUmVqZWN0KHdyaXRlciwgZXJyb3IpOwogIH0gZWxzZSB7CiAgIGRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlUmVzZXRUb1JlamVjdGVkKHdyaXRlciwgZXJyb3IpOwogIH0KIH0KIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckVuc3VyZVJlYWR5UHJvbWlzZVJlamVjdGVkKHdyaXRlciwgZXJyb3IpIHsKICBpZiAod3JpdGVyLl9yZWFkeVByb21pc2VTdGF0ZSA9PT0gJ3BlbmRpbmcnKSB7CiAgIGRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VSZWplY3Qod3JpdGVyLCBlcnJvcik7CiAgfSBlbHNlIHsKICAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZVJlc2V0VG9SZWplY3RlZCh3cml0ZXIsIGVycm9yKTsKICB9CiB9CiBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJHZXREZXNpcmVkU2l6ZSh3cml0ZXIpIHsKICB2YXIgc3RyZWFtID0gd3JpdGVyLl9vd25lcldyaXRhYmxlU3RyZWFtOwogIHZhciBzdGF0ZSA9IHN0cmVhbS5fc3RhdGU7CiAgaWYgKHN0YXRlID09PSAnZXJyb3JlZCcgfHwgc3RhdGUgPT09ICdlcnJvcmluZycpIHsKICAgcmV0dXJuIG51bGw7CiAgfQogIGlmIChzdGF0ZSA9PT0gJ2Nsb3NlZCcpIHsKICAgcmV0dXJuIDA7CiAgfQogIHJldHVybiBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyR2V0RGVzaXJlZFNpemUoc3RyZWFtLl93cml0YWJsZVN0cmVhbUNvbnRyb2xsZXIpOwogfQogZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyUmVsZWFzZSh3cml0ZXIpIHsKICB2YXIgc3RyZWFtID0gd3JpdGVyLl9vd25lcldyaXRhYmxlU3RyZWFtOwogIHZhciByZWxlYXNlZEVycm9yID0gbmV3IFR5cGVFcnJvcignV3JpdGVyIHdhcyByZWxlYXNlZCBhbmQgY2FuIG5vIGxvbmdlciBiZSB1c2VkIHRvIG1vbml0b3IgdGhlIHN0cmVhbVwncyBjbG9zZWRuZXNzJyk7CiAgV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyRW5zdXJlUmVhZHlQcm9taXNlUmVqZWN0ZWQod3JpdGVyLCByZWxlYXNlZEVycm9yKTsKICBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJFbnN1cmVDbG9zZWRQcm9taXNlUmVqZWN0ZWQod3JpdGVyLCByZWxlYXNlZEVycm9yKTsKICBzdHJlYW0uX3dyaXRlciA9IHVuZGVmaW5lZDsKICB3cml0ZXIuX293bmVyV3JpdGFibGVTdHJlYW0gPSB1bmRlZmluZWQ7CiB9CiBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJXcml0ZSh3cml0ZXIsIGNodW5rKSB7CiAgdmFyIHN0cmVhbSA9IHdyaXRlci5fb3duZXJXcml0YWJsZVN0cmVhbTsKICB2YXIgY29udHJvbGxlciA9IHN0cmVhbS5fd3JpdGFibGVTdHJlYW1Db250cm9sbGVyOwogIHZhciBjaHVua1NpemUgPSBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyR2V0Q2h1bmtTaXplKGNvbnRyb2xsZXIsIGNodW5rKTsKICBpZiAoc3RyZWFtICE9PSB3cml0ZXIuX293bmVyV3JpdGFibGVTdHJlYW0pIHsKICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgoZGVmYXVsdFdyaXRlckxvY2tFeGNlcHRpb24oJ3dyaXRlIHRvJykpOwogIH0KICB2YXIgc3RhdGUgPSBzdHJlYW0uX3N0YXRlOwogIGlmIChzdGF0ZSA9PT0gJ2Vycm9yZWQnKSB7CiAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKHN0cmVhbS5fc3RvcmVkRXJyb3IpOwogIH0KICBpZiAoV3JpdGFibGVTdHJlYW1DbG9zZVF1ZXVlZE9ySW5GbGlnaHQoc3RyZWFtKSA9PT0gdHJ1ZSB8fCBzdGF0ZSA9PT0gJ2Nsb3NlZCcpIHsKICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgobmV3IFR5cGVFcnJvcignVGhlIHN0cmVhbSBpcyBjbG9zaW5nIG9yIGNsb3NlZCBhbmQgY2Fubm90IGJlIHdyaXR0ZW4gdG8nKSk7CiAgfQogIGlmIChzdGF0ZSA9PT0gJ2Vycm9yaW5nJykgewogICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChzdHJlYW0uX3N0b3JlZEVycm9yKTsKICB9CiAgdmFyIHByb21pc2UgPSBXcml0YWJsZVN0cmVhbUFkZFdyaXRlUmVxdWVzdChzdHJlYW0pOwogIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJXcml0ZShjb250cm9sbGVyLCBjaHVuaywgY2h1bmtTaXplKTsKICByZXR1cm4gcHJvbWlzZTsKIH0KIHZhciBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIoKSB7CiAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1dyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIgY2Fubm90IGJlIGNvbnN0cnVjdGVkIGV4cGxpY2l0bHknKTsKICB9CiAgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZSkgewogICBpZiAoSXNXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyKHRoaXMpID09PSBmYWxzZSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUuZXJyb3IgY2FuIG9ubHkgYmUgdXNlZCBvbiBhIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXInKTsKICAgfQogICB2YXIgc3RhdGUgPSB0aGlzLl9jb250cm9sbGVkV3JpdGFibGVTdHJlYW0uX3N0YXRlOwogICBpZiAoc3RhdGUgIT09ICd3cml0YWJsZScpIHsKICAgIHJldHVybjsKICAgfQogICBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRXJyb3IodGhpcywgZSk7CiAgfTsKICBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyLnByb3RvdHlwZVtBYm9ydFN0ZXBzXSA9IGZ1bmN0aW9uIChyZWFzb24pIHsKICAgdmFyIHJlc3VsdCA9IHRoaXMuX2Fib3J0QWxnb3JpdGhtKHJlYXNvbik7CiAgIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbGVhckFsZ29yaXRobXModGhpcyk7CiAgIHJldHVybiByZXN1bHQ7CiAgfTsKICBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyLnByb3RvdHlwZVtFcnJvclN0ZXBzXSA9IGZ1bmN0aW9uICgpIHsKICAgUmVzZXRRdWV1ZSh0aGlzKTsKICB9OwogIHJldHVybiBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyOwogfSgpOwogZnVuY3Rpb24gSXNXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyKHgpIHsKICBpZiAoIXR5cGVJc09iamVjdCh4KSkgewogICByZXR1cm4gZmFsc2U7CiAgfQogIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdfY29udHJvbGxlZFdyaXRhYmxlU3RyZWFtJykpIHsKICAgcmV0dXJuIGZhbHNlOwogIH0KICByZXR1cm4gdHJ1ZTsKIH0KIGZ1bmN0aW9uIFNldFVwV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcihzdHJlYW0sIGNvbnRyb2xsZXIsIHN0YXJ0QWxnb3JpdGhtLCB3cml0ZUFsZ29yaXRobSwgY2xvc2VBbGdvcml0aG0sIGFib3J0QWxnb3JpdGhtLCBoaWdoV2F0ZXJNYXJrLCBzaXplQWxnb3JpdGhtKSB7CiAgY29udHJvbGxlci5fY29udHJvbGxlZFdyaXRhYmxlU3RyZWFtID0gc3RyZWFtOwogIHN0cmVhbS5fd3JpdGFibGVTdHJlYW1Db250cm9sbGVyID0gY29udHJvbGxlcjsKICBjb250cm9sbGVyLl9xdWV1ZSA9IHVuZGVmaW5lZDsKICBjb250cm9sbGVyLl9xdWV1ZVRvdGFsU2l6ZSA9IHVuZGVmaW5lZDsKICBSZXNldFF1ZXVlKGNvbnRyb2xsZXIpOwogIGNvbnRyb2xsZXIuX3N0YXJ0ZWQgPSBmYWxzZTsKICBjb250cm9sbGVyLl9zdHJhdGVneVNpemVBbGdvcml0aG0gPSBzaXplQWxnb3JpdGhtOwogIGNvbnRyb2xsZXIuX3N0cmF0ZWd5SFdNID0gaGlnaFdhdGVyTWFyazsKICBjb250cm9sbGVyLl93cml0ZUFsZ29yaXRobSA9IHdyaXRlQWxnb3JpdGhtOwogIGNvbnRyb2xsZXIuX2Nsb3NlQWxnb3JpdGhtID0gY2xvc2VBbGdvcml0aG07CiAgY29udHJvbGxlci5fYWJvcnRBbGdvcml0aG0gPSBhYm9ydEFsZ29yaXRobTsKICB2YXIgYmFja3ByZXNzdXJlID0gV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckdldEJhY2twcmVzc3VyZShjb250cm9sbGVyKTsKICBXcml0YWJsZVN0cmVhbVVwZGF0ZUJhY2twcmVzc3VyZShzdHJlYW0sIGJhY2twcmVzc3VyZSk7CiAgdmFyIHN0YXJ0UmVzdWx0ID0gc3RhcnRBbGdvcml0aG0oKTsKICB2YXIgc3RhcnRQcm9taXNlID0gcHJvbWlzZVJlc29sdmVkV2l0aChzdGFydFJlc3VsdCk7CiAgdXBvblByb21pc2Uoc3RhcnRQcm9taXNlLCBmdW5jdGlvbiAoKSB7CiAgIGNvbnRyb2xsZXIuX3N0YXJ0ZWQgPSB0cnVlOwogICBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQWR2YW5jZVF1ZXVlSWZOZWVkZWQoY29udHJvbGxlcik7CiAgfSwgZnVuY3Rpb24gKHIpIHsKICAgY29udHJvbGxlci5fc3RhcnRlZCA9IHRydWU7CiAgIFdyaXRhYmxlU3RyZWFtRGVhbFdpdGhSZWplY3Rpb24oc3RyZWFtLCByKTsKICB9KTsKIH0KIGZ1bmN0aW9uIFNldFVwV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckZyb21VbmRlcmx5aW5nU2luayhzdHJlYW0sIHVuZGVybHlpbmdTaW5rLCBoaWdoV2F0ZXJNYXJrLCBzaXplQWxnb3JpdGhtKSB7CiAgdmFyIGNvbnRyb2xsZXIgPSBPYmplY3QuY3JlYXRlKFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlKTsKICBmdW5jdGlvbiBzdGFydEFsZ29yaXRobSgpIHsKICAgcmV0dXJuIEludm9rZU9yTm9vcCh1bmRlcmx5aW5nU2luaywgJ3N0YXJ0JywgW2NvbnRyb2xsZXJdKTsKICB9CiAgdmFyIHdyaXRlQWxnb3JpdGhtID0gQ3JlYXRlQWxnb3JpdGhtRnJvbVVuZGVybHlpbmdNZXRob2QodW5kZXJseWluZ1NpbmssICd3cml0ZScsIDEsIFtjb250cm9sbGVyXSk7CiAgdmFyIGNsb3NlQWxnb3JpdGhtID0gQ3JlYXRlQWxnb3JpdGhtRnJvbVVuZGVybHlpbmdNZXRob2QodW5kZXJseWluZ1NpbmssICdjbG9zZScsIDAsIFtdKTsKICB2YXIgYWJvcnRBbGdvcml0aG0gPSBDcmVhdGVBbGdvcml0aG1Gcm9tVW5kZXJseWluZ01ldGhvZCh1bmRlcmx5aW5nU2luaywgJ2Fib3J0JywgMSwgW10pOwogIFNldFVwV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcihzdHJlYW0sIGNvbnRyb2xsZXIsIHN0YXJ0QWxnb3JpdGhtLCB3cml0ZUFsZ29yaXRobSwgY2xvc2VBbGdvcml0aG0sIGFib3J0QWxnb3JpdGhtLCBoaWdoV2F0ZXJNYXJrLCBzaXplQWxnb3JpdGhtKTsKIH0KIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMoY29udHJvbGxlcikgewogIGNvbnRyb2xsZXIuX3dyaXRlQWxnb3JpdGhtID0gdW5kZWZpbmVkOwogIGNvbnRyb2xsZXIuX2Nsb3NlQWxnb3JpdGhtID0gdW5kZWZpbmVkOwogIGNvbnRyb2xsZXIuX2Fib3J0QWxnb3JpdGhtID0gdW5kZWZpbmVkOwogIGNvbnRyb2xsZXIuX3N0cmF0ZWd5U2l6ZUFsZ29yaXRobSA9IHVuZGVmaW5lZDsKIH0KIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbG9zZShjb250cm9sbGVyKSB7CiAgRW5xdWV1ZVZhbHVlV2l0aFNpemUoY29udHJvbGxlciwgJ2Nsb3NlJywgMCk7CiAgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckFkdmFuY2VRdWV1ZUlmTmVlZGVkKGNvbnRyb2xsZXIpOwogfQogZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckdldENodW5rU2l6ZShjb250cm9sbGVyLCBjaHVuaykgewogIHRyeSB7CiAgIHJldHVybiBjb250cm9sbGVyLl9zdHJhdGVneVNpemVBbGdvcml0aG0oY2h1bmspOwogIH0gY2F0Y2ggKGNodW5rU2l6ZUUpIHsKICAgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9ySWZOZWVkZWQoY29udHJvbGxlciwgY2h1bmtTaXplRSk7CiAgIHJldHVybiAxOwogIH0KIH0KIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJHZXREZXNpcmVkU2l6ZShjb250cm9sbGVyKSB7CiAgcmV0dXJuIGNvbnRyb2xsZXIuX3N0cmF0ZWd5SFdNIC0gY29udHJvbGxlci5fcXVldWVUb3RhbFNpemU7CiB9CiBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyV3JpdGUoY29udHJvbGxlciwgY2h1bmssIGNodW5rU2l6ZSkgewogIHZhciB3cml0ZVJlY29yZCA9IHsgY2h1bms6IGNodW5rIH07CiAgdHJ5IHsKICAgRW5xdWV1ZVZhbHVlV2l0aFNpemUoY29udHJvbGxlciwgd3JpdGVSZWNvcmQsIGNodW5rU2l6ZSk7CiAgfSBjYXRjaCAoZW5xdWV1ZUUpIHsKICAgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9ySWZOZWVkZWQoY29udHJvbGxlciwgZW5xdWV1ZUUpOwogICByZXR1cm47CiAgfQogIHZhciBzdHJlYW0gPSBjb250cm9sbGVyLl9jb250cm9sbGVkV3JpdGFibGVTdHJlYW07CiAgaWYgKFdyaXRhYmxlU3RyZWFtQ2xvc2VRdWV1ZWRPckluRmxpZ2h0KHN0cmVhbSkgPT09IGZhbHNlICYmIHN0cmVhbS5fc3RhdGUgPT09ICd3cml0YWJsZScpIHsKICAgdmFyIGJhY2twcmVzc3VyZSA9IFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJHZXRCYWNrcHJlc3N1cmUoY29udHJvbGxlcik7CiAgIFdyaXRhYmxlU3RyZWFtVXBkYXRlQmFja3ByZXNzdXJlKHN0cmVhbSwgYmFja3ByZXNzdXJlKTsKICB9CiAgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckFkdmFuY2VRdWV1ZUlmTmVlZGVkKGNvbnRyb2xsZXIpOwogfQogZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckFkdmFuY2VRdWV1ZUlmTmVlZGVkKGNvbnRyb2xsZXIpIHsKICB2YXIgc3RyZWFtID0gY29udHJvbGxlci5fY29udHJvbGxlZFdyaXRhYmxlU3RyZWFtOwogIGlmIChjb250cm9sbGVyLl9zdGFydGVkID09PSBmYWxzZSkgewogICByZXR1cm47CiAgfQogIGlmIChzdHJlYW0uX2luRmxpZ2h0V3JpdGVSZXF1ZXN0ICE9PSB1bmRlZmluZWQpIHsKICAgcmV0dXJuOwogIH0KICB2YXIgc3RhdGUgPSBzdHJlYW0uX3N0YXRlOwogIGlmIChzdGF0ZSA9PT0gJ2Vycm9yaW5nJykgewogICBXcml0YWJsZVN0cmVhbUZpbmlzaEVycm9yaW5nKHN0cmVhbSk7CiAgIHJldHVybjsKICB9CiAgaWYgKGNvbnRyb2xsZXIuX3F1ZXVlLmxlbmd0aCA9PT0gMCkgewogICByZXR1cm47CiAgfQogIHZhciB3cml0ZVJlY29yZCA9IFBlZWtRdWV1ZVZhbHVlKGNvbnRyb2xsZXIpOwogIGlmICh3cml0ZVJlY29yZCA9PT0gJ2Nsb3NlJykgewogICBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyUHJvY2Vzc0Nsb3NlKGNvbnRyb2xsZXIpOwogIH0gZWxzZSB7CiAgIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJQcm9jZXNzV3JpdGUoY29udHJvbGxlciwgd3JpdGVSZWNvcmQuY2h1bmspOwogIH0KIH0KIGZ1bmN0aW9uIFdyaXRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFcnJvcklmTmVlZGVkKGNvbnRyb2xsZXIsIGVycm9yKSB7CiAgaWYgKGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRXcml0YWJsZVN0cmVhbS5fc3RhdGUgPT09ICd3cml0YWJsZScpIHsKICAgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9yKGNvbnRyb2xsZXIsIGVycm9yKTsKICB9CiB9CiBmdW5jdGlvbiBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyUHJvY2Vzc0Nsb3NlKGNvbnRyb2xsZXIpIHsKICB2YXIgc3RyZWFtID0gY29udHJvbGxlci5fY29udHJvbGxlZFdyaXRhYmxlU3RyZWFtOwogIFdyaXRhYmxlU3RyZWFtTWFya0Nsb3NlUmVxdWVzdEluRmxpZ2h0KHN0cmVhbSk7CiAgRGVxdWV1ZVZhbHVlKGNvbnRyb2xsZXIpOwogIHZhciBzaW5rQ2xvc2VQcm9taXNlID0gY29udHJvbGxlci5fY2xvc2VBbGdvcml0aG0oKTsKICBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2xlYXJBbGdvcml0aG1zKGNvbnRyb2xsZXIpOwogIHVwb25Qcm9taXNlKHNpbmtDbG9zZVByb21pc2UsIGZ1bmN0aW9uICgpIHsKICAgV3JpdGFibGVTdHJlYW1GaW5pc2hJbkZsaWdodENsb3NlKHN0cmVhbSk7CiAgfSwgZnVuY3Rpb24gKHJlYXNvbikgewogICBXcml0YWJsZVN0cmVhbUZpbmlzaEluRmxpZ2h0Q2xvc2VXaXRoRXJyb3Ioc3RyZWFtLCByZWFzb24pOwogIH0pOwogfQogZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlclByb2Nlc3NXcml0ZShjb250cm9sbGVyLCBjaHVuaykgewogIHZhciBzdHJlYW0gPSBjb250cm9sbGVyLl9jb250cm9sbGVkV3JpdGFibGVTdHJlYW07CiAgV3JpdGFibGVTdHJlYW1NYXJrRmlyc3RXcml0ZVJlcXVlc3RJbkZsaWdodChzdHJlYW0pOwogIHZhciBzaW5rV3JpdGVQcm9taXNlID0gY29udHJvbGxlci5fd3JpdGVBbGdvcml0aG0oY2h1bmspOwogIHVwb25Qcm9taXNlKHNpbmtXcml0ZVByb21pc2UsIGZ1bmN0aW9uICgpIHsKICAgV3JpdGFibGVTdHJlYW1GaW5pc2hJbkZsaWdodFdyaXRlKHN0cmVhbSk7CiAgIHZhciBzdGF0ZSA9IHN0cmVhbS5fc3RhdGU7CiAgIERlcXVldWVWYWx1ZShjb250cm9sbGVyKTsKICAgaWYgKFdyaXRhYmxlU3RyZWFtQ2xvc2VRdWV1ZWRPckluRmxpZ2h0KHN0cmVhbSkgPT09IGZhbHNlICYmIHN0YXRlID09PSAnd3JpdGFibGUnKSB7CiAgICB2YXIgYmFja3ByZXNzdXJlID0gV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckdldEJhY2twcmVzc3VyZShjb250cm9sbGVyKTsKICAgIFdyaXRhYmxlU3RyZWFtVXBkYXRlQmFja3ByZXNzdXJlKHN0cmVhbSwgYmFja3ByZXNzdXJlKTsKICAgfQogICBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQWR2YW5jZVF1ZXVlSWZOZWVkZWQoY29udHJvbGxlcik7CiAgfSwgZnVuY3Rpb24gKHJlYXNvbikgewogICBpZiAoc3RyZWFtLl9zdGF0ZSA9PT0gJ3dyaXRhYmxlJykgewogICAgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNsZWFyQWxnb3JpdGhtcyhjb250cm9sbGVyKTsKICAgfQogICBXcml0YWJsZVN0cmVhbUZpbmlzaEluRmxpZ2h0V3JpdGVXaXRoRXJyb3Ioc3RyZWFtLCByZWFzb24pOwogIH0pOwogfQogZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckdldEJhY2twcmVzc3VyZShjb250cm9sbGVyKSB7CiAgdmFyIGRlc2lyZWRTaXplID0gV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckdldERlc2lyZWRTaXplKGNvbnRyb2xsZXIpOwogIHJldHVybiBkZXNpcmVkU2l6ZSA8PSAwOwogfQogZnVuY3Rpb24gV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9yKGNvbnRyb2xsZXIsIGVycm9yKSB7CiAgdmFyIHN0cmVhbSA9IGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRXcml0YWJsZVN0cmVhbTsKICBXcml0YWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2xlYXJBbGdvcml0aG1zKGNvbnRyb2xsZXIpOwogIFdyaXRhYmxlU3RyZWFtU3RhcnRFcnJvcmluZyhzdHJlYW0sIGVycm9yKTsKIH0KIGZ1bmN0aW9uIHN0cmVhbUJyYW5kQ2hlY2tFeGNlcHRpb24obmFtZSkgewogIHJldHVybiBuZXcgVHlwZUVycm9yKCJXcml0YWJsZVN0cmVhbS5wcm90b3R5cGUuIiArIG5hbWUgKyAiIGNhbiBvbmx5IGJlIHVzZWQgb24gYSBXcml0YWJsZVN0cmVhbSIpOwogfQogZnVuY3Rpb24gZGVmYXVsdFdyaXRlckJyYW5kQ2hlY2tFeGNlcHRpb24obmFtZSkgewogIHJldHVybiBuZXcgVHlwZUVycm9yKCJXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXIucHJvdG90eXBlLiIgKyBuYW1lICsgIiBjYW4gb25seSBiZSB1c2VkIG9uIGEgV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyIik7CiB9CiBmdW5jdGlvbiBkZWZhdWx0V3JpdGVyTG9ja0V4Y2VwdGlvbihuYW1lKSB7CiAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoJ0Nhbm5vdCAnICsgbmFtZSArICcgYSBzdHJlYW0gdXNpbmcgYSByZWxlYXNlZCB3cml0ZXInKTsKIH0KIGZ1bmN0aW9uIGRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZSh3cml0ZXIpIHsKICB3cml0ZXIuX2Nsb3NlZFByb21pc2UgPSBuZXdQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgd3JpdGVyLl9jbG9zZWRQcm9taXNlX3Jlc29sdmUgPSByZXNvbHZlOwogICB3cml0ZXIuX2Nsb3NlZFByb21pc2VfcmVqZWN0ID0gcmVqZWN0OwogICB3cml0ZXIuX2Nsb3NlZFByb21pc2VTdGF0ZSA9ICdwZW5kaW5nJzsKICB9KTsKIH0KIGZ1bmN0aW9uIGRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZUFzUmVqZWN0ZWQod3JpdGVyLCByZWFzb24pIHsKICBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemUod3JpdGVyKTsKICBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZVJlamVjdCh3cml0ZXIsIHJlYXNvbik7CiB9CiBmdW5jdGlvbiBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemVBc1Jlc29sdmVkKHdyaXRlcikgewogIGRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlSW5pdGlhbGl6ZSh3cml0ZXIpOwogIGRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlUmVzb2x2ZSh3cml0ZXIpOwogfQogZnVuY3Rpb24gZGVmYXVsdFdyaXRlckNsb3NlZFByb21pc2VSZWplY3Qod3JpdGVyLCByZWFzb24pIHsKICBzZXRQcm9taXNlSXNIYW5kbGVkVG9UcnVlKHdyaXRlci5fY2xvc2VkUHJvbWlzZSk7CiAgd3JpdGVyLl9jbG9zZWRQcm9taXNlX3JlamVjdChyZWFzb24pOwogIHdyaXRlci5fY2xvc2VkUHJvbWlzZV9yZXNvbHZlID0gdW5kZWZpbmVkOwogIHdyaXRlci5fY2xvc2VkUHJvbWlzZV9yZWplY3QgPSB1bmRlZmluZWQ7CiAgd3JpdGVyLl9jbG9zZWRQcm9taXNlU3RhdGUgPSAncmVqZWN0ZWQnOwogfQogZnVuY3Rpb24gZGVmYXVsdFdyaXRlckNsb3NlZFByb21pc2VSZXNldFRvUmVqZWN0ZWQod3JpdGVyLCByZWFzb24pIHsKICBkZWZhdWx0V3JpdGVyQ2xvc2VkUHJvbWlzZUluaXRpYWxpemVBc1JlamVjdGVkKHdyaXRlciwgcmVhc29uKTsKIH0KIGZ1bmN0aW9uIGRlZmF1bHRXcml0ZXJDbG9zZWRQcm9taXNlUmVzb2x2ZSh3cml0ZXIpIHsKICB3cml0ZXIuX2Nsb3NlZFByb21pc2VfcmVzb2x2ZSh1bmRlZmluZWQpOwogIHdyaXRlci5fY2xvc2VkUHJvbWlzZV9yZXNvbHZlID0gdW5kZWZpbmVkOwogIHdyaXRlci5fY2xvc2VkUHJvbWlzZV9yZWplY3QgPSB1bmRlZmluZWQ7CiAgd3JpdGVyLl9jbG9zZWRQcm9taXNlU3RhdGUgPSAncmVzb2x2ZWQnOwogfQogZnVuY3Rpb24gZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZUluaXRpYWxpemUod3JpdGVyKSB7CiAgd3JpdGVyLl9yZWFkeVByb21pc2UgPSBuZXdQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgd3JpdGVyLl9yZWFkeVByb21pc2VfcmVzb2x2ZSA9IHJlc29sdmU7CiAgIHdyaXRlci5fcmVhZHlQcm9taXNlX3JlamVjdCA9IHJlamVjdDsKICB9KTsKICB3cml0ZXIuX3JlYWR5UHJvbWlzZVN0YXRlID0gJ3BlbmRpbmcnOwogfQogZnVuY3Rpb24gZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZUluaXRpYWxpemVBc1JlamVjdGVkKHdyaXRlciwgcmVhc29uKSB7CiAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZUluaXRpYWxpemUod3JpdGVyKTsKICBkZWZhdWx0V3JpdGVyUmVhZHlQcm9taXNlUmVqZWN0KHdyaXRlciwgcmVhc29uKTsKIH0KIGZ1bmN0aW9uIGRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VJbml0aWFsaXplQXNSZXNvbHZlZCh3cml0ZXIpIHsKICBkZWZhdWx0V3JpdGVyUmVhZHlQcm9taXNlSW5pdGlhbGl6ZSh3cml0ZXIpOwogIGRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VSZXNvbHZlKHdyaXRlcik7CiB9CiBmdW5jdGlvbiBkZWZhdWx0V3JpdGVyUmVhZHlQcm9taXNlUmVqZWN0KHdyaXRlciwgcmVhc29uKSB7CiAgc2V0UHJvbWlzZUlzSGFuZGxlZFRvVHJ1ZSh3cml0ZXIuX3JlYWR5UHJvbWlzZSk7CiAgd3JpdGVyLl9yZWFkeVByb21pc2VfcmVqZWN0KHJlYXNvbik7CiAgd3JpdGVyLl9yZWFkeVByb21pc2VfcmVzb2x2ZSA9IHVuZGVmaW5lZDsKICB3cml0ZXIuX3JlYWR5UHJvbWlzZV9yZWplY3QgPSB1bmRlZmluZWQ7CiAgd3JpdGVyLl9yZWFkeVByb21pc2VTdGF0ZSA9ICdyZWplY3RlZCc7CiB9CiBmdW5jdGlvbiBkZWZhdWx0V3JpdGVyUmVhZHlQcm9taXNlUmVzZXQod3JpdGVyKSB7CiAgZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZUluaXRpYWxpemUod3JpdGVyKTsKIH0KIGZ1bmN0aW9uIGRlZmF1bHRXcml0ZXJSZWFkeVByb21pc2VSZXNldFRvUmVqZWN0ZWQod3JpdGVyLCByZWFzb24pIHsKICBkZWZhdWx0V3JpdGVyUmVhZHlQcm9taXNlSW5pdGlhbGl6ZUFzUmVqZWN0ZWQod3JpdGVyLCByZWFzb24pOwogfQogZnVuY3Rpb24gZGVmYXVsdFdyaXRlclJlYWR5UHJvbWlzZVJlc29sdmUod3JpdGVyKSB7CiAgd3JpdGVyLl9yZWFkeVByb21pc2VfcmVzb2x2ZSh1bmRlZmluZWQpOwogIHdyaXRlci5fcmVhZHlQcm9taXNlX3Jlc29sdmUgPSB1bmRlZmluZWQ7CiAgd3JpdGVyLl9yZWFkeVByb21pc2VfcmVqZWN0ID0gdW5kZWZpbmVkOwogIHdyaXRlci5fcmVhZHlQcm9taXNlU3RhdGUgPSAnZnVsZmlsbGVkJzsKIH0KIGZ1bmN0aW9uIGlzQWJvcnRTaWduYWwodmFsdWUpIHsKICBpZiAodHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0JyB8fCB2YWx1ZSA9PT0gbnVsbCkgewogICByZXR1cm4gZmFsc2U7CiAgfQogIHRyeSB7CiAgIHJldHVybiB0eXBlb2YgdmFsdWUuYWJvcnRlZCA9PT0gJ2Jvb2xlYW4nOwogIH0gY2F0Y2ggKF9hKSB7CiAgIHJldHVybiBmYWxzZTsKICB9CiB9CiB2YXIgTmF0aXZlRE9NRXhjZXB0aW9uID0gdHlwZW9mIERPTUV4Y2VwdGlvbiAhPT0gJ3VuZGVmaW5lZCcgPyBET01FeGNlcHRpb24gOiB1bmRlZmluZWQ7CiBmdW5jdGlvbiBpc0RPTUV4Y2VwdGlvbkNvbnN0cnVjdG9yKGN0b3IpIHsKICBpZiAoISh0eXBlb2YgY3RvciA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgY3RvciA9PT0gJ29iamVjdCcpKSB7CiAgIHJldHVybiBmYWxzZTsKICB9CiAgdHJ5IHsKICAgbmV3IGN0b3IoKTsKICAgcmV0dXJuIHRydWU7CiAgfSBjYXRjaCAoX2EpIHsKICAgcmV0dXJuIGZhbHNlOwogIH0KIH0KIGZ1bmN0aW9uIGNyZWF0ZURPTUV4Y2VwdGlvblBvbHlmaWxsKCkgewogIHZhciBjdG9yID0gZnVuY3Rpb24gRE9NRXhjZXB0aW9uKG1lc3NhZ2UsIG5hbWUpIHsKICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZSB8fCAnJzsKICAgdGhpcy5uYW1lID0gbmFtZSB8fCAnRXJyb3InOwogICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHsKICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpOwogICB9CiAgfTsKICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTsKICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3Rvci5wcm90b3R5cGUsICdjb25zdHJ1Y3RvcicsIHsKICAgdmFsdWU6IGN0b3IsCiAgIHdyaXRhYmxlOiB0cnVlLAogICBjb25maWd1cmFibGU6IHRydWUKICB9KTsKICByZXR1cm4gY3RvcjsKIH0KIHZhciBET01FeGNlcHRpb24kMSA9IGlzRE9NRXhjZXB0aW9uQ29uc3RydWN0b3IoTmF0aXZlRE9NRXhjZXB0aW9uKSA/IE5hdGl2ZURPTUV4Y2VwdGlvbiA6IGNyZWF0ZURPTUV4Y2VwdGlvblBvbHlmaWxsKCk7CiBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbVBpcGVUbyhzb3VyY2UsIGRlc3QsIHByZXZlbnRDbG9zZSwgcHJldmVudEFib3J0LCBwcmV2ZW50Q2FuY2VsLCBzaWduYWwpIHsKICB2YXIgcmVhZGVyID0gQWNxdWlyZVJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcihzb3VyY2UpOwogIHZhciB3cml0ZXIgPSBBY3F1aXJlV3JpdGFibGVTdHJlYW1EZWZhdWx0V3JpdGVyKGRlc3QpOwogIHNvdXJjZS5fZGlzdHVyYmVkID0gdHJ1ZTsKICB2YXIgc2h1dHRpbmdEb3duID0gZmFsc2U7CiAgdmFyIGN1cnJlbnRXcml0ZSA9IHByb21pc2VSZXNvbHZlZFdpdGgodW5kZWZpbmVkKTsKICByZXR1cm4gbmV3UHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgIHZhciBhYm9ydEFsZ29yaXRobTsKICAgaWYgKHNpZ25hbCAhPT0gdW5kZWZpbmVkKSB7CiAgICBhYm9ydEFsZ29yaXRobSA9IGZ1bmN0aW9uICgpIHsKICAgICB2YXIgZXJyb3IgPSBuZXcgRE9NRXhjZXB0aW9uJDEoJ0Fib3J0ZWQnLCAnQWJvcnRFcnJvcicpOwogICAgIHZhciBhY3Rpb25zID0gW107CiAgICAgaWYgKHByZXZlbnRBYm9ydCA9PT0gZmFsc2UpIHsKICAgICAgYWN0aW9ucy5wdXNoKGZ1bmN0aW9uICgpIHsKICAgICAgIGlmIChkZXN0Ll9zdGF0ZSA9PT0gJ3dyaXRhYmxlJykgewogICAgICAgIHJldHVybiBXcml0YWJsZVN0cmVhbUFib3J0KGRlc3QsIGVycm9yKTsKICAgICAgIH0KICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7CiAgICAgIH0pOwogICAgIH0KICAgICBpZiAocHJldmVudENhbmNlbCA9PT0gZmFsc2UpIHsKICAgICAgYWN0aW9ucy5wdXNoKGZ1bmN0aW9uICgpIHsKICAgICAgIGlmIChzb3VyY2UuX3N0YXRlID09PSAncmVhZGFibGUnKSB7CiAgICAgICAgcmV0dXJuIFJlYWRhYmxlU3RyZWFtQ2FuY2VsKHNvdXJjZSwgZXJyb3IpOwogICAgICAgfQogICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlZFdpdGgodW5kZWZpbmVkKTsKICAgICAgfSk7CiAgICAgfQogICAgIHNodXRkb3duV2l0aEFjdGlvbihmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBQcm9taXNlLmFsbChhY3Rpb25zLm1hcChmdW5jdGlvbiAoYWN0aW9uKSB7CiAgICAgICByZXR1cm4gYWN0aW9uKCk7CiAgICAgIH0pKTsKICAgICB9LCB0cnVlLCBlcnJvcik7CiAgICB9OwogICAgaWYgKHNpZ25hbC5hYm9ydGVkID09PSB0cnVlKSB7CiAgICAgYWJvcnRBbGdvcml0aG0oKTsKICAgICByZXR1cm47CiAgICB9CiAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydEFsZ29yaXRobSk7CiAgIH0KICAgZnVuY3Rpb24gcGlwZUxvb3AoKSB7CiAgICByZXR1cm4gbmV3UHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZUxvb3AsIHJlamVjdExvb3ApIHsKICAgICBmdW5jdGlvbiBuZXh0KGRvbmUpIHsKICAgICAgaWYgKGRvbmUpIHsKICAgICAgIHJlc29sdmVMb29wKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICBQZXJmb3JtUHJvbWlzZVRoZW4ocGlwZVN0ZXAoKSwgbmV4dCwgcmVqZWN0TG9vcCk7CiAgICAgIH0KICAgICB9CiAgICAgbmV4dChmYWxzZSk7CiAgICB9KTsKICAgfQogICBmdW5jdGlvbiBwaXBlU3RlcCgpIHsKICAgIGlmIChzaHV0dGluZ0Rvd24gPT09IHRydWUpIHsKICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmVkV2l0aCh0cnVlKTsKICAgIH0KICAgIHJldHVybiBQZXJmb3JtUHJvbWlzZVRoZW4od3JpdGVyLl9yZWFkeVByb21pc2UsIGZ1bmN0aW9uICgpIHsKICAgICByZXR1cm4gUGVyZm9ybVByb21pc2VUaGVuKFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlclJlYWQocmVhZGVyKSwgZnVuY3Rpb24gKHJlc3VsdCkgewogICAgICBpZiAocmVzdWx0LmRvbmUgPT09IHRydWUpIHsKICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIGN1cnJlbnRXcml0ZSA9IFBlcmZvcm1Qcm9taXNlVGhlbihXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJXcml0ZSh3cml0ZXIsIHJlc3VsdC52YWx1ZSksIHVuZGVmaW5lZCwgbm9vcCk7CiAgICAgIHJldHVybiBmYWxzZTsKICAgICB9KTsKICAgIH0pOwogICB9CiAgIGlzT3JCZWNvbWVzRXJyb3JlZChzb3VyY2UsIHJlYWRlci5fY2xvc2VkUHJvbWlzZSwgZnVuY3Rpb24gKHN0b3JlZEVycm9yKSB7CiAgICBpZiAocHJldmVudEFib3J0ID09PSBmYWxzZSkgewogICAgIHNodXRkb3duV2l0aEFjdGlvbihmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBXcml0YWJsZVN0cmVhbUFib3J0KGRlc3QsIHN0b3JlZEVycm9yKTsKICAgICB9LCB0cnVlLCBzdG9yZWRFcnJvcik7CiAgICB9IGVsc2UgewogICAgIHNodXRkb3duKHRydWUsIHN0b3JlZEVycm9yKTsKICAgIH0KICAgfSk7CiAgIGlzT3JCZWNvbWVzRXJyb3JlZChkZXN0LCB3cml0ZXIuX2Nsb3NlZFByb21pc2UsIGZ1bmN0aW9uIChzdG9yZWRFcnJvcikgewogICAgaWYgKHByZXZlbnRDYW5jZWwgPT09IGZhbHNlKSB7CiAgICAgc2h1dGRvd25XaXRoQWN0aW9uKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIFJlYWRhYmxlU3RyZWFtQ2FuY2VsKHNvdXJjZSwgc3RvcmVkRXJyb3IpOwogICAgIH0sIHRydWUsIHN0b3JlZEVycm9yKTsKICAgIH0gZWxzZSB7CiAgICAgc2h1dGRvd24odHJ1ZSwgc3RvcmVkRXJyb3IpOwogICAgfQogICB9KTsKICAgaXNPckJlY29tZXNDbG9zZWQoc291cmNlLCByZWFkZXIuX2Nsb3NlZFByb21pc2UsIGZ1bmN0aW9uICgpIHsKICAgIGlmIChwcmV2ZW50Q2xvc2UgPT09IGZhbHNlKSB7CiAgICAgc2h1dGRvd25XaXRoQWN0aW9uKGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIFdyaXRhYmxlU3RyZWFtRGVmYXVsdFdyaXRlckNsb3NlV2l0aEVycm9yUHJvcGFnYXRpb24od3JpdGVyKTsKICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgc2h1dGRvd24oKTsKICAgIH0KICAgfSk7CiAgIGlmIChXcml0YWJsZVN0cmVhbUNsb3NlUXVldWVkT3JJbkZsaWdodChkZXN0KSA9PT0gdHJ1ZSB8fCBkZXN0Ll9zdGF0ZSA9PT0gJ2Nsb3NlZCcpIHsKICAgIHZhciBkZXN0Q2xvc2VkXzEgPSBuZXcgVHlwZUVycm9yKCd0aGUgZGVzdGluYXRpb24gd3JpdGFibGUgc3RyZWFtIGNsb3NlZCBiZWZvcmUgYWxsIGRhdGEgY291bGQgYmUgcGlwZWQgdG8gaXQnKTsKICAgIGlmIChwcmV2ZW50Q2FuY2VsID09PSBmYWxzZSkgewogICAgIHNodXRkb3duV2l0aEFjdGlvbihmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBSZWFkYWJsZVN0cmVhbUNhbmNlbChzb3VyY2UsIGRlc3RDbG9zZWRfMSk7CiAgICAgfSwgdHJ1ZSwgZGVzdENsb3NlZF8xKTsKICAgIH0gZWxzZSB7CiAgICAgc2h1dGRvd24odHJ1ZSwgZGVzdENsb3NlZF8xKTsKICAgIH0KICAgfQogICBzZXRQcm9taXNlSXNIYW5kbGVkVG9UcnVlKHBpcGVMb29wKCkpOwogICBmdW5jdGlvbiB3YWl0Rm9yV3JpdGVzVG9GaW5pc2goKSB7CiAgICB2YXIgb2xkQ3VycmVudFdyaXRlID0gY3VycmVudFdyaXRlOwogICAgcmV0dXJuIFBlcmZvcm1Qcm9taXNlVGhlbihjdXJyZW50V3JpdGUsIGZ1bmN0aW9uICgpIHsKICAgICByZXR1cm4gb2xkQ3VycmVudFdyaXRlICE9PSBjdXJyZW50V3JpdGUgPyB3YWl0Rm9yV3JpdGVzVG9GaW5pc2goKSA6IHVuZGVmaW5lZDsKICAgIH0pOwogICB9CiAgIGZ1bmN0aW9uIGlzT3JCZWNvbWVzRXJyb3JlZChzdHJlYW0sIHByb21pc2UsIGFjdGlvbikgewogICAgaWYgKHN0cmVhbS5fc3RhdGUgPT09ICdlcnJvcmVkJykgewogICAgIGFjdGlvbihzdHJlYW0uX3N0b3JlZEVycm9yKTsKICAgIH0gZWxzZSB7CiAgICAgdXBvblJlamVjdGlvbihwcm9taXNlLCBhY3Rpb24pOwogICAgfQogICB9CiAgIGZ1bmN0aW9uIGlzT3JCZWNvbWVzQ2xvc2VkKHN0cmVhbSwgcHJvbWlzZSwgYWN0aW9uKSB7CiAgICBpZiAoc3RyZWFtLl9zdGF0ZSA9PT0gJ2Nsb3NlZCcpIHsKICAgICBhY3Rpb24oKTsKICAgIH0gZWxzZSB7CiAgICAgdXBvbkZ1bGZpbGxtZW50KHByb21pc2UsIGFjdGlvbik7CiAgICB9CiAgIH0KICAgZnVuY3Rpb24gc2h1dGRvd25XaXRoQWN0aW9uKGFjdGlvbiwgb3JpZ2luYWxJc0Vycm9yLCBvcmlnaW5hbEVycm9yKSB7CiAgICBpZiAoc2h1dHRpbmdEb3duID09PSB0cnVlKSB7CiAgICAgcmV0dXJuOwogICAgfQogICAgc2h1dHRpbmdEb3duID0gdHJ1ZTsKICAgIGlmIChkZXN0Ll9zdGF0ZSA9PT0gJ3dyaXRhYmxlJyAmJiBXcml0YWJsZVN0cmVhbUNsb3NlUXVldWVkT3JJbkZsaWdodChkZXN0KSA9PT0gZmFsc2UpIHsKICAgICB1cG9uRnVsZmlsbG1lbnQod2FpdEZvcldyaXRlc1RvRmluaXNoKCksIGRvVGhlUmVzdCk7CiAgICB9IGVsc2UgewogICAgIGRvVGhlUmVzdCgpOwogICAgfQogICAgZnVuY3Rpb24gZG9UaGVSZXN0KCkgewogICAgIHVwb25Qcm9taXNlKGFjdGlvbigpLCBmdW5jdGlvbiAoKSB7CiAgICAgIHJldHVybiBmaW5hbGl6ZShvcmlnaW5hbElzRXJyb3IsIG9yaWdpbmFsRXJyb3IpOwogICAgIH0sIGZ1bmN0aW9uIChuZXdFcnJvcikgewogICAgICByZXR1cm4gZmluYWxpemUodHJ1ZSwgbmV3RXJyb3IpOwogICAgIH0pOwogICAgfQogICB9CiAgIGZ1bmN0aW9uIHNodXRkb3duKGlzRXJyb3IsIGVycm9yKSB7CiAgICBpZiAoc2h1dHRpbmdEb3duID09PSB0cnVlKSB7CiAgICAgcmV0dXJuOwogICAgfQogICAgc2h1dHRpbmdEb3duID0gdHJ1ZTsKICAgIGlmIChkZXN0Ll9zdGF0ZSA9PT0gJ3dyaXRhYmxlJyAmJiBXcml0YWJsZVN0cmVhbUNsb3NlUXVldWVkT3JJbkZsaWdodChkZXN0KSA9PT0gZmFsc2UpIHsKICAgICB1cG9uRnVsZmlsbG1lbnQod2FpdEZvcldyaXRlc1RvRmluaXNoKCksIGZ1bmN0aW9uICgpIHsKICAgICAgcmV0dXJuIGZpbmFsaXplKGlzRXJyb3IsIGVycm9yKTsKICAgICB9KTsKICAgIH0gZWxzZSB7CiAgICAgZmluYWxpemUoaXNFcnJvciwgZXJyb3IpOwogICAgfQogICB9CiAgIGZ1bmN0aW9uIGZpbmFsaXplKGlzRXJyb3IsIGVycm9yKSB7CiAgICBXcml0YWJsZVN0cmVhbURlZmF1bHRXcml0ZXJSZWxlYXNlKHdyaXRlcik7CiAgICBSZWFkYWJsZVN0cmVhbVJlYWRlckdlbmVyaWNSZWxlYXNlKHJlYWRlcik7CiAgICBpZiAoc2lnbmFsICE9PSB1bmRlZmluZWQpIHsKICAgICBzaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydEFsZ29yaXRobSk7CiAgICB9CiAgICBpZiAoaXNFcnJvcikgewogICAgIHJlamVjdChlcnJvcik7CiAgICB9IGVsc2UgewogICAgIHJlc29sdmUodW5kZWZpbmVkKTsKICAgIH0KICAgfQogIH0pOwogfQogdmFyIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcigpIHsKICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpOwogIH0KICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUsICJkZXNpcmVkU2l6ZSIsIHsKICAgZ2V0OiBmdW5jdGlvbiAoKSB7CiAgICBpZiAoSXNSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyKHRoaXMpID09PSBmYWxzZSkgewogICAgIHRocm93IGRlZmF1bHRDb250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbignZGVzaXJlZFNpemUnKTsKICAgIH0KICAgIHJldHVybiBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyR2V0RGVzaXJlZFNpemUodGhpcyk7CiAgIH0sCiAgIGVudW1lcmFibGU6IHRydWUsCiAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogIH0pOwogIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkgewogICBpZiAoSXNSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyKHRoaXMpID09PSBmYWxzZSkgewogICAgdGhyb3cgZGVmYXVsdENvbnRyb2xsZXJCcmFuZENoZWNrRXhjZXB0aW9uKCdjbG9zZScpOwogICB9CiAgIGlmIChSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FuQ2xvc2VPckVucXVldWUodGhpcykgPT09IGZhbHNlKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgc3RyZWFtIGlzIG5vdCBpbiBhIHN0YXRlIHRoYXQgcGVybWl0cyBjbG9zZScpOwogICB9CiAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbG9zZSh0aGlzKTsKICB9OwogIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLmVucXVldWUgPSBmdW5jdGlvbiAoY2h1bmspIHsKICAgaWYgKElzUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcih0aGlzKSA9PT0gZmFsc2UpIHsKICAgIHRocm93IGRlZmF1bHRDb250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbignZW5xdWV1ZScpOwogICB9CiAgIGlmIChSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FuQ2xvc2VPckVucXVldWUodGhpcykgPT09IGZhbHNlKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgc3RyZWFtIGlzIG5vdCBpbiBhIHN0YXRlIHRoYXQgcGVybWl0cyBlbnF1ZXVlJyk7CiAgIH0KICAgcmV0dXJuIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFbnF1ZXVlKHRoaXMsIGNodW5rKTsKICB9OwogIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGUpIHsKICAgaWYgKElzUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcih0aGlzKSA9PT0gZmFsc2UpIHsKICAgIHRocm93IGRlZmF1bHRDb250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbignZXJyb3InKTsKICAgfQogICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRXJyb3IodGhpcywgZSk7CiAgfTsKICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyLnByb3RvdHlwZVtDYW5jZWxTdGVwc10gPSBmdW5jdGlvbiAocmVhc29uKSB7CiAgIFJlc2V0UXVldWUodGhpcyk7CiAgIHZhciByZXN1bHQgPSB0aGlzLl9jYW5jZWxBbGdvcml0aG0ocmVhc29uKTsKICAgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNsZWFyQWxnb3JpdGhtcyh0aGlzKTsKICAgcmV0dXJuIHJlc3VsdDsKICB9OwogIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIucHJvdG90eXBlW1B1bGxTdGVwc10gPSBmdW5jdGlvbiAoKSB7CiAgIHZhciBzdHJlYW0gPSB0aGlzLl9jb250cm9sbGVkUmVhZGFibGVTdHJlYW07CiAgIGlmICh0aGlzLl9xdWV1ZS5sZW5ndGggPiAwKSB7CiAgICB2YXIgY2h1bmsgPSBEZXF1ZXVlVmFsdWUodGhpcyk7CiAgICBpZiAodGhpcy5fY2xvc2VSZXF1ZXN0ZWQgPT09IHRydWUgJiYgdGhpcy5fcXVldWUubGVuZ3RoID09PSAwKSB7CiAgICAgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNsZWFyQWxnb3JpdGhtcyh0aGlzKTsKICAgICBSZWFkYWJsZVN0cmVhbUNsb3NlKHN0cmVhbSk7CiAgICB9IGVsc2UgewogICAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDYWxsUHVsbElmTmVlZGVkKHRoaXMpOwogICAgfQogICAgcmV0dXJuIHByb21pc2VSZXNvbHZlZFdpdGgoUmVhZGFibGVTdHJlYW1DcmVhdGVSZWFkUmVzdWx0KGNodW5rLCBmYWxzZSwgc3RyZWFtLl9yZWFkZXIuX2ZvckF1dGhvckNvZGUpKTsKICAgfQogICB2YXIgcGVuZGluZ1Byb21pc2UgPSBSZWFkYWJsZVN0cmVhbUFkZFJlYWRSZXF1ZXN0KHN0cmVhbSk7CiAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDYWxsUHVsbElmTmVlZGVkKHRoaXMpOwogICByZXR1cm4gcGVuZGluZ1Byb21pc2U7CiAgfTsKICByZXR1cm4gUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcjsKIH0oKTsKIGZ1bmN0aW9uIElzUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlcih4KSB7CiAgaWYgKCF0eXBlSXNPYmplY3QoeCkpIHsKICAgcmV0dXJuIGZhbHNlOwogIH0KICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCAnX2NvbnRyb2xsZWRSZWFkYWJsZVN0cmVhbScpKSB7CiAgIHJldHVybiBmYWxzZTsKICB9CiAgcmV0dXJuIHRydWU7CiB9CiBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZChjb250cm9sbGVyKSB7CiAgdmFyIHNob3VsZFB1bGwgPSBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyU2hvdWxkQ2FsbFB1bGwoY29udHJvbGxlcik7CiAgaWYgKHNob3VsZFB1bGwgPT09IGZhbHNlKSB7CiAgIHJldHVybjsKICB9CiAgaWYgKGNvbnRyb2xsZXIuX3B1bGxpbmcgPT09IHRydWUpIHsKICAgY29udHJvbGxlci5fcHVsbEFnYWluID0gdHJ1ZTsKICAgcmV0dXJuOwogIH0KICBjb250cm9sbGVyLl9wdWxsaW5nID0gdHJ1ZTsKICB2YXIgcHVsbFByb21pc2UgPSBjb250cm9sbGVyLl9wdWxsQWxnb3JpdGhtKCk7CiAgdXBvblByb21pc2UocHVsbFByb21pc2UsIGZ1bmN0aW9uICgpIHsKICAgY29udHJvbGxlci5fcHVsbGluZyA9IGZhbHNlOwogICBpZiAoY29udHJvbGxlci5fcHVsbEFnYWluID09PSB0cnVlKSB7CiAgICBjb250cm9sbGVyLl9wdWxsQWdhaW4gPSBmYWxzZTsKICAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDYWxsUHVsbElmTmVlZGVkKGNvbnRyb2xsZXIpOwogICB9CiAgfSwgZnVuY3Rpb24gKGUpIHsKICAgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9yKGNvbnRyb2xsZXIsIGUpOwogIH0pOwogfQogZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlclNob3VsZENhbGxQdWxsKGNvbnRyb2xsZXIpIHsKICB2YXIgc3RyZWFtID0gY29udHJvbGxlci5fY29udHJvbGxlZFJlYWRhYmxlU3RyZWFtOwogIGlmIChSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FuQ2xvc2VPckVucXVldWUoY29udHJvbGxlcikgPT09IGZhbHNlKSB7CiAgIHJldHVybiBmYWxzZTsKICB9CiAgaWYgKGNvbnRyb2xsZXIuX3N0YXJ0ZWQgPT09IGZhbHNlKSB7CiAgIHJldHVybiBmYWxzZTsKICB9CiAgaWYgKElzUmVhZGFibGVTdHJlYW1Mb2NrZWQoc3RyZWFtKSA9PT0gdHJ1ZSAmJiBSZWFkYWJsZVN0cmVhbUdldE51bVJlYWRSZXF1ZXN0cyhzdHJlYW0pID4gMCkgewogICByZXR1cm4gdHJ1ZTsKICB9CiAgdmFyIGRlc2lyZWRTaXplID0gUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckdldERlc2lyZWRTaXplKGNvbnRyb2xsZXIpOwogIGlmIChkZXNpcmVkU2l6ZSA+IDApIHsKICAgcmV0dXJuIHRydWU7CiAgfQogIHJldHVybiBmYWxzZTsKIH0KIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMoY29udHJvbGxlcikgewogIGNvbnRyb2xsZXIuX3B1bGxBbGdvcml0aG0gPSB1bmRlZmluZWQ7CiAgY29udHJvbGxlci5fY2FuY2VsQWxnb3JpdGhtID0gdW5kZWZpbmVkOwogIGNvbnRyb2xsZXIuX3N0cmF0ZWd5U2l6ZUFsZ29yaXRobSA9IHVuZGVmaW5lZDsKIH0KIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbG9zZShjb250cm9sbGVyKSB7CiAgdmFyIHN0cmVhbSA9IGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRSZWFkYWJsZVN0cmVhbTsKICBjb250cm9sbGVyLl9jbG9zZVJlcXVlc3RlZCA9IHRydWU7CiAgaWYgKGNvbnRyb2xsZXIuX3F1ZXVlLmxlbmd0aCA9PT0gMCkgewogICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2xlYXJBbGdvcml0aG1zKGNvbnRyb2xsZXIpOwogICBSZWFkYWJsZVN0cmVhbUNsb3NlKHN0cmVhbSk7CiAgfQogfQogZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVucXVldWUoY29udHJvbGxlciwgY2h1bmspIHsKICB2YXIgc3RyZWFtID0gY29udHJvbGxlci5fY29udHJvbGxlZFJlYWRhYmxlU3RyZWFtOwogIGlmIChJc1JlYWRhYmxlU3RyZWFtTG9ja2VkKHN0cmVhbSkgPT09IHRydWUgJiYgUmVhZGFibGVTdHJlYW1HZXROdW1SZWFkUmVxdWVzdHMoc3RyZWFtKSA+IDApIHsKICAgUmVhZGFibGVTdHJlYW1GdWxmaWxsUmVhZFJlcXVlc3Qoc3RyZWFtLCBjaHVuaywgZmFsc2UpOwogIH0gZWxzZSB7CiAgIHZhciBjaHVua1NpemUgPSB2b2lkIDA7CiAgIHRyeSB7CiAgICBjaHVua1NpemUgPSBjb250cm9sbGVyLl9zdHJhdGVneVNpemVBbGdvcml0aG0oY2h1bmspOwogICB9IGNhdGNoIChjaHVua1NpemVFKSB7CiAgICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRXJyb3IoY29udHJvbGxlciwgY2h1bmtTaXplRSk7CiAgICB0aHJvdyBjaHVua1NpemVFOwogICB9CiAgIHRyeSB7CiAgICBFbnF1ZXVlVmFsdWVXaXRoU2l6ZShjb250cm9sbGVyLCBjaHVuaywgY2h1bmtTaXplKTsKICAgfSBjYXRjaCAoZW5xdWV1ZUUpIHsKICAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFcnJvcihjb250cm9sbGVyLCBlbnF1ZXVlRSk7CiAgICB0aHJvdyBlbnF1ZXVlRTsKICAgfQogIH0KICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZChjb250cm9sbGVyKTsKIH0KIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFcnJvcihjb250cm9sbGVyLCBlKSB7CiAgdmFyIHN0cmVhbSA9IGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRSZWFkYWJsZVN0cmVhbTsKICBpZiAoc3RyZWFtLl9zdGF0ZSAhPT0gJ3JlYWRhYmxlJykgewogICByZXR1cm47CiAgfQogIFJlc2V0UXVldWUoY29udHJvbGxlcik7CiAgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNsZWFyQWxnb3JpdGhtcyhjb250cm9sbGVyKTsKICBSZWFkYWJsZVN0cmVhbUVycm9yKHN0cmVhbSwgZSk7CiB9CiBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyR2V0RGVzaXJlZFNpemUoY29udHJvbGxlcikgewogIHZhciBzdHJlYW0gPSBjb250cm9sbGVyLl9jb250cm9sbGVkUmVhZGFibGVTdHJlYW07CiAgdmFyIHN0YXRlID0gc3RyZWFtLl9zdGF0ZTsKICBpZiAoc3RhdGUgPT09ICdlcnJvcmVkJykgewogICByZXR1cm4gbnVsbDsKICB9CiAgaWYgKHN0YXRlID09PSAnY2xvc2VkJykgewogICByZXR1cm4gMDsKICB9CiAgcmV0dXJuIGNvbnRyb2xsZXIuX3N0cmF0ZWd5SFdNIC0gY29udHJvbGxlci5fcXVldWVUb3RhbFNpemU7CiB9CiBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVySGFzQmFja3ByZXNzdXJlKGNvbnRyb2xsZXIpIHsKICBpZiAoUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlclNob3VsZENhbGxQdWxsKGNvbnRyb2xsZXIpID09PSB0cnVlKSB7CiAgIHJldHVybiBmYWxzZTsKICB9CiAgcmV0dXJuIHRydWU7CiB9CiBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FuQ2xvc2VPckVucXVldWUoY29udHJvbGxlcikgewogIHZhciBzdGF0ZSA9IGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRSZWFkYWJsZVN0cmVhbS5fc3RhdGU7CiAgaWYgKGNvbnRyb2xsZXIuX2Nsb3NlUmVxdWVzdGVkID09PSBmYWxzZSAmJiBzdGF0ZSA9PT0gJ3JlYWRhYmxlJykgewogICByZXR1cm4gdHJ1ZTsKICB9CiAgcmV0dXJuIGZhbHNlOwogfQogZnVuY3Rpb24gU2V0VXBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyKHN0cmVhbSwgY29udHJvbGxlciwgc3RhcnRBbGdvcml0aG0sIHB1bGxBbGdvcml0aG0sIGNhbmNlbEFsZ29yaXRobSwgaGlnaFdhdGVyTWFyaywgc2l6ZUFsZ29yaXRobSkgewogIGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRSZWFkYWJsZVN0cmVhbSA9IHN0cmVhbTsKICBjb250cm9sbGVyLl9xdWV1ZSA9IHVuZGVmaW5lZDsKICBjb250cm9sbGVyLl9xdWV1ZVRvdGFsU2l6ZSA9IHVuZGVmaW5lZDsKICBSZXNldFF1ZXVlKGNvbnRyb2xsZXIpOwogIGNvbnRyb2xsZXIuX3N0YXJ0ZWQgPSBmYWxzZTsKICBjb250cm9sbGVyLl9jbG9zZVJlcXVlc3RlZCA9IGZhbHNlOwogIGNvbnRyb2xsZXIuX3B1bGxBZ2FpbiA9IGZhbHNlOwogIGNvbnRyb2xsZXIuX3B1bGxpbmcgPSBmYWxzZTsKICBjb250cm9sbGVyLl9zdHJhdGVneVNpemVBbGdvcml0aG0gPSBzaXplQWxnb3JpdGhtOwogIGNvbnRyb2xsZXIuX3N0cmF0ZWd5SFdNID0gaGlnaFdhdGVyTWFyazsKICBjb250cm9sbGVyLl9wdWxsQWxnb3JpdGhtID0gcHVsbEFsZ29yaXRobTsKICBjb250cm9sbGVyLl9jYW5jZWxBbGdvcml0aG0gPSBjYW5jZWxBbGdvcml0aG07CiAgc3RyZWFtLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIgPSBjb250cm9sbGVyOwogIHZhciBzdGFydFJlc3VsdCA9IHN0YXJ0QWxnb3JpdGhtKCk7CiAgdXBvblByb21pc2UocHJvbWlzZVJlc29sdmVkV2l0aChzdGFydFJlc3VsdCksIGZ1bmN0aW9uICgpIHsKICAgY29udHJvbGxlci5fc3RhcnRlZCA9IHRydWU7CiAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDYWxsUHVsbElmTmVlZGVkKGNvbnRyb2xsZXIpOwogIH0sIGZ1bmN0aW9uIChyKSB7CiAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFcnJvcihjb250cm9sbGVyLCByKTsKICB9KTsKIH0KIGZ1bmN0aW9uIFNldFVwUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckZyb21VbmRlcmx5aW5nU291cmNlKHN0cmVhbSwgdW5kZXJseWluZ1NvdXJjZSwgaGlnaFdhdGVyTWFyaywgc2l6ZUFsZ29yaXRobSkgewogIHZhciBjb250cm9sbGVyID0gT2JqZWN0LmNyZWF0ZShSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyLnByb3RvdHlwZSk7CiAgZnVuY3Rpb24gc3RhcnRBbGdvcml0aG0oKSB7CiAgIHJldHVybiBJbnZva2VPck5vb3AodW5kZXJseWluZ1NvdXJjZSwgJ3N0YXJ0JywgW2NvbnRyb2xsZXJdKTsKICB9CiAgdmFyIHB1bGxBbGdvcml0aG0gPSBDcmVhdGVBbGdvcml0aG1Gcm9tVW5kZXJseWluZ01ldGhvZCh1bmRlcmx5aW5nU291cmNlLCAncHVsbCcsIDAsIFtjb250cm9sbGVyXSk7CiAgdmFyIGNhbmNlbEFsZ29yaXRobSA9IENyZWF0ZUFsZ29yaXRobUZyb21VbmRlcmx5aW5nTWV0aG9kKHVuZGVybHlpbmdTb3VyY2UsICdjYW5jZWwnLCAxLCBbXSk7CiAgU2V0VXBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyKHN0cmVhbSwgY29udHJvbGxlciwgc3RhcnRBbGdvcml0aG0sIHB1bGxBbGdvcml0aG0sIGNhbmNlbEFsZ29yaXRobSwgaGlnaFdhdGVyTWFyaywgc2l6ZUFsZ29yaXRobSk7CiB9CiBmdW5jdGlvbiBkZWZhdWx0Q29udHJvbGxlckJyYW5kQ2hlY2tFeGNlcHRpb24obmFtZSkgewogIHJldHVybiBuZXcgVHlwZUVycm9yKCJSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyLnByb3RvdHlwZS4iICsgbmFtZSArICIgY2FuIG9ubHkgYmUgdXNlZCBvbiBhIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIiKTsKIH0KIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtVGVlKHN0cmVhbSwgY2xvbmVGb3JCcmFuY2gyKSB7CiAgdmFyIHJlYWRlciA9IEFjcXVpcmVSZWFkYWJsZVN0cmVhbURlZmF1bHRSZWFkZXIoc3RyZWFtKTsKICB2YXIgcmVhZGluZyA9IGZhbHNlOwogIHZhciBjYW5jZWxlZDEgPSBmYWxzZTsKICB2YXIgY2FuY2VsZWQyID0gZmFsc2U7CiAgdmFyIHJlYXNvbjE7CiAgdmFyIHJlYXNvbjI7CiAgdmFyIGJyYW5jaDE7CiAgdmFyIGJyYW5jaDI7CiAgdmFyIHJlc29sdmVDYW5jZWxQcm9taXNlOwogIHZhciBjYW5jZWxQcm9taXNlID0gbmV3UHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgewogICByZXNvbHZlQ2FuY2VsUHJvbWlzZSA9IHJlc29sdmU7CiAgfSk7CiAgZnVuY3Rpb24gcHVsbEFsZ29yaXRobSgpIHsKICAgaWYgKHJlYWRpbmcgPT09IHRydWUpIHsKICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7CiAgIH0KICAgcmVhZGluZyA9IHRydWU7CiAgIHZhciByZWFkUHJvbWlzZSA9IHRyYW5zZm9ybVByb21pc2VXaXRoKFJlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlclJlYWQocmVhZGVyKSwgZnVuY3Rpb24gKHJlc3VsdCkgewogICAgcmVhZGluZyA9IGZhbHNlOwogICAgdmFyIGRvbmUgPSByZXN1bHQuZG9uZTsKICAgIGlmIChkb25lID09PSB0cnVlKSB7CiAgICAgaWYgKGNhbmNlbGVkMSA9PT0gZmFsc2UpIHsKICAgICAgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckNsb3NlKGJyYW5jaDEuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcik7CiAgICAgfQogICAgIGlmIChjYW5jZWxlZDIgPT09IGZhbHNlKSB7CiAgICAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbG9zZShicmFuY2gyLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIpOwogICAgIH0KICAgICByZXR1cm47CiAgICB9CiAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7CiAgICB2YXIgdmFsdWUxID0gdmFsdWU7CiAgICB2YXIgdmFsdWUyID0gdmFsdWU7CiAgICBpZiAoY2FuY2VsZWQxID09PSBmYWxzZSkgewogICAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFbnF1ZXVlKGJyYW5jaDEuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlciwgdmFsdWUxKTsKICAgIH0KICAgIGlmIChjYW5jZWxlZDIgPT09IGZhbHNlKSB7CiAgICAgUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVucXVldWUoYnJhbmNoMi5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyLCB2YWx1ZTIpOwogICAgfQogICB9KTsKICAgc2V0UHJvbWlzZUlzSGFuZGxlZFRvVHJ1ZShyZWFkUHJvbWlzZSk7CiAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7CiAgfQogIGZ1bmN0aW9uIGNhbmNlbDFBbGdvcml0aG0ocmVhc29uKSB7CiAgIGNhbmNlbGVkMSA9IHRydWU7CiAgIHJlYXNvbjEgPSByZWFzb247CiAgIGlmIChjYW5jZWxlZDIgPT09IHRydWUpIHsKICAgIHZhciBjb21wb3NpdGVSZWFzb24gPSBjcmVhdGVBcnJheUZyb21MaXN0KFsKICAgICByZWFzb24xLAogICAgIHJlYXNvbjIKICAgIF0pOwogICAgdmFyIGNhbmNlbFJlc3VsdCA9IFJlYWRhYmxlU3RyZWFtQ2FuY2VsKHN0cmVhbSwgY29tcG9zaXRlUmVhc29uKTsKICAgIHJlc29sdmVDYW5jZWxQcm9taXNlKGNhbmNlbFJlc3VsdCk7CiAgIH0KICAgcmV0dXJuIGNhbmNlbFByb21pc2U7CiAgfQogIGZ1bmN0aW9uIGNhbmNlbDJBbGdvcml0aG0ocmVhc29uKSB7CiAgIGNhbmNlbGVkMiA9IHRydWU7CiAgIHJlYXNvbjIgPSByZWFzb247CiAgIGlmIChjYW5jZWxlZDEgPT09IHRydWUpIHsKICAgIHZhciBjb21wb3NpdGVSZWFzb24gPSBjcmVhdGVBcnJheUZyb21MaXN0KFsKICAgICByZWFzb24xLAogICAgIHJlYXNvbjIKICAgIF0pOwogICAgdmFyIGNhbmNlbFJlc3VsdCA9IFJlYWRhYmxlU3RyZWFtQ2FuY2VsKHN0cmVhbSwgY29tcG9zaXRlUmVhc29uKTsKICAgIHJlc29sdmVDYW5jZWxQcm9taXNlKGNhbmNlbFJlc3VsdCk7CiAgIH0KICAgcmV0dXJuIGNhbmNlbFByb21pc2U7CiAgfQogIGZ1bmN0aW9uIHN0YXJ0QWxnb3JpdGhtKCkgewogIH0KICBicmFuY2gxID0gQ3JlYXRlUmVhZGFibGVTdHJlYW0oc3RhcnRBbGdvcml0aG0sIHB1bGxBbGdvcml0aG0sIGNhbmNlbDFBbGdvcml0aG0pOwogIGJyYW5jaDIgPSBDcmVhdGVSZWFkYWJsZVN0cmVhbShzdGFydEFsZ29yaXRobSwgcHVsbEFsZ29yaXRobSwgY2FuY2VsMkFsZ29yaXRobSk7CiAgdXBvblJlamVjdGlvbihyZWFkZXIuX2Nsb3NlZFByb21pc2UsIGZ1bmN0aW9uIChyKSB7CiAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFcnJvcihicmFuY2gxLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIsIHIpOwogICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRXJyb3IoYnJhbmNoMi5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyLCByKTsKICB9KTsKICByZXR1cm4gWwogICBicmFuY2gxLAogICBicmFuY2gyCiAgXTsKIH0KIHZhciBOdW1iZXJJc0ludGVnZXIgPSBOdW1iZXIuaXNJbnRlZ2VyIHx8IGZ1bmN0aW9uICh2YWx1ZSkgewogIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKHZhbHVlKSAmJiBNYXRoLmZsb29yKHZhbHVlKSA9PT0gdmFsdWU7CiB9OwogdmFyIFJlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3QgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdCgpIHsKICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdCBjYW5ub3QgYmUgdXNlZCBkaXJlY3RseScpOwogIH0KICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdC5wcm90b3R5cGUsICJ2aWV3IiwgewogICBnZXQ6IGZ1bmN0aW9uICgpIHsKICAgIGlmIChJc1JlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3QodGhpcykgPT09IGZhbHNlKSB7CiAgICAgdGhyb3cgYnlvYlJlcXVlc3RCcmFuZENoZWNrRXhjZXB0aW9uKCd2aWV3Jyk7CiAgICB9CiAgICByZXR1cm4gdGhpcy5fdmlldzsKICAgfSwKICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgY29uZmlndXJhYmxlOiB0cnVlCiAgfSk7CiAgUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdC5wcm90b3R5cGUucmVzcG9uZCA9IGZ1bmN0aW9uIChieXRlc1dyaXR0ZW4pIHsKICAgaWYgKElzUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdCh0aGlzKSA9PT0gZmFsc2UpIHsKICAgIHRocm93IGJ5b2JSZXF1ZXN0QnJhbmRDaGVja0V4Y2VwdGlvbigncmVzcG9uZCcpOwogICB9CiAgIGlmICh0aGlzLl9hc3NvY2lhdGVkUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlciA9PT0gdW5kZWZpbmVkKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGlzIEJZT0IgcmVxdWVzdCBoYXMgYmVlbiBpbnZhbGlkYXRlZCcpOwogICB9CiAgIGlmIChJc0RldGFjaGVkQnVmZmVyKHRoaXMuX3ZpZXcuYnVmZmVyKSA9PT0gdHJ1ZSk7CiAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJSZXNwb25kKHRoaXMuX2Fzc29jaWF0ZWRSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLCBieXRlc1dyaXR0ZW4pOwogIH07CiAgUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdC5wcm90b3R5cGUucmVzcG9uZFdpdGhOZXdWaWV3ID0gZnVuY3Rpb24gKHZpZXcpIHsKICAgaWYgKElzUmVhZGFibGVTdHJlYW1CWU9CUmVxdWVzdCh0aGlzKSA9PT0gZmFsc2UpIHsKICAgIHRocm93IGJ5b2JSZXF1ZXN0QnJhbmRDaGVja0V4Y2VwdGlvbigncmVzcG9uZCcpOwogICB9CiAgIGlmICh0aGlzLl9hc3NvY2lhdGVkUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlciA9PT0gdW5kZWZpbmVkKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGlzIEJZT0IgcmVxdWVzdCBoYXMgYmVlbiBpbnZhbGlkYXRlZCcpOwogICB9CiAgIGlmICghQXJyYXlCdWZmZXIuaXNWaWV3KHZpZXcpKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdZb3UgY2FuIG9ubHkgcmVzcG9uZCB3aXRoIGFycmF5IGJ1ZmZlciB2aWV3cycpOwogICB9CiAgIGlmIChJc0RldGFjaGVkQnVmZmVyKHZpZXcuYnVmZmVyKSA9PT0gdHJ1ZSk7CiAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJSZXNwb25kV2l0aE5ld1ZpZXcodGhpcy5fYXNzb2NpYXRlZFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIsIHZpZXcpOwogIH07CiAgcmV0dXJuIFJlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3Q7CiB9KCk7CiB2YXIgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyKCkgewogICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyIGNvbnN0cnVjdG9yIGNhbm5vdCBiZSB1c2VkIGRpcmVjdGx5Jyk7CiAgfQogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZSwgImJ5b2JSZXF1ZXN0IiwgewogICBnZXQ6IGZ1bmN0aW9uICgpIHsKICAgIGlmIChJc1JlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIodGhpcykgPT09IGZhbHNlKSB7CiAgICAgdGhyb3cgYnl0ZVN0cmVhbUNvbnRyb2xsZXJCcmFuZENoZWNrRXhjZXB0aW9uKCdieW9iUmVxdWVzdCcpOwogICAgfQogICAgaWYgKHRoaXMuX2J5b2JSZXF1ZXN0ID09PSB1bmRlZmluZWQgJiYgdGhpcy5fcGVuZGluZ1B1bGxJbnRvcy5sZW5ndGggPiAwKSB7CiAgICAgdmFyIGZpcnN0RGVzY3JpcHRvciA9IHRoaXMuX3BlbmRpbmdQdWxsSW50b3MucGVlaygpOwogICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoZmlyc3REZXNjcmlwdG9yLmJ1ZmZlciwgZmlyc3REZXNjcmlwdG9yLmJ5dGVPZmZzZXQgKyBmaXJzdERlc2NyaXB0b3IuYnl0ZXNGaWxsZWQsIGZpcnN0RGVzY3JpcHRvci5ieXRlTGVuZ3RoIC0gZmlyc3REZXNjcmlwdG9yLmJ5dGVzRmlsbGVkKTsKICAgICB2YXIgYnlvYlJlcXVlc3QgPSBPYmplY3QuY3JlYXRlKFJlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3QucHJvdG90eXBlKTsKICAgICBTZXRVcFJlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3QoYnlvYlJlcXVlc3QsIHRoaXMsIHZpZXcpOwogICAgIHRoaXMuX2J5b2JSZXF1ZXN0ID0gYnlvYlJlcXVlc3Q7CiAgICB9CiAgICByZXR1cm4gdGhpcy5fYnlvYlJlcXVlc3Q7CiAgIH0sCiAgIGVudW1lcmFibGU6IHRydWUsCiAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogIH0pOwogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZSwgImRlc2lyZWRTaXplIiwgewogICBnZXQ6IGZ1bmN0aW9uICgpIHsKICAgIGlmIChJc1JlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIodGhpcykgPT09IGZhbHNlKSB7CiAgICAgdGhyb3cgYnl0ZVN0cmVhbUNvbnRyb2xsZXJCcmFuZENoZWNrRXhjZXB0aW9uKCdkZXNpcmVkU2l6ZScpOwogICAgfQogICAgcmV0dXJuIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJHZXREZXNpcmVkU2l6ZSh0aGlzKTsKICAgfSwKICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgY29uZmlndXJhYmxlOiB0cnVlCiAgfSk7CiAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlci5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7CiAgIGlmIChJc1JlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIodGhpcykgPT09IGZhbHNlKSB7CiAgICB0aHJvdyBieXRlU3RyZWFtQ29udHJvbGxlckJyYW5kQ2hlY2tFeGNlcHRpb24oJ2Nsb3NlJyk7CiAgIH0KICAgaWYgKHRoaXMuX2Nsb3NlUmVxdWVzdGVkID09PSB0cnVlKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgc3RyZWFtIGhhcyBhbHJlYWR5IGJlZW4gY2xvc2VkOyBkbyBub3QgY2xvc2UgaXQgYWdhaW4hJyk7CiAgIH0KICAgdmFyIHN0YXRlID0gdGhpcy5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbS5fc3RhdGU7CiAgIGlmIChzdGF0ZSAhPT0gJ3JlYWRhYmxlJykgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigiVGhlIHN0cmVhbSAoaW4gIiArIHN0YXRlICsgIiBzdGF0ZSkgaXMgbm90IGluIHRoZSByZWFkYWJsZSBzdGF0ZSBhbmQgY2Fubm90IGJlIGNsb3NlZCIpOwogICB9CiAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDbG9zZSh0aGlzKTsKICB9OwogIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlLmVucXVldWUgPSBmdW5jdGlvbiAoY2h1bmspIHsKICAgaWYgKElzUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlcih0aGlzKSA9PT0gZmFsc2UpIHsKICAgIHRocm93IGJ5dGVTdHJlYW1Db250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbignZW5xdWV1ZScpOwogICB9CiAgIGlmICh0aGlzLl9jbG9zZVJlcXVlc3RlZCA9PT0gdHJ1ZSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc3RyZWFtIGlzIGNsb3NlZCBvciBkcmFpbmluZycpOwogICB9CiAgIHZhciBzdGF0ZSA9IHRoaXMuX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW0uX3N0YXRlOwogICBpZiAoc3RhdGUgIT09ICdyZWFkYWJsZScpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoIlRoZSBzdHJlYW0gKGluICIgKyBzdGF0ZSArICIgc3RhdGUpIGlzIG5vdCBpbiB0aGUgcmVhZGFibGUgc3RhdGUgYW5kIGNhbm5vdCBiZSBlbnF1ZXVlZCB0byIpOwogICB9CiAgIGlmICghQXJyYXlCdWZmZXIuaXNWaWV3KGNodW5rKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignWW91IGNhbiBvbmx5IGVucXVldWUgYXJyYXkgYnVmZmVyIHZpZXdzIHdoZW4gdXNpbmcgYSBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyJyk7CiAgIH0KICAgaWYgKElzRGV0YWNoZWRCdWZmZXIoY2h1bmsuYnVmZmVyKSA9PT0gdHJ1ZSk7CiAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJFbnF1ZXVlKHRoaXMsIGNodW5rKTsKICB9OwogIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGUpIHsKICAgaWYgKElzUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlcih0aGlzKSA9PT0gZmFsc2UpIHsKICAgIHRocm93IGJ5dGVTdHJlYW1Db250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbignZXJyb3InKTsKICAgfQogICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRXJyb3IodGhpcywgZSk7CiAgfTsKICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZVtDYW5jZWxTdGVwc10gPSBmdW5jdGlvbiAocmVhc29uKSB7CiAgIGlmICh0aGlzLl9wZW5kaW5nUHVsbEludG9zLmxlbmd0aCA+IDApIHsKICAgIHZhciBmaXJzdERlc2NyaXB0b3IgPSB0aGlzLl9wZW5kaW5nUHVsbEludG9zLnBlZWsoKTsKICAgIGZpcnN0RGVzY3JpcHRvci5ieXRlc0ZpbGxlZCA9IDA7CiAgIH0KICAgUmVzZXRRdWV1ZSh0aGlzKTsKICAgdmFyIHJlc3VsdCA9IHRoaXMuX2NhbmNlbEFsZ29yaXRobShyZWFzb24pOwogICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2xlYXJBbGdvcml0aG1zKHRoaXMpOwogICByZXR1cm4gcmVzdWx0OwogIH07CiAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlci5wcm90b3R5cGVbUHVsbFN0ZXBzXSA9IGZ1bmN0aW9uICgpIHsKICAgdmFyIHN0cmVhbSA9IHRoaXMuX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW07CiAgIGlmICh0aGlzLl9xdWV1ZVRvdGFsU2l6ZSA+IDApIHsKICAgIHZhciBlbnRyeSA9IHRoaXMuX3F1ZXVlLnNoaWZ0KCk7CiAgICB0aGlzLl9xdWV1ZVRvdGFsU2l6ZSAtPSBlbnRyeS5ieXRlTGVuZ3RoOwogICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckhhbmRsZVF1ZXVlRHJhaW4odGhpcyk7CiAgICB2YXIgdmlldyA9IHZvaWQgMDsKICAgIHRyeSB7CiAgICAgdmlldyA9IG5ldyBVaW50OEFycmF5KGVudHJ5LmJ1ZmZlciwgZW50cnkuYnl0ZU9mZnNldCwgZW50cnkuYnl0ZUxlbmd0aCk7CiAgICB9IGNhdGNoICh2aWV3RSkgewogICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKHZpZXdFKTsKICAgIH0KICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKFJlYWRhYmxlU3RyZWFtQ3JlYXRlUmVhZFJlc3VsdCh2aWV3LCBmYWxzZSwgc3RyZWFtLl9yZWFkZXIuX2ZvckF1dGhvckNvZGUpKTsKICAgfQogICB2YXIgYXV0b0FsbG9jYXRlQ2h1bmtTaXplID0gdGhpcy5fYXV0b0FsbG9jYXRlQ2h1bmtTaXplOwogICBpZiAoYXV0b0FsbG9jYXRlQ2h1bmtTaXplICE9PSB1bmRlZmluZWQpIHsKICAgIHZhciBidWZmZXIgPSB2b2lkIDA7CiAgICB0cnkgewogICAgIGJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihhdXRvQWxsb2NhdGVDaHVua1NpemUpOwogICAgfSBjYXRjaCAoYnVmZmVyRSkgewogICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKGJ1ZmZlckUpOwogICAgfQogICAgdmFyIHB1bGxJbnRvRGVzY3JpcHRvciA9IHsKICAgICBidWZmZXI6IGJ1ZmZlciwKICAgICBieXRlT2Zmc2V0OiAwLAogICAgIGJ5dGVMZW5ndGg6IGF1dG9BbGxvY2F0ZUNodW5rU2l6ZSwKICAgICBieXRlc0ZpbGxlZDogMCwKICAgICBlbGVtZW50U2l6ZTogMSwKICAgICBjdG9yOiBVaW50OEFycmF5LAogICAgIHJlYWRlclR5cGU6ICdkZWZhdWx0JwogICAgfTsKICAgIHRoaXMuX3BlbmRpbmdQdWxsSW50b3MucHVzaChwdWxsSW50b0Rlc2NyaXB0b3IpOwogICB9CiAgIHZhciBwcm9taXNlID0gUmVhZGFibGVTdHJlYW1BZGRSZWFkUmVxdWVzdChzdHJlYW0pOwogICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZCh0aGlzKTsKICAgcmV0dXJuIHByb21pc2U7CiAgfTsKICByZXR1cm4gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlcjsKIH0oKTsKIGZ1bmN0aW9uIElzUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlcih4KSB7CiAgaWYgKCF0eXBlSXNPYmplY3QoeCkpIHsKICAgcmV0dXJuIGZhbHNlOwogIH0KICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCAnX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW0nKSkgewogICByZXR1cm4gZmFsc2U7CiAgfQogIHJldHVybiB0cnVlOwogfQogZnVuY3Rpb24gSXNSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0KHgpIHsKICBpZiAoIXR5cGVJc09iamVjdCh4KSkgewogICByZXR1cm4gZmFsc2U7CiAgfQogIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdfYXNzb2NpYXRlZFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXInKSkgewogICByZXR1cm4gZmFsc2U7CiAgfQogIHJldHVybiB0cnVlOwogfQogZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNhbGxQdWxsSWZOZWVkZWQoY29udHJvbGxlcikgewogIHZhciBzaG91bGRQdWxsID0gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclNob3VsZENhbGxQdWxsKGNvbnRyb2xsZXIpOwogIGlmIChzaG91bGRQdWxsID09PSBmYWxzZSkgewogICByZXR1cm47CiAgfQogIGlmIChjb250cm9sbGVyLl9wdWxsaW5nID09PSB0cnVlKSB7CiAgIGNvbnRyb2xsZXIuX3B1bGxBZ2FpbiA9IHRydWU7CiAgIHJldHVybjsKICB9CiAgY29udHJvbGxlci5fcHVsbGluZyA9IHRydWU7CiAgdmFyIHB1bGxQcm9taXNlID0gY29udHJvbGxlci5fcHVsbEFsZ29yaXRobSgpOwogIHVwb25Qcm9taXNlKHB1bGxQcm9taXNlLCBmdW5jdGlvbiAoKSB7CiAgIGNvbnRyb2xsZXIuX3B1bGxpbmcgPSBmYWxzZTsKICAgaWYgKGNvbnRyb2xsZXIuX3B1bGxBZ2FpbiA9PT0gdHJ1ZSkgewogICAgY29udHJvbGxlci5fcHVsbEFnYWluID0gZmFsc2U7CiAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2FsbFB1bGxJZk5lZWRlZChjb250cm9sbGVyKTsKICAgfQogIH0sIGZ1bmN0aW9uIChlKSB7CiAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJFcnJvcihjb250cm9sbGVyLCBlKTsKICB9KTsKIH0KIGZ1bmN0aW9uIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDbGVhclBlbmRpbmdQdWxsSW50b3MoY29udHJvbGxlcikgewogIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJJbnZhbGlkYXRlQllPQlJlcXVlc3QoY29udHJvbGxlcik7CiAgY29udHJvbGxlci5fcGVuZGluZ1B1bGxJbnRvcyA9IG5ldyBTaW1wbGVRdWV1ZSgpOwogfQogZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNvbW1pdFB1bGxJbnRvRGVzY3JpcHRvcihzdHJlYW0sIHB1bGxJbnRvRGVzY3JpcHRvcikgewogIHZhciBkb25lID0gZmFsc2U7CiAgaWYgKHN0cmVhbS5fc3RhdGUgPT09ICdjbG9zZWQnKSB7CiAgIGRvbmUgPSB0cnVlOwogIH0KICB2YXIgZmlsbGVkVmlldyA9IFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDb252ZXJ0UHVsbEludG9EZXNjcmlwdG9yKHB1bGxJbnRvRGVzY3JpcHRvcik7CiAgaWYgKHB1bGxJbnRvRGVzY3JpcHRvci5yZWFkZXJUeXBlID09PSAnZGVmYXVsdCcpIHsKICAgUmVhZGFibGVTdHJlYW1GdWxmaWxsUmVhZFJlcXVlc3Qoc3RyZWFtLCBmaWxsZWRWaWV3LCBkb25lKTsKICB9IGVsc2UgewogICBSZWFkYWJsZVN0cmVhbUZ1bGZpbGxSZWFkSW50b1JlcXVlc3Qoc3RyZWFtLCBmaWxsZWRWaWV3LCBkb25lKTsKICB9CiB9CiBmdW5jdGlvbiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ29udmVydFB1bGxJbnRvRGVzY3JpcHRvcihwdWxsSW50b0Rlc2NyaXB0b3IpIHsKICB2YXIgYnl0ZXNGaWxsZWQgPSBwdWxsSW50b0Rlc2NyaXB0b3IuYnl0ZXNGaWxsZWQ7CiAgdmFyIGVsZW1lbnRTaXplID0gcHVsbEludG9EZXNjcmlwdG9yLmVsZW1lbnRTaXplOwogIHJldHVybiBuZXcgcHVsbEludG9EZXNjcmlwdG9yLmN0b3IocHVsbEludG9EZXNjcmlwdG9yLmJ1ZmZlciwgcHVsbEludG9EZXNjcmlwdG9yLmJ5dGVPZmZzZXQsIGJ5dGVzRmlsbGVkIC8gZWxlbWVudFNpemUpOwogfQogZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckVucXVldWVDaHVua1RvUXVldWUoY29udHJvbGxlciwgYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7CiAgY29udHJvbGxlci5fcXVldWUucHVzaCh7CiAgIGJ1ZmZlcjogYnVmZmVyLAogICBieXRlT2Zmc2V0OiBieXRlT2Zmc2V0LAogICBieXRlTGVuZ3RoOiBieXRlTGVuZ3RoCiAgfSk7CiAgY29udHJvbGxlci5fcXVldWVUb3RhbFNpemUgKz0gYnl0ZUxlbmd0aDsKIH0KIGZ1bmN0aW9uIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJGaWxsUHVsbEludG9EZXNjcmlwdG9yRnJvbVF1ZXVlKGNvbnRyb2xsZXIsIHB1bGxJbnRvRGVzY3JpcHRvcikgewogIHZhciBlbGVtZW50U2l6ZSA9IHB1bGxJbnRvRGVzY3JpcHRvci5lbGVtZW50U2l6ZTsKICB2YXIgY3VycmVudEFsaWduZWRCeXRlcyA9IHB1bGxJbnRvRGVzY3JpcHRvci5ieXRlc0ZpbGxlZCAtIHB1bGxJbnRvRGVzY3JpcHRvci5ieXRlc0ZpbGxlZCAlIGVsZW1lbnRTaXplOwogIHZhciBtYXhCeXRlc1RvQ29weSA9IE1hdGgubWluKGNvbnRyb2xsZXIuX3F1ZXVlVG90YWxTaXplLCBwdWxsSW50b0Rlc2NyaXB0b3IuYnl0ZUxlbmd0aCAtIHB1bGxJbnRvRGVzY3JpcHRvci5ieXRlc0ZpbGxlZCk7CiAgdmFyIG1heEJ5dGVzRmlsbGVkID0gcHVsbEludG9EZXNjcmlwdG9yLmJ5dGVzRmlsbGVkICsgbWF4Qnl0ZXNUb0NvcHk7CiAgdmFyIG1heEFsaWduZWRCeXRlcyA9IG1heEJ5dGVzRmlsbGVkIC0gbWF4Qnl0ZXNGaWxsZWQgJSBlbGVtZW50U2l6ZTsKICB2YXIgdG90YWxCeXRlc1RvQ29weVJlbWFpbmluZyA9IG1heEJ5dGVzVG9Db3B5OwogIHZhciByZWFkeSA9IGZhbHNlOwogIGlmIChtYXhBbGlnbmVkQnl0ZXMgPiBjdXJyZW50QWxpZ25lZEJ5dGVzKSB7CiAgIHRvdGFsQnl0ZXNUb0NvcHlSZW1haW5pbmcgPSBtYXhBbGlnbmVkQnl0ZXMgLSBwdWxsSW50b0Rlc2NyaXB0b3IuYnl0ZXNGaWxsZWQ7CiAgIHJlYWR5ID0gdHJ1ZTsKICB9CiAgdmFyIHF1ZXVlID0gY29udHJvbGxlci5fcXVldWU7CiAgd2hpbGUgKHRvdGFsQnl0ZXNUb0NvcHlSZW1haW5pbmcgPiAwKSB7CiAgIHZhciBoZWFkT2ZRdWV1ZSA9IHF1ZXVlLnBlZWsoKTsKICAgdmFyIGJ5dGVzVG9Db3B5ID0gTWF0aC5taW4odG90YWxCeXRlc1RvQ29weVJlbWFpbmluZywgaGVhZE9mUXVldWUuYnl0ZUxlbmd0aCk7CiAgIHZhciBkZXN0U3RhcnQgPSBwdWxsSW50b0Rlc2NyaXB0b3IuYnl0ZU9mZnNldCArIHB1bGxJbnRvRGVzY3JpcHRvci5ieXRlc0ZpbGxlZDsKICAgQXJyYXlCdWZmZXJDb3B5KHB1bGxJbnRvRGVzY3JpcHRvci5idWZmZXIsIGRlc3RTdGFydCwgaGVhZE9mUXVldWUuYnVmZmVyLCBoZWFkT2ZRdWV1ZS5ieXRlT2Zmc2V0LCBieXRlc1RvQ29weSk7CiAgIGlmIChoZWFkT2ZRdWV1ZS5ieXRlTGVuZ3RoID09PSBieXRlc1RvQ29weSkgewogICAgcXVldWUuc2hpZnQoKTsKICAgfSBlbHNlIHsKICAgIGhlYWRPZlF1ZXVlLmJ5dGVPZmZzZXQgKz0gYnl0ZXNUb0NvcHk7CiAgICBoZWFkT2ZRdWV1ZS5ieXRlTGVuZ3RoIC09IGJ5dGVzVG9Db3B5OwogICB9CiAgIGNvbnRyb2xsZXIuX3F1ZXVlVG90YWxTaXplIC09IGJ5dGVzVG9Db3B5OwogICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRmlsbEhlYWRQdWxsSW50b0Rlc2NyaXB0b3IoY29udHJvbGxlciwgYnl0ZXNUb0NvcHksIHB1bGxJbnRvRGVzY3JpcHRvcik7CiAgIHRvdGFsQnl0ZXNUb0NvcHlSZW1haW5pbmcgLT0gYnl0ZXNUb0NvcHk7CiAgfQogIHJldHVybiByZWFkeTsKIH0KIGZ1bmN0aW9uIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJGaWxsSGVhZFB1bGxJbnRvRGVzY3JpcHRvcihjb250cm9sbGVyLCBzaXplLCBwdWxsSW50b0Rlc2NyaXB0b3IpIHsKICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVySW52YWxpZGF0ZUJZT0JSZXF1ZXN0KGNvbnRyb2xsZXIpOwogIHB1bGxJbnRvRGVzY3JpcHRvci5ieXRlc0ZpbGxlZCArPSBzaXplOwogfQogZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckhhbmRsZVF1ZXVlRHJhaW4oY29udHJvbGxlcikgewogIGlmIChjb250cm9sbGVyLl9xdWV1ZVRvdGFsU2l6ZSA9PT0gMCAmJiBjb250cm9sbGVyLl9jbG9zZVJlcXVlc3RlZCA9PT0gdHJ1ZSkgewogICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ2xlYXJBbGdvcml0aG1zKGNvbnRyb2xsZXIpOwogICBSZWFkYWJsZVN0cmVhbUNsb3NlKGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW0pOwogIH0gZWxzZSB7CiAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDYWxsUHVsbElmTmVlZGVkKGNvbnRyb2xsZXIpOwogIH0KIH0KIGZ1bmN0aW9uIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJJbnZhbGlkYXRlQllPQlJlcXVlc3QoY29udHJvbGxlcikgewogIGlmIChjb250cm9sbGVyLl9ieW9iUmVxdWVzdCA9PT0gdW5kZWZpbmVkKSB7CiAgIHJldHVybjsKICB9CiAgY29udHJvbGxlci5fYnlvYlJlcXVlc3QuX2Fzc29jaWF0ZWRSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyID0gdW5kZWZpbmVkOwogIGNvbnRyb2xsZXIuX2J5b2JSZXF1ZXN0Ll92aWV3ID0gdW5kZWZpbmVkOwogIGNvbnRyb2xsZXIuX2J5b2JSZXF1ZXN0ID0gdW5kZWZpbmVkOwogfQogZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclByb2Nlc3NQdWxsSW50b0Rlc2NyaXB0b3JzVXNpbmdRdWV1ZShjb250cm9sbGVyKSB7CiAgd2hpbGUgKGNvbnRyb2xsZXIuX3BlbmRpbmdQdWxsSW50b3MubGVuZ3RoID4gMCkgewogICBpZiAoY29udHJvbGxlci5fcXVldWVUb3RhbFNpemUgPT09IDApIHsKICAgIHJldHVybjsKICAgfQogICB2YXIgcHVsbEludG9EZXNjcmlwdG9yID0gY29udHJvbGxlci5fcGVuZGluZ1B1bGxJbnRvcy5wZWVrKCk7CiAgIGlmIChSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRmlsbFB1bGxJbnRvRGVzY3JpcHRvckZyb21RdWV1ZShjb250cm9sbGVyLCBwdWxsSW50b0Rlc2NyaXB0b3IpID09PSB0cnVlKSB7CiAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyU2hpZnRQZW5kaW5nUHVsbEludG8oY29udHJvbGxlcik7CiAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyQ29tbWl0UHVsbEludG9EZXNjcmlwdG9yKGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW0sIHB1bGxJbnRvRGVzY3JpcHRvcik7CiAgIH0KICB9CiB9CiBmdW5jdGlvbiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUHVsbEludG8oY29udHJvbGxlciwgdmlldykgewogIHZhciBzdHJlYW0gPSBjb250cm9sbGVyLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtOwogIHZhciBlbGVtZW50U2l6ZSA9IDE7CiAgaWYgKHZpZXcuY29uc3RydWN0b3IgIT09IERhdGFWaWV3KSB7CiAgIGVsZW1lbnRTaXplID0gdmlldy5jb25zdHJ1Y3Rvci5CWVRFU19QRVJfRUxFTUVOVDsKICB9CiAgdmFyIGN0b3IgPSB2aWV3LmNvbnN0cnVjdG9yOwogIHZhciBidWZmZXIgPSBUcmFuc2ZlckFycmF5QnVmZmVyKHZpZXcuYnVmZmVyKTsKICB2YXIgcHVsbEludG9EZXNjcmlwdG9yID0gewogICBidWZmZXI6IGJ1ZmZlciwKICAgYnl0ZU9mZnNldDogdmlldy5ieXRlT2Zmc2V0LAogICBieXRlTGVuZ3RoOiB2aWV3LmJ5dGVMZW5ndGgsCiAgIGJ5dGVzRmlsbGVkOiAwLAogICBlbGVtZW50U2l6ZTogZWxlbWVudFNpemUsCiAgIGN0b3I6IGN0b3IsCiAgIHJlYWRlclR5cGU6ICdieW9iJwogIH07CiAgaWYgKGNvbnRyb2xsZXIuX3BlbmRpbmdQdWxsSW50b3MubGVuZ3RoID4gMCkgewogICBjb250cm9sbGVyLl9wZW5kaW5nUHVsbEludG9zLnB1c2gocHVsbEludG9EZXNjcmlwdG9yKTsKICAgcmV0dXJuIFJlYWRhYmxlU3RyZWFtQWRkUmVhZEludG9SZXF1ZXN0KHN0cmVhbSk7CiAgfQogIGlmIChzdHJlYW0uX3N0YXRlID09PSAnY2xvc2VkJykgewogICB2YXIgZW1wdHlWaWV3ID0gbmV3IGN0b3IocHVsbEludG9EZXNjcmlwdG9yLmJ1ZmZlciwgcHVsbEludG9EZXNjcmlwdG9yLmJ5dGVPZmZzZXQsIDApOwogICByZXR1cm4gcHJvbWlzZVJlc29sdmVkV2l0aChSZWFkYWJsZVN0cmVhbUNyZWF0ZVJlYWRSZXN1bHQoZW1wdHlWaWV3LCB0cnVlLCBzdHJlYW0uX3JlYWRlci5fZm9yQXV0aG9yQ29kZSkpOwogIH0KICBpZiAoY29udHJvbGxlci5fcXVldWVUb3RhbFNpemUgPiAwKSB7CiAgIGlmIChSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRmlsbFB1bGxJbnRvRGVzY3JpcHRvckZyb21RdWV1ZShjb250cm9sbGVyLCBwdWxsSW50b0Rlc2NyaXB0b3IpID09PSB0cnVlKSB7CiAgICB2YXIgZmlsbGVkVmlldyA9IFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDb252ZXJ0UHVsbEludG9EZXNjcmlwdG9yKHB1bGxJbnRvRGVzY3JpcHRvcik7CiAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVySGFuZGxlUXVldWVEcmFpbihjb250cm9sbGVyKTsKICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKFJlYWRhYmxlU3RyZWFtQ3JlYXRlUmVhZFJlc3VsdChmaWxsZWRWaWV3LCBmYWxzZSwgc3RyZWFtLl9yZWFkZXIuX2ZvckF1dGhvckNvZGUpKTsKICAgfQogICBpZiAoY29udHJvbGxlci5fY2xvc2VSZXF1ZXN0ZWQgPT09IHRydWUpIHsKICAgIHZhciBlID0gbmV3IFR5cGVFcnJvcignSW5zdWZmaWNpZW50IGJ5dGVzIHRvIGZpbGwgZWxlbWVudHMgaW4gdGhlIGdpdmVuIGJ1ZmZlcicpOwogICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckVycm9yKGNvbnRyb2xsZXIsIGUpOwogICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgoZSk7CiAgIH0KICB9CiAgY29udHJvbGxlci5fcGVuZGluZ1B1bGxJbnRvcy5wdXNoKHB1bGxJbnRvRGVzY3JpcHRvcik7CiAgdmFyIHByb21pc2UgPSBSZWFkYWJsZVN0cmVhbUFkZFJlYWRJbnRvUmVxdWVzdChzdHJlYW0pOwogIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDYWxsUHVsbElmTmVlZGVkKGNvbnRyb2xsZXIpOwogIHJldHVybiBwcm9taXNlOwogfQogZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclJlc3BvbmRJbkNsb3NlZFN0YXRlKGNvbnRyb2xsZXIsIGZpcnN0RGVzY3JpcHRvcikgewogIGZpcnN0RGVzY3JpcHRvci5idWZmZXIgPSBUcmFuc2ZlckFycmF5QnVmZmVyKGZpcnN0RGVzY3JpcHRvci5idWZmZXIpOwogIHZhciBzdHJlYW0gPSBjb250cm9sbGVyLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtOwogIGlmIChSZWFkYWJsZVN0cmVhbUhhc0JZT0JSZWFkZXIoc3RyZWFtKSA9PT0gdHJ1ZSkgewogICB3aGlsZSAoUmVhZGFibGVTdHJlYW1HZXROdW1SZWFkSW50b1JlcXVlc3RzKHN0cmVhbSkgPiAwKSB7CiAgICB2YXIgcHVsbEludG9EZXNjcmlwdG9yID0gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclNoaWZ0UGVuZGluZ1B1bGxJbnRvKGNvbnRyb2xsZXIpOwogICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNvbW1pdFB1bGxJbnRvRGVzY3JpcHRvcihzdHJlYW0sIHB1bGxJbnRvRGVzY3JpcHRvcik7CiAgIH0KICB9CiB9CiBmdW5jdGlvbiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUmVzcG9uZEluUmVhZGFibGVTdGF0ZShjb250cm9sbGVyLCBieXRlc1dyaXR0ZW4sIHB1bGxJbnRvRGVzY3JpcHRvcikgewogIGlmIChwdWxsSW50b0Rlc2NyaXB0b3IuYnl0ZXNGaWxsZWQgKyBieXRlc1dyaXR0ZW4gPiBwdWxsSW50b0Rlc2NyaXB0b3IuYnl0ZUxlbmd0aCkgewogICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignYnl0ZXNXcml0dGVuIG91dCBvZiByYW5nZScpOwogIH0KICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRmlsbEhlYWRQdWxsSW50b0Rlc2NyaXB0b3IoY29udHJvbGxlciwgYnl0ZXNXcml0dGVuLCBwdWxsSW50b0Rlc2NyaXB0b3IpOwogIGlmIChwdWxsSW50b0Rlc2NyaXB0b3IuYnl0ZXNGaWxsZWQgPCBwdWxsSW50b0Rlc2NyaXB0b3IuZWxlbWVudFNpemUpIHsKICAgcmV0dXJuOwogIH0KICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyU2hpZnRQZW5kaW5nUHVsbEludG8oY29udHJvbGxlcik7CiAgdmFyIHJlbWFpbmRlclNpemUgPSBwdWxsSW50b0Rlc2NyaXB0b3IuYnl0ZXNGaWxsZWQgJSBwdWxsSW50b0Rlc2NyaXB0b3IuZWxlbWVudFNpemU7CiAgaWYgKHJlbWFpbmRlclNpemUgPiAwKSB7CiAgIHZhciBlbmQgPSBwdWxsSW50b0Rlc2NyaXB0b3IuYnl0ZU9mZnNldCArIHB1bGxJbnRvRGVzY3JpcHRvci5ieXRlc0ZpbGxlZDsKICAgdmFyIHJlbWFpbmRlciA9IHB1bGxJbnRvRGVzY3JpcHRvci5idWZmZXIuc2xpY2UoZW5kIC0gcmVtYWluZGVyU2l6ZSwgZW5kKTsKICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckVucXVldWVDaHVua1RvUXVldWUoY29udHJvbGxlciwgcmVtYWluZGVyLCAwLCByZW1haW5kZXIuYnl0ZUxlbmd0aCk7CiAgfQogIHB1bGxJbnRvRGVzY3JpcHRvci5idWZmZXIgPSBUcmFuc2ZlckFycmF5QnVmZmVyKHB1bGxJbnRvRGVzY3JpcHRvci5idWZmZXIpOwogIHB1bGxJbnRvRGVzY3JpcHRvci5ieXRlc0ZpbGxlZCAtPSByZW1haW5kZXJTaXplOwogIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDb21taXRQdWxsSW50b0Rlc2NyaXB0b3IoY29udHJvbGxlci5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbSwgcHVsbEludG9EZXNjcmlwdG9yKTsKICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUHJvY2Vzc1B1bGxJbnRvRGVzY3JpcHRvcnNVc2luZ1F1ZXVlKGNvbnRyb2xsZXIpOwogfQogZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclJlc3BvbmRJbnRlcm5hbChjb250cm9sbGVyLCBieXRlc1dyaXR0ZW4pIHsKICB2YXIgZmlyc3REZXNjcmlwdG9yID0gY29udHJvbGxlci5fcGVuZGluZ1B1bGxJbnRvcy5wZWVrKCk7CiAgdmFyIHN0cmVhbSA9IGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW07CiAgaWYgKHN0cmVhbS5fc3RhdGUgPT09ICdjbG9zZWQnKSB7CiAgIGlmIChieXRlc1dyaXR0ZW4gIT09IDApIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2J5dGVzV3JpdHRlbiBtdXN0IGJlIDAgd2hlbiBjYWxsaW5nIHJlc3BvbmQoKSBvbiBhIGNsb3NlZCBzdHJlYW0nKTsKICAgfQogICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUmVzcG9uZEluQ2xvc2VkU3RhdGUoY29udHJvbGxlciwgZmlyc3REZXNjcmlwdG9yKTsKICB9IGVsc2UgewogICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUmVzcG9uZEluUmVhZGFibGVTdGF0ZShjb250cm9sbGVyLCBieXRlc1dyaXR0ZW4sIGZpcnN0RGVzY3JpcHRvcik7CiAgfQogIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDYWxsUHVsbElmTmVlZGVkKGNvbnRyb2xsZXIpOwogfQogZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclNoaWZ0UGVuZGluZ1B1bGxJbnRvKGNvbnRyb2xsZXIpIHsKICB2YXIgZGVzY3JpcHRvciA9IGNvbnRyb2xsZXIuX3BlbmRpbmdQdWxsSW50b3Muc2hpZnQoKTsKICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVySW52YWxpZGF0ZUJZT0JSZXF1ZXN0KGNvbnRyb2xsZXIpOwogIHJldHVybiBkZXNjcmlwdG9yOwogfQogZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclNob3VsZENhbGxQdWxsKGNvbnRyb2xsZXIpIHsKICB2YXIgc3RyZWFtID0gY29udHJvbGxlci5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbTsKICBpZiAoc3RyZWFtLl9zdGF0ZSAhPT0gJ3JlYWRhYmxlJykgewogICByZXR1cm4gZmFsc2U7CiAgfQogIGlmIChjb250cm9sbGVyLl9jbG9zZVJlcXVlc3RlZCA9PT0gdHJ1ZSkgewogICByZXR1cm4gZmFsc2U7CiAgfQogIGlmIChjb250cm9sbGVyLl9zdGFydGVkID09PSBmYWxzZSkgewogICByZXR1cm4gZmFsc2U7CiAgfQogIGlmIChSZWFkYWJsZVN0cmVhbUhhc0RlZmF1bHRSZWFkZXIoc3RyZWFtKSA9PT0gdHJ1ZSAmJiBSZWFkYWJsZVN0cmVhbUdldE51bVJlYWRSZXF1ZXN0cyhzdHJlYW0pID4gMCkgewogICByZXR1cm4gdHJ1ZTsKICB9CiAgaWYgKFJlYWRhYmxlU3RyZWFtSGFzQllPQlJlYWRlcihzdHJlYW0pID09PSB0cnVlICYmIFJlYWRhYmxlU3RyZWFtR2V0TnVtUmVhZEludG9SZXF1ZXN0cyhzdHJlYW0pID4gMCkgewogICByZXR1cm4gdHJ1ZTsKICB9CiAgdmFyIGRlc2lyZWRTaXplID0gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckdldERlc2lyZWRTaXplKGNvbnRyb2xsZXIpOwogIGlmIChkZXNpcmVkU2l6ZSA+IDApIHsKICAgcmV0dXJuIHRydWU7CiAgfQogIHJldHVybiBmYWxzZTsKIH0KIGZ1bmN0aW9uIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMoY29udHJvbGxlcikgewogIGNvbnRyb2xsZXIuX3B1bGxBbGdvcml0aG0gPSB1bmRlZmluZWQ7CiAgY29udHJvbGxlci5fY2FuY2VsQWxnb3JpdGhtID0gdW5kZWZpbmVkOwogfQogZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNsb3NlKGNvbnRyb2xsZXIpIHsKICB2YXIgc3RyZWFtID0gY29udHJvbGxlci5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbTsKICBpZiAoY29udHJvbGxlci5fcXVldWVUb3RhbFNpemUgPiAwKSB7CiAgIGNvbnRyb2xsZXIuX2Nsb3NlUmVxdWVzdGVkID0gdHJ1ZTsKICAgcmV0dXJuOwogIH0KICBpZiAoY29udHJvbGxlci5fcGVuZGluZ1B1bGxJbnRvcy5sZW5ndGggPiAwKSB7CiAgIHZhciBmaXJzdFBlbmRpbmdQdWxsSW50byA9IGNvbnRyb2xsZXIuX3BlbmRpbmdQdWxsSW50b3MucGVlaygpOwogICBpZiAoZmlyc3RQZW5kaW5nUHVsbEludG8uYnl0ZXNGaWxsZWQgPiAwKSB7CiAgICB2YXIgZSA9IG5ldyBUeXBlRXJyb3IoJ0luc3VmZmljaWVudCBieXRlcyB0byBmaWxsIGVsZW1lbnRzIGluIHRoZSBnaXZlbiBidWZmZXInKTsKICAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJFcnJvcihjb250cm9sbGVyLCBlKTsKICAgIHRocm93IGU7CiAgIH0KICB9CiAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNsZWFyQWxnb3JpdGhtcyhjb250cm9sbGVyKTsKICBSZWFkYWJsZVN0cmVhbUNsb3NlKHN0cmVhbSk7CiB9CiBmdW5jdGlvbiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRW5xdWV1ZShjb250cm9sbGVyLCBjaHVuaykgewogIHZhciBzdHJlYW0gPSBjb250cm9sbGVyLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtOwogIHZhciBidWZmZXIgPSBjaHVuay5idWZmZXI7CiAgdmFyIGJ5dGVPZmZzZXQgPSBjaHVuay5ieXRlT2Zmc2V0OwogIHZhciBieXRlTGVuZ3RoID0gY2h1bmsuYnl0ZUxlbmd0aDsKICB2YXIgdHJhbnNmZXJyZWRCdWZmZXIgPSBUcmFuc2ZlckFycmF5QnVmZmVyKGJ1ZmZlcik7CiAgaWYgKFJlYWRhYmxlU3RyZWFtSGFzRGVmYXVsdFJlYWRlcihzdHJlYW0pID09PSB0cnVlKSB7CiAgIGlmIChSZWFkYWJsZVN0cmVhbUdldE51bVJlYWRSZXF1ZXN0cyhzdHJlYW0pID09PSAwKSB7CiAgICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRW5xdWV1ZUNodW5rVG9RdWV1ZShjb250cm9sbGVyLCB0cmFuc2ZlcnJlZEJ1ZmZlciwgYnl0ZU9mZnNldCwgYnl0ZUxlbmd0aCk7CiAgIH0gZWxzZSB7CiAgICB2YXIgdHJhbnNmZXJyZWRWaWV3ID0gbmV3IFVpbnQ4QXJyYXkodHJhbnNmZXJyZWRCdWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpOwogICAgUmVhZGFibGVTdHJlYW1GdWxmaWxsUmVhZFJlcXVlc3Qoc3RyZWFtLCB0cmFuc2ZlcnJlZFZpZXcsIGZhbHNlKTsKICAgfQogIH0gZWxzZSBpZiAoUmVhZGFibGVTdHJlYW1IYXNCWU9CUmVhZGVyKHN0cmVhbSkgPT09IHRydWUpIHsKICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckVucXVldWVDaHVua1RvUXVldWUoY29udHJvbGxlciwgdHJhbnNmZXJyZWRCdWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpOwogICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUHJvY2Vzc1B1bGxJbnRvRGVzY3JpcHRvcnNVc2luZ1F1ZXVlKGNvbnRyb2xsZXIpOwogIH0gZWxzZSB7CiAgIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJFbnF1ZXVlQ2h1bmtUb1F1ZXVlKGNvbnRyb2xsZXIsIHRyYW5zZmVycmVkQnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKTsKICB9CiAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNhbGxQdWxsSWZOZWVkZWQoY29udHJvbGxlcik7CiB9CiBmdW5jdGlvbiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRXJyb3IoY29udHJvbGxlciwgZSkgewogIHZhciBzdHJlYW0gPSBjb250cm9sbGVyLl9jb250cm9sbGVkUmVhZGFibGVCeXRlU3RyZWFtOwogIGlmIChzdHJlYW0uX3N0YXRlICE9PSAncmVhZGFibGUnKSB7CiAgIHJldHVybjsKICB9CiAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNsZWFyUGVuZGluZ1B1bGxJbnRvcyhjb250cm9sbGVyKTsKICBSZXNldFF1ZXVlKGNvbnRyb2xsZXIpOwogIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMoY29udHJvbGxlcik7CiAgUmVhZGFibGVTdHJlYW1FcnJvcihzdHJlYW0sIGUpOwogfQogZnVuY3Rpb24gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckdldERlc2lyZWRTaXplKGNvbnRyb2xsZXIpIHsKICB2YXIgc3RyZWFtID0gY29udHJvbGxlci5fY29udHJvbGxlZFJlYWRhYmxlQnl0ZVN0cmVhbTsKICB2YXIgc3RhdGUgPSBzdHJlYW0uX3N0YXRlOwogIGlmIChzdGF0ZSA9PT0gJ2Vycm9yZWQnKSB7CiAgIHJldHVybiBudWxsOwogIH0KICBpZiAoc3RhdGUgPT09ICdjbG9zZWQnKSB7CiAgIHJldHVybiAwOwogIH0KICByZXR1cm4gY29udHJvbGxlci5fc3RyYXRlZ3lIV00gLSBjb250cm9sbGVyLl9xdWV1ZVRvdGFsU2l6ZTsKIH0KIGZ1bmN0aW9uIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJSZXNwb25kKGNvbnRyb2xsZXIsIGJ5dGVzV3JpdHRlbikgewogIGJ5dGVzV3JpdHRlbiA9IE51bWJlcihieXRlc1dyaXR0ZW4pOwogIGlmIChJc0Zpbml0ZU5vbk5lZ2F0aXZlTnVtYmVyKGJ5dGVzV3JpdHRlbikgPT09IGZhbHNlKSB7CiAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdieXRlc1dyaXR0ZW4gbXVzdCBiZSBhIGZpbml0ZScpOwogIH0KICBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUmVzcG9uZEludGVybmFsKGNvbnRyb2xsZXIsIGJ5dGVzV3JpdHRlbik7CiB9CiBmdW5jdGlvbiBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyUmVzcG9uZFdpdGhOZXdWaWV3KGNvbnRyb2xsZXIsIHZpZXcpIHsKICB2YXIgZmlyc3REZXNjcmlwdG9yID0gY29udHJvbGxlci5fcGVuZGluZ1B1bGxJbnRvcy5wZWVrKCk7CiAgaWYgKGZpcnN0RGVzY3JpcHRvci5ieXRlT2Zmc2V0ICsgZmlyc3REZXNjcmlwdG9yLmJ5dGVzRmlsbGVkICE9PSB2aWV3LmJ5dGVPZmZzZXQpIHsKICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSByZWdpb24gc3BlY2lmaWVkIGJ5IHZpZXcgZG9lcyBub3QgbWF0Y2ggYnlvYlJlcXVlc3QnKTsKICB9CiAgaWYgKGZpcnN0RGVzY3JpcHRvci5ieXRlTGVuZ3RoICE9PSB2aWV3LmJ5dGVMZW5ndGgpIHsKICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSBidWZmZXIgb2YgdmlldyBoYXMgZGlmZmVyZW50IGNhcGFjaXR5IHRoYW4gYnlvYlJlcXVlc3QnKTsKICB9CiAgZmlyc3REZXNjcmlwdG9yLmJ1ZmZlciA9IHZpZXcuYnVmZmVyOwogIFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJSZXNwb25kSW50ZXJuYWwoY29udHJvbGxlciwgdmlldy5ieXRlTGVuZ3RoKTsKIH0KIGZ1bmN0aW9uIFNldFVwUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlcihzdHJlYW0sIGNvbnRyb2xsZXIsIHN0YXJ0QWxnb3JpdGhtLCBwdWxsQWxnb3JpdGhtLCBjYW5jZWxBbGdvcml0aG0sIGhpZ2hXYXRlck1hcmssIGF1dG9BbGxvY2F0ZUNodW5rU2l6ZSkgewogIGNvbnRyb2xsZXIuX2NvbnRyb2xsZWRSZWFkYWJsZUJ5dGVTdHJlYW0gPSBzdHJlYW07CiAgY29udHJvbGxlci5fcHVsbEFnYWluID0gZmFsc2U7CiAgY29udHJvbGxlci5fcHVsbGluZyA9IGZhbHNlOwogIGNvbnRyb2xsZXIuX2J5b2JSZXF1ZXN0ID0gdW5kZWZpbmVkOwogIGNvbnRyb2xsZXIuX3F1ZXVlID0gY29udHJvbGxlci5fcXVldWVUb3RhbFNpemUgPSB1bmRlZmluZWQ7CiAgUmVzZXRRdWV1ZShjb250cm9sbGVyKTsKICBjb250cm9sbGVyLl9jbG9zZVJlcXVlc3RlZCA9IGZhbHNlOwogIGNvbnRyb2xsZXIuX3N0YXJ0ZWQgPSBmYWxzZTsKICBjb250cm9sbGVyLl9zdHJhdGVneUhXTSA9IFZhbGlkYXRlQW5kTm9ybWFsaXplSGlnaFdhdGVyTWFyayhoaWdoV2F0ZXJNYXJrKTsKICBjb250cm9sbGVyLl9wdWxsQWxnb3JpdGhtID0gcHVsbEFsZ29yaXRobTsKICBjb250cm9sbGVyLl9jYW5jZWxBbGdvcml0aG0gPSBjYW5jZWxBbGdvcml0aG07CiAgY29udHJvbGxlci5fYXV0b0FsbG9jYXRlQ2h1bmtTaXplID0gYXV0b0FsbG9jYXRlQ2h1bmtTaXplOwogIGNvbnRyb2xsZXIuX3BlbmRpbmdQdWxsSW50b3MgPSBuZXcgU2ltcGxlUXVldWUoKTsKICBzdHJlYW0uX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlciA9IGNvbnRyb2xsZXI7CiAgdmFyIHN0YXJ0UmVzdWx0ID0gc3RhcnRBbGdvcml0aG0oKTsKICB1cG9uUHJvbWlzZShwcm9taXNlUmVzb2x2ZWRXaXRoKHN0YXJ0UmVzdWx0KSwgZnVuY3Rpb24gKCkgewogICBjb250cm9sbGVyLl9zdGFydGVkID0gdHJ1ZTsKICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckNhbGxQdWxsSWZOZWVkZWQoY29udHJvbGxlcik7CiAgfSwgZnVuY3Rpb24gKHIpIHsKICAgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlckVycm9yKGNvbnRyb2xsZXIsIHIpOwogIH0pOwogfQogZnVuY3Rpb24gU2V0VXBSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyRnJvbVVuZGVybHlpbmdTb3VyY2Uoc3RyZWFtLCB1bmRlcmx5aW5nQnl0ZVNvdXJjZSwgaGlnaFdhdGVyTWFyaykgewogIHZhciBjb250cm9sbGVyID0gT2JqZWN0LmNyZWF0ZShSZWFkYWJsZUJ5dGVTdHJlYW1Db250cm9sbGVyLnByb3RvdHlwZSk7CiAgZnVuY3Rpb24gc3RhcnRBbGdvcml0aG0oKSB7CiAgIHJldHVybiBJbnZva2VPck5vb3AodW5kZXJseWluZ0J5dGVTb3VyY2UsICdzdGFydCcsIFtjb250cm9sbGVyXSk7CiAgfQogIHZhciBwdWxsQWxnb3JpdGhtID0gQ3JlYXRlQWxnb3JpdGhtRnJvbVVuZGVybHlpbmdNZXRob2QodW5kZXJseWluZ0J5dGVTb3VyY2UsICdwdWxsJywgMCwgW2NvbnRyb2xsZXJdKTsKICB2YXIgY2FuY2VsQWxnb3JpdGhtID0gQ3JlYXRlQWxnb3JpdGhtRnJvbVVuZGVybHlpbmdNZXRob2QodW5kZXJseWluZ0J5dGVTb3VyY2UsICdjYW5jZWwnLCAxLCBbXSk7CiAgdmFyIGF1dG9BbGxvY2F0ZUNodW5rU2l6ZSA9IHVuZGVybHlpbmdCeXRlU291cmNlLmF1dG9BbGxvY2F0ZUNodW5rU2l6ZTsKICBpZiAoYXV0b0FsbG9jYXRlQ2h1bmtTaXplICE9PSB1bmRlZmluZWQpIHsKICAgYXV0b0FsbG9jYXRlQ2h1bmtTaXplID0gTnVtYmVyKGF1dG9BbGxvY2F0ZUNodW5rU2l6ZSk7CiAgIGlmIChOdW1iZXJJc0ludGVnZXIoYXV0b0FsbG9jYXRlQ2h1bmtTaXplKSA9PT0gZmFsc2UgfHwgYXV0b0FsbG9jYXRlQ2h1bmtTaXplIDw9IDApIHsKICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdhdXRvQWxsb2NhdGVDaHVua1NpemUgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXInKTsKICAgfQogIH0KICBTZXRVcFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIoc3RyZWFtLCBjb250cm9sbGVyLCBzdGFydEFsZ29yaXRobSwgcHVsbEFsZ29yaXRobSwgY2FuY2VsQWxnb3JpdGhtLCBoaWdoV2F0ZXJNYXJrLCBhdXRvQWxsb2NhdGVDaHVua1NpemUpOwogfQogZnVuY3Rpb24gU2V0VXBSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0KHJlcXVlc3QsIGNvbnRyb2xsZXIsIHZpZXcpIHsKICByZXF1ZXN0Ll9hc3NvY2lhdGVkUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlciA9IGNvbnRyb2xsZXI7CiAgcmVxdWVzdC5fdmlldyA9IHZpZXc7CiB9CiBmdW5jdGlvbiBieW9iUmVxdWVzdEJyYW5kQ2hlY2tFeGNlcHRpb24obmFtZSkgewogIHJldHVybiBuZXcgVHlwZUVycm9yKCJSZWFkYWJsZVN0cmVhbUJZT0JSZXF1ZXN0LnByb3RvdHlwZS4iICsgbmFtZSArICIgY2FuIG9ubHkgYmUgdXNlZCBvbiBhIFJlYWRhYmxlU3RyZWFtQllPQlJlcXVlc3QiKTsKIH0KIGZ1bmN0aW9uIGJ5dGVTdHJlYW1Db250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbihuYW1lKSB7CiAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoIlJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIucHJvdG90eXBlLiIgKyBuYW1lICsgIiBjYW4gb25seSBiZSB1c2VkIG9uIGEgUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlciIpOwogfQogZnVuY3Rpb24gQWNxdWlyZVJlYWRhYmxlU3RyZWFtQllPQlJlYWRlcihzdHJlYW0sIGZvckF1dGhvckNvZGUpIHsKICBpZiAoZm9yQXV0aG9yQ29kZSA9PT0gdm9pZCAwKSB7CiAgIGZvckF1dGhvckNvZGUgPSBmYWxzZTsKICB9CiAgdmFyIHJlYWRlciA9IG5ldyBSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXIoc3RyZWFtKTsKICByZWFkZXIuX2ZvckF1dGhvckNvZGUgPSBmb3JBdXRob3JDb2RlOwogIHJldHVybiByZWFkZXI7CiB9CiBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbUFkZFJlYWRJbnRvUmVxdWVzdChzdHJlYW0pIHsKICB2YXIgcHJvbWlzZSA9IG5ld1Byb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICB2YXIgcmVhZEludG9SZXF1ZXN0ID0gewogICAgX3Jlc29sdmU6IHJlc29sdmUsCiAgICBfcmVqZWN0OiByZWplY3QKICAgfTsKICAgc3RyZWFtLl9yZWFkZXIuX3JlYWRJbnRvUmVxdWVzdHMucHVzaChyZWFkSW50b1JlcXVlc3QpOwogIH0pOwogIHJldHVybiBwcm9taXNlOwogfQogZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1GdWxmaWxsUmVhZEludG9SZXF1ZXN0KHN0cmVhbSwgY2h1bmssIGRvbmUpIHsKICB2YXIgcmVhZGVyID0gc3RyZWFtLl9yZWFkZXI7CiAgdmFyIHJlYWRJbnRvUmVxdWVzdCA9IHJlYWRlci5fcmVhZEludG9SZXF1ZXN0cy5zaGlmdCgpOwogIHJlYWRJbnRvUmVxdWVzdC5fcmVzb2x2ZShSZWFkYWJsZVN0cmVhbUNyZWF0ZVJlYWRSZXN1bHQoY2h1bmssIGRvbmUsIHJlYWRlci5fZm9yQXV0aG9yQ29kZSkpOwogfQogZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1HZXROdW1SZWFkSW50b1JlcXVlc3RzKHN0cmVhbSkgewogIHJldHVybiBzdHJlYW0uX3JlYWRlci5fcmVhZEludG9SZXF1ZXN0cy5sZW5ndGg7CiB9CiBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbUhhc0JZT0JSZWFkZXIoc3RyZWFtKSB7CiAgdmFyIHJlYWRlciA9IHN0cmVhbS5fcmVhZGVyOwogIGlmIChyZWFkZXIgPT09IHVuZGVmaW5lZCkgewogICByZXR1cm4gZmFsc2U7CiAgfQogIGlmICghSXNSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXIocmVhZGVyKSkgewogICByZXR1cm4gZmFsc2U7CiAgfQogIHJldHVybiB0cnVlOwogfQogdmFyIFJlYWRhYmxlU3RyZWFtQllPQlJlYWRlciA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXIoc3RyZWFtKSB7CiAgIGlmICghSXNSZWFkYWJsZVN0cmVhbShzdHJlYW0pKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXIgY2FuIG9ubHkgYmUgY29uc3RydWN0ZWQgd2l0aCBhIFJlYWRhYmxlU3RyZWFtIGluc3RhbmNlIGdpdmVuIGEgJyArICdieXRlIHNvdXJjZScpOwogICB9CiAgIGlmIChJc1JlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXIoc3RyZWFtLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXIpID09PSBmYWxzZSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnN0cnVjdCBhIFJlYWRhYmxlU3RyZWFtQllPQlJlYWRlciBmb3IgYSBzdHJlYW0gbm90IGNvbnN0cnVjdGVkIHdpdGggYSBieXRlICcgKyAnc291cmNlJyk7CiAgIH0KICAgaWYgKElzUmVhZGFibGVTdHJlYW1Mb2NrZWQoc3RyZWFtKSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhpcyBzdHJlYW0gaGFzIGFscmVhZHkgYmVlbiBsb2NrZWQgZm9yIGV4Y2x1c2l2ZSByZWFkaW5nIGJ5IGFub3RoZXIgcmVhZGVyJyk7CiAgIH0KICAgUmVhZGFibGVTdHJlYW1SZWFkZXJHZW5lcmljSW5pdGlhbGl6ZSh0aGlzLCBzdHJlYW0pOwogICB0aGlzLl9yZWFkSW50b1JlcXVlc3RzID0gbmV3IFNpbXBsZVF1ZXVlKCk7CiAgfQogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXIucHJvdG90eXBlLCAiY2xvc2VkIiwgewogICBnZXQ6IGZ1bmN0aW9uICgpIHsKICAgIGlmICghSXNSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXIodGhpcykpIHsKICAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChieW9iUmVhZGVyQnJhbmRDaGVja0V4Y2VwdGlvbignY2xvc2VkJykpOwogICAgfQogICAgcmV0dXJuIHRoaXMuX2Nsb3NlZFByb21pc2U7CiAgIH0sCiAgIGVudW1lcmFibGU6IHRydWUsCiAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogIH0pOwogIFJlYWRhYmxlU3RyZWFtQllPQlJlYWRlci5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24gKHJlYXNvbikgewogICBpZiAoIUlzUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyKHRoaXMpKSB7CiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChieW9iUmVhZGVyQnJhbmRDaGVja0V4Y2VwdGlvbignY2FuY2VsJykpOwogICB9CiAgIGlmICh0aGlzLl9vd25lclJlYWRhYmxlU3RyZWFtID09PSB1bmRlZmluZWQpIHsKICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKHJlYWRlckxvY2tFeGNlcHRpb24oJ2NhbmNlbCcpKTsKICAgfQogICByZXR1cm4gUmVhZGFibGVTdHJlYW1SZWFkZXJHZW5lcmljQ2FuY2VsKHRoaXMsIHJlYXNvbik7CiAgfTsKICBSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXIucHJvdG90eXBlLnJlYWQgPSBmdW5jdGlvbiAodmlldykgewogICBpZiAoIUlzUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyKHRoaXMpKSB7CiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChieW9iUmVhZGVyQnJhbmRDaGVja0V4Y2VwdGlvbigncmVhZCcpKTsKICAgfQogICBpZiAodGhpcy5fb3duZXJSZWFkYWJsZVN0cmVhbSA9PT0gdW5kZWZpbmVkKSB7CiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChyZWFkZXJMb2NrRXhjZXB0aW9uKCdyZWFkIGZyb20nKSk7CiAgIH0KICAgaWYgKCFBcnJheUJ1ZmZlci5pc1ZpZXcodmlldykpIHsKICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKG5ldyBUeXBlRXJyb3IoJ3ZpZXcgbXVzdCBiZSBhbiBhcnJheSBidWZmZXIgdmlldycpKTsKICAgfQogICBpZiAoSXNEZXRhY2hlZEJ1ZmZlcih2aWV3LmJ1ZmZlcikgPT09IHRydWUpOwogICBpZiAodmlldy5ieXRlTGVuZ3RoID09PSAwKSB7CiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChuZXcgVHlwZUVycm9yKCd2aWV3IG11c3QgaGF2ZSBub24temVybyBieXRlTGVuZ3RoJykpOwogICB9CiAgIHJldHVybiBSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXJSZWFkKHRoaXMsIHZpZXcpOwogIH07CiAgUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyLnByb3RvdHlwZS5yZWxlYXNlTG9jayA9IGZ1bmN0aW9uICgpIHsKICAgaWYgKCFJc1JlYWRhYmxlU3RyZWFtQllPQlJlYWRlcih0aGlzKSkgewogICAgdGhyb3cgYnlvYlJlYWRlckJyYW5kQ2hlY2tFeGNlcHRpb24oJ3JlbGVhc2VMb2NrJyk7CiAgIH0KICAgaWYgKHRoaXMuX293bmVyUmVhZGFibGVTdHJlYW0gPT09IHVuZGVmaW5lZCkgewogICAgcmV0dXJuOwogICB9CiAgIGlmICh0aGlzLl9yZWFkSW50b1JlcXVlc3RzLmxlbmd0aCA+IDApIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RyaWVkIHRvIHJlbGVhc2UgYSByZWFkZXIgbG9jayB3aGVuIHRoYXQgcmVhZGVyIGhhcyBwZW5kaW5nIHJlYWQoKSBjYWxscyB1bi1zZXR0bGVkJyk7CiAgIH0KICAgUmVhZGFibGVTdHJlYW1SZWFkZXJHZW5lcmljUmVsZWFzZSh0aGlzKTsKICB9OwogIHJldHVybiBSZWFkYWJsZVN0cmVhbUJZT0JSZWFkZXI7CiB9KCk7CiBmdW5jdGlvbiBJc1JlYWRhYmxlU3RyZWFtQllPQlJlYWRlcih4KSB7CiAgaWYgKCF0eXBlSXNPYmplY3QoeCkpIHsKICAgcmV0dXJuIGZhbHNlOwogIH0KICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh4LCAnX3JlYWRJbnRvUmVxdWVzdHMnKSkgewogICByZXR1cm4gZmFsc2U7CiAgfQogIHJldHVybiB0cnVlOwogfQogZnVuY3Rpb24gUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyUmVhZChyZWFkZXIsIHZpZXcpIHsKICB2YXIgc3RyZWFtID0gcmVhZGVyLl9vd25lclJlYWRhYmxlU3RyZWFtOwogIHN0cmVhbS5fZGlzdHVyYmVkID0gdHJ1ZTsKICBpZiAoc3RyZWFtLl9zdGF0ZSA9PT0gJ2Vycm9yZWQnKSB7CiAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKHN0cmVhbS5fc3RvcmVkRXJyb3IpOwogIH0KICByZXR1cm4gUmVhZGFibGVCeXRlU3RyZWFtQ29udHJvbGxlclB1bGxJbnRvKHN0cmVhbS5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyLCB2aWV3KTsKIH0KIGZ1bmN0aW9uIGJ5b2JSZWFkZXJCcmFuZENoZWNrRXhjZXB0aW9uKG5hbWUpIHsKICByZXR1cm4gbmV3IFR5cGVFcnJvcigiUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyLnByb3RvdHlwZS4iICsgbmFtZSArICIgY2FuIG9ubHkgYmUgdXNlZCBvbiBhIFJlYWRhYmxlU3RyZWFtQllPQlJlYWRlciIpOwogfQogdmFyIFJlYWRhYmxlU3RyZWFtID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtKHVuZGVybHlpbmdTb3VyY2UsIHN0cmF0ZWd5KSB7CiAgIGlmICh1bmRlcmx5aW5nU291cmNlID09PSB2b2lkIDApIHsKICAgIHVuZGVybHlpbmdTb3VyY2UgPSB7fTsKICAgfQogICBpZiAoc3RyYXRlZ3kgPT09IHZvaWQgMCkgewogICAgc3RyYXRlZ3kgPSB7fTsKICAgfQogICBJbml0aWFsaXplUmVhZGFibGVTdHJlYW0odGhpcyk7CiAgIHZhciBzaXplID0gc3RyYXRlZ3kuc2l6ZTsKICAgdmFyIGhpZ2hXYXRlck1hcmsgPSBzdHJhdGVneS5oaWdoV2F0ZXJNYXJrOwogICB2YXIgdHlwZSA9IHVuZGVybHlpbmdTb3VyY2UudHlwZTsKICAgdmFyIHR5cGVTdHJpbmcgPSBTdHJpbmcodHlwZSk7CiAgIGlmICh0eXBlU3RyaW5nID09PSAnYnl0ZXMnKSB7CiAgICBpZiAoc2l6ZSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RoZSBzdHJhdGVneSBmb3IgYSBieXRlIHN0cmVhbSBjYW5ub3QgaGF2ZSBhIHNpemUgZnVuY3Rpb24nKTsKICAgIH0KICAgIGlmIChoaWdoV2F0ZXJNYXJrID09PSB1bmRlZmluZWQpIHsKICAgICBoaWdoV2F0ZXJNYXJrID0gMDsKICAgIH0KICAgIGhpZ2hXYXRlck1hcmsgPSBWYWxpZGF0ZUFuZE5vcm1hbGl6ZUhpZ2hXYXRlck1hcmsoaGlnaFdhdGVyTWFyayk7CiAgICBTZXRVcFJlYWRhYmxlQnl0ZVN0cmVhbUNvbnRyb2xsZXJGcm9tVW5kZXJseWluZ1NvdXJjZSh0aGlzLCB1bmRlcmx5aW5nU291cmNlLCBoaWdoV2F0ZXJNYXJrKTsKICAgfSBlbHNlIGlmICh0eXBlID09PSB1bmRlZmluZWQpIHsKICAgIHZhciBzaXplQWxnb3JpdGhtID0gTWFrZVNpemVBbGdvcml0aG1Gcm9tU2l6ZUZ1bmN0aW9uKHNpemUpOwogICAgaWYgKGhpZ2hXYXRlck1hcmsgPT09IHVuZGVmaW5lZCkgewogICAgIGhpZ2hXYXRlck1hcmsgPSAxOwogICAgfQogICAgaGlnaFdhdGVyTWFyayA9IFZhbGlkYXRlQW5kTm9ybWFsaXplSGlnaFdhdGVyTWFyayhoaWdoV2F0ZXJNYXJrKTsKICAgIFNldFVwUmVhZGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckZyb21VbmRlcmx5aW5nU291cmNlKHRoaXMsIHVuZGVybHlpbmdTb3VyY2UsIGhpZ2hXYXRlck1hcmssIHNpemVBbGdvcml0aG0pOwogICB9IGVsc2UgewogICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZSBpcyBzcGVjaWZpZWQnKTsKICAgfQogIH0KICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLCAibG9ja2VkIiwgewogICBnZXQ6IGZ1bmN0aW9uICgpIHsKICAgIGlmIChJc1JlYWRhYmxlU3RyZWFtKHRoaXMpID09PSBmYWxzZSkgewogICAgIHRocm93IHN0cmVhbUJyYW5kQ2hlY2tFeGNlcHRpb24kMSgnbG9ja2VkJyk7CiAgICB9CiAgICByZXR1cm4gSXNSZWFkYWJsZVN0cmVhbUxvY2tlZCh0aGlzKTsKICAgfSwKICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgY29uZmlndXJhYmxlOiB0cnVlCiAgfSk7CiAgUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLmNhbmNlbCA9IGZ1bmN0aW9uIChyZWFzb24pIHsKICAgaWYgKElzUmVhZGFibGVTdHJlYW0odGhpcykgPT09IGZhbHNlKSB7CiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChzdHJlYW1CcmFuZENoZWNrRXhjZXB0aW9uJDEoJ2NhbmNlbCcpKTsKICAgfQogICBpZiAoSXNSZWFkYWJsZVN0cmVhbUxvY2tlZCh0aGlzKSA9PT0gdHJ1ZSkgewogICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgobmV3IFR5cGVFcnJvcignQ2Fubm90IGNhbmNlbCBhIHN0cmVhbSB0aGF0IGFscmVhZHkgaGFzIGEgcmVhZGVyJykpOwogICB9CiAgIHJldHVybiBSZWFkYWJsZVN0cmVhbUNhbmNlbCh0aGlzLCByZWFzb24pOwogIH07CiAgUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLmdldFJlYWRlciA9IGZ1bmN0aW9uIChfYSkgewogICB2YXIgbW9kZSA9IChfYSA9PT0gdm9pZCAwID8ge30gOiBfYSkubW9kZTsKICAgaWYgKElzUmVhZGFibGVTdHJlYW0odGhpcykgPT09IGZhbHNlKSB7CiAgICB0aHJvdyBzdHJlYW1CcmFuZENoZWNrRXhjZXB0aW9uJDEoJ2dldFJlYWRlcicpOwogICB9CiAgIGlmIChtb2RlID09PSB1bmRlZmluZWQpIHsKICAgIHJldHVybiBBY3F1aXJlUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyKHRoaXMsIHRydWUpOwogICB9CiAgIG1vZGUgPSBTdHJpbmcobW9kZSk7CiAgIGlmIChtb2RlID09PSAnYnlvYicpIHsKICAgIHJldHVybiBBY3F1aXJlUmVhZGFibGVTdHJlYW1CWU9CUmVhZGVyKHRoaXMsIHRydWUpOwogICB9CiAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIG1vZGUgaXMgc3BlY2lmaWVkJyk7CiAgfTsKICBSZWFkYWJsZVN0cmVhbS5wcm90b3R5cGUucGlwZVRocm91Z2ggPSBmdW5jdGlvbiAoX2EsIF9iKSB7CiAgIHZhciB3cml0YWJsZSA9IF9hLndyaXRhYmxlLCByZWFkYWJsZSA9IF9hLnJlYWRhYmxlOwogICB2YXIgX2MgPSBfYiA9PT0gdm9pZCAwID8ge30gOiBfYiwgcHJldmVudENsb3NlID0gX2MucHJldmVudENsb3NlLCBwcmV2ZW50QWJvcnQgPSBfYy5wcmV2ZW50QWJvcnQsIHByZXZlbnRDYW5jZWwgPSBfYy5wcmV2ZW50Q2FuY2VsLCBzaWduYWwgPSBfYy5zaWduYWw7CiAgIGlmIChJc1JlYWRhYmxlU3RyZWFtKHRoaXMpID09PSBmYWxzZSkgewogICAgdGhyb3cgc3RyZWFtQnJhbmRDaGVja0V4Y2VwdGlvbiQxKCdwaXBlVGhyb3VnaCcpOwogICB9CiAgIGlmIChJc1dyaXRhYmxlU3RyZWFtKHdyaXRhYmxlKSA9PT0gZmFsc2UpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3dyaXRhYmxlIGFyZ3VtZW50IHRvIHBpcGVUaHJvdWdoIG11c3QgYmUgYSBXcml0YWJsZVN0cmVhbScpOwogICB9CiAgIGlmIChJc1JlYWRhYmxlU3RyZWFtKHJlYWRhYmxlKSA9PT0gZmFsc2UpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlYWRhYmxlIGFyZ3VtZW50IHRvIHBpcGVUaHJvdWdoIG11c3QgYmUgYSBSZWFkYWJsZVN0cmVhbScpOwogICB9CiAgIHByZXZlbnRDbG9zZSA9IEJvb2xlYW4ocHJldmVudENsb3NlKTsKICAgcHJldmVudEFib3J0ID0gQm9vbGVhbihwcmV2ZW50QWJvcnQpOwogICBwcmV2ZW50Q2FuY2VsID0gQm9vbGVhbihwcmV2ZW50Q2FuY2VsKTsKICAgaWYgKHNpZ25hbCAhPT0gdW5kZWZpbmVkICYmICFpc0Fib3J0U2lnbmFsKHNpZ25hbCkpIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlYWRhYmxlU3RyZWFtLnByb3RvdHlwZS5waXBlVGhyb3VnaFwncyBzaWduYWwgb3B0aW9uIG11c3QgYmUgYW4gQWJvcnRTaWduYWwnKTsKICAgfQogICBpZiAoSXNSZWFkYWJsZVN0cmVhbUxvY2tlZCh0aGlzKSA9PT0gdHJ1ZSkgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLnBpcGVUaHJvdWdoIGNhbm5vdCBiZSB1c2VkIG9uIGEgbG9ja2VkIFJlYWRhYmxlU3RyZWFtJyk7CiAgIH0KICAgaWYgKElzV3JpdGFibGVTdHJlYW1Mb2NrZWQod3JpdGFibGUpID09PSB0cnVlKSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWFkYWJsZVN0cmVhbS5wcm90b3R5cGUucGlwZVRocm91Z2ggY2Fubm90IGJlIHVzZWQgb24gYSBsb2NrZWQgV3JpdGFibGVTdHJlYW0nKTsKICAgfQogICB2YXIgcHJvbWlzZSA9IFJlYWRhYmxlU3RyZWFtUGlwZVRvKHRoaXMsIHdyaXRhYmxlLCBwcmV2ZW50Q2xvc2UsIHByZXZlbnRBYm9ydCwgcHJldmVudENhbmNlbCwgc2lnbmFsKTsKICAgc2V0UHJvbWlzZUlzSGFuZGxlZFRvVHJ1ZShwcm9taXNlKTsKICAgcmV0dXJuIHJlYWRhYmxlOwogIH07CiAgUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLnBpcGVUbyA9IGZ1bmN0aW9uIChkZXN0LCBfYSkgewogICB2YXIgX2IgPSBfYSA9PT0gdm9pZCAwID8ge30gOiBfYSwgcHJldmVudENsb3NlID0gX2IucHJldmVudENsb3NlLCBwcmV2ZW50QWJvcnQgPSBfYi5wcmV2ZW50QWJvcnQsIHByZXZlbnRDYW5jZWwgPSBfYi5wcmV2ZW50Q2FuY2VsLCBzaWduYWwgPSBfYi5zaWduYWw7CiAgIGlmIChJc1JlYWRhYmxlU3RyZWFtKHRoaXMpID09PSBmYWxzZSkgewogICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgoc3RyZWFtQnJhbmRDaGVja0V4Y2VwdGlvbiQxKCdwaXBlVG8nKSk7CiAgIH0KICAgaWYgKElzV3JpdGFibGVTdHJlYW0oZGVzdCkgPT09IGZhbHNlKSB7CiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChuZXcgVHlwZUVycm9yKCdSZWFkYWJsZVN0cmVhbS5wcm90b3R5cGUucGlwZVRvXCdzIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBXcml0YWJsZVN0cmVhbScpKTsKICAgfQogICBwcmV2ZW50Q2xvc2UgPSBCb29sZWFuKHByZXZlbnRDbG9zZSk7CiAgIHByZXZlbnRBYm9ydCA9IEJvb2xlYW4ocHJldmVudEFib3J0KTsKICAgcHJldmVudENhbmNlbCA9IEJvb2xlYW4ocHJldmVudENhbmNlbCk7CiAgIGlmIChzaWduYWwgIT09IHVuZGVmaW5lZCAmJiAhaXNBYm9ydFNpZ25hbChzaWduYWwpKSB7CiAgICByZXR1cm4gcHJvbWlzZVJlamVjdGVkV2l0aChuZXcgVHlwZUVycm9yKCdSZWFkYWJsZVN0cmVhbS5wcm90b3R5cGUucGlwZVRvXCdzIHNpZ25hbCBvcHRpb24gbXVzdCBiZSBhbiBBYm9ydFNpZ25hbCcpKTsKICAgfQogICBpZiAoSXNSZWFkYWJsZVN0cmVhbUxvY2tlZCh0aGlzKSA9PT0gdHJ1ZSkgewogICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgobmV3IFR5cGVFcnJvcignUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLnBpcGVUbyBjYW5ub3QgYmUgdXNlZCBvbiBhIGxvY2tlZCBSZWFkYWJsZVN0cmVhbScpKTsKICAgfQogICBpZiAoSXNXcml0YWJsZVN0cmVhbUxvY2tlZChkZXN0KSA9PT0gdHJ1ZSkgewogICAgcmV0dXJuIHByb21pc2VSZWplY3RlZFdpdGgobmV3IFR5cGVFcnJvcignUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLnBpcGVUbyBjYW5ub3QgYmUgdXNlZCBvbiBhIGxvY2tlZCBXcml0YWJsZVN0cmVhbScpKTsKICAgfQogICByZXR1cm4gUmVhZGFibGVTdHJlYW1QaXBlVG8odGhpcywgZGVzdCwgcHJldmVudENsb3NlLCBwcmV2ZW50QWJvcnQsIHByZXZlbnRDYW5jZWwsIHNpZ25hbCk7CiAgfTsKICBSZWFkYWJsZVN0cmVhbS5wcm90b3R5cGUudGVlID0gZnVuY3Rpb24gKCkgewogICBpZiAoSXNSZWFkYWJsZVN0cmVhbSh0aGlzKSA9PT0gZmFsc2UpIHsKICAgIHRocm93IHN0cmVhbUJyYW5kQ2hlY2tFeGNlcHRpb24kMSgndGVlJyk7CiAgIH0KICAgdmFyIGJyYW5jaGVzID0gUmVhZGFibGVTdHJlYW1UZWUodGhpcyk7CiAgIHJldHVybiBjcmVhdGVBcnJheUZyb21MaXN0KGJyYW5jaGVzKTsKICB9OwogIFJlYWRhYmxlU3RyZWFtLnByb3RvdHlwZS5nZXRJdGVyYXRvciA9IGZ1bmN0aW9uIChfYSkgewogICB2YXIgX2IgPSAoX2EgPT09IHZvaWQgMCA/IHt9IDogX2EpLnByZXZlbnRDYW5jZWwsIHByZXZlbnRDYW5jZWwgPSBfYiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfYjsKICAgaWYgKElzUmVhZGFibGVTdHJlYW0odGhpcykgPT09IGZhbHNlKSB7CiAgICB0aHJvdyBzdHJlYW1CcmFuZENoZWNrRXhjZXB0aW9uJDEoJ2dldEl0ZXJhdG9yJyk7CiAgIH0KICAgcmV0dXJuIEFjcXVpcmVSZWFkYWJsZVN0cmVhbUFzeW5jSXRlcmF0b3IodGhpcywgcHJldmVudENhbmNlbCk7CiAgfTsKICByZXR1cm4gUmVhZGFibGVTdHJlYW07CiB9KCk7CiBpZiAodHlwZW9mIFN5bWJvbFBvbHlmaWxsLmFzeW5jSXRlcmF0b3IgPT09ICdzeW1ib2wnKSB7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlYWRhYmxlU3RyZWFtLnByb3RvdHlwZSwgU3ltYm9sUG9seWZpbGwuYXN5bmNJdGVyYXRvciwgewogICB2YWx1ZTogUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLmdldEl0ZXJhdG9yLAogICBlbnVtZXJhYmxlOiBmYWxzZSwKICAgd3JpdGFibGU6IHRydWUsCiAgIGNvbmZpZ3VyYWJsZTogdHJ1ZQogIH0pOwogfQogZnVuY3Rpb24gQ3JlYXRlUmVhZGFibGVTdHJlYW0oc3RhcnRBbGdvcml0aG0sIHB1bGxBbGdvcml0aG0sIGNhbmNlbEFsZ29yaXRobSwgaGlnaFdhdGVyTWFyaywgc2l6ZUFsZ29yaXRobSkgewogIGlmIChoaWdoV2F0ZXJNYXJrID09PSB2b2lkIDApIHsKICAgaGlnaFdhdGVyTWFyayA9IDE7CiAgfQogIGlmIChzaXplQWxnb3JpdGhtID09PSB2b2lkIDApIHsKICAgc2l6ZUFsZ29yaXRobSA9IGZ1bmN0aW9uICgpIHsKICAgIHJldHVybiAxOwogICB9OwogIH0KICB2YXIgc3RyZWFtID0gT2JqZWN0LmNyZWF0ZShSZWFkYWJsZVN0cmVhbS5wcm90b3R5cGUpOwogIEluaXRpYWxpemVSZWFkYWJsZVN0cmVhbShzdHJlYW0pOwogIHZhciBjb250cm9sbGVyID0gT2JqZWN0LmNyZWF0ZShSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyLnByb3RvdHlwZSk7CiAgU2V0VXBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyKHN0cmVhbSwgY29udHJvbGxlciwgc3RhcnRBbGdvcml0aG0sIHB1bGxBbGdvcml0aG0sIGNhbmNlbEFsZ29yaXRobSwgaGlnaFdhdGVyTWFyaywgc2l6ZUFsZ29yaXRobSk7CiAgcmV0dXJuIHN0cmVhbTsKIH0KIGZ1bmN0aW9uIEluaXRpYWxpemVSZWFkYWJsZVN0cmVhbShzdHJlYW0pIHsKICBzdHJlYW0uX3N0YXRlID0gJ3JlYWRhYmxlJzsKICBzdHJlYW0uX3JlYWRlciA9IHVuZGVmaW5lZDsKICBzdHJlYW0uX3N0b3JlZEVycm9yID0gdW5kZWZpbmVkOwogIHN0cmVhbS5fZGlzdHVyYmVkID0gZmFsc2U7CiB9CiBmdW5jdGlvbiBJc1JlYWRhYmxlU3RyZWFtKHgpIHsKICBpZiAoIXR5cGVJc09iamVjdCh4KSkgewogICByZXR1cm4gZmFsc2U7CiAgfQogIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdfcmVhZGFibGVTdHJlYW1Db250cm9sbGVyJykpIHsKICAgcmV0dXJuIGZhbHNlOwogIH0KICByZXR1cm4gdHJ1ZTsKIH0KIGZ1bmN0aW9uIElzUmVhZGFibGVTdHJlYW1Mb2NrZWQoc3RyZWFtKSB7CiAgaWYgKHN0cmVhbS5fcmVhZGVyID09PSB1bmRlZmluZWQpIHsKICAgcmV0dXJuIGZhbHNlOwogIH0KICByZXR1cm4gdHJ1ZTsKIH0KIGZ1bmN0aW9uIFJlYWRhYmxlU3RyZWFtQ2FuY2VsKHN0cmVhbSwgcmVhc29uKSB7CiAgc3RyZWFtLl9kaXN0dXJiZWQgPSB0cnVlOwogIGlmIChzdHJlYW0uX3N0YXRlID09PSAnY2xvc2VkJykgewogICByZXR1cm4gcHJvbWlzZVJlc29sdmVkV2l0aCh1bmRlZmluZWQpOwogIH0KICBpZiAoc3RyZWFtLl9zdGF0ZSA9PT0gJ2Vycm9yZWQnKSB7CiAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKHN0cmVhbS5fc3RvcmVkRXJyb3IpOwogIH0KICBSZWFkYWJsZVN0cmVhbUNsb3NlKHN0cmVhbSk7CiAgdmFyIHNvdXJjZUNhbmNlbFByb21pc2UgPSBzdHJlYW0uX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcltDYW5jZWxTdGVwc10ocmVhc29uKTsKICByZXR1cm4gdHJhbnNmb3JtUHJvbWlzZVdpdGgoc291cmNlQ2FuY2VsUHJvbWlzZSwgbm9vcCk7CiB9CiBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbUNsb3NlKHN0cmVhbSkgewogIHN0cmVhbS5fc3RhdGUgPSAnY2xvc2VkJzsKICB2YXIgcmVhZGVyID0gc3RyZWFtLl9yZWFkZXI7CiAgaWYgKHJlYWRlciA9PT0gdW5kZWZpbmVkKSB7CiAgIHJldHVybjsKICB9CiAgaWYgKElzUmVhZGFibGVTdHJlYW1EZWZhdWx0UmVhZGVyKHJlYWRlcikpIHsKICAgcmVhZGVyLl9yZWFkUmVxdWVzdHMuZm9yRWFjaChmdW5jdGlvbiAocmVhZFJlcXVlc3QpIHsKICAgIHJlYWRSZXF1ZXN0Ll9yZXNvbHZlKFJlYWRhYmxlU3RyZWFtQ3JlYXRlUmVhZFJlc3VsdCh1bmRlZmluZWQsIHRydWUsIHJlYWRlci5fZm9yQXV0aG9yQ29kZSkpOwogICB9KTsKICAgcmVhZGVyLl9yZWFkUmVxdWVzdHMgPSBuZXcgU2ltcGxlUXVldWUoKTsKICB9CiAgZGVmYXVsdFJlYWRlckNsb3NlZFByb21pc2VSZXNvbHZlKHJlYWRlcik7CiB9CiBmdW5jdGlvbiBSZWFkYWJsZVN0cmVhbUVycm9yKHN0cmVhbSwgZSkgewogIHN0cmVhbS5fc3RhdGUgPSAnZXJyb3JlZCc7CiAgc3RyZWFtLl9zdG9yZWRFcnJvciA9IGU7CiAgdmFyIHJlYWRlciA9IHN0cmVhbS5fcmVhZGVyOwogIGlmIChyZWFkZXIgPT09IHVuZGVmaW5lZCkgewogICByZXR1cm47CiAgfQogIGlmIChJc1JlYWRhYmxlU3RyZWFtRGVmYXVsdFJlYWRlcihyZWFkZXIpKSB7CiAgIHJlYWRlci5fcmVhZFJlcXVlc3RzLmZvckVhY2goZnVuY3Rpb24gKHJlYWRSZXF1ZXN0KSB7CiAgICByZWFkUmVxdWVzdC5fcmVqZWN0KGUpOwogICB9KTsKICAgcmVhZGVyLl9yZWFkUmVxdWVzdHMgPSBuZXcgU2ltcGxlUXVldWUoKTsKICB9IGVsc2UgewogICByZWFkZXIuX3JlYWRJbnRvUmVxdWVzdHMuZm9yRWFjaChmdW5jdGlvbiAocmVhZEludG9SZXF1ZXN0KSB7CiAgICByZWFkSW50b1JlcXVlc3QuX3JlamVjdChlKTsKICAgfSk7CiAgIHJlYWRlci5fcmVhZEludG9SZXF1ZXN0cyA9IG5ldyBTaW1wbGVRdWV1ZSgpOwogIH0KICBkZWZhdWx0UmVhZGVyQ2xvc2VkUHJvbWlzZVJlamVjdChyZWFkZXIsIGUpOwogfQogZnVuY3Rpb24gc3RyZWFtQnJhbmRDaGVja0V4Y2VwdGlvbiQxKG5hbWUpIHsKICByZXR1cm4gbmV3IFR5cGVFcnJvcigiUmVhZGFibGVTdHJlYW0ucHJvdG90eXBlLiIgKyBuYW1lICsgIiBjYW4gb25seSBiZSB1c2VkIG9uIGEgUmVhZGFibGVTdHJlYW0iKTsKIH0KIHZhciBCeXRlTGVuZ3RoUXVldWluZ1N0cmF0ZWd5ID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEJ5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3koX2EpIHsKICAgdmFyIGhpZ2hXYXRlck1hcmsgPSBfYS5oaWdoV2F0ZXJNYXJrOwogICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBoaWdoV2F0ZXJNYXJrOwogIH0KICBCeXRlTGVuZ3RoUXVldWluZ1N0cmF0ZWd5LnByb3RvdHlwZS5zaXplID0gZnVuY3Rpb24gKGNodW5rKSB7CiAgIHJldHVybiBjaHVuay5ieXRlTGVuZ3RoOwogIH07CiAgcmV0dXJuIEJ5dGVMZW5ndGhRdWV1aW5nU3RyYXRlZ3k7CiB9KCk7CiB2YXIgQ291bnRRdWV1aW5nU3RyYXRlZ3kgPSBmdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gQ291bnRRdWV1aW5nU3RyYXRlZ3koX2EpIHsKICAgdmFyIGhpZ2hXYXRlck1hcmsgPSBfYS5oaWdoV2F0ZXJNYXJrOwogICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBoaWdoV2F0ZXJNYXJrOwogIH0KICBDb3VudFF1ZXVpbmdTdHJhdGVneS5wcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uICgpIHsKICAgcmV0dXJuIDE7CiAgfTsKICByZXR1cm4gQ291bnRRdWV1aW5nU3RyYXRlZ3k7CiB9KCk7CiB2YXIgVHJhbnNmb3JtU3RyZWFtID0gZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFRyYW5zZm9ybVN0cmVhbSh0cmFuc2Zvcm1lciwgd3JpdGFibGVTdHJhdGVneSwgcmVhZGFibGVTdHJhdGVneSkgewogICBpZiAodHJhbnNmb3JtZXIgPT09IHZvaWQgMCkgewogICAgdHJhbnNmb3JtZXIgPSB7fTsKICAgfQogICBpZiAod3JpdGFibGVTdHJhdGVneSA9PT0gdm9pZCAwKSB7CiAgICB3cml0YWJsZVN0cmF0ZWd5ID0ge307CiAgIH0KICAgaWYgKHJlYWRhYmxlU3RyYXRlZ3kgPT09IHZvaWQgMCkgewogICAgcmVhZGFibGVTdHJhdGVneSA9IHt9OwogICB9CiAgIHZhciB3cml0YWJsZVNpemVGdW5jdGlvbiA9IHdyaXRhYmxlU3RyYXRlZ3kuc2l6ZTsKICAgdmFyIHdyaXRhYmxlSGlnaFdhdGVyTWFyayA9IHdyaXRhYmxlU3RyYXRlZ3kuaGlnaFdhdGVyTWFyazsKICAgdmFyIHJlYWRhYmxlU2l6ZUZ1bmN0aW9uID0gcmVhZGFibGVTdHJhdGVneS5zaXplOwogICB2YXIgcmVhZGFibGVIaWdoV2F0ZXJNYXJrID0gcmVhZGFibGVTdHJhdGVneS5oaWdoV2F0ZXJNYXJrOwogICB2YXIgd3JpdGFibGVUeXBlID0gdHJhbnNmb3JtZXIud3JpdGFibGVUeXBlOwogICBpZiAod3JpdGFibGVUeXBlICE9PSB1bmRlZmluZWQpIHsKICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHdyaXRhYmxlIHR5cGUgc3BlY2lmaWVkJyk7CiAgIH0KICAgdmFyIHdyaXRhYmxlU2l6ZUFsZ29yaXRobSA9IE1ha2VTaXplQWxnb3JpdGhtRnJvbVNpemVGdW5jdGlvbih3cml0YWJsZVNpemVGdW5jdGlvbik7CiAgIGlmICh3cml0YWJsZUhpZ2hXYXRlck1hcmsgPT09IHVuZGVmaW5lZCkgewogICAgd3JpdGFibGVIaWdoV2F0ZXJNYXJrID0gMTsKICAgfQogICB3cml0YWJsZUhpZ2hXYXRlck1hcmsgPSBWYWxpZGF0ZUFuZE5vcm1hbGl6ZUhpZ2hXYXRlck1hcmsod3JpdGFibGVIaWdoV2F0ZXJNYXJrKTsKICAgdmFyIHJlYWRhYmxlVHlwZSA9IHRyYW5zZm9ybWVyLnJlYWRhYmxlVHlwZTsKICAgaWYgKHJlYWRhYmxlVHlwZSAhPT0gdW5kZWZpbmVkKSB7CiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCByZWFkYWJsZSB0eXBlIHNwZWNpZmllZCcpOwogICB9CiAgIHZhciByZWFkYWJsZVNpemVBbGdvcml0aG0gPSBNYWtlU2l6ZUFsZ29yaXRobUZyb21TaXplRnVuY3Rpb24ocmVhZGFibGVTaXplRnVuY3Rpb24pOwogICBpZiAocmVhZGFibGVIaWdoV2F0ZXJNYXJrID09PSB1bmRlZmluZWQpIHsKICAgIHJlYWRhYmxlSGlnaFdhdGVyTWFyayA9IDA7CiAgIH0KICAgcmVhZGFibGVIaWdoV2F0ZXJNYXJrID0gVmFsaWRhdGVBbmROb3JtYWxpemVIaWdoV2F0ZXJNYXJrKHJlYWRhYmxlSGlnaFdhdGVyTWFyayk7CiAgIHZhciBzdGFydFByb21pc2VfcmVzb2x2ZTsKICAgdmFyIHN0YXJ0UHJvbWlzZSA9IG5ld1Byb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgIHN0YXJ0UHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZTsKICAgfSk7CiAgIEluaXRpYWxpemVUcmFuc2Zvcm1TdHJlYW0odGhpcywgc3RhcnRQcm9taXNlLCB3cml0YWJsZUhpZ2hXYXRlck1hcmssIHdyaXRhYmxlU2l6ZUFsZ29yaXRobSwgcmVhZGFibGVIaWdoV2F0ZXJNYXJrLCByZWFkYWJsZVNpemVBbGdvcml0aG0pOwogICBTZXRVcFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyRnJvbVRyYW5zZm9ybWVyKHRoaXMsIHRyYW5zZm9ybWVyKTsKICAgdmFyIHN0YXJ0UmVzdWx0ID0gSW52b2tlT3JOb29wKHRyYW5zZm9ybWVyLCAnc3RhcnQnLCBbdGhpcy5fdHJhbnNmb3JtU3RyZWFtQ29udHJvbGxlcl0pOwogICBzdGFydFByb21pc2VfcmVzb2x2ZShzdGFydFJlc3VsdCk7CiAgfQogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFuc2Zvcm1TdHJlYW0ucHJvdG90eXBlLCAicmVhZGFibGUiLCB7CiAgIGdldDogZnVuY3Rpb24gKCkgewogICAgaWYgKElzVHJhbnNmb3JtU3RyZWFtKHRoaXMpID09PSBmYWxzZSkgewogICAgIHRocm93IHN0cmVhbUJyYW5kQ2hlY2tFeGNlcHRpb24kMigncmVhZGFibGUnKTsKICAgIH0KICAgIHJldHVybiB0aGlzLl9yZWFkYWJsZTsKICAgfSwKICAgZW51bWVyYWJsZTogdHJ1ZSwKICAgY29uZmlndXJhYmxlOiB0cnVlCiAgfSk7CiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFRyYW5zZm9ybVN0cmVhbS5wcm90b3R5cGUsICJ3cml0YWJsZSIsIHsKICAgZ2V0OiBmdW5jdGlvbiAoKSB7CiAgICBpZiAoSXNUcmFuc2Zvcm1TdHJlYW0odGhpcykgPT09IGZhbHNlKSB7CiAgICAgdGhyb3cgc3RyZWFtQnJhbmRDaGVja0V4Y2VwdGlvbiQyKCd3cml0YWJsZScpOwogICAgfQogICAgcmV0dXJuIHRoaXMuX3dyaXRhYmxlOwogICB9LAogICBlbnVtZXJhYmxlOiB0cnVlLAogICBjb25maWd1cmFibGU6IHRydWUKICB9KTsKICByZXR1cm4gVHJhbnNmb3JtU3RyZWFtOwogfSgpOwogZnVuY3Rpb24gSW5pdGlhbGl6ZVRyYW5zZm9ybVN0cmVhbShzdHJlYW0sIHN0YXJ0UHJvbWlzZSwgd3JpdGFibGVIaWdoV2F0ZXJNYXJrLCB3cml0YWJsZVNpemVBbGdvcml0aG0sIHJlYWRhYmxlSGlnaFdhdGVyTWFyaywgcmVhZGFibGVTaXplQWxnb3JpdGhtKSB7CiAgZnVuY3Rpb24gc3RhcnRBbGdvcml0aG0oKSB7CiAgIHJldHVybiBzdGFydFByb21pc2U7CiAgfQogIGZ1bmN0aW9uIHdyaXRlQWxnb3JpdGhtKGNodW5rKSB7CiAgIHJldHVybiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0U2lua1dyaXRlQWxnb3JpdGhtKHN0cmVhbSwgY2h1bmspOwogIH0KICBmdW5jdGlvbiBhYm9ydEFsZ29yaXRobShyZWFzb24pIHsKICAgcmV0dXJuIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRTaW5rQWJvcnRBbGdvcml0aG0oc3RyZWFtLCByZWFzb24pOwogIH0KICBmdW5jdGlvbiBjbG9zZUFsZ29yaXRobSgpIHsKICAgcmV0dXJuIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRTaW5rQ2xvc2VBbGdvcml0aG0oc3RyZWFtKTsKICB9CiAgc3RyZWFtLl93cml0YWJsZSA9IENyZWF0ZVdyaXRhYmxlU3RyZWFtKHN0YXJ0QWxnb3JpdGhtLCB3cml0ZUFsZ29yaXRobSwgY2xvc2VBbGdvcml0aG0sIGFib3J0QWxnb3JpdGhtLCB3cml0YWJsZUhpZ2hXYXRlck1hcmssIHdyaXRhYmxlU2l6ZUFsZ29yaXRobSk7CiAgZnVuY3Rpb24gcHVsbEFsZ29yaXRobSgpIHsKICAgcmV0dXJuIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRTb3VyY2VQdWxsQWxnb3JpdGhtKHN0cmVhbSk7CiAgfQogIGZ1bmN0aW9uIGNhbmNlbEFsZ29yaXRobShyZWFzb24pIHsKICAgVHJhbnNmb3JtU3RyZWFtRXJyb3JXcml0YWJsZUFuZFVuYmxvY2tXcml0ZShzdHJlYW0sIHJlYXNvbik7CiAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7CiAgfQogIHN0cmVhbS5fcmVhZGFibGUgPSBDcmVhdGVSZWFkYWJsZVN0cmVhbShzdGFydEFsZ29yaXRobSwgcHVsbEFsZ29yaXRobSwgY2FuY2VsQWxnb3JpdGhtLCByZWFkYWJsZUhpZ2hXYXRlck1hcmssIHJlYWRhYmxlU2l6ZUFsZ29yaXRobSk7CiAgc3RyZWFtLl9iYWNrcHJlc3N1cmUgPSB1bmRlZmluZWQ7CiAgc3RyZWFtLl9iYWNrcHJlc3N1cmVDaGFuZ2VQcm9taXNlID0gdW5kZWZpbmVkOwogIHN0cmVhbS5fYmFja3ByZXNzdXJlQ2hhbmdlUHJvbWlzZV9yZXNvbHZlID0gdW5kZWZpbmVkOwogIFRyYW5zZm9ybVN0cmVhbVNldEJhY2twcmVzc3VyZShzdHJlYW0sIHRydWUpOwogIHN0cmVhbS5fdHJhbnNmb3JtU3RyZWFtQ29udHJvbGxlciA9IHVuZGVmaW5lZDsKIH0KIGZ1bmN0aW9uIElzVHJhbnNmb3JtU3RyZWFtKHgpIHsKICBpZiAoIXR5cGVJc09iamVjdCh4KSkgewogICByZXR1cm4gZmFsc2U7CiAgfQogIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHgsICdfdHJhbnNmb3JtU3RyZWFtQ29udHJvbGxlcicpKSB7CiAgIHJldHVybiBmYWxzZTsKICB9CiAgcmV0dXJuIHRydWU7CiB9CiBmdW5jdGlvbiBUcmFuc2Zvcm1TdHJlYW1FcnJvcihzdHJlYW0sIGUpIHsKICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyRXJyb3Ioc3RyZWFtLl9yZWFkYWJsZS5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyLCBlKTsKICBUcmFuc2Zvcm1TdHJlYW1FcnJvcldyaXRhYmxlQW5kVW5ibG9ja1dyaXRlKHN0cmVhbSwgZSk7CiB9CiBmdW5jdGlvbiBUcmFuc2Zvcm1TdHJlYW1FcnJvcldyaXRhYmxlQW5kVW5ibG9ja1dyaXRlKHN0cmVhbSwgZSkgewogIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2xlYXJBbGdvcml0aG1zKHN0cmVhbS5fdHJhbnNmb3JtU3RyZWFtQ29udHJvbGxlcik7CiAgV3JpdGFibGVTdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9ySWZOZWVkZWQoc3RyZWFtLl93cml0YWJsZS5fd3JpdGFibGVTdHJlYW1Db250cm9sbGVyLCBlKTsKICBpZiAoc3RyZWFtLl9iYWNrcHJlc3N1cmUgPT09IHRydWUpIHsKICAgVHJhbnNmb3JtU3RyZWFtU2V0QmFja3ByZXNzdXJlKHN0cmVhbSwgZmFsc2UpOwogIH0KIH0KIGZ1bmN0aW9uIFRyYW5zZm9ybVN0cmVhbVNldEJhY2twcmVzc3VyZShzdHJlYW0sIGJhY2twcmVzc3VyZSkgewogIGlmIChzdHJlYW0uX2JhY2twcmVzc3VyZUNoYW5nZVByb21pc2UgIT09IHVuZGVmaW5lZCkgewogICBzdHJlYW0uX2JhY2twcmVzc3VyZUNoYW5nZVByb21pc2VfcmVzb2x2ZSgpOwogIH0KICBzdHJlYW0uX2JhY2twcmVzc3VyZUNoYW5nZVByb21pc2UgPSBuZXdQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7CiAgIHN0cmVhbS5fYmFja3ByZXNzdXJlQ2hhbmdlUHJvbWlzZV9yZXNvbHZlID0gcmVzb2x2ZTsKICB9KTsKICBzdHJlYW0uX2JhY2twcmVzc3VyZSA9IGJhY2twcmVzc3VyZTsKIH0KIHZhciBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlciA9IGZ1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlcigpIHsKICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIgaW5zdGFuY2VzIGNhbm5vdCBiZSBjcmVhdGVkIGRpcmVjdGx5Jyk7CiAgfQogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUsICJkZXNpcmVkU2l6ZSIsIHsKICAgZ2V0OiBmdW5jdGlvbiAoKSB7CiAgICBpZiAoSXNUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlcih0aGlzKSA9PT0gZmFsc2UpIHsKICAgICB0aHJvdyBkZWZhdWx0Q29udHJvbGxlckJyYW5kQ2hlY2tFeGNlcHRpb24kMSgnZGVzaXJlZFNpemUnKTsKICAgIH0KICAgIHZhciByZWFkYWJsZUNvbnRyb2xsZXIgPSB0aGlzLl9jb250cm9sbGVkVHJhbnNmb3JtU3RyZWFtLl9yZWFkYWJsZS5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyOwogICAgcmV0dXJuIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJHZXREZXNpcmVkU2l6ZShyZWFkYWJsZUNvbnRyb2xsZXIpOwogICB9LAogICBlbnVtZXJhYmxlOiB0cnVlLAogICBjb25maWd1cmFibGU6IHRydWUKICB9KTsKICBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUuZW5xdWV1ZSA9IGZ1bmN0aW9uIChjaHVuaykgewogICBpZiAoSXNUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlcih0aGlzKSA9PT0gZmFsc2UpIHsKICAgIHRocm93IGRlZmF1bHRDb250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbiQxKCdlbnF1ZXVlJyk7CiAgIH0KICAgVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFbnF1ZXVlKHRoaXMsIGNodW5rKTsKICB9OwogIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChyZWFzb24pIHsKICAgaWYgKElzVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIodGhpcykgPT09IGZhbHNlKSB7CiAgICB0aHJvdyBkZWZhdWx0Q29udHJvbGxlckJyYW5kQ2hlY2tFeGNlcHRpb24kMSgnZXJyb3InKTsKICAgfQogICBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9yKHRoaXMsIHJlYXNvbik7CiAgfTsKICBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUudGVybWluYXRlID0gZnVuY3Rpb24gKCkgewogICBpZiAoSXNUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlcih0aGlzKSA9PT0gZmFsc2UpIHsKICAgIHRocm93IGRlZmF1bHRDb250cm9sbGVyQnJhbmRDaGVja0V4Y2VwdGlvbiQxKCd0ZXJtaW5hdGUnKTsKICAgfQogICBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlclRlcm1pbmF0ZSh0aGlzKTsKICB9OwogIHJldHVybiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlcjsKIH0oKTsKIGZ1bmN0aW9uIElzVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIoeCkgewogIGlmICghdHlwZUlzT2JqZWN0KHgpKSB7CiAgIHJldHVybiBmYWxzZTsKICB9CiAgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoeCwgJ19jb250cm9sbGVkVHJhbnNmb3JtU3RyZWFtJykpIHsKICAgcmV0dXJuIGZhbHNlOwogIH0KICByZXR1cm4gdHJ1ZTsKIH0KIGZ1bmN0aW9uIFNldFVwVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXIoc3RyZWFtLCBjb250cm9sbGVyLCB0cmFuc2Zvcm1BbGdvcml0aG0sIGZsdXNoQWxnb3JpdGhtKSB7CiAgY29udHJvbGxlci5fY29udHJvbGxlZFRyYW5zZm9ybVN0cmVhbSA9IHN0cmVhbTsKICBzdHJlYW0uX3RyYW5zZm9ybVN0cmVhbUNvbnRyb2xsZXIgPSBjb250cm9sbGVyOwogIGNvbnRyb2xsZXIuX3RyYW5zZm9ybUFsZ29yaXRobSA9IHRyYW5zZm9ybUFsZ29yaXRobTsKICBjb250cm9sbGVyLl9mbHVzaEFsZ29yaXRobSA9IGZsdXNoQWxnb3JpdGhtOwogfQogZnVuY3Rpb24gU2V0VXBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlckZyb21UcmFuc2Zvcm1lcihzdHJlYW0sIHRyYW5zZm9ybWVyKSB7CiAgdmFyIGNvbnRyb2xsZXIgPSBPYmplY3QuY3JlYXRlKFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyLnByb3RvdHlwZSk7CiAgdmFyIHRyYW5zZm9ybUFsZ29yaXRobSA9IGZ1bmN0aW9uIChjaHVuaykgewogICB0cnkgewogICAgVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFbnF1ZXVlKGNvbnRyb2xsZXIsIGNodW5rKTsKICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7CiAgIH0gY2F0Y2ggKHRyYW5zZm9ybVJlc3VsdEUpIHsKICAgIHJldHVybiBwcm9taXNlUmVqZWN0ZWRXaXRoKHRyYW5zZm9ybVJlc3VsdEUpOwogICB9CiAgfTsKICB2YXIgdHJhbnNmb3JtTWV0aG9kID0gdHJhbnNmb3JtZXIudHJhbnNmb3JtOwogIGlmICh0cmFuc2Zvcm1NZXRob2QgIT09IHVuZGVmaW5lZCkgewogICBpZiAodHlwZW9mIHRyYW5zZm9ybU1ldGhvZCAhPT0gJ2Z1bmN0aW9uJykgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndHJhbnNmb3JtIGlzIG5vdCBhIG1ldGhvZCcpOwogICB9CiAgIHRyYW5zZm9ybUFsZ29yaXRobSA9IGZ1bmN0aW9uIChjaHVuaykgewogICAgcmV0dXJuIFByb21pc2VDYWxsKHRyYW5zZm9ybU1ldGhvZCwgdHJhbnNmb3JtZXIsIFsKICAgICBjaHVuaywKICAgICBjb250cm9sbGVyCiAgICBdKTsKICAgfTsKICB9CiAgdmFyIGZsdXNoQWxnb3JpdGhtID0gQ3JlYXRlQWxnb3JpdGhtRnJvbVVuZGVybHlpbmdNZXRob2QodHJhbnNmb3JtZXIsICdmbHVzaCcsIDAsIFtjb250cm9sbGVyXSk7CiAgU2V0VXBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlcihzdHJlYW0sIGNvbnRyb2xsZXIsIHRyYW5zZm9ybUFsZ29yaXRobSwgZmx1c2hBbGdvcml0aG0pOwogfQogZnVuY3Rpb24gVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMoY29udHJvbGxlcikgewogIGNvbnRyb2xsZXIuX3RyYW5zZm9ybUFsZ29yaXRobSA9IHVuZGVmaW5lZDsKICBjb250cm9sbGVyLl9mbHVzaEFsZ29yaXRobSA9IHVuZGVmaW5lZDsKIH0KIGZ1bmN0aW9uIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyRW5xdWV1ZShjb250cm9sbGVyLCBjaHVuaykgewogIHZhciBzdHJlYW0gPSBjb250cm9sbGVyLl9jb250cm9sbGVkVHJhbnNmb3JtU3RyZWFtOwogIHZhciByZWFkYWJsZUNvbnRyb2xsZXIgPSBzdHJlYW0uX3JlYWRhYmxlLl9yZWFkYWJsZVN0cmVhbUNvbnRyb2xsZXI7CiAgaWYgKFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDYW5DbG9zZU9yRW5xdWV1ZShyZWFkYWJsZUNvbnRyb2xsZXIpID09PSBmYWxzZSkgewogICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWFkYWJsZSBzaWRlIGlzIG5vdCBpbiBhIHN0YXRlIHRoYXQgcGVybWl0cyBlbnF1ZXVlJyk7CiAgfQogIHRyeSB7CiAgIFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJFbnF1ZXVlKHJlYWRhYmxlQ29udHJvbGxlciwgY2h1bmspOwogIH0gY2F0Y2ggKGUpIHsKICAgVHJhbnNmb3JtU3RyZWFtRXJyb3JXcml0YWJsZUFuZFVuYmxvY2tXcml0ZShzdHJlYW0sIGUpOwogICB0aHJvdyBzdHJlYW0uX3JlYWRhYmxlLl9zdG9yZWRFcnJvcjsKICB9CiAgdmFyIGJhY2twcmVzc3VyZSA9IFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJIYXNCYWNrcHJlc3N1cmUocmVhZGFibGVDb250cm9sbGVyKTsKICBpZiAoYmFja3ByZXNzdXJlICE9PSBzdHJlYW0uX2JhY2twcmVzc3VyZSkgewogICBUcmFuc2Zvcm1TdHJlYW1TZXRCYWNrcHJlc3N1cmUoc3RyZWFtLCB0cnVlKTsKICB9CiB9CiBmdW5jdGlvbiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlckVycm9yKGNvbnRyb2xsZXIsIGUpIHsKICBUcmFuc2Zvcm1TdHJlYW1FcnJvcihjb250cm9sbGVyLl9jb250cm9sbGVkVHJhbnNmb3JtU3RyZWFtLCBlKTsKIH0KIGZ1bmN0aW9uIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyUGVyZm9ybVRyYW5zZm9ybShjb250cm9sbGVyLCBjaHVuaykgewogIHZhciB0cmFuc2Zvcm1Qcm9taXNlID0gY29udHJvbGxlci5fdHJhbnNmb3JtQWxnb3JpdGhtKGNodW5rKTsKICByZXR1cm4gdHJhbnNmb3JtUHJvbWlzZVdpdGgodHJhbnNmb3JtUHJvbWlzZSwgdW5kZWZpbmVkLCBmdW5jdGlvbiAocikgewogICBUcmFuc2Zvcm1TdHJlYW1FcnJvcihjb250cm9sbGVyLl9jb250cm9sbGVkVHJhbnNmb3JtU3RyZWFtLCByKTsKICAgdGhyb3cgcjsKICB9KTsKIH0KIGZ1bmN0aW9uIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyVGVybWluYXRlKGNvbnRyb2xsZXIpIHsKICB2YXIgc3RyZWFtID0gY29udHJvbGxlci5fY29udHJvbGxlZFRyYW5zZm9ybVN0cmVhbTsKICB2YXIgcmVhZGFibGVDb250cm9sbGVyID0gc3RyZWFtLl9yZWFkYWJsZS5fcmVhZGFibGVTdHJlYW1Db250cm9sbGVyOwogIGlmIChSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2FuQ2xvc2VPckVucXVldWUocmVhZGFibGVDb250cm9sbGVyKSA9PT0gdHJ1ZSkgewogICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2xvc2UocmVhZGFibGVDb250cm9sbGVyKTsKICB9CiAgdmFyIGVycm9yID0gbmV3IFR5cGVFcnJvcignVHJhbnNmb3JtU3RyZWFtIHRlcm1pbmF0ZWQnKTsKICBUcmFuc2Zvcm1TdHJlYW1FcnJvcldyaXRhYmxlQW5kVW5ibG9ja1dyaXRlKHN0cmVhbSwgZXJyb3IpOwogfQogZnVuY3Rpb24gVHJhbnNmb3JtU3RyZWFtRGVmYXVsdFNpbmtXcml0ZUFsZ29yaXRobShzdHJlYW0sIGNodW5rKSB7CiAgdmFyIGNvbnRyb2xsZXIgPSBzdHJlYW0uX3RyYW5zZm9ybVN0cmVhbUNvbnRyb2xsZXI7CiAgaWYgKHN0cmVhbS5fYmFja3ByZXNzdXJlID09PSB0cnVlKSB7CiAgIHZhciBiYWNrcHJlc3N1cmVDaGFuZ2VQcm9taXNlID0gc3RyZWFtLl9iYWNrcHJlc3N1cmVDaGFuZ2VQcm9taXNlOwogICByZXR1cm4gdHJhbnNmb3JtUHJvbWlzZVdpdGgoYmFja3ByZXNzdXJlQ2hhbmdlUHJvbWlzZSwgZnVuY3Rpb24gKCkgewogICAgdmFyIHdyaXRhYmxlID0gc3RyZWFtLl93cml0YWJsZTsKICAgIHZhciBzdGF0ZSA9IHdyaXRhYmxlLl9zdGF0ZTsKICAgIGlmIChzdGF0ZSA9PT0gJ2Vycm9yaW5nJykgewogICAgIHRocm93IHdyaXRhYmxlLl9zdG9yZWRFcnJvcjsKICAgIH0KICAgIHJldHVybiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlclBlcmZvcm1UcmFuc2Zvcm0oY29udHJvbGxlciwgY2h1bmspOwogICB9KTsKICB9CiAgcmV0dXJuIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRDb250cm9sbGVyUGVyZm9ybVRyYW5zZm9ybShjb250cm9sbGVyLCBjaHVuayk7CiB9CiBmdW5jdGlvbiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0U2lua0Fib3J0QWxnb3JpdGhtKHN0cmVhbSwgcmVhc29uKSB7CiAgVHJhbnNmb3JtU3RyZWFtRXJyb3Ioc3RyZWFtLCByZWFzb24pOwogIHJldHVybiBwcm9taXNlUmVzb2x2ZWRXaXRoKHVuZGVmaW5lZCk7CiB9CiBmdW5jdGlvbiBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0U2lua0Nsb3NlQWxnb3JpdGhtKHN0cmVhbSkgewogIHZhciByZWFkYWJsZSA9IHN0cmVhbS5fcmVhZGFibGU7CiAgdmFyIGNvbnRyb2xsZXIgPSBzdHJlYW0uX3RyYW5zZm9ybVN0cmVhbUNvbnRyb2xsZXI7CiAgdmFyIGZsdXNoUHJvbWlzZSA9IGNvbnRyb2xsZXIuX2ZsdXNoQWxnb3JpdGhtKCk7CiAgVHJhbnNmb3JtU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDbGVhckFsZ29yaXRobXMoY29udHJvbGxlcik7CiAgcmV0dXJuIHRyYW5zZm9ybVByb21pc2VXaXRoKGZsdXNoUHJvbWlzZSwgZnVuY3Rpb24gKCkgewogICBpZiAocmVhZGFibGUuX3N0YXRlID09PSAnZXJyb3JlZCcpIHsKICAgIHRocm93IHJlYWRhYmxlLl9zdG9yZWRFcnJvcjsKICAgfQogICB2YXIgcmVhZGFibGVDb250cm9sbGVyID0gcmVhZGFibGUuX3JlYWRhYmxlU3RyZWFtQ29udHJvbGxlcjsKICAgaWYgKFJlYWRhYmxlU3RyZWFtRGVmYXVsdENvbnRyb2xsZXJDYW5DbG9zZU9yRW5xdWV1ZShyZWFkYWJsZUNvbnRyb2xsZXIpID09PSB0cnVlKSB7CiAgICBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyQ2xvc2UocmVhZGFibGVDb250cm9sbGVyKTsKICAgfQogIH0sIGZ1bmN0aW9uIChyKSB7CiAgIFRyYW5zZm9ybVN0cmVhbUVycm9yKHN0cmVhbSwgcik7CiAgIHRocm93IHJlYWRhYmxlLl9zdG9yZWRFcnJvcjsKICB9KTsKIH0KIGZ1bmN0aW9uIFRyYW5zZm9ybVN0cmVhbURlZmF1bHRTb3VyY2VQdWxsQWxnb3JpdGhtKHN0cmVhbSkgewogIFRyYW5zZm9ybVN0cmVhbVNldEJhY2twcmVzc3VyZShzdHJlYW0sIGZhbHNlKTsKICByZXR1cm4gc3RyZWFtLl9iYWNrcHJlc3N1cmVDaGFuZ2VQcm9taXNlOwogfQogZnVuY3Rpb24gZGVmYXVsdENvbnRyb2xsZXJCcmFuZENoZWNrRXhjZXB0aW9uJDEobmFtZSkgewogIHJldHVybiBuZXcgVHlwZUVycm9yKCJUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlci5wcm90b3R5cGUuIiArIG5hbWUgKyAiIGNhbiBvbmx5IGJlIHVzZWQgb24gYSBUcmFuc2Zvcm1TdHJlYW1EZWZhdWx0Q29udHJvbGxlciIpOwogfQogZnVuY3Rpb24gc3RyZWFtQnJhbmRDaGVja0V4Y2VwdGlvbiQyKG5hbWUpIHsKICByZXR1cm4gbmV3IFR5cGVFcnJvcigiVHJhbnNmb3JtU3RyZWFtLnByb3RvdHlwZS4iICsgbmFtZSArICIgY2FuIG9ubHkgYmUgdXNlZCBvbiBhIFRyYW5zZm9ybVN0cmVhbSIpOwogfQogZXhwb3J0cy5CeXRlTGVuZ3RoUXVldWluZ1N0cmF0ZWd5ID0gQnl0ZUxlbmd0aFF1ZXVpbmdTdHJhdGVneTsKIGV4cG9ydHMuQ291bnRRdWV1aW5nU3RyYXRlZ3kgPSBDb3VudFF1ZXVpbmdTdHJhdGVneTsKIGV4cG9ydHMuUmVhZGFibGVTdHJlYW0gPSBSZWFkYWJsZVN0cmVhbTsKIGV4cG9ydHMuVHJhbnNmb3JtU3RyZWFtID0gVHJhbnNmb3JtU3RyZWFtOwogZXhwb3J0cy5Xcml0YWJsZVN0cmVhbSA9IFdyaXRhYmxlU3RyZWFtOwogT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTsKfSkpOwoKLyoqKi8gfSksCi8qIDE0NCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgpfX3dfcGRmanNfcmVxdWlyZV9fKDE0NSk7Cl9fd19wZGZqc19yZXF1aXJlX18oMTE0KTsKX193X3BkZmpzX3JlcXVpcmVfXyg3Nyk7Cl9fd19wZGZqc19yZXF1aXJlX18oMTE2KTsKdmFyIHBhdGggPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQzKTsKbW9kdWxlLmV4cG9ydHMgPSBwYXRoLk1hcDsKCi8qKiovIH0pLAovKiAxNDUgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKdmFyIGNvbGxlY3Rpb24gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE0Nik7CnZhciBjb2xsZWN0aW9uU3Ryb25nID0gX193X3BkZmpzX3JlcXVpcmVfXygxNTApOwptb2R1bGUuZXhwb3J0cyA9IGNvbGxlY3Rpb24oJ01hcCcsIGZ1bmN0aW9uIChpbml0KSB7CiByZXR1cm4gZnVuY3Rpb24gTWFwKCkgewogIHJldHVybiBpbml0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOwogfTsKfSwgY29sbGVjdGlvblN0cm9uZyk7CgovKioqLyB9KSwKLyogMTQ2ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCnZhciAkID0gX193X3BkZmpzX3JlcXVpcmVfXygxMCk7CnZhciBnbG9iYWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDExKTsKdmFyIGlzRm9yY2VkID0gX193X3BkZmpzX3JlcXVpcmVfXyg1Mik7CnZhciByZWRlZmluZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMjkpOwp2YXIgSW50ZXJuYWxNZXRhZGF0YU1vZHVsZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTQ3KTsKdmFyIGl0ZXJhdGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEyNCk7CnZhciBhbkluc3RhbmNlID0gX193X3BkZmpzX3JlcXVpcmVfXygxMjMpOwp2YXIgaXNPYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIyKTsKdmFyIGZhaWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygxNCk7CnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDk3KTsKdmFyIHNldFRvU3RyaW5nVGFnID0gX193X3BkZmpzX3JlcXVpcmVfXyg4NSk7CnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTQ5KTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09OU1RSVUNUT1JfTkFNRSwgd3JhcHBlciwgY29tbW9uKSB7CiB2YXIgSVNfTUFQID0gQ09OU1RSVUNUT1JfTkFNRS5pbmRleE9mKCdNYXAnKSAhPT0gLTE7CiB2YXIgSVNfV0VBSyA9IENPTlNUUlVDVE9SX05BTUUuaW5kZXhPZignV2VhaycpICE9PSAtMTsKIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7CiB2YXIgTmF0aXZlQ29uc3RydWN0b3IgPSBnbG9iYWxbQ09OU1RSVUNUT1JfTkFNRV07CiB2YXIgTmF0aXZlUHJvdG90eXBlID0gTmF0aXZlQ29uc3RydWN0b3IgJiYgTmF0aXZlQ29uc3RydWN0b3IucHJvdG90eXBlOwogdmFyIENvbnN0cnVjdG9yID0gTmF0aXZlQ29uc3RydWN0b3I7CiB2YXIgZXhwb3J0ZWQgPSB7fTsKIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7CiAgdmFyIG5hdGl2ZU1ldGhvZCA9IE5hdGl2ZVByb3RvdHlwZVtLRVldOwogIHJlZGVmaW5lKE5hdGl2ZVByb3RvdHlwZSwgS0VZLCBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQodmFsdWUpIHsKICAgbmF0aXZlTWV0aG9kLmNhbGwodGhpcywgdmFsdWUgPT09IDAgPyAwIDogdmFsdWUpOwogICByZXR1cm4gdGhpczsKICB9IDogS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGtleSkgewogICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3Qoa2V5KSA/IGZhbHNlIDogbmF0aXZlTWV0aG9kLmNhbGwodGhpcywga2V5ID09PSAwID8gMCA6IGtleSk7CiAgfSA6IEtFWSA9PSAnZ2V0JyA/IGZ1bmN0aW9uIGdldChrZXkpIHsKICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGtleSkgPyB1bmRlZmluZWQgOiBuYXRpdmVNZXRob2QuY2FsbCh0aGlzLCBrZXkgPT09IDAgPyAwIDoga2V5KTsKICB9IDogS0VZID09ICdoYXMnID8gZnVuY3Rpb24gaGFzKGtleSkgewogICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3Qoa2V5KSA/IGZhbHNlIDogbmF0aXZlTWV0aG9kLmNhbGwodGhpcywga2V5ID09PSAwID8gMCA6IGtleSk7CiAgfSA6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7CiAgIG5hdGl2ZU1ldGhvZC5jYWxsKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTsKICAgcmV0dXJuIHRoaXM7CiAgfSk7CiB9OwogaWYgKGlzRm9yY2VkKENPTlNUUlVDVE9SX05BTUUsIHR5cGVvZiBOYXRpdmVDb25zdHJ1Y3RvciAhPSAnZnVuY3Rpb24nIHx8ICEoSVNfV0VBSyB8fCBOYXRpdmVQcm90b3R5cGUuZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkgewogICBuZXcgTmF0aXZlQ29uc3RydWN0b3IoKS5lbnRyaWVzKCkubmV4dCgpOwogIH0pKSkpIHsKICBDb25zdHJ1Y3RvciA9IGNvbW1vbi5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVAsIEFEREVSKTsKICBJbnRlcm5hbE1ldGFkYXRhTW9kdWxlLlJFUVVJUkVEID0gdHJ1ZTsKIH0gZWxzZSBpZiAoaXNGb3JjZWQoQ09OU1RSVUNUT1JfTkFNRSwgdHJ1ZSkpIHsKICB2YXIgaW5zdGFuY2UgPSBuZXcgQ29uc3RydWN0b3IoKTsKICB2YXIgSEFTTlRfQ0hBSU5JTkcgPSBpbnN0YW5jZVtBRERFUl0oSVNfV0VBSyA/IHt9IDogLTAsIDEpICE9IGluc3RhbmNlOwogIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsKICAgaW5zdGFuY2UuaGFzKDEpOwogIH0pOwogIHZhciBBQ0NFUFRfSVRFUkFCTEVTID0gY2hlY2tDb3JyZWN0bmVzc09mSXRlcmF0aW9uKGZ1bmN0aW9uIChpdGVyYWJsZSkgewogICBuZXcgTmF0aXZlQ29uc3RydWN0b3IoaXRlcmFibGUpOwogIH0pOwogIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkgewogICB2YXIgJGluc3RhbmNlID0gbmV3IE5hdGl2ZUNvbnN0cnVjdG9yKCk7CiAgIHZhciBpbmRleCA9IDU7CiAgIHdoaWxlIChpbmRleC0tKQogICAgJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpOwogICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApOwogIH0pOwogIGlmICghQUNDRVBUX0lURVJBQkxFUykgewogICBDb25zdHJ1Y3RvciA9IHdyYXBwZXIoZnVuY3Rpb24gKGR1bW15LCBpdGVyYWJsZSkgewogICAgYW5JbnN0YW5jZShkdW1teSwgQ29uc3RydWN0b3IsIENPTlNUUlVDVE9SX05BTUUpOwogICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgTmF0aXZlQ29uc3RydWN0b3IoKSwgZHVtbXksIENvbnN0cnVjdG9yKTsKICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpCiAgICAgaXRlcmF0ZShpdGVyYWJsZSwgdGhhdFtBRERFUl0sIHRoYXQsIElTX01BUCk7CiAgICByZXR1cm4gdGhhdDsKICAgfSk7CiAgIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IE5hdGl2ZVByb3RvdHlwZTsKICAgTmF0aXZlUHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQ29uc3RydWN0b3I7CiAgfQogIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7CiAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7CiAgIGZpeE1ldGhvZCgnaGFzJyk7CiAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpOwogIH0KICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykKICAgZml4TWV0aG9kKEFEREVSKTsKICBpZiAoSVNfV0VBSyAmJiBOYXRpdmVQcm90b3R5cGUuY2xlYXIpCiAgIGRlbGV0ZSBOYXRpdmVQcm90b3R5cGUuY2xlYXI7CiB9CiBleHBvcnRlZFtDT05TVFJVQ1RPUl9OQU1FXSA9IENvbnN0cnVjdG9yOwogJCh7CiAgZ2xvYmFsOiB0cnVlLAogIGZvcmNlZDogQ29uc3RydWN0b3IgIT0gTmF0aXZlQ29uc3RydWN0b3IKIH0sIGV4cG9ydGVkKTsKIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FKTsKIGlmICghSVNfV0VBSykKICBjb21tb24uc2V0U3Ryb25nKENvbnN0cnVjdG9yLCBDT05TVFJVQ1RPUl9OQU1FLCBJU19NQVApOwogcmV0dXJuIENvbnN0cnVjdG9yOwp9OwoKLyoqKi8gfSksCi8qIDE0NyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgaGlkZGVuS2V5cyA9IF9fd19wZGZqc19yZXF1aXJlX18oMzkpOwp2YXIgaXNPYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIyKTsKdmFyIGhhcyA9IF9fd19wZGZqc19yZXF1aXJlX18oMjMpOwp2YXIgZGVmaW5lUHJvcGVydHkgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI3KS5mOwp2YXIgdWlkID0gX193X3BkZmpzX3JlcXVpcmVfXygzOCk7CnZhciBGUkVFWklORyA9IF9fd19wZGZqc19yZXF1aXJlX18oMTQ4KTsKdmFyIE1FVEFEQVRBID0gdWlkKCdtZXRhJyk7CnZhciBpZCA9IDA7CnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlIHx8IGZ1bmN0aW9uICgpIHsKIHJldHVybiB0cnVlOwp9Owp2YXIgc2V0TWV0YWRhdGEgPSBmdW5jdGlvbiAoaXQpIHsKIGRlZmluZVByb3BlcnR5KGl0LCBNRVRBREFUQSwgewogIHZhbHVlOiB7CiAgIG9iamVjdElEOiAnTycgKyArK2lkLAogICB3ZWFrRGF0YToge30KICB9CiB9KTsKfTsKdmFyIGZhc3RLZXkgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkgewogaWYgKCFpc09iamVjdChpdCkpCiAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyA/ICdTJyA6ICdQJykgKyBpdDsKIGlmICghaGFzKGl0LCBNRVRBREFUQSkpIHsKICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpCiAgIHJldHVybiAnRic7CiAgaWYgKCFjcmVhdGUpCiAgIHJldHVybiAnRSc7CiAgc2V0TWV0YWRhdGEoaXQpOwogfQogcmV0dXJuIGl0W01FVEFEQVRBXS5vYmplY3RJRDsKfTsKdmFyIGdldFdlYWtEYXRhID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHsKIGlmICghaGFzKGl0LCBNRVRBREFUQSkpIHsKICBpZiAoIWlzRXh0ZW5zaWJsZShpdCkpCiAgIHJldHVybiB0cnVlOwogIGlmICghY3JlYXRlKQogICByZXR1cm4gZmFsc2U7CiAgc2V0TWV0YWRhdGEoaXQpOwogfQogcmV0dXJuIGl0W01FVEFEQVRBXS53ZWFrRGF0YTsKfTsKdmFyIG9uRnJlZXplID0gZnVuY3Rpb24gKGl0KSB7CiBpZiAoRlJFRVpJTkcgJiYgbWV0YS5SRVFVSVJFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEFEQVRBKSkKICBzZXRNZXRhZGF0YShpdCk7CiByZXR1cm4gaXQ7Cn07CnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7CiBSRVFVSVJFRDogZmFsc2UsCiBmYXN0S2V5OiBmYXN0S2V5LAogZ2V0V2Vha0RhdGE6IGdldFdlYWtEYXRhLAogb25GcmVlemU6IG9uRnJlZXplCn07CmhpZGRlbktleXNbTUVUQURBVEFdID0gdHJ1ZTsKCi8qKiovIH0pLAovKiAxNDggKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIGZhaWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygxNCk7Cm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHsKIHJldHVybiBPYmplY3QuaXNFeHRlbnNpYmxlKE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh7fSkpOwp9KTsKCi8qKiovIH0pLAovKiAxNDkgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIGlzT2JqZWN0ID0gX193X3BkZmpzX3JlcXVpcmVfXygyMik7CnZhciBzZXRQcm90b3R5cGVPZiA9IF9fd19wZGZqc19yZXF1aXJlX18oODcpOwptb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgkdGhpcywgZHVtbXksIFdyYXBwZXIpIHsKIHZhciBOZXdUYXJnZXQsIE5ld1RhcmdldFByb3RvdHlwZTsKIGlmIChzZXRQcm90b3R5cGVPZiAmJiB0eXBlb2YgKE5ld1RhcmdldCA9IGR1bW15LmNvbnN0cnVjdG9yKSA9PSAnZnVuY3Rpb24nICYmIE5ld1RhcmdldCAhPT0gV3JhcHBlciAmJiBpc09iamVjdChOZXdUYXJnZXRQcm90b3R5cGUgPSBOZXdUYXJnZXQucHJvdG90eXBlKSAmJiBOZXdUYXJnZXRQcm90b3R5cGUgIT09IFdyYXBwZXIucHJvdG90eXBlKQogIHNldFByb3RvdHlwZU9mKCR0aGlzLCBOZXdUYXJnZXRQcm90b3R5cGUpOwogcmV0dXJuICR0aGlzOwp9OwoKLyoqKi8gfSksCi8qIDE1MCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7Cgp2YXIgZGVmaW5lUHJvcGVydHkgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI3KS5mOwp2YXIgY3JlYXRlID0gX193X3BkZmpzX3JlcXVpcmVfXyg3MSk7CnZhciByZWRlZmluZUFsbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTIxKTsKdmFyIGJpbmQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDYyKTsKdmFyIGFuSW5zdGFuY2UgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEyMyk7CnZhciBpdGVyYXRlID0gX193X3BkZmpzX3JlcXVpcmVfXygxMjQpOwp2YXIgZGVmaW5lSXRlcmF0b3IgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDc5KTsKdmFyIHNldFNwZWNpZXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEyMik7CnZhciBERVNDUklQVE9SUyA9IF9fd19wZGZqc19yZXF1aXJlX18oMTMpOwp2YXIgZmFzdEtleSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTQ3KS5mYXN0S2V5Owp2YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMzMpOwp2YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0Owp2YXIgaW50ZXJuYWxTdGF0ZUdldHRlckZvciA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yOwptb2R1bGUuZXhwb3J0cyA9IHsKIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQLCBBRERFUikgewogIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHsKICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBDT05TVFJVQ1RPUl9OQU1FKTsKICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGF0LCB7CiAgICB0eXBlOiBDT05TVFJVQ1RPUl9OQU1FLAogICAgaW5kZXg6IGNyZWF0ZShudWxsKSwKICAgIGZpcnN0OiB1bmRlZmluZWQsCiAgICBsYXN0OiB1bmRlZmluZWQsCiAgICBzaXplOiAwCiAgIH0pOwogICBpZiAoIURFU0NSSVBUT1JTKQogICAgdGhhdC5zaXplID0gMDsKICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkKICAgIGl0ZXJhdGUoaXRlcmFibGUsIHRoYXRbQURERVJdLCB0aGF0LCBJU19NQVApOwogIH0pOwogIHZhciBnZXRJbnRlcm5hbFN0YXRlID0gaW50ZXJuYWxTdGF0ZUdldHRlckZvcihDT05TVFJVQ1RPUl9OQU1FKTsKICB2YXIgZGVmaW5lID0gZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHsKICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTsKICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTsKICAgdmFyIHByZXZpb3VzLCBpbmRleDsKICAgaWYgKGVudHJ5KSB7CiAgICBlbnRyeS52YWx1ZSA9IHZhbHVlOwogICB9IGVsc2UgewogICAgc3RhdGUubGFzdCA9IGVudHJ5ID0gewogICAgIGluZGV4OiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwKICAgICBrZXk6IGtleSwKICAgICB2YWx1ZTogdmFsdWUsCiAgICAgcHJldmlvdXM6IHByZXZpb3VzID0gc3RhdGUubGFzdCwKICAgICBuZXh0OiB1bmRlZmluZWQsCiAgICAgcmVtb3ZlZDogZmFsc2UKICAgIH07CiAgICBpZiAoIXN0YXRlLmZpcnN0KQogICAgIHN0YXRlLmZpcnN0ID0gZW50cnk7CiAgICBpZiAocHJldmlvdXMpCiAgICAgcHJldmlvdXMubmV4dCA9IGVudHJ5OwogICAgaWYgKERFU0NSSVBUT1JTKQogICAgIHN0YXRlLnNpemUrKzsKICAgIGVsc2UKICAgICB0aGF0LnNpemUrKzsKICAgIGlmIChpbmRleCAhPT0gJ0YnKQogICAgIHN0YXRlLmluZGV4W2luZGV4XSA9IGVudHJ5OwogICB9CiAgIHJldHVybiB0aGF0OwogIH07CiAgdmFyIGdldEVudHJ5ID0gZnVuY3Rpb24gKHRoYXQsIGtleSkgewogICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoYXQpOwogICB2YXIgaW5kZXggPSBmYXN0S2V5KGtleSk7CiAgIHZhciBlbnRyeTsKICAgaWYgKGluZGV4ICE9PSAnRicpCiAgICByZXR1cm4gc3RhdGUuaW5kZXhbaW5kZXhdOwogICBmb3IgKGVudHJ5ID0gc3RhdGUuZmlyc3Q7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm5leHQpIHsKICAgIGlmIChlbnRyeS5rZXkgPT0ga2V5KQogICAgIHJldHVybiBlbnRyeTsKICAgfQogIH07CiAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHsKICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkgewogICAgdmFyIHRoYXQgPSB0aGlzOwogICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxTdGF0ZSh0aGF0KTsKICAgIHZhciBkYXRhID0gc3RhdGUuaW5kZXg7CiAgICB2YXIgZW50cnkgPSBzdGF0ZS5maXJzdDsKICAgIHdoaWxlIChlbnRyeSkgewogICAgIGVudHJ5LnJlbW92ZWQgPSB0cnVlOwogICAgIGlmIChlbnRyeS5wcmV2aW91cykKICAgICAgZW50cnkucHJldmlvdXMgPSBlbnRyeS5wcmV2aW91cy5uZXh0ID0gdW5kZWZpbmVkOwogICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmluZGV4XTsKICAgICBlbnRyeSA9IGVudHJ5Lm5leHQ7CiAgICB9CiAgICBzdGF0ZS5maXJzdCA9IHN0YXRlLmxhc3QgPSB1bmRlZmluZWQ7CiAgICBpZiAoREVTQ1JJUFRPUlMpCiAgICAgc3RhdGUuc2l6ZSA9IDA7CiAgICBlbHNlCiAgICAgdGhhdC5zaXplID0gMDsKICAgfSwKICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHsKICAgIHZhciB0aGF0ID0gdGhpczsKICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7CiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpOwogICAgaWYgKGVudHJ5KSB7CiAgICAgdmFyIG5leHQgPSBlbnRyeS5uZXh0OwogICAgIHZhciBwcmV2ID0gZW50cnkucHJldmlvdXM7CiAgICAgZGVsZXRlIHN0YXRlLmluZGV4W2VudHJ5LmluZGV4XTsKICAgICBlbnRyeS5yZW1vdmVkID0gdHJ1ZTsKICAgICBpZiAocHJldikKICAgICAgcHJldi5uZXh0ID0gbmV4dDsKICAgICBpZiAobmV4dCkKICAgICAgbmV4dC5wcmV2aW91cyA9IHByZXY7CiAgICAgaWYgKHN0YXRlLmZpcnN0ID09IGVudHJ5KQogICAgICBzdGF0ZS5maXJzdCA9IG5leHQ7CiAgICAgaWYgKHN0YXRlLmxhc3QgPT0gZW50cnkpCiAgICAgIHN0YXRlLmxhc3QgPSBwcmV2OwogICAgIGlmIChERVNDUklQVE9SUykKICAgICAgc3RhdGUuc2l6ZS0tOwogICAgIGVsc2UKICAgICAgdGhhdC5zaXplLS07CiAgICB9CiAgICByZXR1cm4gISFlbnRyeTsKICAgfSwKICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuKSB7CiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpOwogICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCAzKTsKICAgIHZhciBlbnRyeTsKICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubmV4dCA6IHN0YXRlLmZpcnN0KSB7CiAgICAgYm91bmRGdW5jdGlvbihlbnRyeS52YWx1ZSwgZW50cnkua2V5LCB0aGlzKTsKICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucmVtb3ZlZCkKICAgICAgZW50cnkgPSBlbnRyeS5wcmV2aW91czsKICAgIH0KICAgfSwKICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7CiAgICByZXR1cm4gISFnZXRFbnRyeSh0aGlzLCBrZXkpOwogICB9CiAgfSk7CiAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIElTX01BUCA/IHsKICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7CiAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGlzLCBrZXkpOwogICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnZhbHVlOwogICB9LAogICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7CiAgICByZXR1cm4gZGVmaW5lKHRoaXMsIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTsKICAgfQogIH0gOiB7CiAgIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7CiAgICByZXR1cm4gZGVmaW5lKHRoaXMsIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTsKICAgfQogIH0pOwogIGlmIChERVNDUklQVE9SUykKICAgZGVmaW5lUHJvcGVydHkoQy5wcm90b3R5cGUsICdzaXplJywgewogICAgZ2V0OiBmdW5jdGlvbiAoKSB7CiAgICAgcmV0dXJuIGdldEludGVybmFsU3RhdGUodGhpcykuc2l6ZTsKICAgIH0KICAgfSk7CiAgcmV0dXJuIEM7CiB9LAogc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgQ09OU1RSVUNUT1JfTkFNRSwgSVNfTUFQKSB7CiAgdmFyIElURVJBVE9SX05BTUUgPSBDT05TVFJVQ1RPUl9OQU1FICsgJyBJdGVyYXRvcic7CiAgdmFyIGdldEludGVybmFsQ29sbGVjdGlvblN0YXRlID0gaW50ZXJuYWxTdGF0ZUdldHRlckZvcihDT05TVFJVQ1RPUl9OQU1FKTsKICB2YXIgZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlID0gaW50ZXJuYWxTdGF0ZUdldHRlckZvcihJVEVSQVRPUl9OQU1FKTsKICBkZWZpbmVJdGVyYXRvcihDLCBDT05TVFJVQ1RPUl9OQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHsKICAgc2V0SW50ZXJuYWxTdGF0ZSh0aGlzLCB7CiAgICB0eXBlOiBJVEVSQVRPUl9OQU1FLAogICAgdGFyZ2V0OiBpdGVyYXRlZCwKICAgIHN0YXRlOiBnZXRJbnRlcm5hbENvbGxlY3Rpb25TdGF0ZShpdGVyYXRlZCksCiAgICBraW5kOiBraW5kLAogICAgbGFzdDogdW5kZWZpbmVkCiAgIH0pOwogIH0sIGZ1bmN0aW9uICgpIHsKICAgdmFyIHN0YXRlID0gZ2V0SW50ZXJuYWxJdGVyYXRvclN0YXRlKHRoaXMpOwogICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7CiAgIHZhciBlbnRyeSA9IHN0YXRlLmxhc3Q7CiAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yZW1vdmVkKQogICAgZW50cnkgPSBlbnRyeS5wcmV2aW91czsKICAgaWYgKCFzdGF0ZS50YXJnZXQgfHwgIShzdGF0ZS5sYXN0ID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm5leHQgOiBzdGF0ZS5zdGF0ZS5maXJzdCkpIHsKICAgIHN0YXRlLnRhcmdldCA9IHVuZGVmaW5lZDsKICAgIHJldHVybiB7CiAgICAgdmFsdWU6IHVuZGVmaW5lZCwKICAgICBkb25lOiB0cnVlCiAgICB9OwogICB9CiAgIGlmIChraW5kID09ICdrZXlzJykKICAgIHJldHVybiB7CiAgICAgdmFsdWU6IGVudHJ5LmtleSwKICAgICBkb25lOiBmYWxzZQogICAgfTsKICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpCiAgICByZXR1cm4gewogICAgIHZhbHVlOiBlbnRyeS52YWx1ZSwKICAgICBkb25lOiBmYWxzZQogICAgfTsKICAgcmV0dXJuIHsKICAgIHZhbHVlOiBbCiAgICAgZW50cnkua2V5LAogICAgIGVudHJ5LnZhbHVlCiAgICBdLAogICAgZG9uZTogZmFsc2UKICAgfTsKICB9LCBJU19NQVAgPyAnZW50cmllcycgOiAndmFsdWVzJywgIUlTX01BUCwgdHJ1ZSk7CiAgc2V0U3BlY2llcyhDT05TVFJVQ1RPUl9OQU1FKTsKIH0KfTsKCi8qKiovIH0pLAovKiAxNTEgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKX193X3BkZmpzX3JlcXVpcmVfXygxNTIpOwpfX3dfcGRmanNfcmVxdWlyZV9fKDExNCk7Cl9fd19wZGZqc19yZXF1aXJlX18oNzcpOwpfX3dfcGRmanNfcmVxdWlyZV9fKDExNik7CnZhciBwYXRoID0gX193X3BkZmpzX3JlcXVpcmVfXyg0Myk7Cm1vZHVsZS5leHBvcnRzID0gcGF0aC5TZXQ7CgovKioqLyB9KSwKLyogMTUyICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCnZhciBjb2xsZWN0aW9uID0gX193X3BkZmpzX3JlcXVpcmVfXygxNDYpOwp2YXIgY29sbGVjdGlvblN0cm9uZyA9IF9fd19wZGZqc19yZXF1aXJlX18oMTUwKTsKbW9kdWxlLmV4cG9ydHMgPSBjb2xsZWN0aW9uKCdTZXQnLCBmdW5jdGlvbiAoaW5pdCkgewogcmV0dXJuIGZ1bmN0aW9uIFNldCgpIHsKICByZXR1cm4gaW5pdCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsKIH07Cn0sIGNvbGxlY3Rpb25TdHJvbmcpOwoKLyoqKi8gfSksCi8qIDE1MyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgpfX3dfcGRmanNfcmVxdWlyZV9fKDExNCk7Cl9fd19wZGZqc19yZXF1aXJlX18oMTU0KTsKX193X3BkZmpzX3JlcXVpcmVfXygxMTYpOwp2YXIgcGF0aCA9IF9fd19wZGZqc19yZXF1aXJlX18oNDMpOwptb2R1bGUuZXhwb3J0cyA9IHBhdGguV2Vha01hcDsKCi8qKiovIH0pLAovKiAxNTQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKdmFyIGdsb2JhbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTEpOwp2YXIgcmVkZWZpbmVBbGwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEyMSk7CnZhciBJbnRlcm5hbE1ldGFkYXRhTW9kdWxlID0gX193X3BkZmpzX3JlcXVpcmVfXygxNDcpOwp2YXIgY29sbGVjdGlvbiA9IF9fd19wZGZqc19yZXF1aXJlX18oMTQ2KTsKdmFyIGNvbGxlY3Rpb25XZWFrID0gX193X3BkZmpzX3JlcXVpcmVfXygxNTUpOwp2YXIgaXNPYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIyKTsKdmFyIGVuZm9yY2VJdGVybmFsU3RhdGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDMzKS5lbmZvcmNlOwp2YXIgTkFUSVZFX1dFQUtfTUFQID0gX193X3BkZmpzX3JlcXVpcmVfXygzNCk7CnZhciBJU19JRTExID0gIWdsb2JhbC5BY3RpdmVYT2JqZWN0ICYmICdBY3RpdmVYT2JqZWN0JyBpbiBnbG9iYWw7CnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlOwp2YXIgSW50ZXJuYWxXZWFrTWFwOwp2YXIgd3JhcHBlciA9IGZ1bmN0aW9uIChpbml0KSB7CiByZXR1cm4gZnVuY3Rpb24gV2Vha01hcCgpIHsKICByZXR1cm4gaW5pdCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsKIH07Cn07CnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gY29sbGVjdGlvbignV2Vha01hcCcsIHdyYXBwZXIsIGNvbGxlY3Rpb25XZWFrKTsKaWYgKE5BVElWRV9XRUFLX01BUCAmJiBJU19JRTExKSB7CiBJbnRlcm5hbFdlYWtNYXAgPSBjb2xsZWN0aW9uV2Vhay5nZXRDb25zdHJ1Y3Rvcih3cmFwcGVyLCAnV2Vha01hcCcsIHRydWUpOwogSW50ZXJuYWxNZXRhZGF0YU1vZHVsZS5SRVFVSVJFRCA9IHRydWU7CiB2YXIgV2Vha01hcFByb3RvdHlwZSA9ICRXZWFrTWFwLnByb3RvdHlwZTsKIHZhciBuYXRpdmVEZWxldGUgPSBXZWFrTWFwUHJvdG90eXBlWydkZWxldGUnXTsKIHZhciBuYXRpdmVIYXMgPSBXZWFrTWFwUHJvdG90eXBlLmhhczsKIHZhciBuYXRpdmVHZXQgPSBXZWFrTWFwUHJvdG90eXBlLmdldDsKIHZhciBuYXRpdmVTZXQgPSBXZWFrTWFwUHJvdG90eXBlLnNldDsKIHJlZGVmaW5lQWxsKFdlYWtNYXBQcm90b3R5cGUsIHsKICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkgewogICBpZiAoaXNPYmplY3Qoa2V5KSAmJiAhaXNFeHRlbnNpYmxlKGtleSkpIHsKICAgIHZhciBzdGF0ZSA9IGVuZm9yY2VJdGVybmFsU3RhdGUodGhpcyk7CiAgICBpZiAoIXN0YXRlLmZyb3plbikKICAgICBzdGF0ZS5mcm96ZW4gPSBuZXcgSW50ZXJuYWxXZWFrTWFwKCk7CiAgICByZXR1cm4gbmF0aXZlRGVsZXRlLmNhbGwodGhpcywga2V5KSB8fCBzdGF0ZS5mcm96ZW5bJ2RlbGV0ZSddKGtleSk7CiAgIH0KICAgcmV0dXJuIG5hdGl2ZURlbGV0ZS5jYWxsKHRoaXMsIGtleSk7CiAgfSwKICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHsKICAgaWYgKGlzT2JqZWN0KGtleSkgJiYgIWlzRXh0ZW5zaWJsZShrZXkpKSB7CiAgICB2YXIgc3RhdGUgPSBlbmZvcmNlSXRlcm5hbFN0YXRlKHRoaXMpOwogICAgaWYgKCFzdGF0ZS5mcm96ZW4pCiAgICAgc3RhdGUuZnJvemVuID0gbmV3IEludGVybmFsV2Vha01hcCgpOwogICAgcmV0dXJuIG5hdGl2ZUhhcy5jYWxsKHRoaXMsIGtleSkgfHwgc3RhdGUuZnJvemVuLmhhcyhrZXkpOwogICB9CiAgIHJldHVybiBuYXRpdmVIYXMuY2FsbCh0aGlzLCBrZXkpOwogIH0sCiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7CiAgIGlmIChpc09iamVjdChrZXkpICYmICFpc0V4dGVuc2libGUoa2V5KSkgewogICAgdmFyIHN0YXRlID0gZW5mb3JjZUl0ZXJuYWxTdGF0ZSh0aGlzKTsKICAgIGlmICghc3RhdGUuZnJvemVuKQogICAgIHN0YXRlLmZyb3plbiA9IG5ldyBJbnRlcm5hbFdlYWtNYXAoKTsKICAgIHJldHVybiBuYXRpdmVIYXMuY2FsbCh0aGlzLCBrZXkpID8gbmF0aXZlR2V0LmNhbGwodGhpcywga2V5KSA6IHN0YXRlLmZyb3plbi5nZXQoa2V5KTsKICAgfQogICByZXR1cm4gbmF0aXZlR2V0LmNhbGwodGhpcywga2V5KTsKICB9LAogIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHsKICAgaWYgKGlzT2JqZWN0KGtleSkgJiYgIWlzRXh0ZW5zaWJsZShrZXkpKSB7CiAgICB2YXIgc3RhdGUgPSBlbmZvcmNlSXRlcm5hbFN0YXRlKHRoaXMpOwogICAgaWYgKCFzdGF0ZS5mcm96ZW4pCiAgICAgc3RhdGUuZnJvemVuID0gbmV3IEludGVybmFsV2Vha01hcCgpOwogICAgbmF0aXZlSGFzLmNhbGwodGhpcywga2V5KSA/IG5hdGl2ZVNldC5jYWxsKHRoaXMsIGtleSwgdmFsdWUpIDogc3RhdGUuZnJvemVuLnNldChrZXksIHZhbHVlKTsKICAgfSBlbHNlCiAgICBuYXRpdmVTZXQuY2FsbCh0aGlzLCBrZXksIHZhbHVlKTsKICAgcmV0dXJuIHRoaXM7CiAgfQogfSk7Cn0KCi8qKiovIH0pLAovKiAxNTUgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKdmFyIHJlZGVmaW5lQWxsID0gX193X3BkZmpzX3JlcXVpcmVfXygxMjEpOwp2YXIgZ2V0V2Vha0RhdGEgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE0NykuZ2V0V2Vha0RhdGE7CnZhciBhbk9iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oMjgpOwp2YXIgaXNPYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIyKTsKdmFyIGFuSW5zdGFuY2UgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEyMyk7CnZhciBpdGVyYXRlID0gX193X3BkZmpzX3JlcXVpcmVfXygxMjQpOwp2YXIgQXJyYXlJdGVyYXRpb25Nb2R1bGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE1Nik7CnZhciAkaGFzID0gX193X3BkZmpzX3JlcXVpcmVfXygyMyk7CnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gX193X3BkZmpzX3JlcXVpcmVfXygzMyk7CnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7CnZhciBpbnRlcm5hbFN0YXRlR2V0dGVyRm9yID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3I7CnZhciBmaW5kID0gQXJyYXlJdGVyYXRpb25Nb2R1bGUuZmluZDsKdmFyIGZpbmRJbmRleCA9IEFycmF5SXRlcmF0aW9uTW9kdWxlLmZpbmRJbmRleDsKdmFyIGlkID0gMDsKdmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAoc3RvcmUpIHsKIHJldHVybiBzdG9yZS5mcm96ZW4gfHwgKHN0b3JlLmZyb3plbiA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKCkpOwp9Owp2YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHsKIHRoaXMuZW50cmllcyA9IFtdOwp9Owp2YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24gKHN0b3JlLCBrZXkpIHsKIHJldHVybiBmaW5kKHN0b3JlLmVudHJpZXMsIGZ1bmN0aW9uIChpdCkgewogIHJldHVybiBpdFswXSA9PT0ga2V5OwogfSk7Cn07ClVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0gewogZ2V0OiBmdW5jdGlvbiAoa2V5KSB7CiAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7CiAgaWYgKGVudHJ5KQogICByZXR1cm4gZW50cnlbMV07CiB9LAogaGFzOiBmdW5jdGlvbiAoa2V5KSB7CiAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7CiB9LAogc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkgewogIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpOwogIGlmIChlbnRyeSkKICAgZW50cnlbMV0gPSB2YWx1ZTsKICBlbHNlCiAgIHRoaXMuZW50cmllcy5wdXNoKFsKICAgIGtleSwKICAgIHZhbHVlCiAgIF0pOwogfSwKICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7CiAgdmFyIGluZGV4ID0gZmluZEluZGV4KHRoaXMuZW50cmllcywgZnVuY3Rpb24gKGl0KSB7CiAgIHJldHVybiBpdFswXSA9PT0ga2V5OwogIH0pOwogIGlmICh+aW5kZXgpCiAgIHRoaXMuZW50cmllcy5zcGxpY2UoaW5kZXgsIDEpOwogIHJldHVybiAhIX5pbmRleDsKIH0KfTsKbW9kdWxlLmV4cG9ydHMgPSB7CiBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIENPTlNUUlVDVE9SX05BTUUsIElTX01BUCwgQURERVIpIHsKICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7CiAgIGFuSW5zdGFuY2UodGhhdCwgQywgQ09OU1RSVUNUT1JfTkFNRSk7CiAgIHNldEludGVybmFsU3RhdGUodGhhdCwgewogICAgdHlwZTogQ09OU1RSVUNUT1JfTkFNRSwKICAgIGlkOiBpZCsrLAogICAgZnJvemVuOiB1bmRlZmluZWQKICAgfSk7CiAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpCiAgICBpdGVyYXRlKGl0ZXJhYmxlLCB0aGF0W0FEREVSXSwgdGhhdCwgSVNfTUFQKTsKICB9KTsKICB2YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IGludGVybmFsU3RhdGVHZXR0ZXJGb3IoQ09OU1RSVUNUT1JfTkFNRSk7CiAgdmFyIGRlZmluZSA9IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7CiAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhhdCk7CiAgIHZhciBkYXRhID0gZ2V0V2Vha0RhdGEoYW5PYmplY3Qoa2V5KSwgdHJ1ZSk7CiAgIGlmIChkYXRhID09PSB0cnVlKQogICAgdW5jYXVnaHRGcm96ZW5TdG9yZShzdGF0ZSkuc2V0KGtleSwgdmFsdWUpOwogICBlbHNlCiAgICBkYXRhW3N0YXRlLmlkXSA9IHZhbHVlOwogICByZXR1cm4gdGhhdDsKICB9OwogIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7CiAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7CiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpOwogICAgaWYgKCFpc09iamVjdChrZXkpKQogICAgIHJldHVybiBmYWxzZTsKICAgIHZhciBkYXRhID0gZ2V0V2Vha0RhdGEoa2V5KTsKICAgIGlmIChkYXRhID09PSB0cnVlKQogICAgIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHN0YXRlKVsnZGVsZXRlJ10oa2V5KTsKICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgc3RhdGUuaWQpICYmIGRlbGV0ZSBkYXRhW3N0YXRlLmlkXTsKICAgfSwKICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7CiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpOwogICAgaWYgKCFpc09iamVjdChrZXkpKQogICAgIHJldHVybiBmYWxzZTsKICAgIHZhciBkYXRhID0gZ2V0V2Vha0RhdGEoa2V5KTsKICAgIGlmIChkYXRhID09PSB0cnVlKQogICAgIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHN0YXRlKS5oYXMoa2V5KTsKICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgc3RhdGUuaWQpOwogICB9CiAgfSk7CiAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIElTX01BUCA/IHsKICAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7CiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpOwogICAgaWYgKGlzT2JqZWN0KGtleSkpIHsKICAgICB2YXIgZGF0YSA9IGdldFdlYWtEYXRhKGtleSk7CiAgICAgaWYgKGRhdGEgPT09IHRydWUpCiAgICAgIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHN0YXRlKS5nZXQoa2V5KTsKICAgICByZXR1cm4gZGF0YSA/IGRhdGFbc3RhdGUuaWRdIDogdW5kZWZpbmVkOwogICAgfQogICB9LAogICBzZXQ6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7CiAgICByZXR1cm4gZGVmaW5lKHRoaXMsIGtleSwgdmFsdWUpOwogICB9CiAgfSA6IHsKICAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHsKICAgIHJldHVybiBkZWZpbmUodGhpcywgdmFsdWUsIHRydWUpOwogICB9CiAgfSk7CiAgcmV0dXJuIEM7CiB9Cn07CgovKioqLyB9KSwKLyogMTU2ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBiaW5kID0gX193X3BkZmpzX3JlcXVpcmVfXyg2Mik7CnZhciBJbmRleGVkT2JqZWN0ID0gX193X3BkZmpzX3JlcXVpcmVfXygxOCk7CnZhciB0b09iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oODMpOwp2YXIgdG9MZW5ndGggPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQ3KTsKdmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTU3KTsKdmFyIHB1c2ggPSBbXS5wdXNoOwp2YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKFRZUEUpIHsKIHZhciBJU19NQVAgPSBUWVBFID09IDE7CiB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyOwogdmFyIElTX1NPTUUgPSBUWVBFID09IDM7CiB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7CiB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjsKIHZhciBOT19IT0xFUyA9IFRZUEUgPT0gNSB8fCBJU19GSU5EX0lOREVYOwogcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHsKICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTsKICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7CiAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQsIDMpOwogIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7CiAgdmFyIGluZGV4ID0gMDsKICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlOwogIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkOwogIHZhciB2YWx1ZSwgcmVzdWx0OwogIGZvciAoOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykKICAgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHsKICAgIHZhbHVlID0gc2VsZltpbmRleF07CiAgICByZXN1bHQgPSBib3VuZEZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgTyk7CiAgICBpZiAoVFlQRSkgewogICAgIGlmIChJU19NQVApCiAgICAgIHRhcmdldFtpbmRleF0gPSByZXN1bHQ7CiAgICAgZWxzZSBpZiAocmVzdWx0KQogICAgICBzd2l0Y2ggKFRZUEUpIHsKICAgICAgY2FzZSAzOgogICAgICAgcmV0dXJuIHRydWU7CiAgICAgIGNhc2UgNToKICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgY2FzZSA2OgogICAgICAgcmV0dXJuIGluZGV4OwogICAgICBjYXNlIDI6CiAgICAgICBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7CiAgICAgIH0KICAgICBlbHNlIGlmIChJU19FVkVSWSkKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICB9CiAgcmV0dXJuIElTX0ZJTkRfSU5ERVggPyAtMSA6IElTX1NPTUUgfHwgSVNfRVZFUlkgPyBJU19FVkVSWSA6IHRhcmdldDsKIH07Cn07Cm1vZHVsZS5leHBvcnRzID0gewogZm9yRWFjaDogY3JlYXRlTWV0aG9kKDApLAogbWFwOiBjcmVhdGVNZXRob2QoMSksCiBmaWx0ZXI6IGNyZWF0ZU1ldGhvZCgyKSwKIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSwKIGV2ZXJ5OiBjcmVhdGVNZXRob2QoNCksCiBmaW5kOiBjcmVhdGVNZXRob2QoNSksCiBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KQp9OwoKLyoqKi8gfSksCi8qIDE1NyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgaXNPYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIyKTsKdmFyIGlzQXJyYXkgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE1OCk7CnZhciB3ZWxsS25vd25TeW1ib2wgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDU3KTsKdmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWxBcnJheSwgbGVuZ3RoKSB7CiB2YXIgQzsKIGlmIChpc0FycmF5KG9yaWdpbmFsQXJyYXkpKSB7CiAgQyA9IG9yaWdpbmFsQXJyYXkuY29uc3RydWN0b3I7CiAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkKICAgQyA9IHVuZGVmaW5lZDsKICBlbHNlIGlmIChpc09iamVjdChDKSkgewogICBDID0gQ1tTUEVDSUVTXTsKICAgaWYgKEMgPT09IG51bGwpCiAgICBDID0gdW5kZWZpbmVkOwogIH0KIH0KIHJldHVybiBuZXcgKEMgPT09IHVuZGVmaW5lZCA/IEFycmF5IDogQykobGVuZ3RoID09PSAwID8gMCA6IGxlbmd0aCk7Cn07CgovKioqLyB9KSwKLyogMTU4ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBjbGFzc29mID0gX193X3BkZmpzX3JlcXVpcmVfXygxOSk7Cm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykgewogcmV0dXJuIGNsYXNzb2YoYXJnKSA9PSAnQXJyYXknOwp9OwoKLyoqKi8gfSksCi8qIDE1OSAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgpfX3dfcGRmanNfcmVxdWlyZV9fKDExNCk7Cl9fd19wZGZqc19yZXF1aXJlX18oMTYwKTsKX193X3BkZmpzX3JlcXVpcmVfXygxMTYpOwp2YXIgcGF0aCA9IF9fd19wZGZqc19yZXF1aXJlX18oNDMpOwptb2R1bGUuZXhwb3J0cyA9IHBhdGguV2Vha1NldDsKCi8qKiovIH0pLAovKiAxNjAgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKdmFyIGNvbGxlY3Rpb24gPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE0Nik7CnZhciBjb2xsZWN0aW9uV2VhayA9IF9fd19wZGZqc19yZXF1aXJlX18oMTU1KTsKY29sbGVjdGlvbignV2Vha1NldCcsIGZ1bmN0aW9uIChpbml0KSB7CiByZXR1cm4gZnVuY3Rpb24gV2Vha1NldCgpIHsKICByZXR1cm4gaW5pdCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsKIH07Cn0sIGNvbGxlY3Rpb25XZWFrKTsKCi8qKiovIH0pLAovKiAxNjEgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKX193X3BkZmpzX3JlcXVpcmVfXygxNjIpOwp2YXIgZW50cnlVbmJpbmQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDYxKTsKbW9kdWxlLmV4cG9ydHMgPSBlbnRyeVVuYmluZCgnU3RyaW5nJywgJ2NvZGVQb2ludEF0Jyk7CgovKioqLyB9KSwKLyogMTYyICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCnZhciAkID0gX193X3BkZmpzX3JlcXVpcmVfXygxMCk7CnZhciBjb2RlQXQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDc4KS5jb2RlQXQ7CiQoewogdGFyZ2V0OiAnU3RyaW5nJywKIHByb3RvOiB0cnVlCn0sIHsKIGNvZGVQb2ludEF0OiBmdW5jdGlvbiBjb2RlUG9pbnRBdChwb3MpIHsKICByZXR1cm4gY29kZUF0KHRoaXMsIHBvcyk7CiB9Cn0pOwoKLyoqKi8gfSksCi8qIDE2MyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgpfX3dfcGRmanNfcmVxdWlyZV9fKDE2NCk7CnZhciBwYXRoID0gX193X3BkZmpzX3JlcXVpcmVfXyg0Myk7Cm1vZHVsZS5leHBvcnRzID0gcGF0aC5TdHJpbmcuZnJvbUNvZGVQb2ludDsKCi8qKiovIH0pLAovKiAxNjQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyICQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwKTsKdmFyIHRvQWJzb2x1dGVJbmRleCA9IF9fd19wZGZqc19yZXF1aXJlX18oNDkpOwp2YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTsKdmFyIG5hdGl2ZUZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDsKdmFyIElOQ09SUkVDVF9MRU5HVEggPSAhIW5hdGl2ZUZyb21Db2RlUG9pbnQgJiYgbmF0aXZlRnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMTsKJCh7CiB0YXJnZXQ6ICdTdHJpbmcnLAogc3RhdDogdHJ1ZSwKIGZvcmNlZDogSU5DT1JSRUNUX0xFTkdUSAp9LCB7CiBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHsKICB2YXIgZWxlbWVudHMgPSBbXTsKICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsKICB2YXIgaSA9IDA7CiAgdmFyIGNvZGU7CiAgd2hpbGUgKGxlbmd0aCA+IGkpIHsKICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTsKICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwRkZGRikgIT09IGNvZGUpCiAgICB0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTsKICAgZWxlbWVudHMucHVzaChjb2RlIDwgMHgxMDAwMCA/IGZyb21DaGFyQ29kZShjb2RlKSA6IGZyb21DaGFyQ29kZSgoKGNvZGUgLT0gMHgxMDAwMCkgPj4gMTApICsgMHhEODAwLCBjb2RlICUgMHg0MDAgKyAweERDMDApKTsKICB9CiAgcmV0dXJuIGVsZW1lbnRzLmpvaW4oJycpOwogfQp9KTsKCi8qKiovIH0pLAovKiAxNjUgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKX193X3BkZmpzX3JlcXVpcmVfXygxNjYpOwpfX3dfcGRmanNfcmVxdWlyZV9fKDExNCk7Cl9fd19wZGZqc19yZXF1aXJlX18oMTY4KTsKX193X3BkZmpzX3JlcXVpcmVfXygxNzIpOwpfX3dfcGRmanNfcmVxdWlyZV9fKDE3Myk7Cl9fd19wZGZqc19yZXF1aXJlX18oMTc0KTsKX193X3BkZmpzX3JlcXVpcmVfXygxNzUpOwpfX3dfcGRmanNfcmVxdWlyZV9fKDE3Nik7Cl9fd19wZGZqc19yZXF1aXJlX18oMTc3KTsKX193X3BkZmpzX3JlcXVpcmVfXygxNzgpOwpfX3dfcGRmanNfcmVxdWlyZV9fKDE3OSk7Cl9fd19wZGZqc19yZXF1aXJlX18oMTgwKTsKX193X3BkZmpzX3JlcXVpcmVfXygxODEpOwpfX3dfcGRmanNfcmVxdWlyZV9fKDE4Mik7Cl9fd19wZGZqc19yZXF1aXJlX18oMTgzKTsKX193X3BkZmpzX3JlcXVpcmVfXygxODQpOwpfX3dfcGRmanNfcmVxdWlyZV9fKDE4NSk7Cl9fd19wZGZqc19yZXF1aXJlX18oMTg2KTsKX193X3BkZmpzX3JlcXVpcmVfXygxODcpOwp2YXIgcGF0aCA9IF9fd19wZGZqc19yZXF1aXJlX18oNDMpOwptb2R1bGUuZXhwb3J0cyA9IHBhdGguU3ltYm9sOwoKLyoqKi8gfSksCi8qIDE2NiAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7Cgp2YXIgJCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTApOwp2YXIgZmFpbHMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE0KTsKdmFyIGlzQXJyYXkgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE1OCk7CnZhciBpc09iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oMjIpOwp2YXIgdG9PYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDgzKTsKdmFyIHRvTGVuZ3RoID0gX193X3BkZmpzX3JlcXVpcmVfXyg0Nyk7CnZhciBjcmVhdGVQcm9wZXJ0eSA9IF9fd19wZGZqc19yZXF1aXJlX18oOTMpOwp2YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gX193X3BkZmpzX3JlcXVpcmVfXygxNTcpOwp2YXIgYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTY3KTsKdmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNTcpOwp2YXIgVjhfVkVSU0lPTiA9IF9fd19wZGZqc19yZXF1aXJlX18oMTMzKTsKdmFyIElTX0NPTkNBVF9TUFJFQURBQkxFID0gd2VsbEtub3duU3ltYm9sKCdpc0NvbmNhdFNwcmVhZGFibGUnKTsKdmFyIE1BWF9TQUZFX0lOVEVHRVIgPSAweDFGRkZGRkZGRkZGRkZGOwp2YXIgTUFYSU1VTV9BTExPV0VEX0lOREVYX0VYQ0VFREVEID0gJ01heGltdW0gYWxsb3dlZCBpbmRleCBleGNlZWRlZCc7CnZhciBJU19DT05DQVRfU1BSRUFEQUJMRV9TVVBQT1JUID0gVjhfVkVSU0lPTiA+PSA1MSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkgewogdmFyIGFycmF5ID0gW107CiBhcnJheVtJU19DT05DQVRfU1BSRUFEQUJMRV0gPSBmYWxzZTsKIHJldHVybiBhcnJheS5jb25jYXQoKVswXSAhPT0gYXJyYXk7Cn0pOwp2YXIgU1BFQ0lFU19TVVBQT1JUID0gYXJyYXlNZXRob2RIYXNTcGVjaWVzU3VwcG9ydCgnY29uY2F0Jyk7CnZhciBpc0NvbmNhdFNwcmVhZGFibGUgPSBmdW5jdGlvbiAoTykgewogaWYgKCFpc09iamVjdChPKSkKICByZXR1cm4gZmFsc2U7CiB2YXIgc3ByZWFkYWJsZSA9IE9bSVNfQ09OQ0FUX1NQUkVBREFCTEVdOwogcmV0dXJuIHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoTyk7Cn07CnZhciBGT1JDRUQgPSAhSVNfQ09OQ0FUX1NQUkVBREFCTEVfU1VQUE9SVCB8fCAhU1BFQ0lFU19TVVBQT1JUOwokKHsKIHRhcmdldDogJ0FycmF5JywKIHByb3RvOiB0cnVlLAogZm9yY2VkOiBGT1JDRUQKfSwgewogY29uY2F0OiBmdW5jdGlvbiBjb25jYXQoYXJnKSB7CiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTsKICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTsKICB2YXIgbiA9IDA7CiAgdmFyIGksIGssIGxlbmd0aCwgbGVuLCBFOwogIGZvciAoaSA9IC0xLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgRSA9IGkgPT09IC0xID8gTyA6IGFyZ3VtZW50c1tpXTsKICAgaWYgKGlzQ29uY2F0U3ByZWFkYWJsZShFKSkgewogICAgbGVuID0gdG9MZW5ndGgoRS5sZW5ndGgpOwogICAgaWYgKG4gKyBsZW4gPiBNQVhfU0FGRV9JTlRFR0VSKQogICAgIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQpOwogICAgZm9yIChrID0gMDsgayA8IGxlbjsgaysrLCBuKyspCiAgICAgaWYgKGsgaW4gRSkKICAgICAgY3JlYXRlUHJvcGVydHkoQSwgbiwgRVtrXSk7CiAgIH0gZWxzZSB7CiAgICBpZiAobiA+PSBNQVhfU0FGRV9JTlRFR0VSKQogICAgIHRocm93IFR5cGVFcnJvcihNQVhJTVVNX0FMTE9XRURfSU5ERVhfRVhDRUVERUQpOwogICAgY3JlYXRlUHJvcGVydHkoQSwgbisrLCBFKTsKICAgfQogIH0KICBBLmxlbmd0aCA9IG47CiAgcmV0dXJuIEE7CiB9Cn0pOwoKLyoqKi8gfSksCi8qIDE2NyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgZmFpbHMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE0KTsKdmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNTcpOwp2YXIgVjhfVkVSU0lPTiA9IF9fd19wZGZqc19yZXF1aXJlX18oMTMzKTsKdmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTsKbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTUVUSE9EX05BTUUpIHsKIHJldHVybiBWOF9WRVJTSU9OID49IDUxIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7CiAgdmFyIGFycmF5ID0gW107CiAgdmFyIGNvbnN0cnVjdG9yID0gYXJyYXkuY29uc3RydWN0b3IgPSB7fTsKICBjb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsKICAgcmV0dXJuIHsgZm9vOiAxIH07CiAgfTsKICByZXR1cm4gYXJyYXlbTUVUSE9EX05BTUVdKEJvb2xlYW4pLmZvbyAhPT0gMTsKIH0pOwp9OwoKLyoqKi8gfSksCi8qIDE2OCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7Cgp2YXIgJCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTApOwp2YXIgZ2xvYmFsID0gX193X3BkZmpzX3JlcXVpcmVfXygxMSk7CnZhciBnZXRCdWlsdEluID0gX193X3BkZmpzX3JlcXVpcmVfXyg0Mik7CnZhciBJU19QVVJFID0gX193X3BkZmpzX3JlcXVpcmVfXygzNyk7CnZhciBERVNDUklQVE9SUyA9IF9fd19wZGZqc19yZXF1aXJlX18oMTMpOwp2YXIgTkFUSVZFX1NZTUJPTCA9IF9fd19wZGZqc19yZXF1aXJlX18oNTgpOwp2YXIgVVNFX1NZTUJPTF9BU19VSUQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDU5KTsKdmFyIGZhaWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygxNCk7CnZhciBoYXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIzKTsKdmFyIGlzQXJyYXkgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE1OCk7CnZhciBpc09iamVjdCA9IF9fd19wZGZqc19yZXF1aXJlX18oMjIpOwp2YXIgYW5PYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDI4KTsKdmFyIHRvT2JqZWN0ID0gX193X3BkZmpzX3JlcXVpcmVfXyg4Myk7CnZhciB0b0luZGV4ZWRPYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE3KTsKdmFyIHRvUHJpbWl0aXZlID0gX193X3BkZmpzX3JlcXVpcmVfXygyMSk7CnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE2KTsKdmFyIG5hdGl2ZU9iamVjdENyZWF0ZSA9IF9fd19wZGZqc19yZXF1aXJlX18oNzEpOwp2YXIgb2JqZWN0S2V5cyA9IF9fd19wZGZqc19yZXF1aXJlX18oNzMpOwp2YXIgZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSA9IF9fd19wZGZqc19yZXF1aXJlX18oNDQpOwp2YXIgZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsID0gX193X3BkZmpzX3JlcXVpcmVfXygxNjkpOwp2YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gX193X3BkZmpzX3JlcXVpcmVfXyg1MSk7CnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEyKTsKdmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gX193X3BkZmpzX3JlcXVpcmVfXygyNyk7CnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMTUpOwp2YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gX193X3BkZmpzX3JlcXVpcmVfXygyNik7CnZhciByZWRlZmluZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMjkpOwp2YXIgc2hhcmVkID0gX193X3BkZmpzX3JlcXVpcmVfXygzNik7CnZhciBzaGFyZWRLZXkgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDM1KTsKdmFyIGhpZGRlbktleXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDM5KTsKdmFyIHVpZCA9IF9fd19wZGZqc19yZXF1aXJlX18oMzgpOwp2YXIgd2VsbEtub3duU3ltYm9sID0gX193X3BkZmpzX3JlcXVpcmVfXyg1Nyk7CnZhciB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlID0gX193X3BkZmpzX3JlcXVpcmVfXygxNzApOwp2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gX193X3BkZmpzX3JlcXVpcmVfXygxNzEpOwp2YXIgc2V0VG9TdHJpbmdUYWcgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDg1KTsKdmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDMzKTsKdmFyICRmb3JFYWNoID0gX193X3BkZmpzX3JlcXVpcmVfXygxNTYpLmZvckVhY2g7CnZhciBISURERU4gPSBzaGFyZWRLZXkoJ2hpZGRlbicpOwp2YXIgU1lNQk9MID0gJ1N5bWJvbCc7CnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJzsKdmFyIFRPX1BSSU1JVElWRSA9IHdlbGxLbm93blN5bWJvbCgndG9QcmltaXRpdmUnKTsKdmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDsKdmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTWU1CT0wpOwp2YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0W1BST1RPVFlQRV07CnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDsKdmFyICRzdHJpbmdpZnkgPSBnZXRCdWlsdEluKCdKU09OJywgJ3N0cmluZ2lmeScpOwp2YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlLmY7CnZhciBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7CnZhciBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzID0gZ2V0T3duUHJvcGVydHlOYW1lc0V4dGVybmFsLmY7CnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmY7CnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7CnZhciBPYmplY3RQcm90b3R5cGVTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7CnZhciBTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5ID0gc2hhcmVkKCdzdHJpbmctdG8tc3ltYm9sLXJlZ2lzdHJ5Jyk7CnZhciBTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5ID0gc2hhcmVkKCdzeW1ib2wtdG8tc3RyaW5nLXJlZ2lzdHJ5Jyk7CnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpOwp2YXIgUU9iamVjdCA9IGdsb2JhbC5RT2JqZWN0Owp2YXIgVVNFX1NFVFRFUiA9ICFRT2JqZWN0IHx8ICFRT2JqZWN0W1BST1RPVFlQRV0gfHwgIVFPYmplY3RbUFJPVE9UWVBFXS5maW5kQ2hpbGQ7CnZhciBzZXRTeW1ib2xEZXNjcmlwdG9yID0gREVTQ1JJUFRPUlMgJiYgZmFpbHMoZnVuY3Rpb24gKCkgewogcmV0dXJuIG5hdGl2ZU9iamVjdENyZWF0ZShuYXRpdmVEZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7CiAgZ2V0OiBmdW5jdGlvbiAoKSB7CiAgIHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsKICB9CiB9KSkuYSAhPSA3Owp9KSA/IGZ1bmN0aW9uIChPLCBQLCBBdHRyaWJ1dGVzKSB7CiB2YXIgT2JqZWN0UHJvdG90eXBlRGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIFApOwogaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IpCiAgZGVsZXRlIE9iamVjdFByb3RvdHlwZVtQXTsKIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpOwogaWYgKE9iamVjdFByb3RvdHlwZURlc2NyaXB0b3IgJiYgTyAhPT0gT2JqZWN0UHJvdG90eXBlKSB7CiAgbmF0aXZlRGVmaW5lUHJvcGVydHkoT2JqZWN0UHJvdG90eXBlLCBQLCBPYmplY3RQcm90b3R5cGVEZXNjcmlwdG9yKTsKIH0KfSA6IG5hdGl2ZURlZmluZVByb3BlcnR5Owp2YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcsIGRlc2NyaXB0aW9uKSB7CiB2YXIgc3ltYm9sID0gQWxsU3ltYm9sc1t0YWddID0gbmF0aXZlT2JqZWN0Q3JlYXRlKCRTeW1ib2xbUFJPVE9UWVBFXSk7CiBzZXRJbnRlcm5hbFN0YXRlKHN5bWJvbCwgewogIHR5cGU6IFNZTUJPTCwKICB0YWc6IHRhZywKICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24KIH0pOwogaWYgKCFERVNDUklQVE9SUykKICBzeW1ib2wuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjsKIHJldHVybiBzeW1ib2w7Cn07CnZhciBpc1N5bWJvbCA9IFVTRV9TWU1CT0xfQVNfVUlEID8gZnVuY3Rpb24gKGl0KSB7CiByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnOwp9IDogZnVuY3Rpb24gKGl0KSB7CiByZXR1cm4gT2JqZWN0KGl0KSBpbnN0YW5jZW9mICRTeW1ib2w7Cn07CnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7CiBpZiAoTyA9PT0gT2JqZWN0UHJvdG90eXBlKQogICRkZWZpbmVQcm9wZXJ0eShPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQLCBBdHRyaWJ1dGVzKTsKIGFuT2JqZWN0KE8pOwogdmFyIGtleSA9IHRvUHJpbWl0aXZlKFAsIHRydWUpOwogYW5PYmplY3QoQXR0cmlidXRlcyk7CiBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHsKICBpZiAoIUF0dHJpYnV0ZXMuZW51bWVyYWJsZSkgewogICBpZiAoIWhhcyhPLCBISURERU4pKQogICAgbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgSElEREVOLCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwge30pKTsKICAgT1tISURERU5dW2tleV0gPSB0cnVlOwogIH0gZWxzZSB7CiAgIGlmIChoYXMoTywgSElEREVOKSAmJiBPW0hJRERFTl1ba2V5XSkKICAgIE9bSElEREVOXVtrZXldID0gZmFsc2U7CiAgIEF0dHJpYnV0ZXMgPSBuYXRpdmVPYmplY3RDcmVhdGUoQXR0cmlidXRlcywgeyBlbnVtZXJhYmxlOiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgZmFsc2UpIH0pOwogIH0KICByZXR1cm4gc2V0U3ltYm9sRGVzY3JpcHRvcihPLCBrZXksIEF0dHJpYnV0ZXMpOwogfQogcmV0dXJuIG5hdGl2ZURlZmluZVByb3BlcnR5KE8sIGtleSwgQXR0cmlidXRlcyk7Cn07CnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykgewogYW5PYmplY3QoTyk7CiB2YXIgcHJvcGVydGllcyA9IHRvSW5kZXhlZE9iamVjdChQcm9wZXJ0aWVzKTsKIHZhciBrZXlzID0gb2JqZWN0S2V5cyhwcm9wZXJ0aWVzKS5jb25jYXQoJGdldE93blByb3BlcnR5U3ltYm9scyhwcm9wZXJ0aWVzKSk7CiAkZm9yRWFjaChrZXlzLCBmdW5jdGlvbiAoa2V5KSB7CiAgaWYgKCFERVNDUklQVE9SUyB8fCAkcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChwcm9wZXJ0aWVzLCBrZXkpKQogICAkZGVmaW5lUHJvcGVydHkoTywga2V5LCBwcm9wZXJ0aWVzW2tleV0pOwogfSk7CiByZXR1cm4gTzsKfTsKdmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykgewogcmV0dXJuIFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCA/IG5hdGl2ZU9iamVjdENyZWF0ZShPKSA6ICRkZWZpbmVQcm9wZXJ0aWVzKG5hdGl2ZU9iamVjdENyZWF0ZShPKSwgUHJvcGVydGllcyk7Cn07CnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7CiB2YXIgUCA9IHRvUHJpbWl0aXZlKFYsIHRydWUpOwogdmFyIGVudW1lcmFibGUgPSBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHRoaXMsIFApOwogaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSAmJiBoYXMoQWxsU3ltYm9scywgUCkgJiYgIWhhcyhPYmplY3RQcm90b3R5cGVTeW1ib2xzLCBQKSkKICByZXR1cm4gZmFsc2U7CiByZXR1cm4gZW51bWVyYWJsZSB8fCAhaGFzKHRoaXMsIFApIHx8ICFoYXMoQWxsU3ltYm9scywgUCkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW1BdID8gZW51bWVyYWJsZSA6IHRydWU7Cn07CnZhciAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHsKIHZhciBpdCA9IHRvSW5kZXhlZE9iamVjdChPKTsKIHZhciBrZXkgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTsKIGlmIChpdCA9PT0gT2JqZWN0UHJvdG90eXBlICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT2JqZWN0UHJvdG90eXBlU3ltYm9scywga2V5KSkKICByZXR1cm47CiB2YXIgZGVzY3JpcHRvciA9IG5hdGl2ZUdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KTsKIGlmIChkZXNjcmlwdG9yICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICEoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkpIHsKICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSB0cnVlOwogfQogcmV0dXJuIGRlc2NyaXB0b3I7Cn07CnZhciAkZ2V0T3duUHJvcGVydHlOYW1lcyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykgewogdmFyIG5hbWVzID0gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoTykpOwogdmFyIHJlc3VsdCA9IFtdOwogJGZvckVhY2gobmFtZXMsIGZ1bmN0aW9uIChrZXkpIHsKICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoaGlkZGVuS2V5cywga2V5KSkKICAgcmVzdWx0LnB1c2goa2V5KTsKIH0pOwogcmV0dXJuIHJlc3VsdDsKfTsKdmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoTykgewogdmFyIElTX09CSkVDVF9QUk9UT1RZUEUgPSBPID09PSBPYmplY3RQcm90b3R5cGU7CiB2YXIgbmFtZXMgPSBuYXRpdmVHZXRPd25Qcm9wZXJ0eU5hbWVzKElTX09CSkVDVF9QUk9UT1RZUEUgPyBPYmplY3RQcm90b3R5cGVTeW1ib2xzIDogdG9JbmRleGVkT2JqZWN0KE8pKTsKIHZhciByZXN1bHQgPSBbXTsKICRmb3JFYWNoKG5hbWVzLCBmdW5jdGlvbiAoa2V5KSB7CiAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICghSVNfT0JKRUNUX1BST1RPVFlQRSB8fCBoYXMoT2JqZWN0UHJvdG90eXBlLCBrZXkpKSkgewogICByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pOwogIH0KIH0pOwogcmV0dXJuIHJlc3VsdDsKfTsKaWYgKCFOQVRJVkVfU1lNQk9MKSB7CiAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkgewogIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkKICAgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3InKTsKICB2YXIgZGVzY3JpcHRpb24gPSAhYXJndW1lbnRzLmxlbmd0aCB8fCBhcmd1bWVudHNbMF0gPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IFN0cmluZyhhcmd1bWVudHNbMF0pOwogIHZhciB0YWcgPSB1aWQoZGVzY3JpcHRpb24pOwogIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodmFsdWUpIHsKICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvdHlwZSkKICAgIHNldHRlci5jYWxsKE9iamVjdFByb3RvdHlwZVN5bWJvbHMsIHZhbHVlKTsKICAgaWYgKGhhcyh0aGlzLCBISURERU4pICYmIGhhcyh0aGlzW0hJRERFTl0sIHRhZykpCiAgICB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlOwogICBzZXRTeW1ib2xEZXNjcmlwdG9yKHRoaXMsIHRhZywgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIHZhbHVlKSk7CiAgfTsKICBpZiAoREVTQ1JJUFRPUlMgJiYgVVNFX1NFVFRFUikKICAgc2V0U3ltYm9sRGVzY3JpcHRvcihPYmplY3RQcm90b3R5cGUsIHRhZywgewogICAgY29uZmlndXJhYmxlOiB0cnVlLAogICAgc2V0OiBzZXR0ZXIKICAgfSk7CiAgcmV0dXJuIHdyYXAodGFnLCBkZXNjcmlwdGlvbik7CiB9OwogcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHsKICByZXR1cm4gZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS50YWc7CiB9KTsKIHJlZGVmaW5lKCRTeW1ib2wsICd3aXRob3V0U2V0dGVyJywgZnVuY3Rpb24gKGRlc2NyaXB0aW9uKSB7CiAgcmV0dXJuIHdyYXAodWlkKGRlc2NyaXB0aW9uKSwgZGVzY3JpcHRpb24pOwogfSk7CiBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlOwogZGVmaW5lUHJvcGVydHlNb2R1bGUuZiA9ICRkZWZpbmVQcm9wZXJ0eTsKIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjsKIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUuZiA9IGdldE93blByb3BlcnR5TmFtZXNFeHRlcm5hbC5mID0gJGdldE93blByb3BlcnR5TmFtZXM7CiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7CiB3cmFwcGVkV2VsbEtub3duU3ltYm9sTW9kdWxlLmYgPSBmdW5jdGlvbiAobmFtZSkgewogIHJldHVybiB3cmFwKHdlbGxLbm93blN5bWJvbChuYW1lKSwgbmFtZSk7CiB9OwogaWYgKERFU0NSSVBUT1JTKSB7CiAgbmF0aXZlRGVmaW5lUHJvcGVydHkoJFN5bWJvbFtQUk9UT1RZUEVdLCAnZGVzY3JpcHRpb24nLCB7CiAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgZ2V0OiBmdW5jdGlvbiBkZXNjcmlwdGlvbigpIHsKICAgIHJldHVybiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLmRlc2NyaXB0aW9uOwogICB9CiAgfSk7CiAgaWYgKCFJU19QVVJFKSB7CiAgIHJlZGVmaW5lKE9iamVjdFByb3RvdHlwZSwgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB7IHVuc2FmZTogdHJ1ZSB9KTsKICB9CiB9Cn0KJCh7CiBnbG9iYWw6IHRydWUsCiB3cmFwOiB0cnVlLAogZm9yY2VkOiAhTkFUSVZFX1NZTUJPTCwKIHNoYW06ICFOQVRJVkVfU1lNQk9MCn0sIHsgU3ltYm9sOiAkU3ltYm9sIH0pOwokZm9yRWFjaChvYmplY3RLZXlzKFdlbGxLbm93blN5bWJvbHNTdG9yZSksIGZ1bmN0aW9uIChuYW1lKSB7CiBkZWZpbmVXZWxsS25vd25TeW1ib2wobmFtZSk7Cn0pOwokKHsKIHRhcmdldDogU1lNQk9MLAogc3RhdDogdHJ1ZSwKIGZvcmNlZDogIU5BVElWRV9TWU1CT0wKfSwgewogJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHsKICB2YXIgc3RyaW5nID0gU3RyaW5nKGtleSk7CiAgaWYgKGhhcyhTdHJpbmdUb1N5bWJvbFJlZ2lzdHJ5LCBzdHJpbmcpKQogICByZXR1cm4gU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddOwogIHZhciBzeW1ib2wgPSAkU3ltYm9sKHN0cmluZyk7CiAgU3RyaW5nVG9TeW1ib2xSZWdpc3RyeVtzdHJpbmddID0gc3ltYm9sOwogIFN5bWJvbFRvU3RyaW5nUmVnaXN0cnlbc3ltYm9sXSA9IHN0cmluZzsKICByZXR1cm4gc3ltYm9sOwogfSwKIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkgewogIGlmICghaXNTeW1ib2woc3ltKSkKICAgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sJyk7CiAgaWYgKGhhcyhTeW1ib2xUb1N0cmluZ1JlZ2lzdHJ5LCBzeW0pKQogICByZXR1cm4gU3ltYm9sVG9TdHJpbmdSZWdpc3RyeVtzeW1dOwogfSwKIHVzZVNldHRlcjogZnVuY3Rpb24gKCkgewogIFVTRV9TRVRURVIgPSB0cnVlOwogfSwKIHVzZVNpbXBsZTogZnVuY3Rpb24gKCkgewogIFVTRV9TRVRURVIgPSBmYWxzZTsKIH0KfSk7CiQoewogdGFyZ2V0OiAnT2JqZWN0JywKIHN0YXQ6IHRydWUsCiBmb3JjZWQ6ICFOQVRJVkVfU1lNQk9MLAogc2hhbTogIURFU0NSSVBUT1JTCn0sIHsKIGNyZWF0ZTogJGNyZWF0ZSwKIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksCiBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcywKIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldE93blByb3BlcnR5RGVzY3JpcHRvcgp9KTsKJCh7CiB0YXJnZXQ6ICdPYmplY3QnLAogc3RhdDogdHJ1ZSwKIGZvcmNlZDogIU5BVElWRV9TWU1CT0wKfSwgewogZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsCiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHM6ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMKfSk7CiQoewogdGFyZ2V0OiAnT2JqZWN0JywKIHN0YXQ6IHRydWUsCiBmb3JjZWQ6IGZhaWxzKGZ1bmN0aW9uICgpIHsKICBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZigxKTsKIH0pCn0sIHsKIGdldE93blByb3BlcnR5U3ltYm9sczogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSB7CiAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mKHRvT2JqZWN0KGl0KSk7CiB9Cn0pOwppZiAoJHN0cmluZ2lmeSkgewogdmFyIEZPUkNFRF9KU09OX1NUUklOR0lGWSA9ICFOQVRJVkVfU1lNQk9MIHx8IGZhaWxzKGZ1bmN0aW9uICgpIHsKICB2YXIgc3ltYm9sID0gJFN5bWJvbCgpOwogIHJldHVybiAkc3RyaW5naWZ5KFtzeW1ib2xdKSAhPSAnW251bGxdJyB8fCAkc3RyaW5naWZ5KHsgYTogc3ltYm9sIH0pICE9ICd7fScgfHwgJHN0cmluZ2lmeShPYmplY3Qoc3ltYm9sKSkgIT0gJ3t9JzsKIH0pOwogJCh7CiAgdGFyZ2V0OiAnSlNPTicsCiAgc3RhdDogdHJ1ZSwKICBmb3JjZWQ6IEZPUkNFRF9KU09OX1NUUklOR0lGWQogfSwgewogIHN0cmluZ2lmeTogZnVuY3Rpb24gc3RyaW5naWZ5KGl0LCByZXBsYWNlciwgc3BhY2UpIHsKICAgdmFyIGFyZ3MgPSBbaXRdOwogICB2YXIgaW5kZXggPSAxOwogICB2YXIgJHJlcGxhY2VyOwogICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGluZGV4KQogICAgYXJncy5wdXNoKGFyZ3VtZW50c1tpbmRleCsrXSk7CiAgICRyZXBsYWNlciA9IHJlcGxhY2VyOwogICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkKICAgIHJldHVybjsKICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkKICAgIHJlcGxhY2VyID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHsKICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKQogICAgICB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpOwogICAgIGlmICghaXNTeW1ib2wodmFsdWUpKQogICAgICByZXR1cm4gdmFsdWU7CiAgICB9OwogICBhcmdzWzFdID0gcmVwbGFjZXI7CiAgIHJldHVybiAkc3RyaW5naWZ5LmFwcGx5KG51bGwsIGFyZ3MpOwogIH0KIH0pOwp9CmlmICghJFN5bWJvbFtQUk9UT1RZUEVdW1RPX1BSSU1JVElWRV0pIHsKIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpOwp9CnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsIFNZTUJPTCk7CmhpZGRlbktleXNbSElEREVOXSA9IHRydWU7CgovKioqLyB9KSwKLyogMTY5ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciB0b0luZGV4ZWRPYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE3KTsKdmFyIG5hdGl2ZUdldE93blByb3BlcnR5TmFtZXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQ0KS5mOwp2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZzsKdmFyIHdpbmRvd05hbWVzID0gdHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cgJiYgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107CnZhciBnZXRXaW5kb3dOYW1lcyA9IGZ1bmN0aW9uIChpdCkgewogdHJ5IHsKICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyhpdCk7CiB9IGNhdGNoIChlcnJvcikgewogIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpOwogfQp9Owptb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkgewogcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogbmF0aXZlR2V0T3duUHJvcGVydHlOYW1lcyh0b0luZGV4ZWRPYmplY3QoaXQpKTsKfTsKCi8qKiovIH0pLAovKiAxNzAgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIHdlbGxLbm93blN5bWJvbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNTcpOwpleHBvcnRzLmYgPSB3ZWxsS25vd25TeW1ib2w7CgovKioqLyB9KSwKLyogMTcxICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBwYXRoID0gX193X3BkZmpzX3JlcXVpcmVfXyg0Myk7CnZhciBoYXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIzKTsKdmFyIHdyYXBwZWRXZWxsS25vd25TeW1ib2xNb2R1bGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE3MCk7CnZhciBkZWZpbmVQcm9wZXJ0eSA9IF9fd19wZGZqc19yZXF1aXJlX18oMjcpLmY7Cm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHsKIHZhciBTeW1ib2wgPSBwYXRoLlN5bWJvbCB8fCAocGF0aC5TeW1ib2wgPSB7fSk7CiBpZiAoIWhhcyhTeW1ib2wsIE5BTUUpKQogIGRlZmluZVByb3BlcnR5KFN5bWJvbCwgTkFNRSwgeyB2YWx1ZTogd3JhcHBlZFdlbGxLbm93blN5bWJvbE1vZHVsZS5mKE5BTUUpIH0pOwp9OwoKLyoqKi8gfSksCi8qIDE3MiAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gX193X3BkZmpzX3JlcXVpcmVfXygxNzEpOwpkZWZpbmVXZWxsS25vd25TeW1ib2woJ2FzeW5jSXRlcmF0b3InKTsKCi8qKiovIH0pLAovKiAxNzMgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKdmFyICQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwKTsKdmFyIERFU0NSSVBUT1JTID0gX193X3BkZmpzX3JlcXVpcmVfXygxMyk7CnZhciBnbG9iYWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDExKTsKdmFyIGhhcyA9IF9fd19wZGZqc19yZXF1aXJlX18oMjMpOwp2YXIgaXNPYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIyKTsKdmFyIGRlZmluZVByb3BlcnR5ID0gX193X3BkZmpzX3JlcXVpcmVfXygyNykuZjsKdmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDQwKTsKdmFyIE5hdGl2ZVN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7CmlmIChERVNDUklQVE9SUyAmJiB0eXBlb2YgTmF0aXZlU3ltYm9sID09ICdmdW5jdGlvbicgJiYgKCEoJ2Rlc2NyaXB0aW9uJyBpbiBOYXRpdmVTeW1ib2wucHJvdG90eXBlKSB8fCBOYXRpdmVTeW1ib2woKS5kZXNjcmlwdGlvbiAhPT0gdW5kZWZpbmVkKSkgewogdmFyIEVtcHR5U3RyaW5nRGVzY3JpcHRpb25TdG9yZSA9IHt9OwogdmFyIFN5bWJvbFdyYXBwZXIgPSBmdW5jdGlvbiBTeW1ib2woKSB7CiAgdmFyIGRlc2NyaXB0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgfHwgYXJndW1lbnRzWzBdID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBTdHJpbmcoYXJndW1lbnRzWzBdKTsKICB2YXIgcmVzdWx0ID0gdGhpcyBpbnN0YW5jZW9mIFN5bWJvbFdyYXBwZXIgPyBuZXcgTmF0aXZlU3ltYm9sKGRlc2NyaXB0aW9uKSA6IGRlc2NyaXB0aW9uID09PSB1bmRlZmluZWQgPyBOYXRpdmVTeW1ib2woKSA6IE5hdGl2ZVN5bWJvbChkZXNjcmlwdGlvbik7CiAgaWYgKGRlc2NyaXB0aW9uID09PSAnJykKICAgRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlW3Jlc3VsdF0gPSB0cnVlOwogIHJldHVybiByZXN1bHQ7CiB9OwogY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhTeW1ib2xXcmFwcGVyLCBOYXRpdmVTeW1ib2wpOwogdmFyIHN5bWJvbFByb3RvdHlwZSA9IFN5bWJvbFdyYXBwZXIucHJvdG90eXBlID0gTmF0aXZlU3ltYm9sLnByb3RvdHlwZTsKIHN5bWJvbFByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN5bWJvbFdyYXBwZXI7CiB2YXIgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90b3R5cGUudG9TdHJpbmc7CiB2YXIgbmF0aXZlID0gU3RyaW5nKE5hdGl2ZVN5bWJvbCgndGVzdCcpKSA9PSAnU3ltYm9sKHRlc3QpJzsKIHZhciByZWdleHAgPSAvXlN5bWJvbFwoKC4qKVwpW14pXSskLzsKIGRlZmluZVByb3BlcnR5KHN5bWJvbFByb3RvdHlwZSwgJ2Rlc2NyaXB0aW9uJywgewogIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICBnZXQ6IGZ1bmN0aW9uIGRlc2NyaXB0aW9uKCkgewogICB2YXIgc3ltYm9sID0gaXNPYmplY3QodGhpcykgPyB0aGlzLnZhbHVlT2YoKSA6IHRoaXM7CiAgIHZhciBzdHJpbmcgPSBzeW1ib2xUb1N0cmluZy5jYWxsKHN5bWJvbCk7CiAgIGlmIChoYXMoRW1wdHlTdHJpbmdEZXNjcmlwdGlvblN0b3JlLCBzeW1ib2wpKQogICAgcmV0dXJuICcnOwogICB2YXIgZGVzYyA9IG5hdGl2ZSA/IHN0cmluZy5zbGljZSg3LCAtMSkgOiBzdHJpbmcucmVwbGFjZShyZWdleHAsICckMScpOwogICByZXR1cm4gZGVzYyA9PT0gJycgPyB1bmRlZmluZWQgOiBkZXNjOwogIH0KIH0pOwogJCh7CiAgZ2xvYmFsOiB0cnVlLAogIGZvcmNlZDogdHJ1ZQogfSwgeyBTeW1ib2w6IFN5bWJvbFdyYXBwZXIgfSk7Cn0KCi8qKiovIH0pLAovKiAxNzQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTcxKTsKZGVmaW5lV2VsbEtub3duU3ltYm9sKCdoYXNJbnN0YW5jZScpOwoKLyoqKi8gfSksCi8qIDE3NSAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gX193X3BkZmpzX3JlcXVpcmVfXygxNzEpOwpkZWZpbmVXZWxsS25vd25TeW1ib2woJ2lzQ29uY2F0U3ByZWFkYWJsZScpOwoKLyoqKi8gfSksCi8qIDE3NiAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gX193X3BkZmpzX3JlcXVpcmVfXygxNzEpOwpkZWZpbmVXZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7CgovKioqLyB9KSwKLyogMTc3ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE3MSk7CmRlZmluZVdlbGxLbm93blN5bWJvbCgnbWF0Y2gnKTsKCi8qKiovIH0pLAovKiAxNzggKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTcxKTsKZGVmaW5lV2VsbEtub3duU3ltYm9sKCdtYXRjaEFsbCcpOwoKLyoqKi8gfSksCi8qIDE3OSAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gX193X3BkZmpzX3JlcXVpcmVfXygxNzEpOwpkZWZpbmVXZWxsS25vd25TeW1ib2woJ3JlcGxhY2UnKTsKCi8qKiovIH0pLAovKiAxODAgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTcxKTsKZGVmaW5lV2VsbEtub3duU3ltYm9sKCdzZWFyY2gnKTsKCi8qKiovIH0pLAovKiAxODEgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTcxKTsKZGVmaW5lV2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7CgovKioqLyB9KSwKLyogMTgyICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE3MSk7CmRlZmluZVdlbGxLbm93blN5bWJvbCgnc3BsaXQnKTsKCi8qKiovIH0pLAovKiAxODMgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIGRlZmluZVdlbGxLbm93blN5bWJvbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTcxKTsKZGVmaW5lV2VsbEtub3duU3ltYm9sKCd0b1ByaW1pdGl2ZScpOwoKLyoqKi8gfSksCi8qIDE4NCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgZGVmaW5lV2VsbEtub3duU3ltYm9sID0gX193X3BkZmpzX3JlcXVpcmVfXygxNzEpOwpkZWZpbmVXZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7CgovKioqLyB9KSwKLyogMTg1ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBkZWZpbmVXZWxsS25vd25TeW1ib2wgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE3MSk7CmRlZmluZVdlbGxLbm93blN5bWJvbCgndW5zY29wYWJsZXMnKTsKCi8qKiovIH0pLAovKiAxODYgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIHNldFRvU3RyaW5nVGFnID0gX193X3BkZmpzX3JlcXVpcmVfXyg4NSk7CnNldFRvU3RyaW5nVGFnKE1hdGgsICdNYXRoJywgdHJ1ZSk7CgovKioqLyB9KSwKLyogMTg3ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCnZhciBnbG9iYWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDExKTsKdmFyIHNldFRvU3RyaW5nVGFnID0gX193X3BkZmpzX3JlcXVpcmVfXyg4NSk7CnNldFRvU3RyaW5nVGFnKGdsb2JhbC5KU09OLCAnSlNPTicsIHRydWUpOwoKLyoqKi8gfSksCi8qIDE4OCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgpfX3dfcGRmanNfcmVxdWlyZV9fKDE4OSk7CnZhciBlbnRyeVVuYmluZCA9IF9fd19wZGZqc19yZXF1aXJlX18oNjEpOwptb2R1bGUuZXhwb3J0cyA9IGVudHJ5VW5iaW5kKCdTdHJpbmcnLCAncGFkU3RhcnQnKTsKCi8qKiovIH0pLAovKiAxODkgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKdmFyICQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwKTsKdmFyICRwYWRTdGFydCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTkwKS5zdGFydDsKdmFyIFdFQktJVF9CVUcgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE5Mik7CiQoewogdGFyZ2V0OiAnU3RyaW5nJywKIHByb3RvOiB0cnVlLAogZm9yY2VkOiBXRUJLSVRfQlVHCn0sIHsKIHBhZFN0YXJ0OiBmdW5jdGlvbiBwYWRTdGFydChtYXhMZW5ndGgpIHsKICByZXR1cm4gJHBhZFN0YXJ0KHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpOwogfQp9KTsKCi8qKiovIH0pLAovKiAxOTAgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIHRvTGVuZ3RoID0gX193X3BkZmpzX3JlcXVpcmVfXyg0Nyk7CnZhciByZXBlYXQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE5MSk7CnZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gX193X3BkZmpzX3JlcXVpcmVfXygyMCk7CnZhciBjZWlsID0gTWF0aC5jZWlsOwp2YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0VORCkgewogcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nKSB7CiAgdmFyIFMgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSgkdGhpcykpOwogIHZhciBzdHJpbmdMZW5ndGggPSBTLmxlbmd0aDsKICB2YXIgZmlsbFN0ciA9IGZpbGxTdHJpbmcgPT09IHVuZGVmaW5lZCA/ICcgJyA6IFN0cmluZyhmaWxsU3RyaW5nKTsKICB2YXIgaW50TWF4TGVuZ3RoID0gdG9MZW5ndGgobWF4TGVuZ3RoKTsKICB2YXIgZmlsbExlbiwgc3RyaW5nRmlsbGVyOwogIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpCiAgIHJldHVybiBTOwogIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGg7CiAgc3RyaW5nRmlsbGVyID0gcmVwZWF0LmNhbGwoZmlsbFN0ciwgY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTsKICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pCiAgIHN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTsKICByZXR1cm4gSVNfRU5EID8gUyArIHN0cmluZ0ZpbGxlciA6IHN0cmluZ0ZpbGxlciArIFM7CiB9Owp9Owptb2R1bGUuZXhwb3J0cyA9IHsKIHN0YXJ0OiBjcmVhdGVNZXRob2QoZmFsc2UpLAogZW5kOiBjcmVhdGVNZXRob2QodHJ1ZSkKfTsKCi8qKiovIH0pLAovKiAxOTEgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKdmFyIHRvSW50ZWdlciA9IF9fd19wZGZqc19yZXF1aXJlX18oNDgpOwp2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IF9fd19wZGZqc19yZXF1aXJlX18oMjApOwptb2R1bGUuZXhwb3J0cyA9ICcnLnJlcGVhdCB8fCBmdW5jdGlvbiByZXBlYXQoY291bnQpIHsKIHZhciBzdHIgPSBTdHJpbmcocmVxdWlyZU9iamVjdENvZXJjaWJsZSh0aGlzKSk7CiB2YXIgcmVzdWx0ID0gJyc7CiB2YXIgbiA9IHRvSW50ZWdlcihjb3VudCk7CiBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkKICB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBudW1iZXIgb2YgcmVwZXRpdGlvbnMnKTsKIGZvciAoOyBuID4gMDsgKG4gPj4+PSAxKSAmJiAoc3RyICs9IHN0cikpCiAgaWYgKG4gJiAxKQogICByZXN1bHQgKz0gc3RyOwogcmV0dXJuIHJlc3VsdDsKfTsKCi8qKiovIH0pLAovKiAxOTIgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIHVzZXJBZ2VudCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTI3KTsKbW9kdWxlLmV4cG9ydHMgPSAvVmVyc2lvblwvMTBcLlxkKyhcLlxkKyk/KCBNb2JpbGVcL1x3Kyk/IFNhZmFyaVwvLy50ZXN0KHVzZXJBZ2VudCk7CgovKioqLyB9KSwKLyogMTkzICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCl9fd19wZGZqc19yZXF1aXJlX18oMTk0KTsKdmFyIGVudHJ5VW5iaW5kID0gX193X3BkZmpzX3JlcXVpcmVfXyg2MSk7Cm1vZHVsZS5leHBvcnRzID0gZW50cnlVbmJpbmQoJ1N0cmluZycsICdwYWRFbmQnKTsKCi8qKiovIH0pLAovKiAxOTQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKdmFyICQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEwKTsKdmFyICRwYWRFbmQgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE5MCkuZW5kOwp2YXIgV0VCS0lUX0JVRyA9IF9fd19wZGZqc19yZXF1aXJlX18oMTkyKTsKJCh7CiB0YXJnZXQ6ICdTdHJpbmcnLAogcHJvdG86IHRydWUsCiBmb3JjZWQ6IFdFQktJVF9CVUcKfSwgewogcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoKSB7CiAgcmV0dXJuICRwYWRFbmQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7CiB9Cn0pOwoKLyoqKi8gfSksCi8qIDE5NSAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgpfX3dfcGRmanNfcmVxdWlyZV9fKDE5Nik7CnZhciBwYXRoID0gX193X3BkZmpzX3JlcXVpcmVfXyg0Myk7Cm1vZHVsZS5leHBvcnRzID0gcGF0aC5PYmplY3QudmFsdWVzOwoKLyoqKi8gfSksCi8qIDE5NiAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7Cgp2YXIgJCA9IF9fd19wZGZqc19yZXF1aXJlX18oMTApOwp2YXIgJHZhbHVlcyA9IF9fd19wZGZqc19yZXF1aXJlX18oMTk3KS52YWx1ZXM7CiQoewogdGFyZ2V0OiAnT2JqZWN0JywKIHN0YXQ6IHRydWUKfSwgewogdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoTykgewogIHJldHVybiAkdmFsdWVzKE8pOwogfQp9KTsKCi8qKiovIH0pLAovKiAxOTcgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKdmFyIERFU0NSSVBUT1JTID0gX193X3BkZmpzX3JlcXVpcmVfXygxMyk7CnZhciBvYmplY3RLZXlzID0gX193X3BkZmpzX3JlcXVpcmVfXyg3Myk7CnZhciB0b0luZGV4ZWRPYmplY3QgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDE3KTsKdmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gX193X3BkZmpzX3JlcXVpcmVfXygxNSkuZjsKdmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUT19FTlRSSUVTKSB7CiByZXR1cm4gZnVuY3Rpb24gKGl0KSB7CiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoaXQpOwogIHZhciBrZXlzID0gb2JqZWN0S2V5cyhPKTsKICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7CiAgdmFyIGkgPSAwOwogIHZhciByZXN1bHQgPSBbXTsKICB2YXIga2V5OwogIHdoaWxlIChsZW5ndGggPiBpKSB7CiAgIGtleSA9IGtleXNbaSsrXTsKICAgaWYgKCFERVNDUklQVE9SUyB8fCBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKE8sIGtleSkpIHsKICAgIHJlc3VsdC5wdXNoKFRPX0VOVFJJRVMgPyBbCiAgICAga2V5LAogICAgIE9ba2V5XQogICAgXSA6IE9ba2V5XSk7CiAgIH0KICB9CiAgcmV0dXJuIHJlc3VsdDsKIH07Cn07Cm1vZHVsZS5leHBvcnRzID0gewogZW50cmllczogY3JlYXRlTWV0aG9kKHRydWUpLAogdmFsdWVzOiBjcmVhdGVNZXRob2QoZmFsc2UpCn07CgovKioqLyB9KSwKLyogMTk4ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuZ2V0RG9jdW1lbnQgPSBnZXREb2N1bWVudDsKZXhwb3J0cy5zZXRQREZOZXR3b3JrU3RyZWFtRmFjdG9yeSA9IHNldFBERk5ldHdvcmtTdHJlYW1GYWN0b3J5OwpleHBvcnRzLmJ1aWxkID0gZXhwb3J0cy52ZXJzaW9uID0gZXhwb3J0cy5QREZQYWdlUHJveHkgPSBleHBvcnRzLlBERkRvY3VtZW50UHJveHkgPSBleHBvcnRzLlBERldvcmtlciA9IGV4cG9ydHMuUERGRGF0YVJhbmdlVHJhbnNwb3J0ID0gZXhwb3J0cy5Mb29wYmFja1BvcnQgPSB2b2lkIDA7Cgp2YXIgX3JlZ2VuZXJhdG9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dfcGRmanNfcmVxdWlyZV9fKDIpKTsKCnZhciBfdXRpbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNSk7Cgp2YXIgX2Rpc3BsYXlfdXRpbHMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDEpOwoKdmFyIF9mb250X2xvYWRlciA9IF9fd19wZGZqc19yZXF1aXJlX18oMTk5KTsKCnZhciBfYXBpX2NvbXBhdGliaWxpdHkgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIwMCk7Cgp2YXIgX2NhbnZhcyA9IF9fd19wZGZqc19yZXF1aXJlX18oMjAxKTsKCnZhciBfd29ya2VyX29wdGlvbnMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIwMyk7Cgp2YXIgX2lzX25vZGUgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDcpOwoKdmFyIF9tZXNzYWdlX2hhbmRsZXIgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIwNCk7Cgp2YXIgX21ldGFkYXRhID0gX193X3BkZmpzX3JlcXVpcmVfXygyMDUpOwoKdmFyIF90cmFuc3BvcnRfc3RyZWFtID0gX193X3BkZmpzX3JlcXVpcmVfXygyMDcpOwoKdmFyIF93ZWJnbCA9IF9fd19wZGZqc19yZXF1aXJlX18oMjA4KTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfQoKZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyByZXR1cm4gX2FycmF5V2l0aG91dEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIpIHx8IF9ub25JdGVyYWJsZVNwcmVhZCgpOyB9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVTcHJlYWQoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpOyB9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHsgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICJ1bmRlZmluZWQiICYmIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoaXRlcikpIHJldHVybiBBcnJheS5mcm9tKGl0ZXIpOyB9CgpmdW5jdGlvbiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShhcnIpOyB9CgpmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQ7IGlmICh0eXBlb2YgU3ltYm9sID09PSAidW5kZWZpbmVkIiB8fCBvW1N5bWJvbC5pdGVyYXRvcl0gPT0gbnVsbCkgeyBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSAibnVtYmVyIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyB2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7fTsgcmV0dXJuIHsgczogRiwgbjogZnVuY3Rpb24gbigpIHsgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTsgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTsgfSwgZTogZnVuY3Rpb24gZShfZTIpIHsgdGhyb3cgX2UyOyB9LCBmOiBGIH07IH0gdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpOyB9IHZhciBub3JtYWxDb21wbGV0aW9uID0gdHJ1ZSwgZGlkRXJyID0gZmFsc2UsIGVycjsgcmV0dXJuIHsgczogZnVuY3Rpb24gcygpIHsgaXQgPSBvW1N5bWJvbC5pdGVyYXRvcl0oKTsgfSwgbjogZnVuY3Rpb24gbigpIHsgdmFyIHN0ZXAgPSBpdC5uZXh0KCk7IG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7IHJldHVybiBzdGVwOyB9LCBlOiBmdW5jdGlvbiBlKF9lMykgeyBkaWRFcnIgPSB0cnVlOyBlcnIgPSBfZTM7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdFsicmV0dXJuIl0gIT0gbnVsbCkgaXRbInJldHVybiJdKCk7IH0gZmluYWxseSB7IGlmIChkaWRFcnIpIHRocm93IGVycjsgfSB9IH07IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9CgpmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC4iKTsgfQoKZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSAic3RyaW5nIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09ICJPYmplY3QiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSAiTWFwIiB8fCBuID09PSAiU2V0IikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSAiQXJndW1lbnRzIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH0KCmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gInVuZGVmaW5lZCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSAhPSBudWxsKSBfaVsicmV0dXJuIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKdmFyIERFRkFVTFRfUkFOR0VfQ0hVTktfU0laRSA9IDY1NTM2Owp2YXIgUkVOREVSSU5HX0NBTkNFTExFRF9USU1FT1VUID0gMTAwOwp2YXIgY3JlYXRlUERGTmV0d29ya1N0cmVhbTsKCmZ1bmN0aW9uIHNldFBERk5ldHdvcmtTdHJlYW1GYWN0b3J5KHBkZk5ldHdvcmtTdHJlYW1GYWN0b3J5KSB7CiAgY3JlYXRlUERGTmV0d29ya1N0cmVhbSA9IHBkZk5ldHdvcmtTdHJlYW1GYWN0b3J5Owp9CgpmdW5jdGlvbiBnZXREb2N1bWVudChzcmMpIHsKICB2YXIgdGFzayA9IG5ldyBQREZEb2N1bWVudExvYWRpbmdUYXNrKCk7CiAgdmFyIHNvdXJjZTsKCiAgaWYgKHR5cGVvZiBzcmMgPT09ICJzdHJpbmciKSB7CiAgICBzb3VyY2UgPSB7CiAgICAgIHVybDogc3JjCiAgICB9OwogIH0gZWxzZSBpZiAoKDAsIF91dGlsLmlzQXJyYXlCdWZmZXIpKHNyYykpIHsKICAgIHNvdXJjZSA9IHsKICAgICAgZGF0YTogc3JjCiAgICB9OwogIH0gZWxzZSBpZiAoc3JjIGluc3RhbmNlb2YgUERGRGF0YVJhbmdlVHJhbnNwb3J0KSB7CiAgICBzb3VyY2UgPSB7CiAgICAgIHJhbmdlOiBzcmMKICAgIH07CiAgfSBlbHNlIHsKICAgIGlmIChfdHlwZW9mKHNyYykgIT09ICJvYmplY3QiKSB7CiAgICAgIHRocm93IG5ldyBFcnJvcigiSW52YWxpZCBwYXJhbWV0ZXIgaW4gZ2V0RG9jdW1lbnQsICIgKyAibmVlZCBlaXRoZXIgVWludDhBcnJheSwgc3RyaW5nIG9yIGEgcGFyYW1ldGVyIG9iamVjdCIpOwogICAgfQoKICAgIGlmICghc3JjLnVybCAmJiAhc3JjLmRhdGEgJiYgIXNyYy5yYW5nZSkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgcGFyYW1ldGVyIG9iamVjdDogbmVlZCBlaXRoZXIgLmRhdGEsIC5yYW5nZSBvciAudXJsIik7CiAgICB9CgogICAgc291cmNlID0gc3JjOwogIH0KCiAgdmFyIHBhcmFtcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgdmFyIHJhbmdlVHJhbnNwb3J0ID0gbnVsbCwKICAgICAgd29ya2VyID0gbnVsbDsKCiAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgewogICAgaWYgKGtleSA9PT0gInVybCIgJiYgdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgcGFyYW1zW2tleV0gPSBuZXcgVVJMKHNvdXJjZVtrZXldLCB3aW5kb3cubG9jYXRpb24pLmhyZWY7CiAgICAgIGNvbnRpbnVlOwogICAgfSBlbHNlIGlmIChrZXkgPT09ICJyYW5nZSIpIHsKICAgICAgcmFuZ2VUcmFuc3BvcnQgPSBzb3VyY2Vba2V5XTsKICAgICAgY29udGludWU7CiAgICB9IGVsc2UgaWYgKGtleSA9PT0gIndvcmtlciIpIHsKICAgICAgd29ya2VyID0gc291cmNlW2tleV07CiAgICAgIGNvbnRpbnVlOwogICAgfSBlbHNlIGlmIChrZXkgPT09ICJkYXRhIiAmJiAhKHNvdXJjZVtrZXldIGluc3RhbmNlb2YgVWludDhBcnJheSkpIHsKICAgICAgdmFyIHBkZkJ5dGVzID0gc291cmNlW2tleV07CgogICAgICBpZiAodHlwZW9mIHBkZkJ5dGVzID09PSAic3RyaW5nIikgewogICAgICAgIHBhcmFtc1trZXldID0gKDAsIF91dGlsLnN0cmluZ1RvQnl0ZXMpKHBkZkJ5dGVzKTsKICAgICAgfSBlbHNlIGlmIChfdHlwZW9mKHBkZkJ5dGVzKSA9PT0gIm9iamVjdCIgJiYgcGRmQnl0ZXMgIT09IG51bGwgJiYgIWlzTmFOKHBkZkJ5dGVzLmxlbmd0aCkpIHsKICAgICAgICBwYXJhbXNba2V5XSA9IG5ldyBVaW50OEFycmF5KHBkZkJ5dGVzKTsKICAgICAgfSBlbHNlIGlmICgoMCwgX3V0aWwuaXNBcnJheUJ1ZmZlcikocGRmQnl0ZXMpKSB7CiAgICAgICAgcGFyYW1zW2tleV0gPSBuZXcgVWludDhBcnJheShwZGZCeXRlcyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJJbnZhbGlkIFBERiBiaW5hcnkgZGF0YTogZWl0aGVyIHR5cGVkIGFycmF5LCAiICsgInN0cmluZyBvciBhcnJheS1saWtlIG9iamVjdCBpcyBleHBlY3RlZCBpbiB0aGUgIiArICJkYXRhIHByb3BlcnR5LiIpOwogICAgICB9CgogICAgICBjb250aW51ZTsKICAgIH0KCiAgICBwYXJhbXNba2V5XSA9IHNvdXJjZVtrZXldOwogIH0KCiAgcGFyYW1zLnJhbmdlQ2h1bmtTaXplID0gcGFyYW1zLnJhbmdlQ2h1bmtTaXplIHx8IERFRkFVTFRfUkFOR0VfQ0hVTktfU0laRTsKICBwYXJhbXMuQ01hcFJlYWRlckZhY3RvcnkgPSBwYXJhbXMuQ01hcFJlYWRlckZhY3RvcnkgfHwgX2Rpc3BsYXlfdXRpbHMuRE9NQ01hcFJlYWRlckZhY3Rvcnk7CiAgcGFyYW1zLmlnbm9yZUVycm9ycyA9IHBhcmFtcy5zdG9wQXRFcnJvcnMgIT09IHRydWU7CiAgcGFyYW1zLmZvbnRFeHRyYVByb3BlcnRpZXMgPSBwYXJhbXMuZm9udEV4dHJhUHJvcGVydGllcyA9PT0gdHJ1ZTsKICBwYXJhbXMucGRmQnVnID0gcGFyYW1zLnBkZkJ1ZyA9PT0gdHJ1ZTsKCiAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHBhcmFtcy5tYXhJbWFnZVNpemUpKSB7CiAgICBwYXJhbXMubWF4SW1hZ2VTaXplID0gLTE7CiAgfQoKICBpZiAodHlwZW9mIHBhcmFtcy5pc0V2YWxTdXBwb3J0ZWQgIT09ICJib29sZWFuIikgewogICAgcGFyYW1zLmlzRXZhbFN1cHBvcnRlZCA9IHRydWU7CiAgfQoKICBpZiAodHlwZW9mIHBhcmFtcy5kaXNhYmxlRm9udEZhY2UgIT09ICJib29sZWFuIikgewogICAgcGFyYW1zLmRpc2FibGVGb250RmFjZSA9IF9hcGlfY29tcGF0aWJpbGl0eS5hcGlDb21wYXRpYmlsaXR5UGFyYW1zLmRpc2FibGVGb250RmFjZSB8fCBmYWxzZTsKICB9CgogIGlmICh0eXBlb2YgcGFyYW1zLmRpc2FibGVSYW5nZSAhPT0gImJvb2xlYW4iKSB7CiAgICBwYXJhbXMuZGlzYWJsZVJhbmdlID0gZmFsc2U7CiAgfQoKICBpZiAodHlwZW9mIHBhcmFtcy5kaXNhYmxlU3RyZWFtICE9PSAiYm9vbGVhbiIpIHsKICAgIHBhcmFtcy5kaXNhYmxlU3RyZWFtID0gZmFsc2U7CiAgfQoKICBpZiAodHlwZW9mIHBhcmFtcy5kaXNhYmxlQXV0b0ZldGNoICE9PSAiYm9vbGVhbiIpIHsKICAgIHBhcmFtcy5kaXNhYmxlQXV0b0ZldGNoID0gZmFsc2U7CiAgfQoKICAoMCwgX3V0aWwuc2V0VmVyYm9zaXR5TGV2ZWwpKHBhcmFtcy52ZXJib3NpdHkpOwoKICBpZiAoIXdvcmtlcikgewogICAgdmFyIHdvcmtlclBhcmFtcyA9IHsKICAgICAgdmVyYm9zaXR5OiBwYXJhbXMudmVyYm9zaXR5LAogICAgICBwb3J0OiBfd29ya2VyX29wdGlvbnMuR2xvYmFsV29ya2VyT3B0aW9ucy53b3JrZXJQb3J0CiAgICB9OwogICAgd29ya2VyID0gd29ya2VyUGFyYW1zLnBvcnQgPyBQREZXb3JrZXIuZnJvbVBvcnQod29ya2VyUGFyYW1zKSA6IG5ldyBQREZXb3JrZXIod29ya2VyUGFyYW1zKTsKICAgIHRhc2suX3dvcmtlciA9IHdvcmtlcjsKICB9CgogIHZhciBkb2NJZCA9IHRhc2suZG9jSWQ7CiAgd29ya2VyLnByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7CiAgICBpZiAodGFzay5kZXN0cm95ZWQpIHsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJMb2FkaW5nIGFib3J0ZWQiKTsKICAgIH0KCiAgICB2YXIgd29ya2VySWRQcm9taXNlID0gX2ZldGNoRG9jdW1lbnQod29ya2VyLCBwYXJhbXMsIHJhbmdlVHJhbnNwb3J0LCBkb2NJZCk7CgogICAgdmFyIG5ldHdvcmtTdHJlYW1Qcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgdmFyIG5ldHdvcmtTdHJlYW07CgogICAgICBpZiAocmFuZ2VUcmFuc3BvcnQpIHsKICAgICAgICBuZXR3b3JrU3RyZWFtID0gbmV3IF90cmFuc3BvcnRfc3RyZWFtLlBERkRhdGFUcmFuc3BvcnRTdHJlYW0oewogICAgICAgICAgbGVuZ3RoOiBwYXJhbXMubGVuZ3RoLAogICAgICAgICAgaW5pdGlhbERhdGE6IHBhcmFtcy5pbml0aWFsRGF0YSwKICAgICAgICAgIHByb2dyZXNzaXZlRG9uZTogcGFyYW1zLnByb2dyZXNzaXZlRG9uZSwKICAgICAgICAgIGRpc2FibGVSYW5nZTogcGFyYW1zLmRpc2FibGVSYW5nZSwKICAgICAgICAgIGRpc2FibGVTdHJlYW06IHBhcmFtcy5kaXNhYmxlU3RyZWFtCiAgICAgICAgfSwgcmFuZ2VUcmFuc3BvcnQpOwogICAgICB9IGVsc2UgaWYgKCFwYXJhbXMuZGF0YSkgewogICAgICAgIG5ldHdvcmtTdHJlYW0gPSBjcmVhdGVQREZOZXR3b3JrU3RyZWFtKHsKICAgICAgICAgIHVybDogcGFyYW1zLnVybCwKICAgICAgICAgIGxlbmd0aDogcGFyYW1zLmxlbmd0aCwKICAgICAgICAgIGh0dHBIZWFkZXJzOiBwYXJhbXMuaHR0cEhlYWRlcnMsCiAgICAgICAgICB3aXRoQ3JlZGVudGlhbHM6IHBhcmFtcy53aXRoQ3JlZGVudGlhbHMsCiAgICAgICAgICByYW5nZUNodW5rU2l6ZTogcGFyYW1zLnJhbmdlQ2h1bmtTaXplLAogICAgICAgICAgZGlzYWJsZVJhbmdlOiBwYXJhbXMuZGlzYWJsZVJhbmdlLAogICAgICAgICAgZGlzYWJsZVN0cmVhbTogcGFyYW1zLmRpc2FibGVTdHJlYW0KICAgICAgICB9KTsKICAgICAgfQoKICAgICAgcmVzb2x2ZShuZXR3b3JrU3RyZWFtKTsKICAgIH0pOwogICAgcmV0dXJuIFByb21pc2UuYWxsKFt3b3JrZXJJZFByb21pc2UsIG5ldHdvcmtTdHJlYW1Qcm9taXNlXSkudGhlbihmdW5jdGlvbiAoX3JlZikgewogICAgICB2YXIgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSwKICAgICAgICAgIHdvcmtlcklkID0gX3JlZjJbMF0sCiAgICAgICAgICBuZXR3b3JrU3RyZWFtID0gX3JlZjJbMV07CgogICAgICBpZiAodGFzay5kZXN0cm95ZWQpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkxvYWRpbmcgYWJvcnRlZCIpOwogICAgICB9CgogICAgICB2YXIgbWVzc2FnZUhhbmRsZXIgPSBuZXcgX21lc3NhZ2VfaGFuZGxlci5NZXNzYWdlSGFuZGxlcihkb2NJZCwgd29ya2VySWQsIHdvcmtlci5wb3J0KTsKICAgICAgbWVzc2FnZUhhbmRsZXIucG9zdE1lc3NhZ2VUcmFuc2ZlcnMgPSB3b3JrZXIucG9zdE1lc3NhZ2VUcmFuc2ZlcnM7CiAgICAgIHZhciB0cmFuc3BvcnQgPSBuZXcgV29ya2VyVHJhbnNwb3J0KG1lc3NhZ2VIYW5kbGVyLCB0YXNrLCBuZXR3b3JrU3RyZWFtLCBwYXJhbXMpOwogICAgICB0YXNrLl90cmFuc3BvcnQgPSB0cmFuc3BvcnQ7CiAgICAgIG1lc3NhZ2VIYW5kbGVyLnNlbmQoIlJlYWR5IiwgbnVsbCk7CiAgICB9KTsKICB9KVsiY2F0Y2giXSh0YXNrLl9jYXBhYmlsaXR5LnJlamVjdCk7CiAgcmV0dXJuIHRhc2s7Cn0KCmZ1bmN0aW9uIF9mZXRjaERvY3VtZW50KHdvcmtlciwgc291cmNlLCBwZGZEYXRhUmFuZ2VUcmFuc3BvcnQsIGRvY0lkKSB7CiAgaWYgKHdvcmtlci5kZXN0cm95ZWQpIHsKICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgRXJyb3IoIldvcmtlciB3YXMgZGVzdHJveWVkIikpOwogIH0KCiAgaWYgKHBkZkRhdGFSYW5nZVRyYW5zcG9ydCkgewogICAgc291cmNlLmxlbmd0aCA9IHBkZkRhdGFSYW5nZVRyYW5zcG9ydC5sZW5ndGg7CiAgICBzb3VyY2UuaW5pdGlhbERhdGEgPSBwZGZEYXRhUmFuZ2VUcmFuc3BvcnQuaW5pdGlhbERhdGE7CiAgICBzb3VyY2UucHJvZ3Jlc3NpdmVEb25lID0gcGRmRGF0YVJhbmdlVHJhbnNwb3J0LnByb2dyZXNzaXZlRG9uZTsKICB9CgogIHJldHVybiB3b3JrZXIubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKCJHZXREb2NSZXF1ZXN0IiwgewogICAgZG9jSWQ6IGRvY0lkLAogICAgYXBpVmVyc2lvbjogJzIuNS4yMDcnLAogICAgc291cmNlOiB7CiAgICAgIGRhdGE6IHNvdXJjZS5kYXRhLAogICAgICB1cmw6IHNvdXJjZS51cmwsCiAgICAgIHBhc3N3b3JkOiBzb3VyY2UucGFzc3dvcmQsCiAgICAgIGRpc2FibGVBdXRvRmV0Y2g6IHNvdXJjZS5kaXNhYmxlQXV0b0ZldGNoLAogICAgICByYW5nZUNodW5rU2l6ZTogc291cmNlLnJhbmdlQ2h1bmtTaXplLAogICAgICBsZW5ndGg6IHNvdXJjZS5sZW5ndGgKICAgIH0sCiAgICBtYXhJbWFnZVNpemU6IHNvdXJjZS5tYXhJbWFnZVNpemUsCiAgICBkaXNhYmxlRm9udEZhY2U6IHNvdXJjZS5kaXNhYmxlRm9udEZhY2UsCiAgICBwb3N0TWVzc2FnZVRyYW5zZmVyczogd29ya2VyLnBvc3RNZXNzYWdlVHJhbnNmZXJzLAogICAgZG9jQmFzZVVybDogc291cmNlLmRvY0Jhc2VVcmwsCiAgICBpZ25vcmVFcnJvcnM6IHNvdXJjZS5pZ25vcmVFcnJvcnMsCiAgICBpc0V2YWxTdXBwb3J0ZWQ6IHNvdXJjZS5pc0V2YWxTdXBwb3J0ZWQsCiAgICBmb250RXh0cmFQcm9wZXJ0aWVzOiBzb3VyY2UuZm9udEV4dHJhUHJvcGVydGllcwogIH0pLnRoZW4oZnVuY3Rpb24gKHdvcmtlcklkKSB7CiAgICBpZiAod29ya2VyLmRlc3Ryb3llZCkgewogICAgICB0aHJvdyBuZXcgRXJyb3IoIldvcmtlciB3YXMgZGVzdHJveWVkIik7CiAgICB9CgogICAgcmV0dXJuIHdvcmtlcklkOwogIH0pOwp9Cgp2YXIgUERGRG9jdW1lbnRMb2FkaW5nVGFzayA9IGZ1bmN0aW9uIFBERkRvY3VtZW50TG9hZGluZ1Rhc2tDbG9zdXJlKCkgewogIHZhciBuZXh0RG9jdW1lbnRJZCA9IDA7CgogIHZhciBQREZEb2N1bWVudExvYWRpbmdUYXNrID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIFBERkRvY3VtZW50TG9hZGluZ1Rhc2soKSB7CiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQREZEb2N1bWVudExvYWRpbmdUYXNrKTsKCiAgICAgIHRoaXMuX2NhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7CiAgICAgIHRoaXMuX3RyYW5zcG9ydCA9IG51bGw7CiAgICAgIHRoaXMuX3dvcmtlciA9IG51bGw7CiAgICAgIHRoaXMuZG9jSWQgPSAiZCIgKyBuZXh0RG9jdW1lbnRJZCsrOwogICAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlOwogICAgICB0aGlzLm9uUGFzc3dvcmQgPSBudWxsOwogICAgICB0aGlzLm9uUHJvZ3Jlc3MgPSBudWxsOwogICAgICB0aGlzLm9uVW5zdXBwb3J0ZWRGZWF0dXJlID0gbnVsbDsKICAgIH0KCiAgICBfY3JlYXRlQ2xhc3MoUERGRG9jdW1lbnRMb2FkaW5nVGFzaywgW3sKICAgICAga2V5OiAiZGVzdHJveSIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkgewogICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZTsKICAgICAgICB2YXIgdHJhbnNwb3J0RGVzdHJveWVkID0gIXRoaXMuX3RyYW5zcG9ydCA/IFByb21pc2UucmVzb2x2ZSgpIDogdGhpcy5fdHJhbnNwb3J0LmRlc3Ryb3koKTsKICAgICAgICByZXR1cm4gdHJhbnNwb3J0RGVzdHJveWVkLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgX3RoaXMuX3RyYW5zcG9ydCA9IG51bGw7CgogICAgICAgICAgaWYgKF90aGlzLl93b3JrZXIpIHsKICAgICAgICAgICAgX3RoaXMuX3dvcmtlci5kZXN0cm95KCk7CgogICAgICAgICAgICBfdGhpcy5fd29ya2VyID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJwcm9taXNlIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX2NhcGFiaWxpdHkucHJvbWlzZTsKICAgICAgfQogICAgfV0pOwoKICAgIHJldHVybiBQREZEb2N1bWVudExvYWRpbmdUYXNrOwogIH0oKTsKCiAgcmV0dXJuIFBERkRvY3VtZW50TG9hZGluZ1Rhc2s7Cn0oKTsKCnZhciBQREZEYXRhUmFuZ2VUcmFuc3BvcnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFBERkRhdGFSYW5nZVRyYW5zcG9ydChsZW5ndGgsIGluaXRpYWxEYXRhKSB7CiAgICB2YXIgcHJvZ3Jlc3NpdmVEb25lID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUERGRGF0YVJhbmdlVHJhbnNwb3J0KTsKCiAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDsKICAgIHRoaXMuaW5pdGlhbERhdGEgPSBpbml0aWFsRGF0YTsKICAgIHRoaXMucHJvZ3Jlc3NpdmVEb25lID0gcHJvZ3Jlc3NpdmVEb25lOwogICAgdGhpcy5fcmFuZ2VMaXN0ZW5lcnMgPSBbXTsKICAgIHRoaXMuX3Byb2dyZXNzTGlzdGVuZXJzID0gW107CiAgICB0aGlzLl9wcm9ncmVzc2l2ZVJlYWRMaXN0ZW5lcnMgPSBbXTsKICAgIHRoaXMuX3Byb2dyZXNzaXZlRG9uZUxpc3RlbmVycyA9IFtdOwogICAgdGhpcy5fcmVhZHlDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFBERkRhdGFSYW5nZVRyYW5zcG9ydCwgW3sKICAgIGtleTogImFkZFJhbmdlTGlzdGVuZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZFJhbmdlTGlzdGVuZXIobGlzdGVuZXIpIHsKICAgICAgdGhpcy5fcmFuZ2VMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7CiAgICB9CiAgfSwgewogICAga2V5OiAiYWRkUHJvZ3Jlc3NMaXN0ZW5lciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUHJvZ3Jlc3NMaXN0ZW5lcihsaXN0ZW5lcikgewogICAgICB0aGlzLl9wcm9ncmVzc0xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJhZGRQcm9ncmVzc2l2ZVJlYWRMaXN0ZW5lciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkUHJvZ3Jlc3NpdmVSZWFkTGlzdGVuZXIobGlzdGVuZXIpIHsKICAgICAgdGhpcy5fcHJvZ3Jlc3NpdmVSZWFkTGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpOwogICAgfQogIH0sIHsKICAgIGtleTogImFkZFByb2dyZXNzaXZlRG9uZUxpc3RlbmVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRQcm9ncmVzc2l2ZURvbmVMaXN0ZW5lcihsaXN0ZW5lcikgewogICAgICB0aGlzLl9wcm9ncmVzc2l2ZURvbmVMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7CiAgICB9CiAgfSwgewogICAga2V5OiAib25EYXRhUmFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uRGF0YVJhbmdlKGJlZ2luLCBjaHVuaykgewogICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5fcmFuZ2VMaXN0ZW5lcnMpLAogICAgICAgICAgX3N0ZXA7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBfc3RlcC52YWx1ZTsKICAgICAgICAgIGxpc3RlbmVyKGJlZ2luLCBjaHVuayk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvci5mKCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJvbkRhdGFQcm9ncmVzcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25EYXRhUHJvZ3Jlc3MobG9hZGVkLCB0b3RhbCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHRoaXMuX3JlYWR5Q2FwYWJpbGl0eS5wcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoX3RoaXMyLl9wcm9ncmVzc0xpc3RlbmVycyksCiAgICAgICAgICAgIF9zdGVwMjsKCiAgICAgICAgdHJ5IHsKICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IF9zdGVwMi52YWx1ZTsKICAgICAgICAgICAgbGlzdGVuZXIobG9hZGVkLCB0b3RhbCk7CiAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICBfaXRlcmF0b3IyLmUoZXJyKTsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgX2l0ZXJhdG9yMi5mKCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJvbkRhdGFQcm9ncmVzc2l2ZVJlYWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uRGF0YVByb2dyZXNzaXZlUmVhZChjaHVuaykgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHRoaXMuX3JlYWR5Q2FwYWJpbGl0eS5wcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoX3RoaXMzLl9wcm9ncmVzc2l2ZVJlYWRMaXN0ZW5lcnMpLAogICAgICAgICAgICBfc3RlcDM7CgogICAgICAgIHRyeSB7CiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjMucygpOyAhKF9zdGVwMyA9IF9pdGVyYXRvcjMubigpKS5kb25lOykgewogICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBfc3RlcDMudmFsdWU7CiAgICAgICAgICAgIGxpc3RlbmVyKGNodW5rKTsKICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgIF9pdGVyYXRvcjMuZShlcnIpOwogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICBfaXRlcmF0b3IzLmYoKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogIm9uRGF0YVByb2dyZXNzaXZlRG9uZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25EYXRhUHJvZ3Jlc3NpdmVEb25lKCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIHRoaXMuX3JlYWR5Q2FwYWJpbGl0eS5wcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfaXRlcmF0b3I0ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoX3RoaXM0Ll9wcm9ncmVzc2l2ZURvbmVMaXN0ZW5lcnMpLAogICAgICAgICAgICBfc3RlcDQ7CgogICAgICAgIHRyeSB7CiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjQucygpOyAhKF9zdGVwNCA9IF9pdGVyYXRvcjQubigpKS5kb25lOykgewogICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBfc3RlcDQudmFsdWU7CiAgICAgICAgICAgIGxpc3RlbmVyKCk7CiAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICBfaXRlcmF0b3I0LmUoZXJyKTsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgX2l0ZXJhdG9yNC5mKCk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ0cmFuc3BvcnRSZWFkeSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdHJhbnNwb3J0UmVhZHkoKSB7CiAgICAgIHRoaXMuX3JlYWR5Q2FwYWJpbGl0eS5yZXNvbHZlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVxdWVzdERhdGFSYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVxdWVzdERhdGFSYW5nZShiZWdpbiwgZW5kKSB7CiAgICAgICgwLCBfdXRpbC51bnJlYWNoYWJsZSkoIkFic3RyYWN0IG1ldGhvZCBQREZEYXRhUmFuZ2VUcmFuc3BvcnQucmVxdWVzdERhdGFSYW5nZSIpOwogICAgfQogIH0sIHsKICAgIGtleTogImFib3J0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhYm9ydCgpIHt9CiAgfV0pOwoKICByZXR1cm4gUERGRGF0YVJhbmdlVHJhbnNwb3J0Owp9KCk7CgpleHBvcnRzLlBERkRhdGFSYW5nZVRyYW5zcG9ydCA9IFBERkRhdGFSYW5nZVRyYW5zcG9ydDsKCnZhciBQREZEb2N1bWVudFByb3h5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBQREZEb2N1bWVudFByb3h5KHBkZkluZm8sIHRyYW5zcG9ydCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBERkRvY3VtZW50UHJveHkpOwoKICAgIHRoaXMuX3BkZkluZm8gPSBwZGZJbmZvOwogICAgdGhpcy5fdHJhbnNwb3J0ID0gdHJhbnNwb3J0OwogIH0KCiAgX2NyZWF0ZUNsYXNzKFBERkRvY3VtZW50UHJveHksIFt7CiAgICBrZXk6ICJnZXRQYWdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQYWdlKHBhZ2VOdW1iZXIpIHsKICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRQYWdlKHBhZ2VOdW1iZXIpOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFBhZ2VJbmRleCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGFnZUluZGV4KHJlZikgewogICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldFBhZ2VJbmRleChyZWYpOwogICAgfQogIH0sIHsKICAgIGtleTogImdldERlc3RpbmF0aW9ucyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVzdGluYXRpb25zKCkgewogICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldERlc3RpbmF0aW9ucygpOwogICAgfQogIH0sIHsKICAgIGtleTogImdldERlc3RpbmF0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXN0aW5hdGlvbihpZCkgewogICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldERlc3RpbmF0aW9uKGlkKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRQYWdlTGFiZWxzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQYWdlTGFiZWxzKCkgewogICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldFBhZ2VMYWJlbHMoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRQYWdlTGF5b3V0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQYWdlTGF5b3V0KCkgewogICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldFBhZ2VMYXlvdXQoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRQYWdlTW9kZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGFnZU1vZGUoKSB7CiAgICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0UGFnZU1vZGUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRWaWV3ZXJQcmVmZXJlbmNlcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Vmlld2VyUHJlZmVyZW5jZXMoKSB7CiAgICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZ2V0Vmlld2VyUHJlZmVyZW5jZXMoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRPcGVuQWN0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRPcGVuQWN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldE9wZW5BY3Rpb24oKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRPcGVuQWN0aW9uRGVzdGluYXRpb24iLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldE9wZW5BY3Rpb25EZXN0aW5hdGlvbigpIHsKICAgICAgKDAsIF9kaXNwbGF5X3V0aWxzLmRlcHJlY2F0ZWQpKCJnZXRPcGVuQWN0aW9uRGVzdGluYXRpb24sIHVzZSBnZXRPcGVuQWN0aW9uIGluc3RlYWQuIik7CiAgICAgIHJldHVybiB0aGlzLmdldE9wZW5BY3Rpb24oKS50aGVuKGZ1bmN0aW9uIChvcGVuQWN0aW9uKSB7CiAgICAgICAgcmV0dXJuIG9wZW5BY3Rpb24gJiYgb3BlbkFjdGlvbi5kZXN0ID8gb3BlbkFjdGlvbi5kZXN0IDogbnVsbDsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0QXR0YWNobWVudHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEF0dGFjaG1lbnRzKCkgewogICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldEF0dGFjaG1lbnRzKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0SmF2YVNjcmlwdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SmF2YVNjcmlwdCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRKYXZhU2NyaXB0KCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0T3V0bGluZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T3V0bGluZSgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRPdXRsaW5lKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0UGVybWlzc2lvbnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBlcm1pc3Npb25zKCkgewogICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldFBlcm1pc3Npb25zKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0TWV0YWRhdGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldE1ldGFkYXRhKCkgewogICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmdldE1ldGFkYXRhKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0RGF0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGF0YSgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXREYXRhKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0RG93bmxvYWRJbmZvIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREb3dubG9hZEluZm8oKSB7CiAgICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuZG93bmxvYWRJbmZvQ2FwYWJpbGl0eS5wcm9taXNlOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFN0YXRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTdGF0cygpIHsKICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5nZXRTdGF0cygpOwogICAgfQogIH0sIHsKICAgIGtleTogImNsZWFudXAiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFudXAoKSB7CiAgICAgIHJldHVybiB0aGlzLl90cmFuc3BvcnQuc3RhcnRDbGVhbnVwKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZGVzdHJveSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHsKICAgICAgcmV0dXJuIHRoaXMubG9hZGluZ1Rhc2suZGVzdHJveSgpOwogICAgfQogIH0sIHsKICAgIGtleTogIm51bVBhZ2VzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fcGRmSW5mby5udW1QYWdlczsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmaW5nZXJwcmludCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3BkZkluZm8uZmluZ2VycHJpbnQ7CiAgICB9CiAgfSwgewogICAga2V5OiAibG9hZGluZ1BhcmFtcyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zcG9ydC5sb2FkaW5nUGFyYW1zOwogICAgfQogIH0sIHsKICAgIGtleTogImxvYWRpbmdUYXNrIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0LmxvYWRpbmdUYXNrOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFBERkRvY3VtZW50UHJveHk7Cn0oKTsKCmV4cG9ydHMuUERGRG9jdW1lbnRQcm94eSA9IFBERkRvY3VtZW50UHJveHk7Cgp2YXIgUERGUGFnZVByb3h5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBQREZQYWdlUHJveHkocGFnZUluZGV4LCBwYWdlSW5mbywgdHJhbnNwb3J0KSB7CiAgICB2YXIgcGRmQnVnID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBmYWxzZTsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUERGUGFnZVByb3h5KTsKCiAgICB0aGlzLl9wYWdlSW5kZXggPSBwYWdlSW5kZXg7CiAgICB0aGlzLl9wYWdlSW5mbyA9IHBhZ2VJbmZvOwogICAgdGhpcy5fdHJhbnNwb3J0ID0gdHJhbnNwb3J0OwogICAgdGhpcy5fc3RhdHMgPSBwZGZCdWcgPyBuZXcgX2Rpc3BsYXlfdXRpbHMuU3RhdFRpbWVyKCkgOiBudWxsOwogICAgdGhpcy5fcGRmQnVnID0gcGRmQnVnOwogICAgdGhpcy5jb21tb25PYmpzID0gdHJhbnNwb3J0LmNvbW1vbk9ianM7CiAgICB0aGlzLm9ianMgPSBuZXcgUERGT2JqZWN0cygpOwogICAgdGhpcy5jbGVhbnVwQWZ0ZXJSZW5kZXIgPSBmYWxzZTsKICAgIHRoaXMucGVuZGluZ0NsZWFudXAgPSBmYWxzZTsKICAgIHRoaXMuaW50ZW50U3RhdGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7CiAgfQoKICBfY3JlYXRlQ2xhc3MoUERGUGFnZVByb3h5LCBbewogICAga2V5OiAiZ2V0Vmlld3BvcnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZpZXdwb3J0KCkgewogICAgICB2YXIgX3JlZjMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LAogICAgICAgICAgc2NhbGUgPSBfcmVmMy5zY2FsZSwKICAgICAgICAgIF9yZWYzJHJvdGF0aW9uID0gX3JlZjMucm90YXRpb24sCiAgICAgICAgICByb3RhdGlvbiA9IF9yZWYzJHJvdGF0aW9uID09PSB2b2lkIDAgPyB0aGlzLnJvdGF0ZSA6IF9yZWYzJHJvdGF0aW9uLAogICAgICAgICAgX3JlZjMkb2Zmc2V0WCA9IF9yZWYzLm9mZnNldFgsCiAgICAgICAgICBvZmZzZXRYID0gX3JlZjMkb2Zmc2V0WCA9PT0gdm9pZCAwID8gMCA6IF9yZWYzJG9mZnNldFgsCiAgICAgICAgICBfcmVmMyRvZmZzZXRZID0gX3JlZjMub2Zmc2V0WSwKICAgICAgICAgIG9mZnNldFkgPSBfcmVmMyRvZmZzZXRZID09PSB2b2lkIDAgPyAwIDogX3JlZjMkb2Zmc2V0WSwKICAgICAgICAgIF9yZWYzJGRvbnRGbGlwID0gX3JlZjMuZG9udEZsaXAsCiAgICAgICAgICBkb250RmxpcCA9IF9yZWYzJGRvbnRGbGlwID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYzJGRvbnRGbGlwOwoKICAgICAgcmV0dXJuIG5ldyBfZGlzcGxheV91dGlscy5QYWdlVmlld3BvcnQoewogICAgICAgIHZpZXdCb3g6IHRoaXMudmlldywKICAgICAgICBzY2FsZTogc2NhbGUsCiAgICAgICAgcm90YXRpb246IHJvdGF0aW9uLAogICAgICAgIG9mZnNldFg6IG9mZnNldFgsCiAgICAgICAgb2Zmc2V0WTogb2Zmc2V0WSwKICAgICAgICBkb250RmxpcDogZG9udEZsaXAKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0QW5ub3RhdGlvbnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFubm90YXRpb25zKCkgewogICAgICB2YXIgX3JlZjQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LAogICAgICAgICAgX3JlZjQkaW50ZW50ID0gX3JlZjQuaW50ZW50LAogICAgICAgICAgaW50ZW50ID0gX3JlZjQkaW50ZW50ID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjQkaW50ZW50OwoKICAgICAgaWYgKCF0aGlzLmFubm90YXRpb25zUHJvbWlzZSB8fCB0aGlzLmFubm90YXRpb25zSW50ZW50ICE9PSBpbnRlbnQpIHsKICAgICAgICB0aGlzLmFubm90YXRpb25zUHJvbWlzZSA9IHRoaXMuX3RyYW5zcG9ydC5nZXRBbm5vdGF0aW9ucyh0aGlzLl9wYWdlSW5kZXgsIGludGVudCk7CiAgICAgICAgdGhpcy5hbm5vdGF0aW9uc0ludGVudCA9IGludGVudDsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMuYW5ub3RhdGlvbnNQcm9taXNlOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKF9yZWY1KSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwoKICAgICAgdmFyIGNhbnZhc0NvbnRleHQgPSBfcmVmNS5jYW52YXNDb250ZXh0LAogICAgICAgICAgdmlld3BvcnQgPSBfcmVmNS52aWV3cG9ydCwKICAgICAgICAgIF9yZWY1JGludGVudCA9IF9yZWY1LmludGVudCwKICAgICAgICAgIGludGVudCA9IF9yZWY1JGludGVudCA9PT0gdm9pZCAwID8gImRpc3BsYXkiIDogX3JlZjUkaW50ZW50LAogICAgICAgICAgX3JlZjUkZW5hYmxlV2ViR0wgPSBfcmVmNS5lbmFibGVXZWJHTCwKICAgICAgICAgIGVuYWJsZVdlYkdMID0gX3JlZjUkZW5hYmxlV2ViR0wgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjUkZW5hYmxlV2ViR0wsCiAgICAgICAgICBfcmVmNSRyZW5kZXJJbnRlcmFjdGkgPSBfcmVmNS5yZW5kZXJJbnRlcmFjdGl2ZUZvcm1zLAogICAgICAgICAgcmVuZGVySW50ZXJhY3RpdmVGb3JtcyA9IF9yZWY1JHJlbmRlckludGVyYWN0aSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmNSRyZW5kZXJJbnRlcmFjdGksCiAgICAgICAgICBfcmVmNSR0cmFuc2Zvcm0gPSBfcmVmNS50cmFuc2Zvcm0sCiAgICAgICAgICB0cmFuc2Zvcm0gPSBfcmVmNSR0cmFuc2Zvcm0gPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmNSR0cmFuc2Zvcm0sCiAgICAgICAgICBfcmVmNSRpbWFnZUxheWVyID0gX3JlZjUuaW1hZ2VMYXllciwKICAgICAgICAgIGltYWdlTGF5ZXIgPSBfcmVmNSRpbWFnZUxheWVyID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjUkaW1hZ2VMYXllciwKICAgICAgICAgIF9yZWY1JGNhbnZhc0ZhY3RvcnkgPSBfcmVmNS5jYW52YXNGYWN0b3J5LAogICAgICAgICAgY2FudmFzRmFjdG9yeSA9IF9yZWY1JGNhbnZhc0ZhY3RvcnkgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmNSRjYW52YXNGYWN0b3J5LAogICAgICAgICAgX3JlZjUkYmFja2dyb3VuZCA9IF9yZWY1LmJhY2tncm91bmQsCiAgICAgICAgICBiYWNrZ3JvdW5kID0gX3JlZjUkYmFja2dyb3VuZCA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWY1JGJhY2tncm91bmQ7CgogICAgICBpZiAodGhpcy5fc3RhdHMpIHsKICAgICAgICB0aGlzLl9zdGF0cy50aW1lKCJPdmVyYWxsIik7CiAgICAgIH0KCiAgICAgIHZhciByZW5kZXJpbmdJbnRlbnQgPSBpbnRlbnQgPT09ICJwcmludCIgPyAicHJpbnQiIDogImRpc3BsYXkiOwogICAgICB0aGlzLnBlbmRpbmdDbGVhbnVwID0gZmFsc2U7CgogICAgICBpZiAoIXRoaXMuaW50ZW50U3RhdGVzW3JlbmRlcmluZ0ludGVudF0pIHsKICAgICAgICB0aGlzLmludGVudFN0YXRlc1tyZW5kZXJpbmdJbnRlbnRdID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgICAgfQoKICAgICAgdmFyIGludGVudFN0YXRlID0gdGhpcy5pbnRlbnRTdGF0ZXNbcmVuZGVyaW5nSW50ZW50XTsKCiAgICAgIGlmIChpbnRlbnRTdGF0ZS5zdHJlYW1SZWFkZXJDYW5jZWxUaW1lb3V0KSB7CiAgICAgICAgY2xlYXJUaW1lb3V0KGludGVudFN0YXRlLnN0cmVhbVJlYWRlckNhbmNlbFRpbWVvdXQpOwogICAgICAgIGludGVudFN0YXRlLnN0cmVhbVJlYWRlckNhbmNlbFRpbWVvdXQgPSBudWxsOwogICAgICB9CgogICAgICB2YXIgY2FudmFzRmFjdG9yeUluc3RhbmNlID0gY2FudmFzRmFjdG9yeSB8fCBuZXcgX2Rpc3BsYXlfdXRpbHMuRE9NQ2FudmFzRmFjdG9yeSgpOwogICAgICB2YXIgd2ViR0xDb250ZXh0ID0gbmV3IF93ZWJnbC5XZWJHTENvbnRleHQoewogICAgICAgIGVuYWJsZTogZW5hYmxlV2ViR0wKICAgICAgfSk7CgogICAgICBpZiAoIWludGVudFN0YXRlLmRpc3BsYXlSZWFkeUNhcGFiaWxpdHkpIHsKICAgICAgICBpbnRlbnRTdGF0ZS5kaXNwbGF5UmVhZHlDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpOwogICAgICAgIGludGVudFN0YXRlLm9wZXJhdG9yTGlzdCA9IHsKICAgICAgICAgIGZuQXJyYXk6IFtdLAogICAgICAgICAgYXJnc0FycmF5OiBbXSwKICAgICAgICAgIGxhc3RDaHVuazogZmFsc2UKICAgICAgICB9OwoKICAgICAgICBpZiAodGhpcy5fc3RhdHMpIHsKICAgICAgICAgIHRoaXMuX3N0YXRzLnRpbWUoIlBhZ2UgUmVxdWVzdCIpOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5fcHVtcE9wZXJhdG9yTGlzdCh7CiAgICAgICAgICBwYWdlSW5kZXg6IHRoaXMuX3BhZ2VJbmRleCwKICAgICAgICAgIGludGVudDogcmVuZGVyaW5nSW50ZW50LAogICAgICAgICAgcmVuZGVySW50ZXJhY3RpdmVGb3JtczogcmVuZGVySW50ZXJhY3RpdmVGb3JtcyA9PT0gdHJ1ZQogICAgICAgIH0pOwogICAgICB9CgogICAgICB2YXIgY29tcGxldGUgPSBmdW5jdGlvbiBjb21wbGV0ZShlcnJvcikgewogICAgICAgIHZhciBpID0gaW50ZW50U3RhdGUucmVuZGVyVGFza3MuaW5kZXhPZihpbnRlcm5hbFJlbmRlclRhc2spOwoKICAgICAgICBpZiAoaSA+PSAwKSB7CiAgICAgICAgICBpbnRlbnRTdGF0ZS5yZW5kZXJUYXNrcy5zcGxpY2UoaSwgMSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoX3RoaXM1LmNsZWFudXBBZnRlclJlbmRlciB8fCByZW5kZXJpbmdJbnRlbnQgPT09ICJwcmludCIpIHsKICAgICAgICAgIF90aGlzNS5wZW5kaW5nQ2xlYW51cCA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICBfdGhpczUuX3RyeUNsZWFudXAoKTsKCiAgICAgICAgaWYgKGVycm9yKSB7CiAgICAgICAgICBpbnRlcm5hbFJlbmRlclRhc2suY2FwYWJpbGl0eS5yZWplY3QoZXJyb3IpOwoKICAgICAgICAgIF90aGlzNS5fYWJvcnRPcGVyYXRvckxpc3QoewogICAgICAgICAgICBpbnRlbnRTdGF0ZTogaW50ZW50U3RhdGUsCiAgICAgICAgICAgIHJlYXNvbjogZXJyb3IKICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpbnRlcm5hbFJlbmRlclRhc2suY2FwYWJpbGl0eS5yZXNvbHZlKCk7CiAgICAgICAgfQoKICAgICAgICBpZiAoX3RoaXM1Ll9zdGF0cykgewogICAgICAgICAgX3RoaXM1Ll9zdGF0cy50aW1lRW5kKCJSZW5kZXJpbmciKTsKCiAgICAgICAgICBfdGhpczUuX3N0YXRzLnRpbWVFbmQoIk92ZXJhbGwiKTsKICAgICAgICB9CiAgICAgIH07CgogICAgICB2YXIgaW50ZXJuYWxSZW5kZXJUYXNrID0gbmV3IEludGVybmFsUmVuZGVyVGFzayh7CiAgICAgICAgY2FsbGJhY2s6IGNvbXBsZXRlLAogICAgICAgIHBhcmFtczogewogICAgICAgICAgY2FudmFzQ29udGV4dDogY2FudmFzQ29udGV4dCwKICAgICAgICAgIHZpZXdwb3J0OiB2aWV3cG9ydCwKICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLAogICAgICAgICAgaW1hZ2VMYXllcjogaW1hZ2VMYXllciwKICAgICAgICAgIGJhY2tncm91bmQ6IGJhY2tncm91bmQKICAgICAgICB9LAogICAgICAgIG9ianM6IHRoaXMub2JqcywKICAgICAgICBjb21tb25PYmpzOiB0aGlzLmNvbW1vbk9ianMsCiAgICAgICAgb3BlcmF0b3JMaXN0OiBpbnRlbnRTdGF0ZS5vcGVyYXRvckxpc3QsCiAgICAgICAgcGFnZUluZGV4OiB0aGlzLl9wYWdlSW5kZXgsCiAgICAgICAgY2FudmFzRmFjdG9yeTogY2FudmFzRmFjdG9yeUluc3RhbmNlLAogICAgICAgIHdlYkdMQ29udGV4dDogd2ViR0xDb250ZXh0LAogICAgICAgIHVzZVJlcXVlc3RBbmltYXRpb25GcmFtZTogcmVuZGVyaW5nSW50ZW50ICE9PSAicHJpbnQiLAogICAgICAgIHBkZkJ1ZzogdGhpcy5fcGRmQnVnCiAgICAgIH0pOwoKICAgICAgaWYgKCFpbnRlbnRTdGF0ZS5yZW5kZXJUYXNrcykgewogICAgICAgIGludGVudFN0YXRlLnJlbmRlclRhc2tzID0gW107CiAgICAgIH0KCiAgICAgIGludGVudFN0YXRlLnJlbmRlclRhc2tzLnB1c2goaW50ZXJuYWxSZW5kZXJUYXNrKTsKICAgICAgdmFyIHJlbmRlclRhc2sgPSBpbnRlcm5hbFJlbmRlclRhc2sudGFzazsKICAgICAgaW50ZW50U3RhdGUuZGlzcGxheVJlYWR5Q2FwYWJpbGl0eS5wcm9taXNlLnRoZW4oZnVuY3Rpb24gKHRyYW5zcGFyZW5jeSkgewogICAgICAgIGlmIChfdGhpczUucGVuZGluZ0NsZWFudXApIHsKICAgICAgICAgIGNvbXBsZXRlKCk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpZiAoX3RoaXM1Ll9zdGF0cykgewogICAgICAgICAgX3RoaXM1Ll9zdGF0cy50aW1lKCJSZW5kZXJpbmciKTsKICAgICAgICB9CgogICAgICAgIGludGVybmFsUmVuZGVyVGFzay5pbml0aWFsaXplR3JhcGhpY3ModHJhbnNwYXJlbmN5KTsKICAgICAgICBpbnRlcm5hbFJlbmRlclRhc2sub3BlcmF0b3JMaXN0Q2hhbmdlZCgpOwogICAgICB9KVsiY2F0Y2giXShjb21wbGV0ZSk7CiAgICAgIHJldHVybiByZW5kZXJUYXNrOwogICAgfQogIH0sIHsKICAgIGtleTogImdldE9wZXJhdG9yTGlzdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T3BlcmF0b3JMaXN0KCkgewogICAgICBmdW5jdGlvbiBvcGVyYXRvckxpc3RDaGFuZ2VkKCkgewogICAgICAgIGlmIChpbnRlbnRTdGF0ZS5vcGVyYXRvckxpc3QubGFzdENodW5rKSB7CiAgICAgICAgICBpbnRlbnRTdGF0ZS5vcExpc3RSZWFkQ2FwYWJpbGl0eS5yZXNvbHZlKGludGVudFN0YXRlLm9wZXJhdG9yTGlzdCk7CiAgICAgICAgICB2YXIgaSA9IGludGVudFN0YXRlLnJlbmRlclRhc2tzLmluZGV4T2Yob3BMaXN0VGFzayk7CgogICAgICAgICAgaWYgKGkgPj0gMCkgewogICAgICAgICAgICBpbnRlbnRTdGF0ZS5yZW5kZXJUYXNrcy5zcGxpY2UoaSwgMSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICB2YXIgcmVuZGVyaW5nSW50ZW50ID0gIm9wbGlzdCI7CgogICAgICBpZiAoIXRoaXMuaW50ZW50U3RhdGVzW3JlbmRlcmluZ0ludGVudF0pIHsKICAgICAgICB0aGlzLmludGVudFN0YXRlc1tyZW5kZXJpbmdJbnRlbnRdID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgICAgfQoKICAgICAgdmFyIGludGVudFN0YXRlID0gdGhpcy5pbnRlbnRTdGF0ZXNbcmVuZGVyaW5nSW50ZW50XTsKICAgICAgdmFyIG9wTGlzdFRhc2s7CgogICAgICBpZiAoIWludGVudFN0YXRlLm9wTGlzdFJlYWRDYXBhYmlsaXR5KSB7CiAgICAgICAgb3BMaXN0VGFzayA9IHt9OwogICAgICAgIG9wTGlzdFRhc2sub3BlcmF0b3JMaXN0Q2hhbmdlZCA9IG9wZXJhdG9yTGlzdENoYW5nZWQ7CiAgICAgICAgaW50ZW50U3RhdGUub3BMaXN0UmVhZENhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7CiAgICAgICAgaW50ZW50U3RhdGUucmVuZGVyVGFza3MgPSBbXTsKICAgICAgICBpbnRlbnRTdGF0ZS5yZW5kZXJUYXNrcy5wdXNoKG9wTGlzdFRhc2spOwogICAgICAgIGludGVudFN0YXRlLm9wZXJhdG9yTGlzdCA9IHsKICAgICAgICAgIGZuQXJyYXk6IFtdLAogICAgICAgICAgYXJnc0FycmF5OiBbXSwKICAgICAgICAgIGxhc3RDaHVuazogZmFsc2UKICAgICAgICB9OwoKICAgICAgICBpZiAodGhpcy5fc3RhdHMpIHsKICAgICAgICAgIHRoaXMuX3N0YXRzLnRpbWUoIlBhZ2UgUmVxdWVzdCIpOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5fcHVtcE9wZXJhdG9yTGlzdCh7CiAgICAgICAgICBwYWdlSW5kZXg6IHRoaXMuX3BhZ2VJbmRleCwKICAgICAgICAgIGludGVudDogcmVuZGVyaW5nSW50ZW50CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBpbnRlbnRTdGF0ZS5vcExpc3RSZWFkQ2FwYWJpbGl0eS5wcm9taXNlOwogICAgfQogIH0sIHsKICAgIGtleTogInN0cmVhbVRleHRDb250ZW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzdHJlYW1UZXh0Q29udGVudCgpIHsKICAgICAgdmFyIF9yZWY2ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fSwKICAgICAgICAgIF9yZWY2JG5vcm1hbGl6ZVdoaXRlcyA9IF9yZWY2Lm5vcm1hbGl6ZVdoaXRlc3BhY2UsCiAgICAgICAgICBub3JtYWxpemVXaGl0ZXNwYWNlID0gX3JlZjYkbm9ybWFsaXplV2hpdGVzID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY2JG5vcm1hbGl6ZVdoaXRlcywKICAgICAgICAgIF9yZWY2JGRpc2FibGVDb21iaW5lVCA9IF9yZWY2LmRpc2FibGVDb21iaW5lVGV4dEl0ZW1zLAogICAgICAgICAgZGlzYWJsZUNvbWJpbmVUZXh0SXRlbXMgPSBfcmVmNiRkaXNhYmxlQ29tYmluZVQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjYkZGlzYWJsZUNvbWJpbmVUOwoKICAgICAgdmFyIFRFWFRfQ09OVEVOVF9DSFVOS19TSVpFID0gMTAwOwogICAgICByZXR1cm4gdGhpcy5fdHJhbnNwb3J0Lm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoU3RyZWFtKCJHZXRUZXh0Q29udGVudCIsIHsKICAgICAgICBwYWdlSW5kZXg6IHRoaXMuX3BhZ2VJbmRleCwKICAgICAgICBub3JtYWxpemVXaGl0ZXNwYWNlOiBub3JtYWxpemVXaGl0ZXNwYWNlID09PSB0cnVlLAogICAgICAgIGNvbWJpbmVUZXh0SXRlbXM6IGRpc2FibGVDb21iaW5lVGV4dEl0ZW1zICE9PSB0cnVlCiAgICAgIH0sIHsKICAgICAgICBoaWdoV2F0ZXJNYXJrOiBURVhUX0NPTlRFTlRfQ0hVTktfU0laRSwKICAgICAgICBzaXplOiBmdW5jdGlvbiBzaXplKHRleHRDb250ZW50KSB7CiAgICAgICAgICByZXR1cm4gdGV4dENvbnRlbnQuaXRlbXMubGVuZ3RoOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0VGV4dENvbnRlbnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRleHRDb250ZW50KCkgewogICAgICB2YXIgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTsKICAgICAgdmFyIHJlYWRhYmxlU3RyZWFtID0gdGhpcy5zdHJlYW1UZXh0Q29udGVudChwYXJhbXMpOwogICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgIGZ1bmN0aW9uIHB1bXAoKSB7CiAgICAgICAgICByZWFkZXIucmVhZCgpLnRoZW4oZnVuY3Rpb24gKF9yZWY3KSB7CiAgICAgICAgICAgIHZhciBfdGV4dENvbnRlbnQkaXRlbXM7CgogICAgICAgICAgICB2YXIgdmFsdWUgPSBfcmVmNy52YWx1ZSwKICAgICAgICAgICAgICAgIGRvbmUgPSBfcmVmNy5kb25lOwoKICAgICAgICAgICAgaWYgKGRvbmUpIHsKICAgICAgICAgICAgICByZXNvbHZlKHRleHRDb250ZW50KTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGV4dENvbnRlbnQuc3R5bGVzLCB2YWx1ZS5zdHlsZXMpOwoKICAgICAgICAgICAgKF90ZXh0Q29udGVudCRpdGVtcyA9IHRleHRDb250ZW50Lml0ZW1zKS5wdXNoLmFwcGx5KF90ZXh0Q29udGVudCRpdGVtcywgX3RvQ29uc3VtYWJsZUFycmF5KHZhbHVlLml0ZW1zKSk7CgogICAgICAgICAgICBwdW1wKCk7CiAgICAgICAgICB9LCByZWplY3QpOwogICAgICAgIH0KCiAgICAgICAgdmFyIHJlYWRlciA9IHJlYWRhYmxlU3RyZWFtLmdldFJlYWRlcigpOwogICAgICAgIHZhciB0ZXh0Q29udGVudCA9IHsKICAgICAgICAgIGl0ZW1zOiBbXSwKICAgICAgICAgIHN0eWxlczogT2JqZWN0LmNyZWF0ZShudWxsKQogICAgICAgIH07CiAgICAgICAgcHVtcCgpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfZGVzdHJveSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rlc3Ryb3koKSB7CiAgICAgIHZhciBfdGhpczYgPSB0aGlzOwoKICAgICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlOwogICAgICB0aGlzLl90cmFuc3BvcnQucGFnZUNhY2hlW3RoaXMuX3BhZ2VJbmRleF0gPSBudWxsOwogICAgICB2YXIgd2FpdE9uID0gW107CiAgICAgIE9iamVjdC5rZXlzKHRoaXMuaW50ZW50U3RhdGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChpbnRlbnQpIHsKICAgICAgICB2YXIgaW50ZW50U3RhdGUgPSBfdGhpczYuaW50ZW50U3RhdGVzW2ludGVudF07CgogICAgICAgIF90aGlzNi5fYWJvcnRPcGVyYXRvckxpc3QoewogICAgICAgICAgaW50ZW50U3RhdGU6IGludGVudFN0YXRlLAogICAgICAgICAgcmVhc29uOiBuZXcgRXJyb3IoIlBhZ2Ugd2FzIGRlc3Ryb3llZC4iKSwKICAgICAgICAgIGZvcmNlOiB0cnVlCiAgICAgICAgfSk7CgogICAgICAgIGlmIChpbnRlbnQgPT09ICJvcGxpc3QiKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpbnRlbnRTdGF0ZS5yZW5kZXJUYXNrcy5mb3JFYWNoKGZ1bmN0aW9uIChyZW5kZXJUYXNrKSB7CiAgICAgICAgICB2YXIgcmVuZGVyQ29tcGxldGVkID0gcmVuZGVyVGFzay5jYXBhYmlsaXR5LnByb21pc2VbImNhdGNoIl0oZnVuY3Rpb24gKCkge30pOwogICAgICAgICAgd2FpdE9uLnB1c2gocmVuZGVyQ29tcGxldGVkKTsKICAgICAgICAgIHJlbmRlclRhc2suY2FuY2VsKCk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICB0aGlzLm9ianMuY2xlYXIoKTsKICAgICAgdGhpcy5hbm5vdGF0aW9uc1Byb21pc2UgPSBudWxsOwogICAgICB0aGlzLnBlbmRpbmdDbGVhbnVwID0gZmFsc2U7CiAgICAgIHJldHVybiBQcm9taXNlLmFsbCh3YWl0T24pOwogICAgfQogIH0sIHsKICAgIGtleTogImNsZWFudXAiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFudXAoKSB7CiAgICAgIHZhciByZXNldFN0YXRzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTsKICAgICAgdGhpcy5wZW5kaW5nQ2xlYW51cCA9IHRydWU7CiAgICAgIHJldHVybiB0aGlzLl90cnlDbGVhbnVwKHJlc2V0U3RhdHMpOwogICAgfQogIH0sIHsKICAgIGtleTogIl90cnlDbGVhbnVwIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfdHJ5Q2xlYW51cCgpIHsKICAgICAgdmFyIF90aGlzNyA9IHRoaXM7CgogICAgICB2YXIgcmVzZXRTdGF0cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7CgogICAgICBpZiAoIXRoaXMucGVuZGluZ0NsZWFudXAgfHwgT2JqZWN0LmtleXModGhpcy5pbnRlbnRTdGF0ZXMpLnNvbWUoZnVuY3Rpb24gKGludGVudCkgewogICAgICAgIHZhciBpbnRlbnRTdGF0ZSA9IF90aGlzNy5pbnRlbnRTdGF0ZXNbaW50ZW50XTsKICAgICAgICByZXR1cm4gaW50ZW50U3RhdGUucmVuZGVyVGFza3MubGVuZ3RoICE9PSAwIHx8ICFpbnRlbnRTdGF0ZS5vcGVyYXRvckxpc3QubGFzdENodW5rOwogICAgICB9KSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQoKICAgICAgT2JqZWN0LmtleXModGhpcy5pbnRlbnRTdGF0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGludGVudCkgewogICAgICAgIGRlbGV0ZSBfdGhpczcuaW50ZW50U3RhdGVzW2ludGVudF07CiAgICAgIH0pOwogICAgICB0aGlzLm9ianMuY2xlYXIoKTsKICAgICAgdGhpcy5hbm5vdGF0aW9uc1Byb21pc2UgPSBudWxsOwoKICAgICAgaWYgKHJlc2V0U3RhdHMgJiYgdGhpcy5fc3RhdHMpIHsKICAgICAgICB0aGlzLl9zdGF0cyA9IG5ldyBfZGlzcGxheV91dGlscy5TdGF0VGltZXIoKTsKICAgICAgfQoKICAgICAgdGhpcy5wZW5kaW5nQ2xlYW51cCA9IGZhbHNlOwogICAgICByZXR1cm4gdHJ1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfc3RhcnRSZW5kZXJQYWdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfc3RhcnRSZW5kZXJQYWdlKHRyYW5zcGFyZW5jeSwgaW50ZW50KSB7CiAgICAgIHZhciBpbnRlbnRTdGF0ZSA9IHRoaXMuaW50ZW50U3RhdGVzW2ludGVudF07CgogICAgICBpZiAoIWludGVudFN0YXRlKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAodGhpcy5fc3RhdHMpIHsKICAgICAgICB0aGlzLl9zdGF0cy50aW1lRW5kKCJQYWdlIFJlcXVlc3QiKTsKICAgICAgfQoKICAgICAgaWYgKGludGVudFN0YXRlLmRpc3BsYXlSZWFkeUNhcGFiaWxpdHkpIHsKICAgICAgICBpbnRlbnRTdGF0ZS5kaXNwbGF5UmVhZHlDYXBhYmlsaXR5LnJlc29sdmUodHJhbnNwYXJlbmN5KTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogIl9yZW5kZXJQYWdlQ2h1bmsiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9yZW5kZXJQYWdlQ2h1bmsob3BlcmF0b3JMaXN0Q2h1bmssIGludGVudFN0YXRlKSB7CiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IG9wZXJhdG9yTGlzdENodW5rLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICBpbnRlbnRTdGF0ZS5vcGVyYXRvckxpc3QuZm5BcnJheS5wdXNoKG9wZXJhdG9yTGlzdENodW5rLmZuQXJyYXlbaV0pOwogICAgICAgIGludGVudFN0YXRlLm9wZXJhdG9yTGlzdC5hcmdzQXJyYXkucHVzaChvcGVyYXRvckxpc3RDaHVuay5hcmdzQXJyYXlbaV0pOwogICAgICB9CgogICAgICBpbnRlbnRTdGF0ZS5vcGVyYXRvckxpc3QubGFzdENodW5rID0gb3BlcmF0b3JMaXN0Q2h1bmsubGFzdENodW5rOwoKICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgaW50ZW50U3RhdGUucmVuZGVyVGFza3MubGVuZ3RoOyBfaTIrKykgewogICAgICAgIGludGVudFN0YXRlLnJlbmRlclRhc2tzW19pMl0ub3BlcmF0b3JMaXN0Q2hhbmdlZCgpOwogICAgICB9CgogICAgICBpZiAob3BlcmF0b3JMaXN0Q2h1bmsubGFzdENodW5rKSB7CiAgICAgICAgdGhpcy5fdHJ5Q2xlYW51cCgpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiX3B1bXBPcGVyYXRvckxpc3QiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9wdW1wT3BlcmF0b3JMaXN0KGFyZ3MpIHsKICAgICAgdmFyIF90aGlzOCA9IHRoaXM7CgogICAgICAoMCwgX3V0aWwuYXNzZXJ0KShhcmdzLmludGVudCwgJ1BERlBhZ2VQcm94eS5fcHVtcE9wZXJhdG9yTGlzdDogRXhwZWN0ZWQgImludGVudCIgYXJndW1lbnQuJyk7CgogICAgICB2YXIgcmVhZGFibGVTdHJlYW0gPSB0aGlzLl90cmFuc3BvcnQubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhTdHJlYW0oIkdldE9wZXJhdG9yTGlzdCIsIGFyZ3MpOwoKICAgICAgdmFyIHJlYWRlciA9IHJlYWRhYmxlU3RyZWFtLmdldFJlYWRlcigpOwogICAgICB2YXIgaW50ZW50U3RhdGUgPSB0aGlzLmludGVudFN0YXRlc1thcmdzLmludGVudF07CiAgICAgIGludGVudFN0YXRlLnN0cmVhbVJlYWRlciA9IHJlYWRlcjsKCiAgICAgIHZhciBwdW1wID0gZnVuY3Rpb24gcHVtcCgpIHsKICAgICAgICByZWFkZXIucmVhZCgpLnRoZW4oZnVuY3Rpb24gKF9yZWY4KSB7CiAgICAgICAgICB2YXIgdmFsdWUgPSBfcmVmOC52YWx1ZSwKICAgICAgICAgICAgICBkb25lID0gX3JlZjguZG9uZTsKCiAgICAgICAgICBpZiAoZG9uZSkgewogICAgICAgICAgICBpbnRlbnRTdGF0ZS5zdHJlYW1SZWFkZXIgPSBudWxsOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKF90aGlzOC5fdHJhbnNwb3J0LmRlc3Ryb3llZCkgewogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CgogICAgICAgICAgX3RoaXM4Ll9yZW5kZXJQYWdlQ2h1bmsodmFsdWUsIGludGVudFN0YXRlKTsKCiAgICAgICAgICBwdW1wKCk7CiAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgaW50ZW50U3RhdGUuc3RyZWFtUmVhZGVyID0gbnVsbDsKCiAgICAgICAgICBpZiAoX3RoaXM4Ll90cmFuc3BvcnQuZGVzdHJveWVkKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoaW50ZW50U3RhdGUub3BlcmF0b3JMaXN0KSB7CiAgICAgICAgICAgIGludGVudFN0YXRlLm9wZXJhdG9yTGlzdC5sYXN0Q2h1bmsgPSB0cnVlOwoKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbnRlbnRTdGF0ZS5yZW5kZXJUYXNrcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgIGludGVudFN0YXRlLnJlbmRlclRhc2tzW2ldLm9wZXJhdG9yTGlzdENoYW5nZWQoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgX3RoaXM4Ll90cnlDbGVhbnVwKCk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKGludGVudFN0YXRlLmRpc3BsYXlSZWFkeUNhcGFiaWxpdHkpIHsKICAgICAgICAgICAgaW50ZW50U3RhdGUuZGlzcGxheVJlYWR5Q2FwYWJpbGl0eS5yZWplY3QocmVhc29uKTsKICAgICAgICAgIH0gZWxzZSBpZiAoaW50ZW50U3RhdGUub3BMaXN0UmVhZENhcGFiaWxpdHkpIHsKICAgICAgICAgICAgaW50ZW50U3RhdGUub3BMaXN0UmVhZENhcGFiaWxpdHkucmVqZWN0KHJlYXNvbik7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aHJvdyByZWFzb247CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH07CgogICAgICBwdW1wKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX2Fib3J0T3BlcmF0b3JMaXN0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfYWJvcnRPcGVyYXRvckxpc3QoX3JlZjkpIHsKICAgICAgdmFyIF90aGlzOSA9IHRoaXM7CgogICAgICB2YXIgaW50ZW50U3RhdGUgPSBfcmVmOS5pbnRlbnRTdGF0ZSwKICAgICAgICAgIHJlYXNvbiA9IF9yZWY5LnJlYXNvbiwKICAgICAgICAgIF9yZWY5JGZvcmNlID0gX3JlZjkuZm9yY2UsCiAgICAgICAgICBmb3JjZSA9IF9yZWY5JGZvcmNlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWY5JGZvcmNlOwogICAgICAoMCwgX3V0aWwuYXNzZXJ0KShyZWFzb24gaW5zdGFuY2VvZiBFcnJvciB8fCBfdHlwZW9mKHJlYXNvbikgPT09ICJvYmplY3QiICYmIHJlYXNvbiAhPT0gbnVsbCwgJ1BERlBhZ2VQcm94eS5fYWJvcnRPcGVyYXRvckxpc3Q6IEV4cGVjdGVkICJyZWFzb24iIGFyZ3VtZW50LicpOwoKICAgICAgaWYgKCFpbnRlbnRTdGF0ZS5zdHJlYW1SZWFkZXIpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmICghZm9yY2UpIHsKICAgICAgICBpZiAoaW50ZW50U3RhdGUucmVuZGVyVGFza3MubGVuZ3RoICE9PSAwKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpZiAocmVhc29uIGluc3RhbmNlb2YgX2Rpc3BsYXlfdXRpbHMuUmVuZGVyaW5nQ2FuY2VsbGVkRXhjZXB0aW9uKSB7CiAgICAgICAgICBpbnRlbnRTdGF0ZS5zdHJlYW1SZWFkZXJDYW5jZWxUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIF90aGlzOS5fYWJvcnRPcGVyYXRvckxpc3QoewogICAgICAgICAgICAgIGludGVudFN0YXRlOiBpbnRlbnRTdGF0ZSwKICAgICAgICAgICAgICByZWFzb246IHJlYXNvbiwKICAgICAgICAgICAgICBmb3JjZTogdHJ1ZQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGludGVudFN0YXRlLnN0cmVhbVJlYWRlckNhbmNlbFRpbWVvdXQgPSBudWxsOwogICAgICAgICAgfSwgUkVOREVSSU5HX0NBTkNFTExFRF9USU1FT1VUKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGludGVudFN0YXRlLnN0cmVhbVJlYWRlci5jYW5jZWwobmV3IF91dGlsLkFib3J0RXhjZXB0aW9uKHJlYXNvbiAmJiByZWFzb24ubWVzc2FnZSkpOwogICAgICBpbnRlbnRTdGF0ZS5zdHJlYW1SZWFkZXIgPSBudWxsOwoKICAgICAgaWYgKHRoaXMuX3RyYW5zcG9ydC5kZXN0cm95ZWQpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIE9iamVjdC5rZXlzKHRoaXMuaW50ZW50U3RhdGVzKS5zb21lKGZ1bmN0aW9uIChpbnRlbnQpIHsKICAgICAgICBpZiAoX3RoaXM5LmludGVudFN0YXRlc1tpbnRlbnRdID09PSBpbnRlbnRTdGF0ZSkgewogICAgICAgICAgZGVsZXRlIF90aGlzOS5pbnRlbnRTdGF0ZXNbaW50ZW50XTsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9KTsKICAgICAgdGhpcy5jbGVhbnVwKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAicGFnZU51bWJlciIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3BhZ2VJbmRleCArIDE7CiAgICB9CiAgfSwgewogICAga2V5OiAicm90YXRlIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fcGFnZUluZm8ucm90YXRlOwogICAgfQogIH0sIHsKICAgIGtleTogInJlZiIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3BhZ2VJbmZvLnJlZjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJ1c2VyVW5pdCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX3BhZ2VJbmZvLnVzZXJVbml0OwogICAgfQogIH0sIHsKICAgIGtleTogInZpZXciLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9wYWdlSW5mby52aWV3OwogICAgfQogIH0sIHsKICAgIGtleTogInN0YXRzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fc3RhdHM7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUERGUGFnZVByb3h5Owp9KCk7CgpleHBvcnRzLlBERlBhZ2VQcm94eSA9IFBERlBhZ2VQcm94eTsKCnZhciBMb29wYmFja1BvcnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIExvb3BiYWNrUG9ydCgpIHsKICAgIHZhciBkZWZlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdHJ1ZTsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9vcGJhY2tQb3J0KTsKCiAgICB0aGlzLl9saXN0ZW5lcnMgPSBbXTsKICAgIHRoaXMuX2RlZmVyID0gZGVmZXI7CiAgICB0aGlzLl9kZWZlcnJlZCA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKExvb3BiYWNrUG9ydCwgW3sKICAgIGtleTogInBvc3RNZXNzYWdlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwb3N0TWVzc2FnZShvYmosIHRyYW5zZmVycykgewogICAgICB2YXIgX3RoaXMxMCA9IHRoaXM7CgogICAgICBmdW5jdGlvbiBjbG9uZVZhbHVlKHZhbHVlKSB7CiAgICAgICAgaWYgKF90eXBlb2YodmFsdWUpICE9PSAib2JqZWN0IiB8fCB2YWx1ZSA9PT0gbnVsbCkgewogICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgIH0KCiAgICAgICAgaWYgKGNsb25lZC5oYXModmFsdWUpKSB7CiAgICAgICAgICByZXR1cm4gY2xvbmVkLmdldCh2YWx1ZSk7CiAgICAgICAgfQoKICAgICAgICB2YXIgYnVmZmVyLCByZXN1bHQ7CgogICAgICAgIGlmICgoYnVmZmVyID0gdmFsdWUuYnVmZmVyKSAmJiAoMCwgX3V0aWwuaXNBcnJheUJ1ZmZlcikoYnVmZmVyKSkgewogICAgICAgICAgdmFyIHRyYW5zZmVyYWJsZSA9IHRyYW5zZmVycyAmJiB0cmFuc2ZlcnMuaW5jbHVkZXMoYnVmZmVyKTsKCiAgICAgICAgICBpZiAodHJhbnNmZXJhYmxlKSB7CiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyB2YWx1ZS5jb25zdHJ1Y3RvcihidWZmZXIsIHZhbHVlLmJ5dGVPZmZzZXQsIHZhbHVlLmJ5dGVMZW5ndGgpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmVzdWx0ID0gbmV3IHZhbHVlLmNvbnN0cnVjdG9yKHZhbHVlKTsKICAgICAgICAgIH0KCiAgICAgICAgICBjbG9uZWQuc2V0KHZhbHVlLCByZXN1bHQpOwogICAgICAgICAgcmV0dXJuIHJlc3VsdDsKICAgICAgICB9CgogICAgICAgIHJlc3VsdCA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gW10gOiB7fTsKICAgICAgICBjbG9uZWQuc2V0KHZhbHVlLCByZXN1bHQpOwoKICAgICAgICBmb3IgKHZhciBpIGluIHZhbHVlKSB7CiAgICAgICAgICB2YXIgZGVzYyA9IHZvaWQgMCwKICAgICAgICAgICAgICBwID0gdmFsdWU7CgogICAgICAgICAgd2hpbGUgKCEoZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocCwgaSkpKSB7CiAgICAgICAgICAgIHAgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocCk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKHR5cGVvZiBkZXNjLnZhbHVlID09PSAidW5kZWZpbmVkIikgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAodHlwZW9mIGRlc2MudmFsdWUgPT09ICJmdW5jdGlvbiIpIHsKICAgICAgICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5ICYmIHZhbHVlLmhhc093blByb3BlcnR5KGkpKSB7CiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJMb29wYmFja1BvcnQucG9zdE1lc3NhZ2UgLSBjYW5ub3QgY2xvbmU6ICIuY29uY2F0KHZhbHVlW2ldKSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQoKICAgICAgICAgIHJlc3VsdFtpXSA9IGNsb25lVmFsdWUoZGVzYy52YWx1ZSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9CgogICAgICBpZiAoIXRoaXMuX2RlZmVyKSB7CiAgICAgICAgdGhpcy5fbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7CiAgICAgICAgICBsaXN0ZW5lci5jYWxsKF90aGlzMTAsIHsKICAgICAgICAgICAgZGF0YTogb2JqCiAgICAgICAgICB9KTsKICAgICAgICB9KTsKCiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgY2xvbmVkID0gbmV3IFdlYWtNYXAoKTsKICAgICAgdmFyIGUgPSB7CiAgICAgICAgZGF0YTogY2xvbmVWYWx1ZShvYmopCiAgICAgIH07CgogICAgICB0aGlzLl9kZWZlcnJlZC50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczEwLl9saXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHsKICAgICAgICAgIGxpc3RlbmVyLmNhbGwoX3RoaXMxMCwgZSk7CiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImFkZEV2ZW50TGlzdGVuZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIobmFtZSwgbGlzdGVuZXIpIHsKICAgICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpOwogICAgfQogIH0sIHsKICAgIGtleTogInJlbW92ZUV2ZW50TGlzdGVuZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgbGlzdGVuZXIpIHsKICAgICAgdmFyIGkgPSB0aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7CgogICAgICB0aGlzLl9saXN0ZW5lcnMuc3BsaWNlKGksIDEpOwogICAgfQogIH0sIHsKICAgIGtleTogInRlcm1pbmF0ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdGVybWluYXRlKCkgewogICAgICB0aGlzLl9saXN0ZW5lcnMubGVuZ3RoID0gMDsKICAgIH0KICB9XSk7CgogIHJldHVybiBMb29wYmFja1BvcnQ7Cn0oKTsKCmV4cG9ydHMuTG9vcGJhY2tQb3J0ID0gTG9vcGJhY2tQb3J0OwoKdmFyIFBERldvcmtlciA9IGZ1bmN0aW9uIFBERldvcmtlckNsb3N1cmUoKSB7CiAgdmFyIHBkZldvcmtlclBvcnRzID0gbmV3IFdlYWtNYXAoKTsKICB2YXIgaXNXb3JrZXJEaXNhYmxlZCA9IGZhbHNlOwogIHZhciBmYWxsYmFja1dvcmtlclNyYzsKICB2YXIgbmV4dEZha2VXb3JrZXJJZCA9IDA7CiAgdmFyIGZha2VXb3JrZXJDYXBhYmlsaXR5OwoKICBpZiAoX2lzX25vZGUuaXNOb2RlSlMgJiYgdHlwZW9mIHJlcXVpcmUgPT09ICJmdW5jdGlvbiIpIHsKICAgIGlzV29ya2VyRGlzYWJsZWQgPSB0cnVlOwogICAgZmFsbGJhY2tXb3JrZXJTcmMgPSAiLi9wZGYud29ya2VyLmpzIjsKICB9IGVsc2UgaWYgKCh0eXBlb2YgZG9jdW1lbnQgPT09ICJ1bmRlZmluZWQiID8gInVuZGVmaW5lZCIgOiBfdHlwZW9mKGRvY3VtZW50KSkgPT09ICJvYmplY3QiICYmICJjdXJyZW50U2NyaXB0IiBpbiBkb2N1bWVudCkgewogICAgdmFyIHBkZmpzRmlsZVBhdGggPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0ICYmIGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjOwoKICAgIGlmIChwZGZqc0ZpbGVQYXRoKSB7CiAgICAgIGZhbGxiYWNrV29ya2VyU3JjID0gcGRmanNGaWxlUGF0aC5yZXBsYWNlKC8oXC4oPzptaW5cLik/anMpKFw/LiopPyQvaSwgIi53b3JrZXIkMSQyIik7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBfZ2V0V29ya2VyU3JjKCkgewogICAgaWYgKF93b3JrZXJfb3B0aW9ucy5HbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclNyYykgewogICAgICByZXR1cm4gX3dvcmtlcl9vcHRpb25zLkdsb2JhbFdvcmtlck9wdGlvbnMud29ya2VyU3JjOwogICAgfQoKICAgIGlmICh0eXBlb2YgZmFsbGJhY2tXb3JrZXJTcmMgIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgIGlmICghX2lzX25vZGUuaXNOb2RlSlMpIHsKICAgICAgICAoMCwgX2Rpc3BsYXlfdXRpbHMuZGVwcmVjYXRlZCkoJ05vICJHbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclNyYyIgc3BlY2lmaWVkLicpOwogICAgICB9CgogICAgICByZXR1cm4gZmFsbGJhY2tXb3JrZXJTcmM7CiAgICB9CgogICAgdGhyb3cgbmV3IEVycm9yKCdObyAiR2xvYmFsV29ya2VyT3B0aW9ucy53b3JrZXJTcmMiIHNwZWNpZmllZC4nKTsKICB9CgogIGZ1bmN0aW9uIGdldE1haW5UaHJlYWRXb3JrZXJNZXNzYWdlSGFuZGxlcigpIHsKICAgIHZhciBtYWluV29ya2VyTWVzc2FnZUhhbmRsZXI7CgogICAgdHJ5IHsKICAgICAgbWFpbldvcmtlck1lc3NhZ2VIYW5kbGVyID0gZ2xvYmFsVGhpcy5wZGZqc1dvcmtlciAmJiBnbG9iYWxUaGlzLnBkZmpzV29ya2VyLldvcmtlck1lc3NhZ2VIYW5kbGVyOwogICAgfSBjYXRjaCAoZXgpIHt9CgogICAgcmV0dXJuIG1haW5Xb3JrZXJNZXNzYWdlSGFuZGxlciB8fCBudWxsOwogIH0KCiAgZnVuY3Rpb24gc2V0dXBGYWtlV29ya2VyR2xvYmFsKCkgewogICAgaWYgKGZha2VXb3JrZXJDYXBhYmlsaXR5KSB7CiAgICAgIHJldHVybiBmYWtlV29ya2VyQ2FwYWJpbGl0eS5wcm9taXNlOwogICAgfQoKICAgIGZha2VXb3JrZXJDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpOwoKICAgIHZhciBsb2FkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3JlZjEwID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JbImRlZmF1bHQiXS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIG1haW5Xb3JrZXJNZXNzYWdlSGFuZGxlciwgd29ya2VyOwogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JbImRlZmF1bHQiXS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgbWFpbldvcmtlck1lc3NhZ2VIYW5kbGVyID0gZ2V0TWFpblRocmVhZFdvcmtlck1lc3NhZ2VIYW5kbGVyKCk7CgogICAgICAgICAgICAgICAgaWYgKCFtYWluV29ya2VyTWVzc2FnZUhhbmRsZXIpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIG1haW5Xb3JrZXJNZXNzYWdlSGFuZGxlcik7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIGlmICghKF9pc19ub2RlLmlzTm9kZUpTICYmIHR5cGVvZiByZXF1aXJlID09PSAiZnVuY3Rpb24iKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgd29ya2VyID0gZXZhbCgicmVxdWlyZSIpKF9nZXRXb3JrZXJTcmMoKSk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCB3b3JrZXIuV29ya2VyTWVzc2FnZUhhbmRsZXIpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gODsKICAgICAgICAgICAgICAgIHJldHVybiAoMCwgX2Rpc3BsYXlfdXRpbHMubG9hZFNjcmlwdCkoX2dldFdvcmtlclNyYygpKTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgd2luZG93LnBkZmpzV29ya2VyLldvcmtlck1lc3NhZ2VIYW5kbGVyKTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKTsKCiAgICAgIHJldHVybiBmdW5jdGlvbiBsb2FkZXIoKSB7CiAgICAgICAgcmV0dXJuIF9yZWYxMC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9OwogICAgfSgpOwoKICAgIGxvYWRlcigpLnRoZW4oZmFrZVdvcmtlckNhcGFiaWxpdHkucmVzb2x2ZSwgZmFrZVdvcmtlckNhcGFiaWxpdHkucmVqZWN0KTsKICAgIHJldHVybiBmYWtlV29ya2VyQ2FwYWJpbGl0eS5wcm9taXNlOwogIH0KCiAgZnVuY3Rpb24gY3JlYXRlQ0ROV3JhcHBlcih1cmwpIHsKICAgIHZhciB3cmFwcGVyID0gImltcG9ydFNjcmlwdHMoJyIgKyB1cmwgKyAiJyk7IjsKICAgIHJldHVybiBVUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFt3cmFwcGVyXSkpOwogIH0KCiAgdmFyIFBERldvcmtlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICBmdW5jdGlvbiBQREZXb3JrZXIoKSB7CiAgICAgIHZhciBfcmVmMTEgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9LAogICAgICAgICAgX3JlZjExJG5hbWUgPSBfcmVmMTEubmFtZSwKICAgICAgICAgIG5hbWUgPSBfcmVmMTEkbmFtZSA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWYxMSRuYW1lLAogICAgICAgICAgX3JlZjExJHBvcnQgPSBfcmVmMTEucG9ydCwKICAgICAgICAgIHBvcnQgPSBfcmVmMTEkcG9ydCA9PT0gdm9pZCAwID8gbnVsbCA6IF9yZWYxMSRwb3J0LAogICAgICAgICAgX3JlZjExJHZlcmJvc2l0eSA9IF9yZWYxMS52ZXJib3NpdHksCiAgICAgICAgICB2ZXJib3NpdHkgPSBfcmVmMTEkdmVyYm9zaXR5ID09PSB2b2lkIDAgPyAoMCwgX3V0aWwuZ2V0VmVyYm9zaXR5TGV2ZWwpKCkgOiBfcmVmMTEkdmVyYm9zaXR5OwoKICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBERldvcmtlcik7CgogICAgICBpZiAocG9ydCAmJiBwZGZXb3JrZXJQb3J0cy5oYXMocG9ydCkpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIkNhbm5vdCB1c2UgbW9yZSB0aGFuIG9uZSBQREZXb3JrZXIgcGVyIHBvcnQiKTsKICAgICAgfQoKICAgICAgdGhpcy5uYW1lID0gbmFtZTsKICAgICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTsKICAgICAgdGhpcy5wb3N0TWVzc2FnZVRyYW5zZmVycyA9IHRydWU7CiAgICAgIHRoaXMudmVyYm9zaXR5ID0gdmVyYm9zaXR5OwogICAgICB0aGlzLl9yZWFkeUNhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7CiAgICAgIHRoaXMuX3BvcnQgPSBudWxsOwogICAgICB0aGlzLl93ZWJXb3JrZXIgPSBudWxsOwogICAgICB0aGlzLl9tZXNzYWdlSGFuZGxlciA9IG51bGw7CgogICAgICBpZiAocG9ydCkgewogICAgICAgIHBkZldvcmtlclBvcnRzLnNldChwb3J0LCB0aGlzKTsKCiAgICAgICAgdGhpcy5faW5pdGlhbGl6ZUZyb21Qb3J0KHBvcnQpOwoKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHRoaXMuX2luaXRpYWxpemUoKTsKICAgIH0KCiAgICBfY3JlYXRlQ2xhc3MoUERGV29ya2VyLCBbewogICAgICBrZXk6ICJfaW5pdGlhbGl6ZUZyb21Qb3J0IiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0aWFsaXplRnJvbVBvcnQocG9ydCkgewogICAgICAgIHRoaXMuX3BvcnQgPSBwb3J0OwogICAgICAgIHRoaXMuX21lc3NhZ2VIYW5kbGVyID0gbmV3IF9tZXNzYWdlX2hhbmRsZXIuTWVzc2FnZUhhbmRsZXIoIm1haW4iLCAid29ya2VyIiwgcG9ydCk7CgogICAgICAgIHRoaXMuX21lc3NhZ2VIYW5kbGVyLm9uKCJyZWFkeSIsIGZ1bmN0aW9uICgpIHt9KTsKCiAgICAgICAgdGhpcy5fcmVhZHlDYXBhYmlsaXR5LnJlc29sdmUoKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJfaW5pdGlhbGl6ZSIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfaW5pdGlhbGl6ZSgpIHsKICAgICAgICB2YXIgX3RoaXMxMSA9IHRoaXM7CgogICAgICAgIGlmICh0eXBlb2YgV29ya2VyICE9PSAidW5kZWZpbmVkIiAmJiAhaXNXb3JrZXJEaXNhYmxlZCAmJiAhZ2V0TWFpblRocmVhZFdvcmtlck1lc3NhZ2VIYW5kbGVyKCkpIHsKICAgICAgICAgIHZhciB3b3JrZXJTcmMgPSBfZ2V0V29ya2VyU3JjKCk7CgogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgaWYgKCEoMCwgX3V0aWwuaXNTYW1lT3JpZ2luKSh3aW5kb3cubG9jYXRpb24uaHJlZiwgd29ya2VyU3JjKSkgewogICAgICAgICAgICAgIHdvcmtlclNyYyA9IGNyZWF0ZUNETldyYXBwZXIobmV3IFVSTCh3b3JrZXJTcmMsIHdpbmRvdy5sb2NhdGlvbikuaHJlZik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciB3b3JrZXIgPSBuZXcgV29ya2VyKHdvcmtlclNyYyk7CiAgICAgICAgICAgIHZhciBtZXNzYWdlSGFuZGxlciA9IG5ldyBfbWVzc2FnZV9oYW5kbGVyLk1lc3NhZ2VIYW5kbGVyKCJtYWluIiwgIndvcmtlciIsIHdvcmtlcik7CgogICAgICAgICAgICB2YXIgdGVybWluYXRlRWFybHkgPSBmdW5jdGlvbiB0ZXJtaW5hdGVFYXJseSgpIHsKICAgICAgICAgICAgICB3b3JrZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcigiZXJyb3IiLCBvbldvcmtlckVycm9yKTsKICAgICAgICAgICAgICBtZXNzYWdlSGFuZGxlci5kZXN0cm95KCk7CiAgICAgICAgICAgICAgd29ya2VyLnRlcm1pbmF0ZSgpOwoKICAgICAgICAgICAgICBpZiAoX3RoaXMxMS5kZXN0cm95ZWQpIHsKICAgICAgICAgICAgICAgIF90aGlzMTEuX3JlYWR5Q2FwYWJpbGl0eS5yZWplY3QobmV3IEVycm9yKCJXb3JrZXIgd2FzIGRlc3Ryb3llZCIpKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgX3RoaXMxMS5fc2V0dXBGYWtlV29ya2VyKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwoKICAgICAgICAgICAgdmFyIG9uV29ya2VyRXJyb3IgPSBmdW5jdGlvbiBvbldvcmtlckVycm9yKCkgewogICAgICAgICAgICAgIGlmICghX3RoaXMxMS5fd2ViV29ya2VyKSB7CiAgICAgICAgICAgICAgICB0ZXJtaW5hdGVFYXJseSgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIHdvcmtlci5hZGRFdmVudExpc3RlbmVyKCJlcnJvciIsIG9uV29ya2VyRXJyb3IpOwogICAgICAgICAgICBtZXNzYWdlSGFuZGxlci5vbigidGVzdCIsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgICAgd29ya2VyLnJlbW92ZUV2ZW50TGlzdGVuZXIoImVycm9yIiwgb25Xb3JrZXJFcnJvcik7CgogICAgICAgICAgICAgIGlmIChfdGhpczExLmRlc3Ryb3llZCkgewogICAgICAgICAgICAgICAgdGVybWluYXRlRWFybHkoKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGlmIChkYXRhKSB7CiAgICAgICAgICAgICAgICBfdGhpczExLl9tZXNzYWdlSGFuZGxlciA9IG1lc3NhZ2VIYW5kbGVyOwogICAgICAgICAgICAgICAgX3RoaXMxMS5fcG9ydCA9IHdvcmtlcjsKICAgICAgICAgICAgICAgIF90aGlzMTEuX3dlYldvcmtlciA9IHdvcmtlcjsKCiAgICAgICAgICAgICAgICBpZiAoIWRhdGEuc3VwcG9ydFRyYW5zZmVycykgewogICAgICAgICAgICAgICAgICBfdGhpczExLnBvc3RNZXNzYWdlVHJhbnNmZXJzID0gZmFsc2U7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX3RoaXMxMS5fcmVhZHlDYXBhYmlsaXR5LnJlc29sdmUoKTsKCiAgICAgICAgICAgICAgICBtZXNzYWdlSGFuZGxlci5zZW5kKCJjb25maWd1cmUiLCB7CiAgICAgICAgICAgICAgICAgIHZlcmJvc2l0eTogX3RoaXMxMS52ZXJib3NpdHkKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBfdGhpczExLl9zZXR1cEZha2VXb3JrZXIoKTsKCiAgICAgICAgICAgICAgICBtZXNzYWdlSGFuZGxlci5kZXN0cm95KCk7CiAgICAgICAgICAgICAgICB3b3JrZXIudGVybWluYXRlKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgbWVzc2FnZUhhbmRsZXIub24oInJlYWR5IiwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICB3b3JrZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcigiZXJyb3IiLCBvbldvcmtlckVycm9yKTsKCiAgICAgICAgICAgICAgaWYgKF90aGlzMTEuZGVzdHJveWVkKSB7CiAgICAgICAgICAgICAgICB0ZXJtaW5hdGVFYXJseSgpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIHNlbmRUZXN0KCk7CiAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgX3RoaXMxMS5fc2V0dXBGYWtlV29ya2VyKCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIHZhciBzZW5kVGVzdCA9IGZ1bmN0aW9uIHNlbmRUZXN0KCkgewogICAgICAgICAgICAgIHZhciB0ZXN0T2JqID0gbmV3IFVpbnQ4QXJyYXkoW190aGlzMTEucG9zdE1lc3NhZ2VUcmFuc2ZlcnMgPyAyNTUgOiAwXSk7CgogICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBtZXNzYWdlSGFuZGxlci5zZW5kKCJ0ZXN0IiwgdGVzdE9iaiwgW3Rlc3RPYmouYnVmZmVyXSk7CiAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHsKICAgICAgICAgICAgICAgICgwLCBfdXRpbC53YXJuKSgiQ2Fubm90IHVzZSBwb3N0TWVzc2FnZSB0cmFuc2ZlcnMuIik7CiAgICAgICAgICAgICAgICB0ZXN0T2JqWzBdID0gMDsKICAgICAgICAgICAgICAgIG1lc3NhZ2VIYW5kbGVyLnNlbmQoInRlc3QiLCB0ZXN0T2JqKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBzZW5kVGVzdCgpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICgwLCBfdXRpbC5pbmZvKSgiVGhlIHdvcmtlciBoYXMgYmVlbiBkaXNhYmxlZC4iKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHRoaXMuX3NldHVwRmFrZVdvcmtlcigpOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogIl9zZXR1cEZha2VXb3JrZXIiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gX3NldHVwRmFrZVdvcmtlcigpIHsKICAgICAgICB2YXIgX3RoaXMxMiA9IHRoaXM7CgogICAgICAgIGlmICghaXNXb3JrZXJEaXNhYmxlZCkgewogICAgICAgICAgKDAsIF91dGlsLndhcm4pKCJTZXR0aW5nIHVwIGZha2Ugd29ya2VyLiIpOwogICAgICAgICAgaXNXb3JrZXJEaXNhYmxlZCA9IHRydWU7CiAgICAgICAgfQoKICAgICAgICBzZXR1cEZha2VXb3JrZXJHbG9iYWwoKS50aGVuKGZ1bmN0aW9uIChXb3JrZXJNZXNzYWdlSGFuZGxlcikgewogICAgICAgICAgaWYgKF90aGlzMTIuZGVzdHJveWVkKSB7CiAgICAgICAgICAgIF90aGlzMTIuX3JlYWR5Q2FwYWJpbGl0eS5yZWplY3QobmV3IEVycm9yKCJXb3JrZXIgd2FzIGRlc3Ryb3llZCIpKTsKCiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgcG9ydCA9IG5ldyBMb29wYmFja1BvcnQoKTsKICAgICAgICAgIF90aGlzMTIuX3BvcnQgPSBwb3J0OwogICAgICAgICAgdmFyIGlkID0gImZha2UiICsgbmV4dEZha2VXb3JrZXJJZCsrOwogICAgICAgICAgdmFyIHdvcmtlckhhbmRsZXIgPSBuZXcgX21lc3NhZ2VfaGFuZGxlci5NZXNzYWdlSGFuZGxlcihpZCArICJfd29ya2VyIiwgaWQsIHBvcnQpOwogICAgICAgICAgV29ya2VyTWVzc2FnZUhhbmRsZXIuc2V0dXAod29ya2VySGFuZGxlciwgcG9ydCk7CiAgICAgICAgICB2YXIgbWVzc2FnZUhhbmRsZXIgPSBuZXcgX21lc3NhZ2VfaGFuZGxlci5NZXNzYWdlSGFuZGxlcihpZCwgaWQgKyAiX3dvcmtlciIsIHBvcnQpOwogICAgICAgICAgX3RoaXMxMi5fbWVzc2FnZUhhbmRsZXIgPSBtZXNzYWdlSGFuZGxlcjsKCiAgICAgICAgICBfdGhpczEyLl9yZWFkeUNhcGFiaWxpdHkucmVzb2x2ZSgpOwoKICAgICAgICAgIG1lc3NhZ2VIYW5kbGVyLnNlbmQoImNvbmZpZ3VyZSIsIHsKICAgICAgICAgICAgdmVyYm9zaXR5OiBfdGhpczEyLnZlcmJvc2l0eQogICAgICAgICAgfSk7CiAgICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgX3RoaXMxMi5fcmVhZHlDYXBhYmlsaXR5LnJlamVjdChuZXcgRXJyb3IoIlNldHRpbmcgdXAgZmFrZSB3b3JrZXIgZmFpbGVkOiBcIiIuY29uY2F0KHJlYXNvbi5tZXNzYWdlLCAiXCIuIikpKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJkZXN0cm95IiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7CiAgICAgICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlOwoKICAgICAgICBpZiAodGhpcy5fd2ViV29ya2VyKSB7CiAgICAgICAgICB0aGlzLl93ZWJXb3JrZXIudGVybWluYXRlKCk7CgogICAgICAgICAgdGhpcy5fd2ViV29ya2VyID0gbnVsbDsKICAgICAgICB9CgogICAgICAgIHBkZldvcmtlclBvcnRzWyJkZWxldGUiXSh0aGlzLl9wb3J0KTsKICAgICAgICB0aGlzLl9wb3J0ID0gbnVsbDsKCiAgICAgICAgaWYgKHRoaXMuX21lc3NhZ2VIYW5kbGVyKSB7CiAgICAgICAgICB0aGlzLl9tZXNzYWdlSGFuZGxlci5kZXN0cm95KCk7CgogICAgICAgICAgdGhpcy5fbWVzc2FnZUhhbmRsZXIgPSBudWxsOwogICAgICAgIH0KICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJwcm9taXNlIiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX3JlYWR5Q2FwYWJpbGl0eS5wcm9taXNlOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInBvcnQiLAogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gdGhpcy5fcG9ydDsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJtZXNzYWdlSGFuZGxlciIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiB0aGlzLl9tZXNzYWdlSGFuZGxlcjsKICAgICAgfQogICAgfV0sIFt7CiAgICAgIGtleTogImZyb21Qb3J0IiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21Qb3J0KHBhcmFtcykgewogICAgICAgIGlmICghcGFyYW1zIHx8ICFwYXJhbXMucG9ydCkgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJQREZXb3JrZXIuZnJvbVBvcnQgLSBpbnZhbGlkIG1ldGhvZCBzaWduYXR1cmUuIik7CiAgICAgICAgfQoKICAgICAgICBpZiAocGRmV29ya2VyUG9ydHMuaGFzKHBhcmFtcy5wb3J0KSkgewogICAgICAgICAgcmV0dXJuIHBkZldvcmtlclBvcnRzLmdldChwYXJhbXMucG9ydCk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gbmV3IFBERldvcmtlcihwYXJhbXMpOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogImdldFdvcmtlclNyYyIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRXb3JrZXJTcmMoKSB7CiAgICAgICAgcmV0dXJuIF9nZXRXb3JrZXJTcmMoKTsKICAgICAgfQogICAgfV0pOwoKICAgIHJldHVybiBQREZXb3JrZXI7CiAgfSgpOwoKICByZXR1cm4gUERGV29ya2VyOwp9KCk7CgpleHBvcnRzLlBERldvcmtlciA9IFBERldvcmtlcjsKCnZhciBXb3JrZXJUcmFuc3BvcnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFdvcmtlclRyYW5zcG9ydChtZXNzYWdlSGFuZGxlciwgbG9hZGluZ1Rhc2ssIG5ldHdvcmtTdHJlYW0sIHBhcmFtcykgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFdvcmtlclRyYW5zcG9ydCk7CgogICAgdGhpcy5tZXNzYWdlSGFuZGxlciA9IG1lc3NhZ2VIYW5kbGVyOwogICAgdGhpcy5sb2FkaW5nVGFzayA9IGxvYWRpbmdUYXNrOwogICAgdGhpcy5jb21tb25PYmpzID0gbmV3IFBERk9iamVjdHMoKTsKICAgIHRoaXMuZm9udExvYWRlciA9IG5ldyBfZm9udF9sb2FkZXIuRm9udExvYWRlcih7CiAgICAgIGRvY0lkOiBsb2FkaW5nVGFzay5kb2NJZCwKICAgICAgb25VbnN1cHBvcnRlZEZlYXR1cmU6IHRoaXMuX29uVW5zdXBwb3J0ZWRGZWF0dXJlLmJpbmQodGhpcykKICAgIH0pOwogICAgdGhpcy5fcGFyYW1zID0gcGFyYW1zOwogICAgdGhpcy5DTWFwUmVhZGVyRmFjdG9yeSA9IG5ldyBwYXJhbXMuQ01hcFJlYWRlckZhY3RvcnkoewogICAgICBiYXNlVXJsOiBwYXJhbXMuY01hcFVybCwKICAgICAgaXNDb21wcmVzc2VkOiBwYXJhbXMuY01hcFBhY2tlZAogICAgfSk7CiAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlOwogICAgdGhpcy5kZXN0cm95Q2FwYWJpbGl0eSA9IG51bGw7CiAgICB0aGlzLl9wYXNzd29yZENhcGFiaWxpdHkgPSBudWxsOwogICAgdGhpcy5fbmV0d29ya1N0cmVhbSA9IG5ldHdvcmtTdHJlYW07CiAgICB0aGlzLl9mdWxsUmVhZGVyID0gbnVsbDsKICAgIHRoaXMuX2xhc3RQcm9ncmVzcyA9IG51bGw7CiAgICB0aGlzLnBhZ2VDYWNoZSA9IFtdOwogICAgdGhpcy5wYWdlUHJvbWlzZXMgPSBbXTsKICAgIHRoaXMuZG93bmxvYWRJbmZvQ2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTsKICAgIHRoaXMuc2V0dXBNZXNzYWdlSGFuZGxlcigpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFdvcmtlclRyYW5zcG9ydCwgW3sKICAgIGtleTogImRlc3Ryb3kiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7CiAgICAgIHZhciBfdGhpczEzID0gdGhpczsKCiAgICAgIGlmICh0aGlzLmRlc3Ryb3lDYXBhYmlsaXR5KSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZGVzdHJveUNhcGFiaWxpdHkucHJvbWlzZTsKICAgICAgfQoKICAgICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlOwogICAgICB0aGlzLmRlc3Ryb3lDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpOwoKICAgICAgaWYgKHRoaXMuX3Bhc3N3b3JkQ2FwYWJpbGl0eSkgewogICAgICAgIHRoaXMuX3Bhc3N3b3JkQ2FwYWJpbGl0eS5yZWplY3QobmV3IEVycm9yKCJXb3JrZXIgd2FzIGRlc3Ryb3llZCBkdXJpbmcgb25QYXNzd29yZCBjYWxsYmFjayIpKTsKICAgICAgfQoKICAgICAgdmFyIHdhaXRPbiA9IFtdOwogICAgICB0aGlzLnBhZ2VDYWNoZS5mb3JFYWNoKGZ1bmN0aW9uIChwYWdlKSB7CiAgICAgICAgaWYgKHBhZ2UpIHsKICAgICAgICAgIHdhaXRPbi5wdXNoKHBhZ2UuX2Rlc3Ryb3koKSk7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgdGhpcy5wYWdlQ2FjaGUubGVuZ3RoID0gMDsKICAgICAgdGhpcy5wYWdlUHJvbWlzZXMubGVuZ3RoID0gMDsKICAgICAgdmFyIHRlcm1pbmF0ZWQgPSB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZSgiVGVybWluYXRlIiwgbnVsbCk7CiAgICAgIHdhaXRPbi5wdXNoKHRlcm1pbmF0ZWQpOwogICAgICBQcm9taXNlLmFsbCh3YWl0T24pLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzMTMuZm9udExvYWRlci5jbGVhcigpOwoKICAgICAgICBpZiAoX3RoaXMxMy5fbmV0d29ya1N0cmVhbSkgewogICAgICAgICAgX3RoaXMxMy5fbmV0d29ya1N0cmVhbS5jYW5jZWxBbGxSZXF1ZXN0cyhuZXcgX3V0aWwuQWJvcnRFeGNlcHRpb24oIldvcmtlciB3YXMgdGVybWluYXRlZC4iKSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoX3RoaXMxMy5tZXNzYWdlSGFuZGxlcikgewogICAgICAgICAgX3RoaXMxMy5tZXNzYWdlSGFuZGxlci5kZXN0cm95KCk7CgogICAgICAgICAgX3RoaXMxMy5tZXNzYWdlSGFuZGxlciA9IG51bGw7CiAgICAgICAgfQoKICAgICAgICBfdGhpczEzLmRlc3Ryb3lDYXBhYmlsaXR5LnJlc29sdmUoKTsKICAgICAgfSwgdGhpcy5kZXN0cm95Q2FwYWJpbGl0eS5yZWplY3QpOwogICAgICByZXR1cm4gdGhpcy5kZXN0cm95Q2FwYWJpbGl0eS5wcm9taXNlOwogICAgfQogIH0sIHsKICAgIGtleTogInNldHVwTWVzc2FnZUhhbmRsZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNldHVwTWVzc2FnZUhhbmRsZXIoKSB7CiAgICAgIHZhciBfdGhpczE0ID0gdGhpczsKCiAgICAgIHZhciBtZXNzYWdlSGFuZGxlciA9IHRoaXMubWVzc2FnZUhhbmRsZXIsCiAgICAgICAgICBsb2FkaW5nVGFzayA9IHRoaXMubG9hZGluZ1Rhc2s7CiAgICAgIG1lc3NhZ2VIYW5kbGVyLm9uKCJHZXRSZWFkZXIiLCBmdW5jdGlvbiAoZGF0YSwgc2luaykgewogICAgICAgICgwLCBfdXRpbC5hc3NlcnQpKF90aGlzMTQuX25ldHdvcmtTdHJlYW0sICJHZXRSZWFkZXIgLSBubyBgSVBERlN0cmVhbWAgaW5zdGFuY2UgYXZhaWxhYmxlLiIpOwogICAgICAgIF90aGlzMTQuX2Z1bGxSZWFkZXIgPSBfdGhpczE0Ll9uZXR3b3JrU3RyZWFtLmdldEZ1bGxSZWFkZXIoKTsKCiAgICAgICAgX3RoaXMxNC5fZnVsbFJlYWRlci5vblByb2dyZXNzID0gZnVuY3Rpb24gKGV2dCkgewogICAgICAgICAgX3RoaXMxNC5fbGFzdFByb2dyZXNzID0gewogICAgICAgICAgICBsb2FkZWQ6IGV2dC5sb2FkZWQsCiAgICAgICAgICAgIHRvdGFsOiBldnQudG90YWwKICAgICAgICAgIH07CiAgICAgICAgfTsKCiAgICAgICAgc2luay5vblB1bGwgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBfdGhpczE0Ll9mdWxsUmVhZGVyLnJlYWQoKS50aGVuKGZ1bmN0aW9uIChfcmVmMTIpIHsKICAgICAgICAgICAgdmFyIHZhbHVlID0gX3JlZjEyLnZhbHVlLAogICAgICAgICAgICAgICAgZG9uZSA9IF9yZWYxMi5kb25lOwoKICAgICAgICAgICAgaWYgKGRvbmUpIHsKICAgICAgICAgICAgICBzaW5rLmNsb3NlKCk7CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICAoMCwgX3V0aWwuYXNzZXJ0KSgoMCwgX3V0aWwuaXNBcnJheUJ1ZmZlcikodmFsdWUpLCAiR2V0UmVhZGVyIC0gZXhwZWN0ZWQgYW4gQXJyYXlCdWZmZXIuIik7CiAgICAgICAgICAgIHNpbmsuZW5xdWV1ZShuZXcgVWludDhBcnJheSh2YWx1ZSksIDEsIFt2YWx1ZV0pOwogICAgICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgICBzaW5rLmVycm9yKHJlYXNvbik7CiAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBzaW5rLm9uQ2FuY2VsID0gZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgX3RoaXMxNC5fZnVsbFJlYWRlci5jYW5jZWwocmVhc29uKTsKICAgICAgICB9OwogICAgICB9KTsKICAgICAgbWVzc2FnZUhhbmRsZXIub24oIlJlYWRlckhlYWRlcnNSZWFkeSIsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgdmFyIGhlYWRlcnNDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpOwogICAgICAgIHZhciBmdWxsUmVhZGVyID0gX3RoaXMxNC5fZnVsbFJlYWRlcjsKICAgICAgICBmdWxsUmVhZGVyLmhlYWRlcnNSZWFkeS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGlmICghZnVsbFJlYWRlci5pc1N0cmVhbWluZ1N1cHBvcnRlZCB8fCAhZnVsbFJlYWRlci5pc1JhbmdlU3VwcG9ydGVkKSB7CiAgICAgICAgICAgIGlmIChfdGhpczE0Ll9sYXN0UHJvZ3Jlc3MgJiYgbG9hZGluZ1Rhc2sub25Qcm9ncmVzcykgewogICAgICAgICAgICAgIGxvYWRpbmdUYXNrLm9uUHJvZ3Jlc3MoX3RoaXMxNC5fbGFzdFByb2dyZXNzKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVsbFJlYWRlci5vblByb2dyZXNzID0gZnVuY3Rpb24gKGV2dCkgewogICAgICAgICAgICAgIGlmIChsb2FkaW5nVGFzay5vblByb2dyZXNzKSB7CiAgICAgICAgICAgICAgICBsb2FkaW5nVGFzay5vblByb2dyZXNzKHsKICAgICAgICAgICAgICAgICAgbG9hZGVkOiBldnQubG9hZGVkLAogICAgICAgICAgICAgICAgICB0b3RhbDogZXZ0LnRvdGFsCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgICB9CgogICAgICAgICAgaGVhZGVyc0NhcGFiaWxpdHkucmVzb2x2ZSh7CiAgICAgICAgICAgIGlzU3RyZWFtaW5nU3VwcG9ydGVkOiBmdWxsUmVhZGVyLmlzU3RyZWFtaW5nU3VwcG9ydGVkLAogICAgICAgICAgICBpc1JhbmdlU3VwcG9ydGVkOiBmdWxsUmVhZGVyLmlzUmFuZ2VTdXBwb3J0ZWQsCiAgICAgICAgICAgIGNvbnRlbnRMZW5ndGg6IGZ1bGxSZWFkZXIuY29udGVudExlbmd0aAogICAgICAgICAgfSk7CiAgICAgICAgfSwgaGVhZGVyc0NhcGFiaWxpdHkucmVqZWN0KTsKICAgICAgICByZXR1cm4gaGVhZGVyc0NhcGFiaWxpdHkucHJvbWlzZTsKICAgICAgfSk7CiAgICAgIG1lc3NhZ2VIYW5kbGVyLm9uKCJHZXRSYW5nZVJlYWRlciIsIGZ1bmN0aW9uIChkYXRhLCBzaW5rKSB7CiAgICAgICAgKDAsIF91dGlsLmFzc2VydCkoX3RoaXMxNC5fbmV0d29ya1N0cmVhbSwgIkdldFJhbmdlUmVhZGVyIC0gbm8gYElQREZTdHJlYW1gIGluc3RhbmNlIGF2YWlsYWJsZS4iKTsKCiAgICAgICAgdmFyIHJhbmdlUmVhZGVyID0gX3RoaXMxNC5fbmV0d29ya1N0cmVhbS5nZXRSYW5nZVJlYWRlcihkYXRhLmJlZ2luLCBkYXRhLmVuZCk7CgogICAgICAgIGlmICghcmFuZ2VSZWFkZXIpIHsKICAgICAgICAgIHNpbmsuY2xvc2UoKTsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHNpbmsub25QdWxsID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgcmFuZ2VSZWFkZXIucmVhZCgpLnRoZW4oZnVuY3Rpb24gKF9yZWYxMykgewogICAgICAgICAgICB2YXIgdmFsdWUgPSBfcmVmMTMudmFsdWUsCiAgICAgICAgICAgICAgICBkb25lID0gX3JlZjEzLmRvbmU7CgogICAgICAgICAgICBpZiAoZG9uZSkgewogICAgICAgICAgICAgIHNpbmsuY2xvc2UoKTsKICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgICgwLCBfdXRpbC5hc3NlcnQpKCgwLCBfdXRpbC5pc0FycmF5QnVmZmVyKSh2YWx1ZSksICJHZXRSYW5nZVJlYWRlciAtIGV4cGVjdGVkIGFuIEFycmF5QnVmZmVyLiIpOwogICAgICAgICAgICBzaW5rLmVucXVldWUobmV3IFVpbnQ4QXJyYXkodmFsdWUpLCAxLCBbdmFsdWVdKTsKICAgICAgICAgIH0pWyJjYXRjaCJdKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgICAgc2luay5lcnJvcihyZWFzb24pOwogICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgc2luay5vbkNhbmNlbCA9IGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICAgIHJhbmdlUmVhZGVyLmNhbmNlbChyZWFzb24pOwogICAgICAgIH07CiAgICAgIH0pOwogICAgICBtZXNzYWdlSGFuZGxlci5vbigiR2V0RG9jIiwgZnVuY3Rpb24gKF9yZWYxNCkgewogICAgICAgIHZhciBwZGZJbmZvID0gX3JlZjE0LnBkZkluZm87CiAgICAgICAgX3RoaXMxNC5fbnVtUGFnZXMgPSBwZGZJbmZvLm51bVBhZ2VzOwoKICAgICAgICBsb2FkaW5nVGFzay5fY2FwYWJpbGl0eS5yZXNvbHZlKG5ldyBQREZEb2N1bWVudFByb3h5KHBkZkluZm8sIF90aGlzMTQpKTsKICAgICAgfSk7CiAgICAgIG1lc3NhZ2VIYW5kbGVyLm9uKCJEb2NFeGNlcHRpb24iLCBmdW5jdGlvbiAoZXgpIHsKICAgICAgICB2YXIgcmVhc29uOwoKICAgICAgICBzd2l0Y2ggKGV4Lm5hbWUpIHsKICAgICAgICAgIGNhc2UgIlBhc3N3b3JkRXhjZXB0aW9uIjoKICAgICAgICAgICAgcmVhc29uID0gbmV3IF91dGlsLlBhc3N3b3JkRXhjZXB0aW9uKGV4Lm1lc3NhZ2UsIGV4LmNvZGUpOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlICJJbnZhbGlkUERGRXhjZXB0aW9uIjoKICAgICAgICAgICAgcmVhc29uID0gbmV3IF91dGlsLkludmFsaWRQREZFeGNlcHRpb24oZXgubWVzc2FnZSk7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgIk1pc3NpbmdQREZFeGNlcHRpb24iOgogICAgICAgICAgICByZWFzb24gPSBuZXcgX3V0aWwuTWlzc2luZ1BERkV4Y2VwdGlvbihleC5tZXNzYWdlKTsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAiVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uIjoKICAgICAgICAgICAgcmVhc29uID0gbmV3IF91dGlsLlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbihleC5tZXNzYWdlLCBleC5zdGF0dXMpOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlICJVbmtub3duRXJyb3JFeGNlcHRpb24iOgogICAgICAgICAgICByZWFzb24gPSBuZXcgX3V0aWwuVW5rbm93bkVycm9yRXhjZXB0aW9uKGV4Lm1lc3NhZ2UsIGV4LmRldGFpbHMpOwogICAgICAgICAgICBicmVhazsKICAgICAgICB9CgogICAgICAgIGxvYWRpbmdUYXNrLl9jYXBhYmlsaXR5LnJlamVjdChyZWFzb24pOwogICAgICB9KTsKICAgICAgbWVzc2FnZUhhbmRsZXIub24oIlBhc3N3b3JkUmVxdWVzdCIsIGZ1bmN0aW9uIChleGNlcHRpb24pIHsKICAgICAgICBfdGhpczE0Ll9wYXNzd29yZENhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7CgogICAgICAgIGlmIChsb2FkaW5nVGFzay5vblBhc3N3b3JkKSB7CiAgICAgICAgICB2YXIgdXBkYXRlUGFzc3dvcmQgPSBmdW5jdGlvbiB1cGRhdGVQYXNzd29yZChwYXNzd29yZCkgewogICAgICAgICAgICBfdGhpczE0Ll9wYXNzd29yZENhcGFiaWxpdHkucmVzb2x2ZSh7CiAgICAgICAgICAgICAgcGFzc3dvcmQ6IHBhc3N3b3JkCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfTsKCiAgICAgICAgICB0cnkgewogICAgICAgICAgICBsb2FkaW5nVGFzay5vblBhc3N3b3JkKHVwZGF0ZVBhc3N3b3JkLCBleGNlcHRpb24uY29kZSk7CiAgICAgICAgICB9IGNhdGNoIChleCkgewogICAgICAgICAgICBfdGhpczE0Ll9wYXNzd29yZENhcGFiaWxpdHkucmVqZWN0KGV4KTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXMxNC5fcGFzc3dvcmRDYXBhYmlsaXR5LnJlamVjdChuZXcgX3V0aWwuUGFzc3dvcmRFeGNlcHRpb24oZXhjZXB0aW9uLm1lc3NhZ2UsIGV4Y2VwdGlvbi5jb2RlKSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gX3RoaXMxNC5fcGFzc3dvcmRDYXBhYmlsaXR5LnByb21pc2U7CiAgICAgIH0pOwogICAgICBtZXNzYWdlSGFuZGxlci5vbigiRGF0YUxvYWRlZCIsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgaWYgKGxvYWRpbmdUYXNrLm9uUHJvZ3Jlc3MpIHsKICAgICAgICAgIGxvYWRpbmdUYXNrLm9uUHJvZ3Jlc3MoewogICAgICAgICAgICBsb2FkZWQ6IGRhdGEubGVuZ3RoLAogICAgICAgICAgICB0b3RhbDogZGF0YS5sZW5ndGgKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgX3RoaXMxNC5kb3dubG9hZEluZm9DYXBhYmlsaXR5LnJlc29sdmUoZGF0YSk7CiAgICAgIH0pOwogICAgICBtZXNzYWdlSGFuZGxlci5vbigiU3RhcnRSZW5kZXJQYWdlIiwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICBpZiAoX3RoaXMxNC5kZXN0cm95ZWQpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHZhciBwYWdlID0gX3RoaXMxNC5wYWdlQ2FjaGVbZGF0YS5wYWdlSW5kZXhdOwoKICAgICAgICBwYWdlLl9zdGFydFJlbmRlclBhZ2UoZGF0YS50cmFuc3BhcmVuY3ksIGRhdGEuaW50ZW50KTsKICAgICAgfSk7CiAgICAgIG1lc3NhZ2VIYW5kbGVyLm9uKCJjb21tb25vYmoiLCBmdW5jdGlvbiAoZGF0YSkgewogICAgICAgIGlmIChfdGhpczE0LmRlc3Ryb3llZCkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdmFyIF9kYXRhID0gX3NsaWNlZFRvQXJyYXkoZGF0YSwgMyksCiAgICAgICAgICAgIGlkID0gX2RhdGFbMF0sCiAgICAgICAgICAgIHR5cGUgPSBfZGF0YVsxXSwKICAgICAgICAgICAgZXhwb3J0ZWREYXRhID0gX2RhdGFbMl07CgogICAgICAgIGlmIChfdGhpczE0LmNvbW1vbk9ianMuaGFzKGlkKSkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgc3dpdGNoICh0eXBlKSB7CiAgICAgICAgICBjYXNlICJGb250IjoKICAgICAgICAgICAgdmFyIHBhcmFtcyA9IF90aGlzMTQuX3BhcmFtczsKCiAgICAgICAgICAgIGlmICgiZXJyb3IiIGluIGV4cG9ydGVkRGF0YSkgewogICAgICAgICAgICAgIHZhciBleHBvcnRlZEVycm9yID0gZXhwb3J0ZWREYXRhLmVycm9yOwogICAgICAgICAgICAgICgwLCBfdXRpbC53YXJuKSgiRXJyb3IgZHVyaW5nIGZvbnQgbG9hZGluZzogIi5jb25jYXQoZXhwb3J0ZWRFcnJvcikpOwoKICAgICAgICAgICAgICBfdGhpczE0LmNvbW1vbk9ianMucmVzb2x2ZShpZCwgZXhwb3J0ZWRFcnJvcik7CgogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgZm9udFJlZ2lzdHJ5ID0gbnVsbDsKCiAgICAgICAgICAgIGlmIChwYXJhbXMucGRmQnVnICYmIGdsb2JhbFRoaXMuRm9udEluc3BlY3RvciAmJiBnbG9iYWxUaGlzLkZvbnRJbnNwZWN0b3IuZW5hYmxlZCkgewogICAgICAgICAgICAgIGZvbnRSZWdpc3RyeSA9IHsKICAgICAgICAgICAgICAgIHJlZ2lzdGVyRm9udDogZnVuY3Rpb24gcmVnaXN0ZXJGb250KGZvbnQsIHVybCkgewogICAgICAgICAgICAgICAgICBnbG9iYWxUaGlzLkZvbnRJbnNwZWN0b3IuZm9udEFkZGVkKGZvbnQsIHVybCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGZvbnQgPSBuZXcgX2ZvbnRfbG9hZGVyLkZvbnRGYWNlT2JqZWN0KGV4cG9ydGVkRGF0YSwgewogICAgICAgICAgICAgIGlzRXZhbFN1cHBvcnRlZDogcGFyYW1zLmlzRXZhbFN1cHBvcnRlZCwKICAgICAgICAgICAgICBkaXNhYmxlRm9udEZhY2U6IHBhcmFtcy5kaXNhYmxlRm9udEZhY2UsCiAgICAgICAgICAgICAgaWdub3JlRXJyb3JzOiBwYXJhbXMuaWdub3JlRXJyb3JzLAogICAgICAgICAgICAgIG9uVW5zdXBwb3J0ZWRGZWF0dXJlOiBfdGhpczE0Ll9vblVuc3VwcG9ydGVkRmVhdHVyZS5iaW5kKF90aGlzMTQpLAogICAgICAgICAgICAgIGZvbnRSZWdpc3RyeTogZm9udFJlZ2lzdHJ5CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgX3RoaXMxNC5mb250TG9hZGVyLmJpbmQoZm9udClbImNhdGNoIl0oZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoIkZvbnRGYWxsYmFjayIsIHsKICAgICAgICAgICAgICAgIGlkOiBpZAogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KVsiZmluYWxseSJdKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICBpZiAoIXBhcmFtcy5mb250RXh0cmFQcm9wZXJ0aWVzICYmIGZvbnQuZGF0YSkgewogICAgICAgICAgICAgICAgZm9udC5kYXRhID0gbnVsbDsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIF90aGlzMTQuY29tbW9uT2Jqcy5yZXNvbHZlKGlkLCBmb250KTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlICJGb250UGF0aCI6CiAgICAgICAgICBjYXNlICJGb250VHlwZTNSZXMiOgogICAgICAgICAgY2FzZSAiSW1hZ2UiOgogICAgICAgICAgICBfdGhpczE0LmNvbW1vbk9ianMucmVzb2x2ZShpZCwgZXhwb3J0ZWREYXRhKTsKCiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiR290IHVua25vd24gY29tbW9uIG9iamVjdCB0eXBlICIuY29uY2F0KHR5cGUpKTsKICAgICAgICB9CiAgICAgIH0pOwogICAgICBtZXNzYWdlSGFuZGxlci5vbigib2JqIiwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICBpZiAoX3RoaXMxNC5kZXN0cm95ZWQpIHsKICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICAgICAgfQoKICAgICAgICB2YXIgX2RhdGEyID0gX3NsaWNlZFRvQXJyYXkoZGF0YSwgNCksCiAgICAgICAgICAgIGlkID0gX2RhdGEyWzBdLAogICAgICAgICAgICBwYWdlSW5kZXggPSBfZGF0YTJbMV0sCiAgICAgICAgICAgIHR5cGUgPSBfZGF0YTJbMl0sCiAgICAgICAgICAgIGltYWdlRGF0YSA9IF9kYXRhMlszXTsKCiAgICAgICAgdmFyIHBhZ2VQcm94eSA9IF90aGlzMTQucGFnZUNhY2hlW3BhZ2VJbmRleF07CgogICAgICAgIGlmIChwYWdlUHJveHkub2Jqcy5oYXMoaWQpKSB7CiAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICAgIH0KCiAgICAgICAgc3dpdGNoICh0eXBlKSB7CiAgICAgICAgICBjYXNlICJJbWFnZSI6CiAgICAgICAgICAgIHBhZ2VQcm94eS5vYmpzLnJlc29sdmUoaWQsIGltYWdlRGF0YSk7CiAgICAgICAgICAgIHZhciBNQVhfSU1BR0VfU0laRV9UT19TVE9SRSA9IDgwMDAwMDA7CgogICAgICAgICAgICBpZiAoaW1hZ2VEYXRhICYmICJkYXRhIiBpbiBpbWFnZURhdGEgJiYgaW1hZ2VEYXRhLmRhdGEubGVuZ3RoID4gTUFYX0lNQUdFX1NJWkVfVE9fU1RPUkUpIHsKICAgICAgICAgICAgICBwYWdlUHJveHkuY2xlYW51cEFmdGVyUmVuZGVyID0gdHJ1ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJHb3QgdW5rbm93biBvYmplY3QgdHlwZSAiLmNvbmNhdCh0eXBlKSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICB9KTsKICAgICAgbWVzc2FnZUhhbmRsZXIub24oIkRvY1Byb2dyZXNzIiwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICBpZiAoX3RoaXMxNC5kZXN0cm95ZWQpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGlmIChsb2FkaW5nVGFzay5vblByb2dyZXNzKSB7CiAgICAgICAgICBsb2FkaW5nVGFzay5vblByb2dyZXNzKHsKICAgICAgICAgICAgbG9hZGVkOiBkYXRhLmxvYWRlZCwKICAgICAgICAgICAgdG90YWw6IGRhdGEudG90YWwKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSk7CiAgICAgIG1lc3NhZ2VIYW5kbGVyLm9uKCJVbnN1cHBvcnRlZEZlYXR1cmUiLCB0aGlzLl9vblVuc3VwcG9ydGVkRmVhdHVyZS5iaW5kKHRoaXMpKTsKICAgICAgbWVzc2FnZUhhbmRsZXIub24oIkZldGNoQnVpbHRJbkNNYXAiLCBmdW5jdGlvbiAoZGF0YSwgc2luaykgewogICAgICAgIGlmIChfdGhpczE0LmRlc3Ryb3llZCkgewogICAgICAgICAgc2luay5lcnJvcihuZXcgRXJyb3IoIldvcmtlciB3YXMgZGVzdHJveWVkIikpOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgdmFyIGZldGNoZWQgPSBmYWxzZTsKCiAgICAgICAgc2luay5vblB1bGwgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBpZiAoZmV0Y2hlZCkgewogICAgICAgICAgICBzaW5rLmNsb3NlKCk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KCiAgICAgICAgICBmZXRjaGVkID0gdHJ1ZTsKCiAgICAgICAgICBfdGhpczE0LkNNYXBSZWFkZXJGYWN0b3J5LmZldGNoKGRhdGEpLnRoZW4oZnVuY3Rpb24gKGJ1aWx0SW5DTWFwKSB7CiAgICAgICAgICAgIHNpbmsuZW5xdWV1ZShidWlsdEluQ01hcCwgMSwgW2J1aWx0SW5DTWFwLmNNYXBEYXRhLmJ1ZmZlcl0pOwogICAgICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgICBzaW5rLmVycm9yKHJlYXNvbik7CiAgICAgICAgICB9KTsKICAgICAgICB9OwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfb25VbnN1cHBvcnRlZEZlYXR1cmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vblVuc3VwcG9ydGVkRmVhdHVyZShfcmVmMTUpIHsKICAgICAgdmFyIGZlYXR1cmVJZCA9IF9yZWYxNS5mZWF0dXJlSWQ7CgogICAgICBpZiAodGhpcy5kZXN0cm95ZWQpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLmxvYWRpbmdUYXNrLm9uVW5zdXBwb3J0ZWRGZWF0dXJlKSB7CiAgICAgICAgdGhpcy5sb2FkaW5nVGFzay5vblVuc3VwcG9ydGVkRmVhdHVyZShmZWF0dXJlSWQpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0RGF0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGF0YSgpIHsKICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKCJHZXREYXRhIiwgbnVsbCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0UGFnZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGFnZShwYWdlTnVtYmVyKSB7CiAgICAgIHZhciBfdGhpczE1ID0gdGhpczsKCiAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihwYWdlTnVtYmVyKSB8fCBwYWdlTnVtYmVyIDw9IDAgfHwgcGFnZU51bWJlciA+IHRoaXMuX251bVBhZ2VzKSB7CiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBFcnJvcigiSW52YWxpZCBwYWdlIHJlcXVlc3QiKSk7CiAgICAgIH0KCiAgICAgIHZhciBwYWdlSW5kZXggPSBwYWdlTnVtYmVyIC0gMTsKCiAgICAgIGlmIChwYWdlSW5kZXggaW4gdGhpcy5wYWdlUHJvbWlzZXMpIHsKICAgICAgICByZXR1cm4gdGhpcy5wYWdlUHJvbWlzZXNbcGFnZUluZGV4XTsKICAgICAgfQoKICAgICAgdmFyIHByb21pc2UgPSB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZSgiR2V0UGFnZSIsIHsKICAgICAgICBwYWdlSW5kZXg6IHBhZ2VJbmRleAogICAgICB9KS50aGVuKGZ1bmN0aW9uIChwYWdlSW5mbykgewogICAgICAgIGlmIChfdGhpczE1LmRlc3Ryb3llZCkgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJUcmFuc3BvcnQgZGVzdHJveWVkIik7CiAgICAgICAgfQoKICAgICAgICB2YXIgcGFnZSA9IG5ldyBQREZQYWdlUHJveHkocGFnZUluZGV4LCBwYWdlSW5mbywgX3RoaXMxNSwgX3RoaXMxNS5fcGFyYW1zLnBkZkJ1Zyk7CiAgICAgICAgX3RoaXMxNS5wYWdlQ2FjaGVbcGFnZUluZGV4XSA9IHBhZ2U7CiAgICAgICAgcmV0dXJuIHBhZ2U7CiAgICAgIH0pOwogICAgICB0aGlzLnBhZ2VQcm9taXNlc1twYWdlSW5kZXhdID0gcHJvbWlzZTsKICAgICAgcmV0dXJuIHByb21pc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0UGFnZUluZGV4IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQYWdlSW5kZXgocmVmKSB7CiAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZSgiR2V0UGFnZUluZGV4IiwgewogICAgICAgIHJlZjogcmVmCiAgICAgIH0pWyJjYXRjaCJdKGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKHJlYXNvbikpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRBbm5vdGF0aW9ucyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QW5ub3RhdGlvbnMocGFnZUluZGV4LCBpbnRlbnQpIHsKICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKCJHZXRBbm5vdGF0aW9ucyIsIHsKICAgICAgICBwYWdlSW5kZXg6IHBhZ2VJbmRleCwKICAgICAgICBpbnRlbnQ6IGludGVudAogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXREZXN0aW5hdGlvbnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldERlc3RpbmF0aW9ucygpIHsKICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKCJHZXREZXN0aW5hdGlvbnMiLCBudWxsKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXREZXN0aW5hdGlvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVzdGluYXRpb24oaWQpIHsKICAgICAgaWYgKHR5cGVvZiBpZCAhPT0gInN0cmluZyIpIHsKICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IEVycm9yKCJJbnZhbGlkIGRlc3RpbmF0aW9uIHJlcXVlc3QuIikpOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoIkdldERlc3RpbmF0aW9uIiwgewogICAgICAgIGlkOiBpZAogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRQYWdlTGFiZWxzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQYWdlTGFiZWxzKCkgewogICAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoIkdldFBhZ2VMYWJlbHMiLCBudWxsKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRQYWdlTGF5b3V0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQYWdlTGF5b3V0KCkgewogICAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoIkdldFBhZ2VMYXlvdXQiLCBudWxsKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRQYWdlTW9kZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGFnZU1vZGUoKSB7CiAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZSgiR2V0UGFnZU1vZGUiLCBudWxsKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRWaWV3ZXJQcmVmZXJlbmNlcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Vmlld2VyUHJlZmVyZW5jZXMoKSB7CiAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZSgiR2V0Vmlld2VyUHJlZmVyZW5jZXMiLCBudWxsKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRPcGVuQWN0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRPcGVuQWN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoIkdldE9wZW5BY3Rpb24iLCBudWxsKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRBdHRhY2htZW50cyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QXR0YWNobWVudHMoKSB7CiAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZSgiR2V0QXR0YWNobWVudHMiLCBudWxsKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRKYXZhU2NyaXB0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRKYXZhU2NyaXB0KCkgewogICAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoIkdldEphdmFTY3JpcHQiLCBudWxsKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRPdXRsaW5lIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRPdXRsaW5lKCkgewogICAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoIkdldE91dGxpbmUiLCBudWxsKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRQZXJtaXNzaW9ucyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGVybWlzc2lvbnMoKSB7CiAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZSgiR2V0UGVybWlzc2lvbnMiLCBudWxsKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRNZXRhZGF0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TWV0YWRhdGEoKSB7CiAgICAgIHZhciBfdGhpczE2ID0gdGhpczsKCiAgICAgIHJldHVybiB0aGlzLm1lc3NhZ2VIYW5kbGVyLnNlbmRXaXRoUHJvbWlzZSgiR2V0TWV0YWRhdGEiLCBudWxsKS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGluZm86IHJlc3VsdHNbMF0sCiAgICAgICAgICBtZXRhZGF0YTogcmVzdWx0c1sxXSA/IG5ldyBfbWV0YWRhdGEuTWV0YWRhdGEocmVzdWx0c1sxXSkgOiBudWxsLAogICAgICAgICAgY29udGVudERpc3Bvc2l0aW9uRmlsZW5hbWU6IF90aGlzMTYuX2Z1bGxSZWFkZXIgPyBfdGhpczE2Ll9mdWxsUmVhZGVyLmZpbGVuYW1lIDogbnVsbAogICAgICAgIH07CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFN0YXRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTdGF0cygpIHsKICAgICAgcmV0dXJuIHRoaXMubWVzc2FnZUhhbmRsZXIuc2VuZFdpdGhQcm9taXNlKCJHZXRTdGF0cyIsIG51bGwpOwogICAgfQogIH0sIHsKICAgIGtleTogInN0YXJ0Q2xlYW51cCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc3RhcnRDbGVhbnVwKCkgewogICAgICB2YXIgX3RoaXMxNyA9IHRoaXM7CgogICAgICByZXR1cm4gdGhpcy5tZXNzYWdlSGFuZGxlci5zZW5kV2l0aFByb21pc2UoIkNsZWFudXAiLCBudWxsKS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBfdGhpczE3LnBhZ2VDYWNoZS5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgICB2YXIgcGFnZSA9IF90aGlzMTcucGFnZUNhY2hlW2ldOwoKICAgICAgICAgIGlmIChwYWdlKSB7CiAgICAgICAgICAgIHZhciBjbGVhbnVwU3VjY2Vzc2Z1bCA9IHBhZ2UuY2xlYW51cCgpOwoKICAgICAgICAgICAgaWYgKCFjbGVhbnVwU3VjY2Vzc2Z1bCkgewogICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigic3RhcnRDbGVhbnVwOiBQYWdlICIuY29uY2F0KGkgKyAxLCAiIGlzIGN1cnJlbnRseSByZW5kZXJpbmcuIikpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBfdGhpczE3LmNvbW1vbk9ianMuY2xlYXIoKTsKCiAgICAgICAgX3RoaXMxNy5mb250TG9hZGVyLmNsZWFyKCk7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImxvYWRpbmdQYXJhbXMiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBwYXJhbXMgPSB0aGlzLl9wYXJhbXM7CiAgICAgIHJldHVybiAoMCwgX3V0aWwuc2hhZG93KSh0aGlzLCAibG9hZGluZ1BhcmFtcyIsIHsKICAgICAgICBkaXNhYmxlQXV0b0ZldGNoOiBwYXJhbXMuZGlzYWJsZUF1dG9GZXRjaCwKICAgICAgICBkaXNhYmxlRm9udEZhY2U6IHBhcmFtcy5kaXNhYmxlRm9udEZhY2UKICAgICAgfSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gV29ya2VyVHJhbnNwb3J0Owp9KCk7Cgp2YXIgUERGT2JqZWN0cyA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gUERGT2JqZWN0cygpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQREZPYmplY3RzKTsKCiAgICB0aGlzLl9vYmpzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICB9CgogIF9jcmVhdGVDbGFzcyhQREZPYmplY3RzLCBbewogICAga2V5OiAiX2Vuc3VyZU9iaiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2Vuc3VyZU9iaihvYmpJZCkgewogICAgICBpZiAodGhpcy5fb2Jqc1tvYmpJZF0pIHsKICAgICAgICByZXR1cm4gdGhpcy5fb2Jqc1tvYmpJZF07CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLl9vYmpzW29iaklkXSA9IHsKICAgICAgICBjYXBhYmlsaXR5OiAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCksCiAgICAgICAgZGF0YTogbnVsbCwKICAgICAgICByZXNvbHZlZDogZmFsc2UKICAgICAgfTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldChvYmpJZCkgewogICAgICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG51bGw7CgogICAgICBpZiAoY2FsbGJhY2spIHsKICAgICAgICB0aGlzLl9lbnN1cmVPYmoob2JqSWQpLmNhcGFiaWxpdHkucHJvbWlzZS50aGVuKGNhbGxiYWNrKTsKCiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIHZhciBvYmogPSB0aGlzLl9vYmpzW29iaklkXTsKCiAgICAgIGlmICghb2JqIHx8ICFvYmoucmVzb2x2ZWQpIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlJlcXVlc3Rpbmcgb2JqZWN0IHRoYXQgaXNuJ3QgcmVzb2x2ZWQgeWV0ICIuY29uY2F0KG9iaklkLCAiLiIpKTsKICAgICAgfQoKICAgICAgcmV0dXJuIG9iai5kYXRhOwogICAgfQogIH0sIHsKICAgIGtleTogImhhcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzKG9iaklkKSB7CiAgICAgIHZhciBvYmogPSB0aGlzLl9vYmpzW29iaklkXTsKICAgICAgcmV0dXJuIG9iaiA/IG9iai5yZXNvbHZlZCA6IGZhbHNlOwogICAgfQogIH0sIHsKICAgIGtleTogInJlc29sdmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlc29sdmUob2JqSWQsIGRhdGEpIHsKICAgICAgdmFyIG9iaiA9IHRoaXMuX2Vuc3VyZU9iaihvYmpJZCk7CgogICAgICBvYmoucmVzb2x2ZWQgPSB0cnVlOwogICAgICBvYmouZGF0YSA9IGRhdGE7CiAgICAgIG9iai5jYXBhYmlsaXR5LnJlc29sdmUoZGF0YSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY2xlYXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKCkgewogICAgICB0aGlzLl9vYmpzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBQREZPYmplY3RzOwp9KCk7Cgp2YXIgUmVuZGVyVGFzayA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gUmVuZGVyVGFzayhpbnRlcm5hbFJlbmRlclRhc2spIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZW5kZXJUYXNrKTsKCiAgICB0aGlzLl9pbnRlcm5hbFJlbmRlclRhc2sgPSBpbnRlcm5hbFJlbmRlclRhc2s7CiAgICB0aGlzLm9uQ29udGludWUgPSBudWxsOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFJlbmRlclRhc2ssIFt7CiAgICBrZXk6ICJjYW5jZWwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbCgpIHsKICAgICAgdGhpcy5faW50ZXJuYWxSZW5kZXJUYXNrLmNhbmNlbCgpOwogICAgfQogIH0sIHsKICAgIGtleTogInByb21pc2UiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9pbnRlcm5hbFJlbmRlclRhc2suY2FwYWJpbGl0eS5wcm9taXNlOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFJlbmRlclRhc2s7Cn0oKTsKCnZhciBJbnRlcm5hbFJlbmRlclRhc2sgPSBmdW5jdGlvbiBJbnRlcm5hbFJlbmRlclRhc2tDbG9zdXJlKCkgewogIHZhciBjYW52YXNJblJlbmRlcmluZyA9IG5ldyBXZWFrU2V0KCk7CgogIHZhciBJbnRlcm5hbFJlbmRlclRhc2sgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gSW50ZXJuYWxSZW5kZXJUYXNrKF9yZWYxNikgewogICAgICB2YXIgY2FsbGJhY2sgPSBfcmVmMTYuY2FsbGJhY2ssCiAgICAgICAgICBwYXJhbXMgPSBfcmVmMTYucGFyYW1zLAogICAgICAgICAgb2JqcyA9IF9yZWYxNi5vYmpzLAogICAgICAgICAgY29tbW9uT2JqcyA9IF9yZWYxNi5jb21tb25PYmpzLAogICAgICAgICAgb3BlcmF0b3JMaXN0ID0gX3JlZjE2Lm9wZXJhdG9yTGlzdCwKICAgICAgICAgIHBhZ2VJbmRleCA9IF9yZWYxNi5wYWdlSW5kZXgsCiAgICAgICAgICBjYW52YXNGYWN0b3J5ID0gX3JlZjE2LmNhbnZhc0ZhY3RvcnksCiAgICAgICAgICB3ZWJHTENvbnRleHQgPSBfcmVmMTYud2ViR0xDb250ZXh0LAogICAgICAgICAgX3JlZjE2JHVzZVJlcXVlc3RBbmltID0gX3JlZjE2LnVzZVJlcXVlc3RBbmltYXRpb25GcmFtZSwKICAgICAgICAgIHVzZVJlcXVlc3RBbmltYXRpb25GcmFtZSA9IF9yZWYxNiR1c2VSZXF1ZXN0QW5pbSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMTYkdXNlUmVxdWVzdEFuaW0sCiAgICAgICAgICBfcmVmMTYkcGRmQnVnID0gX3JlZjE2LnBkZkJ1ZywKICAgICAgICAgIHBkZkJ1ZyA9IF9yZWYxNiRwZGZCdWcgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjE2JHBkZkJ1ZzsKCiAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbnRlcm5hbFJlbmRlclRhc2spOwoKICAgICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrOwogICAgICB0aGlzLnBhcmFtcyA9IHBhcmFtczsKICAgICAgdGhpcy5vYmpzID0gb2JqczsKICAgICAgdGhpcy5jb21tb25PYmpzID0gY29tbW9uT2JqczsKICAgICAgdGhpcy5vcGVyYXRvckxpc3RJZHggPSBudWxsOwogICAgICB0aGlzLm9wZXJhdG9yTGlzdCA9IG9wZXJhdG9yTGlzdDsKICAgICAgdGhpcy5fcGFnZUluZGV4ID0gcGFnZUluZGV4OwogICAgICB0aGlzLmNhbnZhc0ZhY3RvcnkgPSBjYW52YXNGYWN0b3J5OwogICAgICB0aGlzLndlYkdMQ29udGV4dCA9IHdlYkdMQ29udGV4dDsKICAgICAgdGhpcy5fcGRmQnVnID0gcGRmQnVnOwogICAgICB0aGlzLnJ1bm5pbmcgPSBmYWxzZTsKICAgICAgdGhpcy5ncmFwaGljc1JlYWR5Q2FsbGJhY2sgPSBudWxsOwogICAgICB0aGlzLmdyYXBoaWNzUmVhZHkgPSBmYWxzZTsKICAgICAgdGhpcy5fdXNlUmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gdXNlUmVxdWVzdEFuaW1hdGlvbkZyYW1lID09PSB0cnVlICYmIHR5cGVvZiB3aW5kb3cgIT09ICJ1bmRlZmluZWQiOwogICAgICB0aGlzLmNhbmNlbGxlZCA9IGZhbHNlOwogICAgICB0aGlzLmNhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7CiAgICAgIHRoaXMudGFzayA9IG5ldyBSZW5kZXJUYXNrKHRoaXMpOwogICAgICB0aGlzLl9jb250aW51ZUJvdW5kID0gdGhpcy5fY29udGludWUuYmluZCh0aGlzKTsKICAgICAgdGhpcy5fc2NoZWR1bGVOZXh0Qm91bmQgPSB0aGlzLl9zY2hlZHVsZU5leHQuYmluZCh0aGlzKTsKICAgICAgdGhpcy5fbmV4dEJvdW5kID0gdGhpcy5fbmV4dC5iaW5kKHRoaXMpOwogICAgICB0aGlzLl9jYW52YXMgPSBwYXJhbXMuY2FudmFzQ29udGV4dC5jYW52YXM7CiAgICB9CgogICAgX2NyZWF0ZUNsYXNzKEludGVybmFsUmVuZGVyVGFzaywgW3sKICAgICAga2V5OiAiaW5pdGlhbGl6ZUdyYXBoaWNzIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGluaXRpYWxpemVHcmFwaGljcygpIHsKICAgICAgICB2YXIgdHJhbnNwYXJlbmN5ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTsKCiAgICAgICAgaWYgKHRoaXMuY2FuY2VsbGVkKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpZiAodGhpcy5fY2FudmFzKSB7CiAgICAgICAgICBpZiAoY2FudmFzSW5SZW5kZXJpbmcuaGFzKHRoaXMuX2NhbnZhcykpIHsKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJDYW5ub3QgdXNlIHRoZSBzYW1lIGNhbnZhcyBkdXJpbmcgbXVsdGlwbGUgcmVuZGVyKCkgb3BlcmF0aW9ucy4gIiArICJVc2UgZGlmZmVyZW50IGNhbnZhcyBvciBlbnN1cmUgcHJldmlvdXMgb3BlcmF0aW9ucyB3ZXJlICIgKyAiY2FuY2VsbGVkIG9yIGNvbXBsZXRlZC4iKTsKICAgICAgICAgIH0KCiAgICAgICAgICBjYW52YXNJblJlbmRlcmluZy5hZGQodGhpcy5fY2FudmFzKTsKICAgICAgICB9CgogICAgICAgIGlmICh0aGlzLl9wZGZCdWcgJiYgZ2xvYmFsVGhpcy5TdGVwcGVyTWFuYWdlciAmJiBnbG9iYWxUaGlzLlN0ZXBwZXJNYW5hZ2VyLmVuYWJsZWQpIHsKICAgICAgICAgIHRoaXMuc3RlcHBlciA9IGdsb2JhbFRoaXMuU3RlcHBlck1hbmFnZXIuY3JlYXRlKHRoaXMuX3BhZ2VJbmRleCk7CiAgICAgICAgICB0aGlzLnN0ZXBwZXIuaW5pdCh0aGlzLm9wZXJhdG9yTGlzdCk7CiAgICAgICAgICB0aGlzLnN0ZXBwZXIubmV4dEJyZWFrUG9pbnQgPSB0aGlzLnN0ZXBwZXIuZ2V0TmV4dEJyZWFrUG9pbnQoKTsKICAgICAgICB9CgogICAgICAgIHZhciBfdGhpcyRwYXJhbXMgPSB0aGlzLnBhcmFtcywKICAgICAgICAgICAgY2FudmFzQ29udGV4dCA9IF90aGlzJHBhcmFtcy5jYW52YXNDb250ZXh0LAogICAgICAgICAgICB2aWV3cG9ydCA9IF90aGlzJHBhcmFtcy52aWV3cG9ydCwKICAgICAgICAgICAgdHJhbnNmb3JtID0gX3RoaXMkcGFyYW1zLnRyYW5zZm9ybSwKICAgICAgICAgICAgaW1hZ2VMYXllciA9IF90aGlzJHBhcmFtcy5pbWFnZUxheWVyLAogICAgICAgICAgICBiYWNrZ3JvdW5kID0gX3RoaXMkcGFyYW1zLmJhY2tncm91bmQ7CiAgICAgICAgdGhpcy5nZnggPSBuZXcgX2NhbnZhcy5DYW52YXNHcmFwaGljcyhjYW52YXNDb250ZXh0LCB0aGlzLmNvbW1vbk9ianMsIHRoaXMub2JqcywgdGhpcy5jYW52YXNGYWN0b3J5LCB0aGlzLndlYkdMQ29udGV4dCwgaW1hZ2VMYXllcik7CiAgICAgICAgdGhpcy5nZnguYmVnaW5EcmF3aW5nKHsKICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLAogICAgICAgICAgdmlld3BvcnQ6IHZpZXdwb3J0LAogICAgICAgICAgdHJhbnNwYXJlbmN5OiB0cmFuc3BhcmVuY3ksCiAgICAgICAgICBiYWNrZ3JvdW5kOiBiYWNrZ3JvdW5kCiAgICAgICAgfSk7CiAgICAgICAgdGhpcy5vcGVyYXRvckxpc3RJZHggPSAwOwogICAgICAgIHRoaXMuZ3JhcGhpY3NSZWFkeSA9IHRydWU7CgogICAgICAgIGlmICh0aGlzLmdyYXBoaWNzUmVhZHlDYWxsYmFjaykgewogICAgICAgICAgdGhpcy5ncmFwaGljc1JlYWR5Q2FsbGJhY2soKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiY2FuY2VsIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbCgpIHsKICAgICAgICB2YXIgZXJyb3IgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IG51bGw7CiAgICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7CiAgICAgICAgdGhpcy5jYW5jZWxsZWQgPSB0cnVlOwoKICAgICAgICBpZiAodGhpcy5nZngpIHsKICAgICAgICAgIHRoaXMuZ2Z4LmVuZERyYXdpbmcoKTsKICAgICAgICB9CgogICAgICAgIGlmICh0aGlzLl9jYW52YXMpIHsKICAgICAgICAgIGNhbnZhc0luUmVuZGVyaW5nWyJkZWxldGUiXSh0aGlzLl9jYW52YXMpOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5jYWxsYmFjayhlcnJvciB8fCBuZXcgX2Rpc3BsYXlfdXRpbHMuUmVuZGVyaW5nQ2FuY2VsbGVkRXhjZXB0aW9uKCJSZW5kZXJpbmcgY2FuY2VsbGVkLCBwYWdlICIuY29uY2F0KHRoaXMuX3BhZ2VJbmRleCArIDEpLCAiY2FudmFzIikpOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogIm9wZXJhdG9yTGlzdENoYW5nZWQiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gb3BlcmF0b3JMaXN0Q2hhbmdlZCgpIHsKICAgICAgICBpZiAoIXRoaXMuZ3JhcGhpY3NSZWFkeSkgewogICAgICAgICAgaWYgKCF0aGlzLmdyYXBoaWNzUmVhZHlDYWxsYmFjaykgewogICAgICAgICAgICB0aGlzLmdyYXBoaWNzUmVhZHlDYWxsYmFjayA9IHRoaXMuX2NvbnRpbnVlQm91bmQ7CiAgICAgICAgICB9CgogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgaWYgKHRoaXMuc3RlcHBlcikgewogICAgICAgICAgdGhpcy5zdGVwcGVyLnVwZGF0ZU9wZXJhdG9yTGlzdCh0aGlzLm9wZXJhdG9yTGlzdCk7CiAgICAgICAgfQoKICAgICAgICBpZiAodGhpcy5ydW5uaW5nKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB0aGlzLl9jb250aW51ZSgpOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogIl9jb250aW51ZSIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfY29udGludWUoKSB7CiAgICAgICAgdGhpcy5ydW5uaW5nID0gdHJ1ZTsKCiAgICAgICAgaWYgKHRoaXMuY2FuY2VsbGVkKSB7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpZiAodGhpcy50YXNrLm9uQ29udGludWUpIHsKICAgICAgICAgIHRoaXMudGFzay5vbkNvbnRpbnVlKHRoaXMuX3NjaGVkdWxlTmV4dEJvdW5kKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5fc2NoZWR1bGVOZXh0KCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogIl9zY2hlZHVsZU5leHQiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gX3NjaGVkdWxlTmV4dCgpIHsKICAgICAgICB2YXIgX3RoaXMxOCA9IHRoaXM7CgogICAgICAgIGlmICh0aGlzLl91c2VSZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHsKICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBfdGhpczE4Ll9uZXh0Qm91bmQoKVsiY2F0Y2giXShfdGhpczE4LmNhbmNlbC5iaW5kKF90aGlzMTgpKTsKICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKHRoaXMuX25leHRCb3VuZClbImNhdGNoIl0odGhpcy5jYW5jZWwuYmluZCh0aGlzKSk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogIl9uZXh0IiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgX25leHQyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JbImRlZmF1bHQiXS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclsiZGVmYXVsdCJdLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2FuY2VsbGVkKSB7CiAgICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICB0aGlzLm9wZXJhdG9yTGlzdElkeCA9IHRoaXMuZ2Z4LmV4ZWN1dGVPcGVyYXRvckxpc3QodGhpcy5vcGVyYXRvckxpc3QsIHRoaXMub3BlcmF0b3JMaXN0SWR4LCB0aGlzLl9jb250aW51ZUJvdW5kLCB0aGlzLnN0ZXBwZXIpOwoKICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub3BlcmF0b3JMaXN0SWR4ID09PSB0aGlzLm9wZXJhdG9yTGlzdC5hcmdzQXJyYXkubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5ydW5uaW5nID0gZmFsc2U7CgogICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9wZXJhdG9yTGlzdC5sYXN0Q2h1bmspIHsKICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2Z4LmVuZERyYXdpbmcoKTsKCiAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY2FudmFzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNhbnZhc0luUmVuZGVyaW5nWyJkZWxldGUiXSh0aGlzLl9jYW52YXMpOwogICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2soKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0sIF9jYWxsZWUyLCB0aGlzKTsKICAgICAgICB9KSk7CgogICAgICAgIGZ1bmN0aW9uIF9uZXh0KCkgewogICAgICAgICAgcmV0dXJuIF9uZXh0Mi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIF9uZXh0OwogICAgICB9KCkKICAgIH1dKTsKCiAgICByZXR1cm4gSW50ZXJuYWxSZW5kZXJUYXNrOwogIH0oKTsKCiAgcmV0dXJuIEludGVybmFsUmVuZGVyVGFzazsKfSgpOwoKdmFyIHZlcnNpb24gPSAnMi41LjIwNyc7CmV4cG9ydHMudmVyc2lvbiA9IHZlcnNpb247CnZhciBidWlsZCA9ICcwOTc0ZDYwNSc7CmV4cG9ydHMuYnVpbGQgPSBidWlsZDsKCi8qKiovIH0pLAovKiAxOTkgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5Gb250TG9hZGVyID0gZXhwb3J0cy5Gb250RmFjZU9iamVjdCA9IHZvaWQgMDsKCnZhciBfcmVnZW5lcmF0b3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd19wZGZqc19yZXF1aXJlX18oMikpOwoKdmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXyg1KTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICJkZWZhdWx0Ijogb2JqIH07IH0KCmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7ICJAYmFiZWwvaGVscGVycyAtIHR5cGVvZiI7IGlmICh0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiKSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfQoKZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gImZ1bmN0aW9uIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfQoKZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IG8uX19wcm90b19fID0gcDsgcmV0dXJuIG87IH07IHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7IH0KCmZ1bmN0aW9uIF9jcmVhdGVTdXBlcihEZXJpdmVkKSB7IHZhciBoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpOyByZXR1cm4gZnVuY3Rpb24gX2NyZWF0ZVN1cGVySW50ZXJuYWwoKSB7IHZhciBTdXBlciA9IF9nZXRQcm90b3R5cGVPZihEZXJpdmVkKSwgcmVzdWx0OyBpZiAoaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCkgeyB2YXIgTmV3VGFyZ2V0ID0gX2dldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yOyByZXN1bHQgPSBSZWZsZWN0LmNvbnN0cnVjdChTdXBlciwgYXJndW1lbnRzLCBOZXdUYXJnZXQpOyB9IGVsc2UgeyByZXN1bHQgPSBTdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9IHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCByZXN1bHQpOyB9OyB9CgpmdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSAib2JqZWN0IiB8fCB0eXBlb2YgY2FsbCA9PT0gImZ1bmN0aW9uIikpIHsgcmV0dXJuIGNhbGw7IH0gcmV0dXJuIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7IH0KCmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcigidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkIik7IH0gcmV0dXJuIHNlbGY7IH0KCmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gInVuZGVmaW5lZCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09ICJmdW5jdGlvbiIpIHJldHVybiB0cnVlOyB0cnkgeyBEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKFJlZmxlY3QuY29uc3RydWN0KERhdGUsIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyByZXR1cm4gdHJ1ZTsgfSBjYXRjaCAoZSkgeyByZXR1cm4gZmFsc2U7IH0gfQoKZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfQoKZnVuY3Rpb24gYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBrZXksIGFyZykgeyB0cnkgeyB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7IHZhciB2YWx1ZSA9IGluZm8udmFsdWU7IH0gY2F0Y2ggKGVycm9yKSB7IHJlamVjdChlcnJvcik7IHJldHVybjsgfSBpZiAoaW5mby5kb25lKSB7IHJlc29sdmUodmFsdWUpOyB9IGVsc2UgeyBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7IH0gfQoKZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHsgcmV0dXJuIGZ1bmN0aW9uICgpIHsgdmFyIHNlbGYgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzOyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2YXIgZ2VuID0gZm4uYXBwbHkoc2VsZiwgYXJncyk7IGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgIm5leHQiLCB2YWx1ZSk7IH0gZnVuY3Rpb24gX3Rocm93KGVycikgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJ0aHJvdyIsIGVycik7IH0gX25leHQodW5kZWZpbmVkKTsgfSk7IH07IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9Cgp2YXIgQmFzZUZvbnRMb2FkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEJhc2VGb250TG9hZGVyKF9yZWYpIHsKICAgIHZhciBkb2NJZCA9IF9yZWYuZG9jSWQsCiAgICAgICAgb25VbnN1cHBvcnRlZEZlYXR1cmUgPSBfcmVmLm9uVW5zdXBwb3J0ZWRGZWF0dXJlOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCYXNlRm9udExvYWRlcik7CgogICAgaWYgKHRoaXMuY29uc3RydWN0b3IgPT09IEJhc2VGb250TG9hZGVyKSB7CiAgICAgICgwLCBfdXRpbC51bnJlYWNoYWJsZSkoIkNhbm5vdCBpbml0aWFsaXplIEJhc2VGb250TG9hZGVyLiIpOwogICAgfQoKICAgIHRoaXMuZG9jSWQgPSBkb2NJZDsKICAgIHRoaXMuX29uVW5zdXBwb3J0ZWRGZWF0dXJlID0gb25VbnN1cHBvcnRlZEZlYXR1cmU7CiAgICB0aGlzLm5hdGl2ZUZvbnRGYWNlcyA9IFtdOwogICAgdGhpcy5zdHlsZUVsZW1lbnQgPSBudWxsOwogIH0KCiAgX2NyZWF0ZUNsYXNzKEJhc2VGb250TG9hZGVyLCBbewogICAga2V5OiAiYWRkTmF0aXZlRm9udEZhY2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFkZE5hdGl2ZUZvbnRGYWNlKG5hdGl2ZUZvbnRGYWNlKSB7CiAgICAgIHRoaXMubmF0aXZlRm9udEZhY2VzLnB1c2gobmF0aXZlRm9udEZhY2UpOwogICAgICBkb2N1bWVudC5mb250cy5hZGQobmF0aXZlRm9udEZhY2UpOwogICAgfQogIH0sIHsKICAgIGtleTogImluc2VydFJ1bGUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGluc2VydFJ1bGUocnVsZSkgewogICAgICB2YXIgc3R5bGVFbGVtZW50ID0gdGhpcy5zdHlsZUVsZW1lbnQ7CgogICAgICBpZiAoIXN0eWxlRWxlbWVudCkgewogICAgICAgIHN0eWxlRWxlbWVudCA9IHRoaXMuc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3R5bGUiKTsKICAgICAgICBzdHlsZUVsZW1lbnQuaWQgPSAiUERGSlNfRk9OVF9TVFlMRV9UQUdfIi5jb25jYXQodGhpcy5kb2NJZCk7CiAgICAgICAgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJoZWFkIilbMF0uYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KTsKICAgICAgfQoKICAgICAgdmFyIHN0eWxlU2hlZXQgPSBzdHlsZUVsZW1lbnQuc2hlZXQ7CiAgICAgIHN0eWxlU2hlZXQuaW5zZXJ0UnVsZShydWxlLCBzdHlsZVNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiY2xlYXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKCkgewogICAgICB0aGlzLm5hdGl2ZUZvbnRGYWNlcy5mb3JFYWNoKGZ1bmN0aW9uIChuYXRpdmVGb250RmFjZSkgewogICAgICAgIGRvY3VtZW50LmZvbnRzWyJkZWxldGUiXShuYXRpdmVGb250RmFjZSk7CiAgICAgIH0pOwogICAgICB0aGlzLm5hdGl2ZUZvbnRGYWNlcy5sZW5ndGggPSAwOwoKICAgICAgaWYgKHRoaXMuc3R5bGVFbGVtZW50KSB7CiAgICAgICAgdGhpcy5zdHlsZUVsZW1lbnQucmVtb3ZlKCk7CiAgICAgICAgdGhpcy5zdHlsZUVsZW1lbnQgPSBudWxsOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiYmluZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2JpbmQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclsiZGVmYXVsdCJdLm1hcmsoZnVuY3Rpb24gX2NhbGxlZShmb250KSB7CiAgICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgICAgdmFyIG5hdGl2ZUZvbnRGYWNlLCBydWxlOwogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JbImRlZmF1bHQiXS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaWYgKCEoZm9udC5hdHRhY2hlZCB8fCBmb250Lm1pc3NpbmdGaWxlKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIGZvbnQuYXR0YWNoZWQgPSB0cnVlOwoKICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0ZvbnRMb2FkaW5nQVBJU3VwcG9ydGVkKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxOTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgbmF0aXZlRm9udEZhY2UgPSBmb250LmNyZWF0ZU5hdGl2ZUZvbnRGYWNlKCk7CgogICAgICAgICAgICAgICAgaWYgKCFuYXRpdmVGb250RmFjZSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTg7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHRoaXMuYWRkTmF0aXZlRm9udEZhY2UobmF0aXZlRm9udEZhY2UpOwogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDc7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTA7CiAgICAgICAgICAgICAgICByZXR1cm4gbmF0aXZlRm9udEZhY2UubG9hZGVkOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE4OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTI7CiAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDcpOwoKICAgICAgICAgICAgICAgIHRoaXMuX29uVW5zdXBwb3J0ZWRGZWF0dXJlKHsKICAgICAgICAgICAgICAgICAgZmVhdHVyZUlkOiBfdXRpbC5VTlNVUFBPUlRFRF9GRUFUVVJFUy5lcnJvckZvbnRMb2FkTmF0aXZlCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAoMCwgX3V0aWwud2FybikoIkZhaWxlZCB0byBsb2FkIGZvbnQgJyIuY29uY2F0KG5hdGl2ZUZvbnRGYWNlLmZhbWlseSwgIic6ICciKS5jb25jYXQoX2NvbnRleHQudDAsICInLiIpKTsKICAgICAgICAgICAgICAgIGZvbnQuZGlzYWJsZUZvbnRGYWNlID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHRocm93IF9jb250ZXh0LnQwOwoKICAgICAgICAgICAgICBjYXNlIDE4OgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgMTk6CiAgICAgICAgICAgICAgICBydWxlID0gZm9udC5jcmVhdGVGb250RmFjZVJ1bGUoKTsKCiAgICAgICAgICAgICAgICBpZiAoIXJ1bGUpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI2OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aGlzLmluc2VydFJ1bGUocnVsZSk7CgogICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzU3luY0ZvbnRMb2FkaW5nU3VwcG9ydGVkKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyNDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIik7CgogICAgICAgICAgICAgIGNhc2UgMjQ6CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjY7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSBfdGhpcy5fcXVldWVMb2FkaW5nQ2FsbGJhY2socmVzb2x2ZSk7CgogICAgICAgICAgICAgICAgICBfdGhpcy5fcHJlcGFyZUZvbnRMb2FkRXZlbnQoW3J1bGVdLCBbZm9udF0sIHJlcXVlc3QpOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMjY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzLCBbWzcsIDEyXV0pOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBiaW5kKF94KSB7CiAgICAgICAgcmV0dXJuIF9iaW5kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBiaW5kOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiX3F1ZXVlTG9hZGluZ0NhbGxiYWNrIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfcXVldWVMb2FkaW5nQ2FsbGJhY2soY2FsbGJhY2spIHsKICAgICAgKDAsIF91dGlsLnVucmVhY2hhYmxlKSgiQWJzdHJhY3QgbWV0aG9kIGBfcXVldWVMb2FkaW5nQ2FsbGJhY2tgLiIpOwogICAgfQogIH0sIHsKICAgIGtleTogIl9wcmVwYXJlRm9udExvYWRFdmVudCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3ByZXBhcmVGb250TG9hZEV2ZW50KHJ1bGVzLCBmb250c1RvTG9hZCwgcmVxdWVzdCkgewogICAgICAoMCwgX3V0aWwudW5yZWFjaGFibGUpKCJBYnN0cmFjdCBtZXRob2QgYF9wcmVwYXJlRm9udExvYWRFdmVudGAuIik7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNGb250TG9hZGluZ0FQSVN1cHBvcnRlZCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIHN1cHBvcnRlZCA9IHR5cGVvZiBkb2N1bWVudCAhPT0gInVuZGVmaW5lZCIgJiYgISFkb2N1bWVudC5mb250czsKICAgICAgcmV0dXJuICgwLCBfdXRpbC5zaGFkb3cpKHRoaXMsICJpc0ZvbnRMb2FkaW5nQVBJU3VwcG9ydGVkIiwgc3VwcG9ydGVkKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc1N5bmNGb250TG9hZGluZ1N1cHBvcnRlZCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgKDAsIF91dGlsLnVucmVhY2hhYmxlKSgiQWJzdHJhY3QgbWV0aG9kIGBpc1N5bmNGb250TG9hZGluZ1N1cHBvcnRlZGAuIik7CiAgICB9CiAgfSwgewogICAga2V5OiAiX2xvYWRUZXN0Rm9udCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgKDAsIF91dGlsLnVucmVhY2hhYmxlKSgiQWJzdHJhY3QgbWV0aG9kIGBfbG9hZFRlc3RGb250YC4iKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBCYXNlRm9udExvYWRlcjsKfSgpOwoKdmFyIEZvbnRMb2FkZXI7CmV4cG9ydHMuRm9udExvYWRlciA9IEZvbnRMb2FkZXI7CnsKICBleHBvcnRzLkZvbnRMb2FkZXIgPSBGb250TG9hZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZUZvbnRMb2FkZXIpIHsKICAgIF9pbmhlcml0cyhHZW5lcmljRm9udExvYWRlciwgX0Jhc2VGb250TG9hZGVyKTsKCiAgICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKEdlbmVyaWNGb250TG9hZGVyKTsKCiAgICBmdW5jdGlvbiBHZW5lcmljRm9udExvYWRlcihkb2NJZCkgewogICAgICB2YXIgX3RoaXMyOwoKICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEdlbmVyaWNGb250TG9hZGVyKTsKCiAgICAgIF90aGlzMiA9IF9zdXBlci5jYWxsKHRoaXMsIGRvY0lkKTsKICAgICAgX3RoaXMyLmxvYWRpbmdDb250ZXh0ID0gewogICAgICAgIHJlcXVlc3RzOiBbXSwKICAgICAgICBuZXh0UmVxdWVzdElkOiAwCiAgICAgIH07CiAgICAgIF90aGlzMi5sb2FkVGVzdEZvbnRJZCA9IDA7CiAgICAgIHJldHVybiBfdGhpczI7CiAgICB9CgogICAgX2NyZWF0ZUNsYXNzKEdlbmVyaWNGb250TG9hZGVyLCBbewogICAgICBrZXk6ICJfcXVldWVMb2FkaW5nQ2FsbGJhY2siLAogICAgICB2YWx1ZTogZnVuY3Rpb24gX3F1ZXVlTG9hZGluZ0NhbGxiYWNrKGNhbGxiYWNrKSB7CiAgICAgICAgZnVuY3Rpb24gY29tcGxldGVSZXF1ZXN0KCkgewogICAgICAgICAgKDAsIF91dGlsLmFzc2VydCkoIXJlcXVlc3QuZG9uZSwgImNvbXBsZXRlUmVxdWVzdCgpIGNhbm5vdCBiZSBjYWxsZWQgdHdpY2UuIik7CiAgICAgICAgICByZXF1ZXN0LmRvbmUgPSB0cnVlOwoKICAgICAgICAgIHdoaWxlIChjb250ZXh0LnJlcXVlc3RzLmxlbmd0aCA+IDAgJiYgY29udGV4dC5yZXF1ZXN0c1swXS5kb25lKSB7CiAgICAgICAgICAgIHZhciBvdGhlclJlcXVlc3QgPSBjb250ZXh0LnJlcXVlc3RzLnNoaWZ0KCk7CiAgICAgICAgICAgIHNldFRpbWVvdXQob3RoZXJSZXF1ZXN0LmNhbGxiYWNrLCAwKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5sb2FkaW5nQ29udGV4dDsKICAgICAgICB2YXIgcmVxdWVzdCA9IHsKICAgICAgICAgIGlkOiAicGRmanMtZm9udC1sb2FkaW5nLSIuY29uY2F0KGNvbnRleHQubmV4dFJlcXVlc3RJZCsrKSwKICAgICAgICAgIGRvbmU6IGZhbHNlLAogICAgICAgICAgY29tcGxldGU6IGNvbXBsZXRlUmVxdWVzdCwKICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjawogICAgICAgIH07CiAgICAgICAgY29udGV4dC5yZXF1ZXN0cy5wdXNoKHJlcXVlc3QpOwogICAgICAgIHJldHVybiByZXF1ZXN0OwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogIl9wcmVwYXJlRm9udExvYWRFdmVudCIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBfcHJlcGFyZUZvbnRMb2FkRXZlbnQocnVsZXMsIGZvbnRzLCByZXF1ZXN0KSB7CiAgICAgICAgZnVuY3Rpb24gaW50MzIoZGF0YSwgb2Zmc2V0KSB7CiAgICAgICAgICByZXR1cm4gZGF0YS5jaGFyQ29kZUF0KG9mZnNldCkgPDwgMjQgfCBkYXRhLmNoYXJDb2RlQXQob2Zmc2V0ICsgMSkgPDwgMTYgfCBkYXRhLmNoYXJDb2RlQXQob2Zmc2V0ICsgMikgPDwgOCB8IGRhdGEuY2hhckNvZGVBdChvZmZzZXQgKyAzKSAmIDB4ZmY7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBzcGxpY2VTdHJpbmcocywgb2Zmc2V0LCByZW1vdmUsIGluc2VydCkgewogICAgICAgICAgdmFyIGNodW5rMSA9IHMuc3Vic3RyaW5nKDAsIG9mZnNldCk7CiAgICAgICAgICB2YXIgY2h1bmsyID0gcy5zdWJzdHJpbmcob2Zmc2V0ICsgcmVtb3ZlKTsKICAgICAgICAgIHJldHVybiBjaHVuazEgKyBpbnNlcnQgKyBjaHVuazI7CiAgICAgICAgfQoKICAgICAgICB2YXIgaSwgaWk7CiAgICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImNhbnZhcyIpOwogICAgICAgIGNhbnZhcy53aWR0aCA9IDE7CiAgICAgICAgY2FudmFzLmhlaWdodCA9IDE7CiAgICAgICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCIyZCIpOwogICAgICAgIHZhciBjYWxsZWQgPSAwOwoKICAgICAgICBmdW5jdGlvbiBpc0ZvbnRSZWFkeShuYW1lLCBjYWxsYmFjaykgewogICAgICAgICAgY2FsbGVkKys7CgogICAgICAgICAgaWYgKGNhbGxlZCA+IDMwKSB7CiAgICAgICAgICAgICgwLCBfdXRpbC53YXJuKSgiTG9hZCB0ZXN0IGZvbnQgbmV2ZXIgbG9hZGVkLiIpOwogICAgICAgICAgICBjYWxsYmFjaygpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgICB9CgogICAgICAgICAgY3R4LmZvbnQgPSAiMzBweCAiICsgbmFtZTsKICAgICAgICAgIGN0eC5maWxsVGV4dCgiLiIsIDAsIDIwKTsKICAgICAgICAgIHZhciBpbWFnZURhdGEgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIDEsIDEpOwoKICAgICAgICAgIGlmIChpbWFnZURhdGEuZGF0YVszXSA+IDApIHsKICAgICAgICAgICAgY2FsbGJhY2soKTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQoKICAgICAgICAgIHNldFRpbWVvdXQoaXNGb250UmVhZHkuYmluZChudWxsLCBuYW1lLCBjYWxsYmFjaykpOwogICAgICAgIH0KCiAgICAgICAgdmFyIGxvYWRUZXN0Rm9udElkID0gImx0Ii5jb25jYXQoRGF0ZS5ub3coKSkuY29uY2F0KHRoaXMubG9hZFRlc3RGb250SWQrKyk7CiAgICAgICAgdmFyIGRhdGEgPSB0aGlzLl9sb2FkVGVzdEZvbnQ7CiAgICAgICAgdmFyIENPTU1FTlRfT0ZGU0VUID0gOTc2OwogICAgICAgIGRhdGEgPSBzcGxpY2VTdHJpbmcoZGF0YSwgQ09NTUVOVF9PRkZTRVQsIGxvYWRUZXN0Rm9udElkLmxlbmd0aCwgbG9hZFRlc3RGb250SWQpOwogICAgICAgIHZhciBDRkZfQ0hFQ0tTVU1fT0ZGU0VUID0gMTY7CiAgICAgICAgdmFyIFhYWFhfVkFMVUUgPSAweDU4NTg1ODU4OwogICAgICAgIHZhciBjaGVja3N1bSA9IGludDMyKGRhdGEsIENGRl9DSEVDS1NVTV9PRkZTRVQpOwoKICAgICAgICBmb3IgKGkgPSAwLCBpaSA9IGxvYWRUZXN0Rm9udElkLmxlbmd0aCAtIDM7IGkgPCBpaTsgaSArPSA0KSB7CiAgICAgICAgICBjaGVja3N1bSA9IGNoZWNrc3VtIC0gWFhYWF9WQUxVRSArIGludDMyKGxvYWRUZXN0Rm9udElkLCBpKSB8IDA7CiAgICAgICAgfQoKICAgICAgICBpZiAoaSA8IGxvYWRUZXN0Rm9udElkLmxlbmd0aCkgewogICAgICAgICAgY2hlY2tzdW0gPSBjaGVja3N1bSAtIFhYWFhfVkFMVUUgKyBpbnQzMihsb2FkVGVzdEZvbnRJZCArICJYWFgiLCBpKSB8IDA7CiAgICAgICAgfQoKICAgICAgICBkYXRhID0gc3BsaWNlU3RyaW5nKGRhdGEsIENGRl9DSEVDS1NVTV9PRkZTRVQsIDQsICgwLCBfdXRpbC5zdHJpbmczMikoY2hlY2tzdW0pKTsKICAgICAgICB2YXIgdXJsID0gInVybChkYXRhOmZvbnQvb3BlbnR5cGU7YmFzZTY0LCIuY29uY2F0KGJ0b2EoZGF0YSksICIpOyIpOwogICAgICAgIHZhciBydWxlID0gIkBmb250LWZhY2Uge2ZvbnQtZmFtaWx5OlwiIi5jb25jYXQobG9hZFRlc3RGb250SWQsICJcIjtzcmM6IikuY29uY2F0KHVybCwgIn0iKTsKICAgICAgICB0aGlzLmluc2VydFJ1bGUocnVsZSk7CiAgICAgICAgdmFyIG5hbWVzID0gW107CgogICAgICAgIGZvciAoaSA9IDAsIGlpID0gZm9udHMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICAgICAgbmFtZXMucHVzaChmb250c1tpXS5sb2FkZWROYW1lKTsKICAgICAgICB9CgogICAgICAgIG5hbWVzLnB1c2gobG9hZFRlc3RGb250SWQpOwogICAgICAgIHZhciBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgICAgICBkaXYuc3R5bGUudmlzaWJpbGl0eSA9ICJoaWRkZW4iOwogICAgICAgIGRpdi5zdHlsZS53aWR0aCA9IGRpdi5zdHlsZS5oZWlnaHQgPSAiMTBweCI7CiAgICAgICAgZGl2LnN0eWxlLnBvc2l0aW9uID0gImFic29sdXRlIjsKICAgICAgICBkaXYuc3R5bGUudG9wID0gZGl2LnN0eWxlLmxlZnQgPSAiMHB4IjsKCiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBuYW1lcy5sZW5ndGg7IGkgPCBpaTsgKytpKSB7CiAgICAgICAgICB2YXIgc3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNwYW4iKTsKICAgICAgICAgIHNwYW4udGV4dENvbnRlbnQgPSAiSGkiOwogICAgICAgICAgc3Bhbi5zdHlsZS5mb250RmFtaWx5ID0gbmFtZXNbaV07CiAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoc3Bhbik7CiAgICAgICAgfQoKICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRpdik7CiAgICAgICAgaXNGb250UmVhZHkobG9hZFRlc3RGb250SWQsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZGl2KTsKICAgICAgICAgIHJlcXVlc3QuY29tcGxldGUoKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJpc1N5bmNGb250TG9hZGluZ1N1cHBvcnRlZCIsCiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHZhciBzdXBwb3J0ZWQgPSBmYWxzZTsKCiAgICAgICAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICBzdXBwb3J0ZWQgPSB0cnVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgbSA9IC9Nb3ppbGxhXC81LjAuKj9ydjooXGQrKS4qPyBHZWNrby8uZXhlYyhuYXZpZ2F0b3IudXNlckFnZW50KTsKCiAgICAgICAgICBpZiAobSAmJiBtWzFdID49IDE0KSB7CiAgICAgICAgICAgIHN1cHBvcnRlZCA9IHRydWU7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gKDAsIF91dGlsLnNoYWRvdykodGhpcywgImlzU3luY0ZvbnRMb2FkaW5nU3VwcG9ydGVkIiwgc3VwcG9ydGVkKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJfbG9hZFRlc3RGb250IiwKICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgdmFyIGdldExvYWRUZXN0Rm9udCA9IGZ1bmN0aW9uIGdldExvYWRUZXN0Rm9udCgpIHsKICAgICAgICAgIHJldHVybiBhdG9iKCJUMVJVVHdBTEFJQUFBd0F3UTBaR0lESHRaZzRBQUFPWUFBQUFnVVpHVkUxbGt6WndBQUFFSEFBQUFCeEhSRVZHQUJRQSIgKyAiRlFBQUJEZ0FBQUFlVDFNdk1sWU5Zd2tBQUFFZ0FBQUFZR050WVhBQkRRTFVBQUFDTkFBQUFVSm9aV0ZrL3hWRkRRQUEiICsgIkFMd0FBQUEyYUdobFlRZGtBK29BQUFEMEFBQUFKR2h0ZEhnRDZBQUFBQUFFV0FBQUFBWnRZWGh3QUFKUUFBQUFBUmdBIiArICJBQUFHYm1GdFpWam1kSDRBQUFHQUFBQUFzWEJ2YzNUL2hnQXpBQUFEZUFBQUFDQUFBUUFBQUFFQUFMWlJGc1JmRHp6MSIgKyAiQUFzRDZBQUFBQURPQk9UTEFBQUFBTTRLSER3QUFBQUFBK2dESVFBQUFBZ0FBZ0FBQUFBQUFBQUJBQUFESVFBQUFGb0QiICsgIjZBQUFBQUFENkFBQkFBQUFBQUFBQUFBQUFBQUFBQUFBQVFBQVVBQUFBZ0FBQUFRRDZBSDBBQVVBQUFLS0Fyd0FBQUNNIiArICJBb29DdkFBQUFlQUFNUUVDQUFBQ0FBWUpBQUFBQUFBQUFBQUFBUUFBQUFBQUFBQUFBQUFBQUZCbVJXUUF3QUF1QUM0RCIgKyAiSVA4NEFGb0RJUUFBQUFBQUFRQUFBQUFBQUFBQUFDQUFJQUFCQUFBQURnQ3VBQUVBQUFBQUFBQUFBUUFBQUFFQUFBQUEiICsgIkFBRUFBUUFBQUFFQUFBQUFBQUlBQVFBQUFBRUFBQUFBQUFNQUFRQUFBQUVBQUFBQUFBUUFBUUFBQUFFQUFBQUFBQVVBIiArICJBUUFBQUFFQUFBQUFBQVlBQVFBQUFBTUFBUVFKQUFBQUFnQUJBQU1BQVFRSkFBRUFBZ0FCQUFNQUFRUUpBQUlBQWdBQiIgKyAiQUFNQUFRUUpBQU1BQWdBQkFBTUFBUVFKQUFRQUFnQUJBQU1BQVFRSkFBVUFBZ0FCQUFNQUFRUUpBQVlBQWdBQldBQlkiICsgIkFBQUFBQUFBQXdBQUFBTUFBQUFjQUFFQUFBQUFBRHdBQXdBQkFBQUFIQUFFQUNBQUFBQUVBQVFBQVFBQUFDNy8vd0FBIiArICJBQzcvLy8vVEFBRUFBQUFBQUFBQkJnQUFBUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQSIgKyAiQUFBQUFBQUFBQUFBQUFBQUFBRUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUEiICsgIkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBIiArICJBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQSIgKyAiQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUEiICsgIkFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQU1BQUFBQUFBRC9nd0F5QUFBQUFRQUFBQUFBQUFBQUFBQUFBQUFBIiArICJBQUFCQUFRRUFBRUJBUUpZQUFFQkFTSDREd0Q0R3dIRUF2Z2NBL2dYQkl3TUFZdUwrbno1dFFYa0Q1ajNDQkxuRVFBQyIgKyAiQVFFQklWaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZV0ZoWVdGaFlXRmhZQUFBQkFRQUFEd0FDQVFFRUUvdDMiICsgIkRvdjZmQUg2ZkFUK2ZQcDgrbndIRG9zTUN2bTFDdm0xREF6NmZCUUFBQUFBQUFBQkFBQUFBTW1KYnpFQUFBQUF6Z1RqIiArICJGUUFBQUFET0JPUXBBQUVBQUFBQUFBQUFEQUFVQUFRQUFBQUJBQUFBQWdBQkFBQUFBQUFBQUFBRDZBQUFBQUFBQUE9PSIpOwogICAgICAgIH07CgogICAgICAgIHJldHVybiAoMCwgX3V0aWwuc2hhZG93KSh0aGlzLCAiX2xvYWRUZXN0Rm9udCIsIGdldExvYWRUZXN0Rm9udCgpKTsKICAgICAgfQogICAgfV0pOwoKICAgIHJldHVybiBHZW5lcmljRm9udExvYWRlcjsKICB9KEJhc2VGb250TG9hZGVyKTsKfQoKdmFyIEZvbnRGYWNlT2JqZWN0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBGb250RmFjZU9iamVjdCh0cmFuc2xhdGVkRGF0YSwgX3JlZjIpIHsKICAgIHZhciBfcmVmMiRpc0V2YWxTdXBwb3J0ZWQgPSBfcmVmMi5pc0V2YWxTdXBwb3J0ZWQsCiAgICAgICAgaXNFdmFsU3VwcG9ydGVkID0gX3JlZjIkaXNFdmFsU3VwcG9ydGVkID09PSB2b2lkIDAgPyB0cnVlIDogX3JlZjIkaXNFdmFsU3VwcG9ydGVkLAogICAgICAgIF9yZWYyJGRpc2FibGVGb250RmFjZSA9IF9yZWYyLmRpc2FibGVGb250RmFjZSwKICAgICAgICBkaXNhYmxlRm9udEZhY2UgPSBfcmVmMiRkaXNhYmxlRm9udEZhY2UgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkZGlzYWJsZUZvbnRGYWNlLAogICAgICAgIF9yZWYyJGlnbm9yZUVycm9ycyA9IF9yZWYyLmlnbm9yZUVycm9ycywKICAgICAgICBpZ25vcmVFcnJvcnMgPSBfcmVmMiRpZ25vcmVFcnJvcnMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkaWdub3JlRXJyb3JzLAogICAgICAgIF9yZWYyJG9uVW5zdXBwb3J0ZWRGZSA9IF9yZWYyLm9uVW5zdXBwb3J0ZWRGZWF0dXJlLAogICAgICAgIG9uVW5zdXBwb3J0ZWRGZWF0dXJlID0gX3JlZjIkb25VbnN1cHBvcnRlZEZlID09PSB2b2lkIDAgPyBudWxsIDogX3JlZjIkb25VbnN1cHBvcnRlZEZlLAogICAgICAgIF9yZWYyJGZvbnRSZWdpc3RyeSA9IF9yZWYyLmZvbnRSZWdpc3RyeSwKICAgICAgICBmb250UmVnaXN0cnkgPSBfcmVmMiRmb250UmVnaXN0cnkgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmMiRmb250UmVnaXN0cnk7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEZvbnRGYWNlT2JqZWN0KTsKCiAgICB0aGlzLmNvbXBpbGVkR2x5cGhzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKCiAgICBmb3IgKHZhciBpIGluIHRyYW5zbGF0ZWREYXRhKSB7CiAgICAgIHRoaXNbaV0gPSB0cmFuc2xhdGVkRGF0YVtpXTsKICAgIH0KCiAgICB0aGlzLmlzRXZhbFN1cHBvcnRlZCA9IGlzRXZhbFN1cHBvcnRlZCAhPT0gZmFsc2U7CiAgICB0aGlzLmRpc2FibGVGb250RmFjZSA9IGRpc2FibGVGb250RmFjZSA9PT0gdHJ1ZTsKICAgIHRoaXMuaWdub3JlRXJyb3JzID0gaWdub3JlRXJyb3JzID09PSB0cnVlOwogICAgdGhpcy5fb25VbnN1cHBvcnRlZEZlYXR1cmUgPSBvblVuc3VwcG9ydGVkRmVhdHVyZTsKICAgIHRoaXMuZm9udFJlZ2lzdHJ5ID0gZm9udFJlZ2lzdHJ5OwogIH0KCiAgX2NyZWF0ZUNsYXNzKEZvbnRGYWNlT2JqZWN0LCBbewogICAga2V5OiAiY3JlYXRlTmF0aXZlRm9udEZhY2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZU5hdGl2ZUZvbnRGYWNlKCkgewogICAgICBpZiAoIXRoaXMuZGF0YSB8fCB0aGlzLmRpc2FibGVGb250RmFjZSkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CgogICAgICB2YXIgbmF0aXZlRm9udEZhY2UgPSBuZXcgRm9udEZhY2UodGhpcy5sb2FkZWROYW1lLCB0aGlzLmRhdGEsIHt9KTsKCiAgICAgIGlmICh0aGlzLmZvbnRSZWdpc3RyeSkgewogICAgICAgIHRoaXMuZm9udFJlZ2lzdHJ5LnJlZ2lzdGVyRm9udCh0aGlzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIG5hdGl2ZUZvbnRGYWNlOwogICAgfQogIH0sIHsKICAgIGtleTogImNyZWF0ZUZvbnRGYWNlUnVsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlRm9udEZhY2VSdWxlKCkgewogICAgICBpZiAoIXRoaXMuZGF0YSB8fCB0aGlzLmRpc2FibGVGb250RmFjZSkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CgogICAgICB2YXIgZGF0YSA9ICgwLCBfdXRpbC5ieXRlc1RvU3RyaW5nKShuZXcgVWludDhBcnJheSh0aGlzLmRhdGEpKTsKICAgICAgdmFyIHVybCA9ICJ1cmwoZGF0YToiLmNvbmNhdCh0aGlzLm1pbWV0eXBlLCAiO2Jhc2U2NCwiKS5jb25jYXQoYnRvYShkYXRhKSwgIik7Iik7CiAgICAgIHZhciBydWxlID0gIkBmb250LWZhY2Uge2ZvbnQtZmFtaWx5OlwiIi5jb25jYXQodGhpcy5sb2FkZWROYW1lLCAiXCI7c3JjOiIpLmNvbmNhdCh1cmwsICJ9Iik7CgogICAgICBpZiAodGhpcy5mb250UmVnaXN0cnkpIHsKICAgICAgICB0aGlzLmZvbnRSZWdpc3RyeS5yZWdpc3RlckZvbnQodGhpcywgdXJsKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHJ1bGU7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0UGF0aEdlbmVyYXRvciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UGF0aEdlbmVyYXRvcihvYmpzLCBjaGFyYWN0ZXIpIHsKICAgICAgaWYgKHRoaXMuY29tcGlsZWRHbHlwaHNbY2hhcmFjdGVyXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGlsZWRHbHlwaHNbY2hhcmFjdGVyXTsKICAgICAgfQoKICAgICAgdmFyIGNtZHMsIGN1cnJlbnQ7CgogICAgICB0cnkgewogICAgICAgIGNtZHMgPSBvYmpzLmdldCh0aGlzLmxvYWRlZE5hbWUgKyAiX3BhdGhfIiArIGNoYXJhY3Rlcik7CiAgICAgIH0gY2F0Y2ggKGV4KSB7CiAgICAgICAgaWYgKCF0aGlzLmlnbm9yZUVycm9ycykgewogICAgICAgICAgdGhyb3cgZXg7CiAgICAgICAgfQoKICAgICAgICBpZiAodGhpcy5fb25VbnN1cHBvcnRlZEZlYXR1cmUpIHsKICAgICAgICAgIHRoaXMuX29uVW5zdXBwb3J0ZWRGZWF0dXJlKHsKICAgICAgICAgICAgZmVhdHVyZUlkOiBfdXRpbC5VTlNVUFBPUlRFRF9GRUFUVVJFUy5lcnJvckZvbnRHZXRQYXRoCiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgICgwLCBfdXRpbC53YXJuKSgiZ2V0UGF0aEdlbmVyYXRvciAtIGlnbm9yaW5nIGNoYXJhY3RlcjogXCIiLmNvbmNhdChleCwgIlwiLiIpKTsKICAgICAgICByZXR1cm4gdGhpcy5jb21waWxlZEdseXBoc1tjaGFyYWN0ZXJdID0gZnVuY3Rpb24gKGMsIHNpemUpIHt9OwogICAgICB9CgogICAgICBpZiAodGhpcy5pc0V2YWxTdXBwb3J0ZWQgJiYgX3V0aWwuSXNFdmFsU3VwcG9ydGVkQ2FjaGVkLnZhbHVlKSB7CiAgICAgICAgdmFyIGFyZ3MsCiAgICAgICAgICAgIGpzID0gIiI7CgogICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGNtZHMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICAgICAgY3VycmVudCA9IGNtZHNbaV07CgogICAgICAgICAgaWYgKGN1cnJlbnQuYXJncyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGFyZ3MgPSBjdXJyZW50LmFyZ3Muam9pbigiLCIpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYXJncyA9ICIiOwogICAgICAgICAgfQoKICAgICAgICAgIGpzICs9ICJjLiIgKyBjdXJyZW50LmNtZCArICIoIiArIGFyZ3MgKyAiKTtcbiI7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGhpcy5jb21waWxlZEdseXBoc1tjaGFyYWN0ZXJdID0gbmV3IEZ1bmN0aW9uKCJjIiwgInNpemUiLCBqcyk7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLmNvbXBpbGVkR2x5cGhzW2NoYXJhY3Rlcl0gPSBmdW5jdGlvbiAoYywgc2l6ZSkgewogICAgICAgIGZvciAodmFyIF9pID0gMCwgX2lpID0gY21kcy5sZW5ndGg7IF9pIDwgX2lpOyBfaSsrKSB7CiAgICAgICAgICBjdXJyZW50ID0gY21kc1tfaV07CgogICAgICAgICAgaWYgKGN1cnJlbnQuY21kID09PSAic2NhbGUiKSB7CiAgICAgICAgICAgIGN1cnJlbnQuYXJncyA9IFtzaXplLCAtc2l6ZV07CiAgICAgICAgICB9CgogICAgICAgICAgY1tjdXJyZW50LmNtZF0uYXBwbHkoYywgY3VycmVudC5hcmdzKTsKICAgICAgICB9CiAgICAgIH07CiAgICB9CiAgfV0pOwoKICByZXR1cm4gRm9udEZhY2VPYmplY3Q7Cn0oKTsKCmV4cG9ydHMuRm9udEZhY2VPYmplY3QgPSBGb250RmFjZU9iamVjdDsKCi8qKiovIH0pLAovKiAyMDAgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5hcGlDb21wYXRpYmlsaXR5UGFyYW1zID0gdm9pZCAwOwoKdmFyIF9pc19ub2RlID0gX193X3BkZmpzX3JlcXVpcmVfXyg3KTsKCnZhciBjb21wYXRpYmlsaXR5UGFyYW1zID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKewogIChmdW5jdGlvbiBjaGVja0ZvbnRGYWNlKCkgewogICAgaWYgKF9pc19ub2RlLmlzTm9kZUpTKSB7CiAgICAgIGNvbXBhdGliaWxpdHlQYXJhbXMuZGlzYWJsZUZvbnRGYWNlID0gdHJ1ZTsKICAgIH0KICB9KSgpOwp9CnZhciBhcGlDb21wYXRpYmlsaXR5UGFyYW1zID0gT2JqZWN0LmZyZWV6ZShjb21wYXRpYmlsaXR5UGFyYW1zKTsKZXhwb3J0cy5hcGlDb21wYXRpYmlsaXR5UGFyYW1zID0gYXBpQ29tcGF0aWJpbGl0eVBhcmFtczsKCi8qKiovIH0pLAovKiAyMDEgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5DYW52YXNHcmFwaGljcyA9IHZvaWQgMDsKCnZhciBfdXRpbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNSk7Cgp2YXIgX3BhdHRlcm5faGVscGVyID0gX193X3BkZmpzX3JlcXVpcmVfXygyMDIpOwoKZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0OyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gInVuZGVmaW5lZCIgfHwgb1tTeW1ib2wuaXRlcmF0b3JdID09IG51bGwpIHsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gIm51bWJlciIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UpIHsgdGhyb3cgX2U7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IG9bU3ltYm9sLml0ZXJhdG9yXSgpOyB9LCBuOiBmdW5jdGlvbiBuKCkgeyB2YXIgc3RlcCA9IGl0Lm5leHQoKTsgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTsgcmV0dXJuIHN0ZXA7IH0sIGU6IGZ1bmN0aW9uIGUoX2UyKSB7IGRpZEVyciA9IHRydWU7IGVyciA9IF9lMjsgfSwgZjogZnVuY3Rpb24gZigpIHsgdHJ5IHsgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0WyJyZXR1cm4iXSAhPSBudWxsKSBpdFsicmV0dXJuIl0oKTsgfSBmaW5hbGx5IHsgaWYgKGRpZEVycikgdGhyb3cgZXJyOyB9IH0gfTsgfQoKZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSAic3RyaW5nIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09ICJPYmplY3QiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSAiTWFwIiB8fCBuID09PSAiU2V0IikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSAiQXJndW1lbnRzIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH0KCmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfQoKdmFyIE1JTl9GT05UX1NJWkUgPSAxNjsKdmFyIE1BWF9GT05UX1NJWkUgPSAxMDA7CnZhciBNQVhfR1JPVVBfU0laRSA9IDQwOTY7CnZhciBNSU5fV0lEVEhfRkFDVE9SID0gMC42NTsKdmFyIENPTVBJTEVfVFlQRTNfR0xZUEhTID0gdHJ1ZTsKdmFyIE1BWF9TSVpFX1RPX0NPTVBJTEUgPSAxMDAwOwp2YXIgRlVMTF9DSFVOS19IRUlHSFQgPSAxNjsKCmZ1bmN0aW9uIGFkZENvbnRleHRDdXJyZW50VHJhbnNmb3JtKGN0eCkgewogIGlmICghY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm0pIHsKICAgIGN0eC5fb3JpZ2luYWxTYXZlID0gY3R4LnNhdmU7CiAgICBjdHguX29yaWdpbmFsUmVzdG9yZSA9IGN0eC5yZXN0b3JlOwogICAgY3R4Ll9vcmlnaW5hbFJvdGF0ZSA9IGN0eC5yb3RhdGU7CiAgICBjdHguX29yaWdpbmFsU2NhbGUgPSBjdHguc2NhbGU7CiAgICBjdHguX29yaWdpbmFsVHJhbnNsYXRlID0gY3R4LnRyYW5zbGF0ZTsKICAgIGN0eC5fb3JpZ2luYWxUcmFuc2Zvcm0gPSBjdHgudHJhbnNmb3JtOwogICAgY3R4Ll9vcmlnaW5hbFNldFRyYW5zZm9ybSA9IGN0eC5zZXRUcmFuc2Zvcm07CiAgICBjdHguX3RyYW5zZm9ybU1hdHJpeCA9IGN0eC5fdHJhbnNmb3JtTWF0cml4IHx8IFsxLCAwLCAwLCAxLCAwLCAwXTsKICAgIGN0eC5fdHJhbnNmb3JtU3RhY2sgPSBbXTsKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjdHgsICJtb3pDdXJyZW50VHJhbnNmb3JtIiwgewogICAgICBnZXQ6IGZ1bmN0aW9uIGdldEN1cnJlbnRUcmFuc2Zvcm0oKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zZm9ybU1hdHJpeDsKICAgICAgfQogICAgfSk7CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY3R4LCAibW96Q3VycmVudFRyYW5zZm9ybUludmVyc2UiLCB7CiAgICAgIGdldDogZnVuY3Rpb24gZ2V0Q3VycmVudFRyYW5zZm9ybUludmVyc2UoKSB7CiAgICAgICAgdmFyIG0gPSB0aGlzLl90cmFuc2Zvcm1NYXRyaXg7CiAgICAgICAgdmFyIGEgPSBtWzBdLAogICAgICAgICAgICBiID0gbVsxXSwKICAgICAgICAgICAgYyA9IG1bMl0sCiAgICAgICAgICAgIGQgPSBtWzNdLAogICAgICAgICAgICBlID0gbVs0XSwKICAgICAgICAgICAgZiA9IG1bNV07CiAgICAgICAgdmFyIGFkX2JjID0gYSAqIGQgLSBiICogYzsKICAgICAgICB2YXIgYmNfYWQgPSBiICogYyAtIGEgKiBkOwogICAgICAgIHJldHVybiBbZCAvIGFkX2JjLCBiIC8gYmNfYWQsIGMgLyBiY19hZCwgYSAvIGFkX2JjLCAoZCAqIGUgLSBjICogZikgLyBiY19hZCwgKGIgKiBlIC0gYSAqIGYpIC8gYWRfYmNdOwogICAgICB9CiAgICB9KTsKCiAgICBjdHguc2F2ZSA9IGZ1bmN0aW9uIGN0eFNhdmUoKSB7CiAgICAgIHZhciBvbGQgPSB0aGlzLl90cmFuc2Zvcm1NYXRyaXg7CgogICAgICB0aGlzLl90cmFuc2Zvcm1TdGFjay5wdXNoKG9sZCk7CgogICAgICB0aGlzLl90cmFuc2Zvcm1NYXRyaXggPSBvbGQuc2xpY2UoMCwgNik7CgogICAgICB0aGlzLl9vcmlnaW5hbFNhdmUoKTsKICAgIH07CgogICAgY3R4LnJlc3RvcmUgPSBmdW5jdGlvbiBjdHhSZXN0b3JlKCkgewogICAgICB2YXIgcHJldiA9IHRoaXMuX3RyYW5zZm9ybVN0YWNrLnBvcCgpOwoKICAgICAgaWYgKHByZXYpIHsKICAgICAgICB0aGlzLl90cmFuc2Zvcm1NYXRyaXggPSBwcmV2OwoKICAgICAgICB0aGlzLl9vcmlnaW5hbFJlc3RvcmUoKTsKICAgICAgfQogICAgfTsKCiAgICBjdHgudHJhbnNsYXRlID0gZnVuY3Rpb24gY3R4VHJhbnNsYXRlKHgsIHkpIHsKICAgICAgdmFyIG0gPSB0aGlzLl90cmFuc2Zvcm1NYXRyaXg7CiAgICAgIG1bNF0gPSBtWzBdICogeCArIG1bMl0gKiB5ICsgbVs0XTsKICAgICAgbVs1XSA9IG1bMV0gKiB4ICsgbVszXSAqIHkgKyBtWzVdOwoKICAgICAgdGhpcy5fb3JpZ2luYWxUcmFuc2xhdGUoeCwgeSk7CiAgICB9OwoKICAgIGN0eC5zY2FsZSA9IGZ1bmN0aW9uIGN0eFNjYWxlKHgsIHkpIHsKICAgICAgdmFyIG0gPSB0aGlzLl90cmFuc2Zvcm1NYXRyaXg7CiAgICAgIG1bMF0gPSBtWzBdICogeDsKICAgICAgbVsxXSA9IG1bMV0gKiB4OwogICAgICBtWzJdID0gbVsyXSAqIHk7CiAgICAgIG1bM10gPSBtWzNdICogeTsKCiAgICAgIHRoaXMuX29yaWdpbmFsU2NhbGUoeCwgeSk7CiAgICB9OwoKICAgIGN0eC50cmFuc2Zvcm0gPSBmdW5jdGlvbiBjdHhUcmFuc2Zvcm0oYSwgYiwgYywgZCwgZSwgZikgewogICAgICB2YXIgbSA9IHRoaXMuX3RyYW5zZm9ybU1hdHJpeDsKICAgICAgdGhpcy5fdHJhbnNmb3JtTWF0cml4ID0gW21bMF0gKiBhICsgbVsyXSAqIGIsIG1bMV0gKiBhICsgbVszXSAqIGIsIG1bMF0gKiBjICsgbVsyXSAqIGQsIG1bMV0gKiBjICsgbVszXSAqIGQsIG1bMF0gKiBlICsgbVsyXSAqIGYgKyBtWzRdLCBtWzFdICogZSArIG1bM10gKiBmICsgbVs1XV07CgogICAgICBjdHguX29yaWdpbmFsVHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYpOwogICAgfTsKCiAgICBjdHguc2V0VHJhbnNmb3JtID0gZnVuY3Rpb24gY3R4U2V0VHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYpIHsKICAgICAgdGhpcy5fdHJhbnNmb3JtTWF0cml4ID0gW2EsIGIsIGMsIGQsIGUsIGZdOwoKICAgICAgY3R4Ll9vcmlnaW5hbFNldFRyYW5zZm9ybShhLCBiLCBjLCBkLCBlLCBmKTsKICAgIH07CgogICAgY3R4LnJvdGF0ZSA9IGZ1bmN0aW9uIGN0eFJvdGF0ZShhbmdsZSkgewogICAgICB2YXIgY29zVmFsdWUgPSBNYXRoLmNvcyhhbmdsZSk7CiAgICAgIHZhciBzaW5WYWx1ZSA9IE1hdGguc2luKGFuZ2xlKTsKICAgICAgdmFyIG0gPSB0aGlzLl90cmFuc2Zvcm1NYXRyaXg7CiAgICAgIHRoaXMuX3RyYW5zZm9ybU1hdHJpeCA9IFttWzBdICogY29zVmFsdWUgKyBtWzJdICogc2luVmFsdWUsIG1bMV0gKiBjb3NWYWx1ZSArIG1bM10gKiBzaW5WYWx1ZSwgbVswXSAqIC1zaW5WYWx1ZSArIG1bMl0gKiBjb3NWYWx1ZSwgbVsxXSAqIC1zaW5WYWx1ZSArIG1bM10gKiBjb3NWYWx1ZSwgbVs0XSwgbVs1XV07CgogICAgICB0aGlzLl9vcmlnaW5hbFJvdGF0ZShhbmdsZSk7CiAgICB9OwogIH0KfQoKdmFyIENhY2hlZENhbnZhc2VzID0gZnVuY3Rpb24gQ2FjaGVkQ2FudmFzZXNDbG9zdXJlKCkgewogIGZ1bmN0aW9uIENhY2hlZENhbnZhc2VzKGNhbnZhc0ZhY3RvcnkpIHsKICAgIHRoaXMuY2FudmFzRmFjdG9yeSA9IGNhbnZhc0ZhY3Rvcnk7CiAgICB0aGlzLmNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICB9CgogIENhY2hlZENhbnZhc2VzLnByb3RvdHlwZSA9IHsKICAgIGdldENhbnZhczogZnVuY3Rpb24gQ2FjaGVkQ2FudmFzZXNfZ2V0Q2FudmFzKGlkLCB3aWR0aCwgaGVpZ2h0LCB0cmFja1RyYW5zZm9ybSkgewogICAgICB2YXIgY2FudmFzRW50cnk7CgogICAgICBpZiAodGhpcy5jYWNoZVtpZF0gIT09IHVuZGVmaW5lZCkgewogICAgICAgIGNhbnZhc0VudHJ5ID0gdGhpcy5jYWNoZVtpZF07CiAgICAgICAgdGhpcy5jYW52YXNGYWN0b3J5LnJlc2V0KGNhbnZhc0VudHJ5LCB3aWR0aCwgaGVpZ2h0KTsKICAgICAgICBjYW52YXNFbnRyeS5jb250ZXh0LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCAwLCAwKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjYW52YXNFbnRyeSA9IHRoaXMuY2FudmFzRmFjdG9yeS5jcmVhdGUod2lkdGgsIGhlaWdodCk7CiAgICAgICAgdGhpcy5jYWNoZVtpZF0gPSBjYW52YXNFbnRyeTsKICAgICAgfQoKICAgICAgaWYgKHRyYWNrVHJhbnNmb3JtKSB7CiAgICAgICAgYWRkQ29udGV4dEN1cnJlbnRUcmFuc2Zvcm0oY2FudmFzRW50cnkuY29udGV4dCk7CiAgICAgIH0KCiAgICAgIHJldHVybiBjYW52YXNFbnRyeTsKICAgIH0sCiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7CiAgICAgIGZvciAodmFyIGlkIGluIHRoaXMuY2FjaGUpIHsKICAgICAgICB2YXIgY2FudmFzRW50cnkgPSB0aGlzLmNhY2hlW2lkXTsKICAgICAgICB0aGlzLmNhbnZhc0ZhY3RvcnkuZGVzdHJveShjYW52YXNFbnRyeSk7CiAgICAgICAgZGVsZXRlIHRoaXMuY2FjaGVbaWRdOwogICAgICB9CiAgICB9CiAgfTsKICByZXR1cm4gQ2FjaGVkQ2FudmFzZXM7Cn0oKTsKCmZ1bmN0aW9uIGNvbXBpbGVUeXBlM0dseXBoKGltZ0RhdGEpIHsKICB2YXIgUE9JTlRfVE9fUFJPQ0VTU19MSU1JVCA9IDEwMDA7CiAgdmFyIHdpZHRoID0gaW1nRGF0YS53aWR0aCwKICAgICAgaGVpZ2h0ID0gaW1nRGF0YS5oZWlnaHQ7CiAgdmFyIGksCiAgICAgIGosCiAgICAgIGowLAogICAgICB3aWR0aDEgPSB3aWR0aCArIDE7CiAgdmFyIHBvaW50cyA9IG5ldyBVaW50OEFycmF5KHdpZHRoMSAqIChoZWlnaHQgKyAxKSk7CiAgdmFyIFBPSU5UX1RZUEVTID0gbmV3IFVpbnQ4QXJyYXkoWzAsIDIsIDQsIDAsIDEsIDAsIDUsIDQsIDgsIDEwLCAwLCA4LCAwLCAyLCAxLCAwXSk7CiAgdmFyIGxpbmVTaXplID0gd2lkdGggKyA3ICYgfjcsCiAgICAgIGRhdGEwID0gaW1nRGF0YS5kYXRhOwogIHZhciBkYXRhID0gbmV3IFVpbnQ4QXJyYXkobGluZVNpemUgKiBoZWlnaHQpLAogICAgICBwb3MgPSAwLAogICAgICBpaTsKCiAgZm9yIChpID0gMCwgaWkgPSBkYXRhMC5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICB2YXIgbWFzayA9IDEyOCwKICAgICAgICBlbGVtID0gZGF0YTBbaV07CgogICAgd2hpbGUgKG1hc2sgPiAwKSB7CiAgICAgIGRhdGFbcG9zKytdID0gZWxlbSAmIG1hc2sgPyAwIDogMjU1OwogICAgICBtYXNrID4+PSAxOwogICAgfQogIH0KCiAgdmFyIGNvdW50ID0gMDsKICBwb3MgPSAwOwoKICBpZiAoZGF0YVtwb3NdICE9PSAwKSB7CiAgICBwb2ludHNbMF0gPSAxOwogICAgKytjb3VudDsKICB9CgogIGZvciAoaiA9IDE7IGogPCB3aWR0aDsgaisrKSB7CiAgICBpZiAoZGF0YVtwb3NdICE9PSBkYXRhW3BvcyArIDFdKSB7CiAgICAgIHBvaW50c1tqXSA9IGRhdGFbcG9zXSA/IDIgOiAxOwogICAgICArK2NvdW50OwogICAgfQoKICAgIHBvcysrOwogIH0KCiAgaWYgKGRhdGFbcG9zXSAhPT0gMCkgewogICAgcG9pbnRzW2pdID0gMjsKICAgICsrY291bnQ7CiAgfQoKICBmb3IgKGkgPSAxOyBpIDwgaGVpZ2h0OyBpKyspIHsKICAgIHBvcyA9IGkgKiBsaW5lU2l6ZTsKICAgIGowID0gaSAqIHdpZHRoMTsKCiAgICBpZiAoZGF0YVtwb3MgLSBsaW5lU2l6ZV0gIT09IGRhdGFbcG9zXSkgewogICAgICBwb2ludHNbajBdID0gZGF0YVtwb3NdID8gMSA6IDg7CiAgICAgICsrY291bnQ7CiAgICB9CgogICAgdmFyIHN1bSA9IChkYXRhW3Bvc10gPyA0IDogMCkgKyAoZGF0YVtwb3MgLSBsaW5lU2l6ZV0gPyA4IDogMCk7CgogICAgZm9yIChqID0gMTsgaiA8IHdpZHRoOyBqKyspIHsKICAgICAgc3VtID0gKHN1bSA+PiAyKSArIChkYXRhW3BvcyArIDFdID8gNCA6IDApICsgKGRhdGFbcG9zIC0gbGluZVNpemUgKyAxXSA/IDggOiAwKTsKCiAgICAgIGlmIChQT0lOVF9UWVBFU1tzdW1dKSB7CiAgICAgICAgcG9pbnRzW2owICsgal0gPSBQT0lOVF9UWVBFU1tzdW1dOwogICAgICAgICsrY291bnQ7CiAgICAgIH0KCiAgICAgIHBvcysrOwogICAgfQoKICAgIGlmIChkYXRhW3BvcyAtIGxpbmVTaXplXSAhPT0gZGF0YVtwb3NdKSB7CiAgICAgIHBvaW50c1tqMCArIGpdID0gZGF0YVtwb3NdID8gMiA6IDQ7CiAgICAgICsrY291bnQ7CiAgICB9CgogICAgaWYgKGNvdW50ID4gUE9JTlRfVE9fUFJPQ0VTU19MSU1JVCkgewogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICB9CgogIHBvcyA9IGxpbmVTaXplICogKGhlaWdodCAtIDEpOwogIGowID0gaSAqIHdpZHRoMTsKCiAgaWYgKGRhdGFbcG9zXSAhPT0gMCkgewogICAgcG9pbnRzW2owXSA9IDg7CiAgICArK2NvdW50OwogIH0KCiAgZm9yIChqID0gMTsgaiA8IHdpZHRoOyBqKyspIHsKICAgIGlmIChkYXRhW3Bvc10gIT09IGRhdGFbcG9zICsgMV0pIHsKICAgICAgcG9pbnRzW2owICsgal0gPSBkYXRhW3Bvc10gPyA0IDogODsKICAgICAgKytjb3VudDsKICAgIH0KCiAgICBwb3MrKzsKICB9CgogIGlmIChkYXRhW3Bvc10gIT09IDApIHsKICAgIHBvaW50c1tqMCArIGpdID0gNDsKICAgICsrY291bnQ7CiAgfQoKICBpZiAoY291bnQgPiBQT0lOVF9UT19QUk9DRVNTX0xJTUlUKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CgogIHZhciBzdGVwcyA9IG5ldyBJbnQzMkFycmF5KFswLCB3aWR0aDEsIC0xLCAwLCAtd2lkdGgxLCAwLCAwLCAwLCAxXSk7CiAgdmFyIG91dGxpbmVzID0gW107CgogIGZvciAoaSA9IDA7IGNvdW50ICYmIGkgPD0gaGVpZ2h0OyBpKyspIHsKICAgIHZhciBwID0gaSAqIHdpZHRoMTsKICAgIHZhciBlbmQgPSBwICsgd2lkdGg7CgogICAgd2hpbGUgKHAgPCBlbmQgJiYgIXBvaW50c1twXSkgewogICAgICBwKys7CiAgICB9CgogICAgaWYgKHAgPT09IGVuZCkgewogICAgICBjb250aW51ZTsKICAgIH0KCiAgICB2YXIgY29vcmRzID0gW3AgJSB3aWR0aDEsIGldOwogICAgdmFyIHR5cGUgPSBwb2ludHNbcF0sCiAgICAgICAgcDAgPSBwLAogICAgICAgIHBwOwoKICAgIGRvIHsKICAgICAgdmFyIHN0ZXAgPSBzdGVwc1t0eXBlXTsKCiAgICAgIGRvIHsKICAgICAgICBwICs9IHN0ZXA7CiAgICAgIH0gd2hpbGUgKCFwb2ludHNbcF0pOwoKICAgICAgcHAgPSBwb2ludHNbcF07CgogICAgICBpZiAocHAgIT09IDUgJiYgcHAgIT09IDEwKSB7CiAgICAgICAgdHlwZSA9IHBwOwogICAgICAgIHBvaW50c1twXSA9IDA7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdHlwZSA9IHBwICYgMHgzMyAqIHR5cGUgPj4gNDsKICAgICAgICBwb2ludHNbcF0gJj0gdHlwZSA+PiAyIHwgdHlwZSA8PCAyOwogICAgICB9CgogICAgICBjb29yZHMucHVzaChwICUgd2lkdGgxKTsKICAgICAgY29vcmRzLnB1c2gocCAvIHdpZHRoMSB8IDApOwoKICAgICAgaWYgKCFwb2ludHNbcF0pIHsKICAgICAgICAtLWNvdW50OwogICAgICB9CiAgICB9IHdoaWxlIChwMCAhPT0gcCk7CgogICAgb3V0bGluZXMucHVzaChjb29yZHMpOwogICAgLS1pOwogIH0KCiAgdmFyIGRyYXdPdXRsaW5lID0gZnVuY3Rpb24gZHJhd091dGxpbmUoYykgewogICAgYy5zYXZlKCk7CiAgICBjLnNjYWxlKDEgLyB3aWR0aCwgLTEgLyBoZWlnaHQpOwogICAgYy50cmFuc2xhdGUoMCwgLWhlaWdodCk7CiAgICBjLmJlZ2luUGF0aCgpOwoKICAgIGZvciAodmFyIGsgPSAwLCBrayA9IG91dGxpbmVzLmxlbmd0aDsgayA8IGtrOyBrKyspIHsKICAgICAgdmFyIG8gPSBvdXRsaW5lc1trXTsKICAgICAgYy5tb3ZlVG8ob1swXSwgb1sxXSk7CgogICAgICBmb3IgKHZhciBsID0gMiwgbGwgPSBvLmxlbmd0aDsgbCA8IGxsOyBsICs9IDIpIHsKICAgICAgICBjLmxpbmVUbyhvW2xdLCBvW2wgKyAxXSk7CiAgICAgIH0KICAgIH0KCiAgICBjLmZpbGwoKTsKICAgIGMuYmVnaW5QYXRoKCk7CiAgICBjLnJlc3RvcmUoKTsKICB9OwoKICByZXR1cm4gZHJhd091dGxpbmU7Cn0KCnZhciBDYW52YXNFeHRyYVN0YXRlID0gZnVuY3Rpb24gQ2FudmFzRXh0cmFTdGF0ZUNsb3N1cmUoKSB7CiAgZnVuY3Rpb24gQ2FudmFzRXh0cmFTdGF0ZSgpIHsKICAgIHRoaXMuYWxwaGFJc1NoYXBlID0gZmFsc2U7CiAgICB0aGlzLmZvbnRTaXplID0gMDsKICAgIHRoaXMuZm9udFNpemVTY2FsZSA9IDE7CiAgICB0aGlzLnRleHRNYXRyaXggPSBfdXRpbC5JREVOVElUWV9NQVRSSVg7CiAgICB0aGlzLnRleHRNYXRyaXhTY2FsZSA9IDE7CiAgICB0aGlzLmZvbnRNYXRyaXggPSBfdXRpbC5GT05UX0lERU5USVRZX01BVFJJWDsKICAgIHRoaXMubGVhZGluZyA9IDA7CiAgICB0aGlzLnggPSAwOwogICAgdGhpcy55ID0gMDsKICAgIHRoaXMubGluZVggPSAwOwogICAgdGhpcy5saW5lWSA9IDA7CiAgICB0aGlzLmNoYXJTcGFjaW5nID0gMDsKICAgIHRoaXMud29yZFNwYWNpbmcgPSAwOwogICAgdGhpcy50ZXh0SFNjYWxlID0gMTsKICAgIHRoaXMudGV4dFJlbmRlcmluZ01vZGUgPSBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5GSUxMOwogICAgdGhpcy50ZXh0UmlzZSA9IDA7CiAgICB0aGlzLmZpbGxDb2xvciA9ICIjMDAwMDAwIjsKICAgIHRoaXMuc3Ryb2tlQ29sb3IgPSAiIzAwMDAwMCI7CiAgICB0aGlzLnBhdHRlcm5GaWxsID0gZmFsc2U7CiAgICB0aGlzLmZpbGxBbHBoYSA9IDE7CiAgICB0aGlzLnN0cm9rZUFscGhhID0gMTsKICAgIHRoaXMubGluZVdpZHRoID0gMTsKICAgIHRoaXMuYWN0aXZlU01hc2sgPSBudWxsOwogICAgdGhpcy5yZXN1bWVTTWFza0N0eCA9IG51bGw7CiAgfQoKICBDYW52YXNFeHRyYVN0YXRlLnByb3RvdHlwZSA9IHsKICAgIGNsb25lOiBmdW5jdGlvbiBDYW52YXNFeHRyYVN0YXRlX2Nsb25lKCkgewogICAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZSh0aGlzKTsKICAgIH0sCiAgICBzZXRDdXJyZW50UG9pbnQ6IGZ1bmN0aW9uIENhbnZhc0V4dHJhU3RhdGVfc2V0Q3VycmVudFBvaW50KHgsIHkpIHsKICAgICAgdGhpcy54ID0geDsKICAgICAgdGhpcy55ID0geTsKICAgIH0KICB9OwogIHJldHVybiBDYW52YXNFeHRyYVN0YXRlOwp9KCk7Cgp2YXIgQ2FudmFzR3JhcGhpY3MgPSBmdW5jdGlvbiBDYW52YXNHcmFwaGljc0Nsb3N1cmUoKSB7CiAgdmFyIEVYRUNVVElPTl9USU1FID0gMTU7CiAgdmFyIEVYRUNVVElPTl9TVEVQUyA9IDEwOwoKICBmdW5jdGlvbiBDYW52YXNHcmFwaGljcyhjYW52YXNDdHgsIGNvbW1vbk9ianMsIG9ianMsIGNhbnZhc0ZhY3RvcnksIHdlYkdMQ29udGV4dCwgaW1hZ2VMYXllcikgewogICAgdGhpcy5jdHggPSBjYW52YXNDdHg7CiAgICB0aGlzLmN1cnJlbnQgPSBuZXcgQ2FudmFzRXh0cmFTdGF0ZSgpOwogICAgdGhpcy5zdGF0ZVN0YWNrID0gW107CiAgICB0aGlzLnBlbmRpbmdDbGlwID0gbnVsbDsKICAgIHRoaXMucGVuZGluZ0VPRmlsbCA9IGZhbHNlOwogICAgdGhpcy5yZXMgPSBudWxsOwogICAgdGhpcy54b2JqcyA9IG51bGw7CiAgICB0aGlzLmNvbW1vbk9ianMgPSBjb21tb25PYmpzOwogICAgdGhpcy5vYmpzID0gb2JqczsKICAgIHRoaXMuY2FudmFzRmFjdG9yeSA9IGNhbnZhc0ZhY3Rvcnk7CiAgICB0aGlzLndlYkdMQ29udGV4dCA9IHdlYkdMQ29udGV4dDsKICAgIHRoaXMuaW1hZ2VMYXllciA9IGltYWdlTGF5ZXI7CiAgICB0aGlzLmdyb3VwU3RhY2sgPSBbXTsKICAgIHRoaXMucHJvY2Vzc2luZ1R5cGUzID0gbnVsbDsKICAgIHRoaXMuYmFzZVRyYW5zZm9ybSA9IG51bGw7CiAgICB0aGlzLmJhc2VUcmFuc2Zvcm1TdGFjayA9IFtdOwogICAgdGhpcy5ncm91cExldmVsID0gMDsKICAgIHRoaXMuc21hc2tTdGFjayA9IFtdOwogICAgdGhpcy5zbWFza0NvdW50ZXIgPSAwOwogICAgdGhpcy50ZW1wU01hc2sgPSBudWxsOwogICAgdGhpcy5jYWNoZWRDYW52YXNlcyA9IG5ldyBDYWNoZWRDYW52YXNlcyh0aGlzLmNhbnZhc0ZhY3RvcnkpOwoKICAgIGlmIChjYW52YXNDdHgpIHsKICAgICAgYWRkQ29udGV4dEN1cnJlbnRUcmFuc2Zvcm0oY2FudmFzQ3R4KTsKICAgIH0KCiAgICB0aGlzLl9jYWNoZWRHZXRTaW5nbGVQaXhlbFdpZHRoID0gbnVsbDsKICB9CgogIGZ1bmN0aW9uIHB1dEJpbmFyeUltYWdlRGF0YShjdHgsIGltZ0RhdGEpIHsKICAgIGlmICh0eXBlb2YgSW1hZ2VEYXRhICE9PSAidW5kZWZpbmVkIiAmJiBpbWdEYXRhIGluc3RhbmNlb2YgSW1hZ2VEYXRhKSB7CiAgICAgIGN0eC5wdXRJbWFnZURhdGEoaW1nRGF0YSwgMCwgMCk7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICB2YXIgaGVpZ2h0ID0gaW1nRGF0YS5oZWlnaHQsCiAgICAgICAgd2lkdGggPSBpbWdEYXRhLndpZHRoOwogICAgdmFyIHBhcnRpYWxDaHVua0hlaWdodCA9IGhlaWdodCAlIEZVTExfQ0hVTktfSEVJR0hUOwogICAgdmFyIGZ1bGxDaHVua3MgPSAoaGVpZ2h0IC0gcGFydGlhbENodW5rSGVpZ2h0KSAvIEZVTExfQ0hVTktfSEVJR0hUOwogICAgdmFyIHRvdGFsQ2h1bmtzID0gcGFydGlhbENodW5rSGVpZ2h0ID09PSAwID8gZnVsbENodW5rcyA6IGZ1bGxDaHVua3MgKyAxOwogICAgdmFyIGNodW5rSW1nRGF0YSA9IGN0eC5jcmVhdGVJbWFnZURhdGEod2lkdGgsIEZVTExfQ0hVTktfSEVJR0hUKTsKICAgIHZhciBzcmNQb3MgPSAwLAogICAgICAgIGRlc3RQb3M7CiAgICB2YXIgc3JjID0gaW1nRGF0YS5kYXRhOwogICAgdmFyIGRlc3QgPSBjaHVua0ltZ0RhdGEuZGF0YTsKICAgIHZhciBpLCBqLCB0aGlzQ2h1bmtIZWlnaHQsIGVsZW1zSW5UaGlzQ2h1bms7CgogICAgaWYgKGltZ0RhdGEua2luZCA9PT0gX3V0aWwuSW1hZ2VLaW5kLkdSQVlTQ0FMRV8xQlBQKSB7CiAgICAgIHZhciBzcmNMZW5ndGggPSBzcmMuYnl0ZUxlbmd0aDsKICAgICAgdmFyIGRlc3QzMiA9IG5ldyBVaW50MzJBcnJheShkZXN0LmJ1ZmZlciwgMCwgZGVzdC5ieXRlTGVuZ3RoID4+IDIpOwogICAgICB2YXIgZGVzdDMyRGF0YUxlbmd0aCA9IGRlc3QzMi5sZW5ndGg7CiAgICAgIHZhciBmdWxsU3JjRGlmZiA9IHdpZHRoICsgNyA+PiAzOwogICAgICB2YXIgd2hpdGUgPSAweGZmZmZmZmZmOwogICAgICB2YXIgYmxhY2sgPSBfdXRpbC5Jc0xpdHRsZUVuZGlhbkNhY2hlZC52YWx1ZSA/IDB4ZmYwMDAwMDAgOiAweDAwMDAwMGZmOwoKICAgICAgZm9yIChpID0gMDsgaSA8IHRvdGFsQ2h1bmtzOyBpKyspIHsKICAgICAgICB0aGlzQ2h1bmtIZWlnaHQgPSBpIDwgZnVsbENodW5rcyA/IEZVTExfQ0hVTktfSEVJR0hUIDogcGFydGlhbENodW5rSGVpZ2h0OwogICAgICAgIGRlc3RQb3MgPSAwOwoKICAgICAgICBmb3IgKGogPSAwOyBqIDwgdGhpc0NodW5rSGVpZ2h0OyBqKyspIHsKICAgICAgICAgIHZhciBzcmNEaWZmID0gc3JjTGVuZ3RoIC0gc3JjUG9zOwogICAgICAgICAgdmFyIGsgPSAwOwogICAgICAgICAgdmFyIGtFbmQgPSBzcmNEaWZmID4gZnVsbFNyY0RpZmYgPyB3aWR0aCA6IHNyY0RpZmYgKiA4IC0gNzsKICAgICAgICAgIHZhciBrRW5kVW5yb2xsZWQgPSBrRW5kICYgfjc7CiAgICAgICAgICB2YXIgbWFzayA9IDA7CiAgICAgICAgICB2YXIgc3JjQnl0ZSA9IDA7CgogICAgICAgICAgZm9yICg7IGsgPCBrRW5kVW5yb2xsZWQ7IGsgKz0gOCkgewogICAgICAgICAgICBzcmNCeXRlID0gc3JjW3NyY1BvcysrXTsKICAgICAgICAgICAgZGVzdDMyW2Rlc3RQb3MrK10gPSBzcmNCeXRlICYgMTI4ID8gd2hpdGUgOiBibGFjazsKICAgICAgICAgICAgZGVzdDMyW2Rlc3RQb3MrK10gPSBzcmNCeXRlICYgNjQgPyB3aGl0ZSA6IGJsYWNrOwogICAgICAgICAgICBkZXN0MzJbZGVzdFBvcysrXSA9IHNyY0J5dGUgJiAzMiA/IHdoaXRlIDogYmxhY2s7CiAgICAgICAgICAgIGRlc3QzMltkZXN0UG9zKytdID0gc3JjQnl0ZSAmIDE2ID8gd2hpdGUgOiBibGFjazsKICAgICAgICAgICAgZGVzdDMyW2Rlc3RQb3MrK10gPSBzcmNCeXRlICYgOCA/IHdoaXRlIDogYmxhY2s7CiAgICAgICAgICAgIGRlc3QzMltkZXN0UG9zKytdID0gc3JjQnl0ZSAmIDQgPyB3aGl0ZSA6IGJsYWNrOwogICAgICAgICAgICBkZXN0MzJbZGVzdFBvcysrXSA9IHNyY0J5dGUgJiAyID8gd2hpdGUgOiBibGFjazsKICAgICAgICAgICAgZGVzdDMyW2Rlc3RQb3MrK10gPSBzcmNCeXRlICYgMSA/IHdoaXRlIDogYmxhY2s7CiAgICAgICAgICB9CgogICAgICAgICAgZm9yICg7IGsgPCBrRW5kOyBrKyspIHsKICAgICAgICAgICAgaWYgKG1hc2sgPT09IDApIHsKICAgICAgICAgICAgICBzcmNCeXRlID0gc3JjW3NyY1BvcysrXTsKICAgICAgICAgICAgICBtYXNrID0gMTI4OwogICAgICAgICAgICB9CgogICAgICAgICAgICBkZXN0MzJbZGVzdFBvcysrXSA9IHNyY0J5dGUgJiBtYXNrID8gd2hpdGUgOiBibGFjazsKICAgICAgICAgICAgbWFzayA+Pj0gMTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHdoaWxlIChkZXN0UG9zIDwgZGVzdDMyRGF0YUxlbmd0aCkgewogICAgICAgICAgZGVzdDMyW2Rlc3RQb3MrK10gPSAwOwogICAgICAgIH0KCiAgICAgICAgY3R4LnB1dEltYWdlRGF0YShjaHVua0ltZ0RhdGEsIDAsIGkgKiBGVUxMX0NIVU5LX0hFSUdIVCk7CiAgICAgIH0KICAgIH0gZWxzZSBpZiAoaW1nRGF0YS5raW5kID09PSBfdXRpbC5JbWFnZUtpbmQuUkdCQV8zMkJQUCkgewogICAgICBqID0gMDsKICAgICAgZWxlbXNJblRoaXNDaHVuayA9IHdpZHRoICogRlVMTF9DSFVOS19IRUlHSFQgKiA0OwoKICAgICAgZm9yIChpID0gMDsgaSA8IGZ1bGxDaHVua3M7IGkrKykgewogICAgICAgIGRlc3Quc2V0KHNyYy5zdWJhcnJheShzcmNQb3MsIHNyY1BvcyArIGVsZW1zSW5UaGlzQ2h1bmspKTsKICAgICAgICBzcmNQb3MgKz0gZWxlbXNJblRoaXNDaHVuazsKICAgICAgICBjdHgucHV0SW1hZ2VEYXRhKGNodW5rSW1nRGF0YSwgMCwgaik7CiAgICAgICAgaiArPSBGVUxMX0NIVU5LX0hFSUdIVDsKICAgICAgfQoKICAgICAgaWYgKGkgPCB0b3RhbENodW5rcykgewogICAgICAgIGVsZW1zSW5UaGlzQ2h1bmsgPSB3aWR0aCAqIHBhcnRpYWxDaHVua0hlaWdodCAqIDQ7CiAgICAgICAgZGVzdC5zZXQoc3JjLnN1YmFycmF5KHNyY1Bvcywgc3JjUG9zICsgZWxlbXNJblRoaXNDaHVuaykpOwogICAgICAgIGN0eC5wdXRJbWFnZURhdGEoY2h1bmtJbWdEYXRhLCAwLCBqKTsKICAgICAgfQogICAgfSBlbHNlIGlmIChpbWdEYXRhLmtpbmQgPT09IF91dGlsLkltYWdlS2luZC5SR0JfMjRCUFApIHsKICAgICAgdGhpc0NodW5rSGVpZ2h0ID0gRlVMTF9DSFVOS19IRUlHSFQ7CiAgICAgIGVsZW1zSW5UaGlzQ2h1bmsgPSB3aWR0aCAqIHRoaXNDaHVua0hlaWdodDsKCiAgICAgIGZvciAoaSA9IDA7IGkgPCB0b3RhbENodW5rczsgaSsrKSB7CiAgICAgICAgaWYgKGkgPj0gZnVsbENodW5rcykgewogICAgICAgICAgdGhpc0NodW5rSGVpZ2h0ID0gcGFydGlhbENodW5rSGVpZ2h0OwogICAgICAgICAgZWxlbXNJblRoaXNDaHVuayA9IHdpZHRoICogdGhpc0NodW5rSGVpZ2h0OwogICAgICAgIH0KCiAgICAgICAgZGVzdFBvcyA9IDA7CgogICAgICAgIGZvciAoaiA9IGVsZW1zSW5UaGlzQ2h1bms7IGotLTspIHsKICAgICAgICAgIGRlc3RbZGVzdFBvcysrXSA9IHNyY1tzcmNQb3MrK107CiAgICAgICAgICBkZXN0W2Rlc3RQb3MrK10gPSBzcmNbc3JjUG9zKytdOwogICAgICAgICAgZGVzdFtkZXN0UG9zKytdID0gc3JjW3NyY1BvcysrXTsKICAgICAgICAgIGRlc3RbZGVzdFBvcysrXSA9IDI1NTsKICAgICAgICB9CgogICAgICAgIGN0eC5wdXRJbWFnZURhdGEoY2h1bmtJbWdEYXRhLCAwLCBpICogRlVMTF9DSFVOS19IRUlHSFQpOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICB0aHJvdyBuZXcgRXJyb3IoImJhZCBpbWFnZSBraW5kOiAiLmNvbmNhdChpbWdEYXRhLmtpbmQpKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIHB1dEJpbmFyeUltYWdlTWFzayhjdHgsIGltZ0RhdGEpIHsKICAgIHZhciBoZWlnaHQgPSBpbWdEYXRhLmhlaWdodCwKICAgICAgICB3aWR0aCA9IGltZ0RhdGEud2lkdGg7CiAgICB2YXIgcGFydGlhbENodW5rSGVpZ2h0ID0gaGVpZ2h0ICUgRlVMTF9DSFVOS19IRUlHSFQ7CiAgICB2YXIgZnVsbENodW5rcyA9IChoZWlnaHQgLSBwYXJ0aWFsQ2h1bmtIZWlnaHQpIC8gRlVMTF9DSFVOS19IRUlHSFQ7CiAgICB2YXIgdG90YWxDaHVua3MgPSBwYXJ0aWFsQ2h1bmtIZWlnaHQgPT09IDAgPyBmdWxsQ2h1bmtzIDogZnVsbENodW5rcyArIDE7CiAgICB2YXIgY2h1bmtJbWdEYXRhID0gY3R4LmNyZWF0ZUltYWdlRGF0YSh3aWR0aCwgRlVMTF9DSFVOS19IRUlHSFQpOwogICAgdmFyIHNyY1BvcyA9IDA7CiAgICB2YXIgc3JjID0gaW1nRGF0YS5kYXRhOwogICAgdmFyIGRlc3QgPSBjaHVua0ltZ0RhdGEuZGF0YTsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvdGFsQ2h1bmtzOyBpKyspIHsKICAgICAgdmFyIHRoaXNDaHVua0hlaWdodCA9IGkgPCBmdWxsQ2h1bmtzID8gRlVMTF9DSFVOS19IRUlHSFQgOiBwYXJ0aWFsQ2h1bmtIZWlnaHQ7CiAgICAgIHZhciBkZXN0UG9zID0gMzsKCiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpc0NodW5rSGVpZ2h0OyBqKyspIHsKICAgICAgICB2YXIgbWFzayA9IDA7CgogICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgd2lkdGg7IGsrKykgewogICAgICAgICAgaWYgKCFtYXNrKSB7CiAgICAgICAgICAgIHZhciBlbGVtID0gc3JjW3NyY1BvcysrXTsKICAgICAgICAgICAgbWFzayA9IDEyODsKICAgICAgICAgIH0KCiAgICAgICAgICBkZXN0W2Rlc3RQb3NdID0gZWxlbSAmIG1hc2sgPyAwIDogMjU1OwogICAgICAgICAgZGVzdFBvcyArPSA0OwogICAgICAgICAgbWFzayA+Pj0gMTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGN0eC5wdXRJbWFnZURhdGEoY2h1bmtJbWdEYXRhLCAwLCBpICogRlVMTF9DSFVOS19IRUlHSFQpOwogICAgfQogIH0KCiAgZnVuY3Rpb24gY29weUN0eFN0YXRlKHNvdXJjZUN0eCwgZGVzdEN0eCkgewogICAgdmFyIHByb3BlcnRpZXMgPSBbInN0cm9rZVN0eWxlIiwgImZpbGxTdHlsZSIsICJmaWxsUnVsZSIsICJnbG9iYWxBbHBoYSIsICJsaW5lV2lkdGgiLCAibGluZUNhcCIsICJsaW5lSm9pbiIsICJtaXRlckxpbWl0IiwgImdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiIsICJmb250Il07CgogICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcHJvcGVydGllcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgIHZhciBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbaV07CgogICAgICBpZiAoc291cmNlQ3R4W3Byb3BlcnR5XSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgZGVzdEN0eFtwcm9wZXJ0eV0gPSBzb3VyY2VDdHhbcHJvcGVydHldOwogICAgICB9CiAgICB9CgogICAgaWYgKHNvdXJjZUN0eC5zZXRMaW5lRGFzaCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgIGRlc3RDdHguc2V0TGluZURhc2goc291cmNlQ3R4LmdldExpbmVEYXNoKCkpOwogICAgICBkZXN0Q3R4LmxpbmVEYXNoT2Zmc2V0ID0gc291cmNlQ3R4LmxpbmVEYXNoT2Zmc2V0OwogICAgfQogIH0KCiAgZnVuY3Rpb24gcmVzZXRDdHhUb0RlZmF1bHQoY3R4KSB7CiAgICBjdHguc3Ryb2tlU3R5bGUgPSAiIzAwMDAwMCI7CiAgICBjdHguZmlsbFN0eWxlID0gIiMwMDAwMDAiOwogICAgY3R4LmZpbGxSdWxlID0gIm5vbnplcm8iOwogICAgY3R4Lmdsb2JhbEFscGhhID0gMTsKICAgIGN0eC5saW5lV2lkdGggPSAxOwogICAgY3R4LmxpbmVDYXAgPSAiYnV0dCI7CiAgICBjdHgubGluZUpvaW4gPSAibWl0ZXIiOwogICAgY3R4Lm1pdGVyTGltaXQgPSAxMDsKICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAic291cmNlLW92ZXIiOwogICAgY3R4LmZvbnQgPSAiMTBweCBzYW5zLXNlcmlmIjsKCiAgICBpZiAoY3R4LnNldExpbmVEYXNoICE9PSB1bmRlZmluZWQpIHsKICAgICAgY3R4LnNldExpbmVEYXNoKFtdKTsKICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gMDsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGNvbXBvc2VTTWFza0JhY2tkcm9wKGJ5dGVzLCByMCwgZzAsIGIwKSB7CiAgICB2YXIgbGVuZ3RoID0gYnl0ZXMubGVuZ3RoOwoKICAgIGZvciAodmFyIGkgPSAzOyBpIDwgbGVuZ3RoOyBpICs9IDQpIHsKICAgICAgdmFyIGFscGhhID0gYnl0ZXNbaV07CgogICAgICBpZiAoYWxwaGEgPT09IDApIHsKICAgICAgICBieXRlc1tpIC0gM10gPSByMDsKICAgICAgICBieXRlc1tpIC0gMl0gPSBnMDsKICAgICAgICBieXRlc1tpIC0gMV0gPSBiMDsKICAgICAgfSBlbHNlIGlmIChhbHBoYSA8IDI1NSkgewogICAgICAgIHZhciBhbHBoYV8gPSAyNTUgLSBhbHBoYTsKICAgICAgICBieXRlc1tpIC0gM10gPSBieXRlc1tpIC0gM10gKiBhbHBoYSArIHIwICogYWxwaGFfID4+IDg7CiAgICAgICAgYnl0ZXNbaSAtIDJdID0gYnl0ZXNbaSAtIDJdICogYWxwaGEgKyBnMCAqIGFscGhhXyA+PiA4OwogICAgICAgIGJ5dGVzW2kgLSAxXSA9IGJ5dGVzW2kgLSAxXSAqIGFscGhhICsgYjAgKiBhbHBoYV8gPj4gODsKICAgICAgfQogICAgfQogIH0KCiAgZnVuY3Rpb24gY29tcG9zZVNNYXNrQWxwaGEobWFza0RhdGEsIGxheWVyRGF0YSwgdHJhbnNmZXJNYXApIHsKICAgIHZhciBsZW5ndGggPSBtYXNrRGF0YS5sZW5ndGg7CiAgICB2YXIgc2NhbGUgPSAxIC8gMjU1OwoKICAgIGZvciAodmFyIGkgPSAzOyBpIDwgbGVuZ3RoOyBpICs9IDQpIHsKICAgICAgdmFyIGFscGhhID0gdHJhbnNmZXJNYXAgPyB0cmFuc2Zlck1hcFttYXNrRGF0YVtpXV0gOiBtYXNrRGF0YVtpXTsKICAgICAgbGF5ZXJEYXRhW2ldID0gbGF5ZXJEYXRhW2ldICogYWxwaGEgKiBzY2FsZSB8IDA7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBjb21wb3NlU01hc2tMdW1pbm9zaXR5KG1hc2tEYXRhLCBsYXllckRhdGEsIHRyYW5zZmVyTWFwKSB7CiAgICB2YXIgbGVuZ3RoID0gbWFza0RhdGEubGVuZ3RoOwoKICAgIGZvciAodmFyIGkgPSAzOyBpIDwgbGVuZ3RoOyBpICs9IDQpIHsKICAgICAgdmFyIHkgPSBtYXNrRGF0YVtpIC0gM10gKiA3NyArIG1hc2tEYXRhW2kgLSAyXSAqIDE1MiArIG1hc2tEYXRhW2kgLSAxXSAqIDI4OwogICAgICBsYXllckRhdGFbaV0gPSB0cmFuc2Zlck1hcCA/IGxheWVyRGF0YVtpXSAqIHRyYW5zZmVyTWFwW3kgPj4gOF0gPj4gOCA6IGxheWVyRGF0YVtpXSAqIHkgPj4gMTY7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBnZW5lcmljQ29tcG9zZVNNYXNrKG1hc2tDdHgsIGxheWVyQ3R4LCB3aWR0aCwgaGVpZ2h0LCBzdWJ0eXBlLCBiYWNrZHJvcCwgdHJhbnNmZXJNYXApIHsKICAgIHZhciBoYXNCYWNrZHJvcCA9ICEhYmFja2Ryb3A7CiAgICB2YXIgcjAgPSBoYXNCYWNrZHJvcCA/IGJhY2tkcm9wWzBdIDogMDsKICAgIHZhciBnMCA9IGhhc0JhY2tkcm9wID8gYmFja2Ryb3BbMV0gOiAwOwogICAgdmFyIGIwID0gaGFzQmFja2Ryb3AgPyBiYWNrZHJvcFsyXSA6IDA7CiAgICB2YXIgY29tcG9zZUZuOwoKICAgIGlmIChzdWJ0eXBlID09PSAiTHVtaW5vc2l0eSIpIHsKICAgICAgY29tcG9zZUZuID0gY29tcG9zZVNNYXNrTHVtaW5vc2l0eTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbXBvc2VGbiA9IGNvbXBvc2VTTWFza0FscGhhOwogICAgfQoKICAgIHZhciBQSVhFTFNfVE9fUFJPQ0VTUyA9IDEwNDg1NzY7CiAgICB2YXIgY2h1bmtTaXplID0gTWF0aC5taW4oaGVpZ2h0LCBNYXRoLmNlaWwoUElYRUxTX1RPX1BST0NFU1MgLyB3aWR0aCkpOwoKICAgIGZvciAodmFyIHJvdyA9IDA7IHJvdyA8IGhlaWdodDsgcm93ICs9IGNodW5rU2l6ZSkgewogICAgICB2YXIgY2h1bmtIZWlnaHQgPSBNYXRoLm1pbihjaHVua1NpemUsIGhlaWdodCAtIHJvdyk7CiAgICAgIHZhciBtYXNrRGF0YSA9IG1hc2tDdHguZ2V0SW1hZ2VEYXRhKDAsIHJvdywgd2lkdGgsIGNodW5rSGVpZ2h0KTsKICAgICAgdmFyIGxheWVyRGF0YSA9IGxheWVyQ3R4LmdldEltYWdlRGF0YSgwLCByb3csIHdpZHRoLCBjaHVua0hlaWdodCk7CgogICAgICBpZiAoaGFzQmFja2Ryb3ApIHsKICAgICAgICBjb21wb3NlU01hc2tCYWNrZHJvcChtYXNrRGF0YS5kYXRhLCByMCwgZzAsIGIwKTsKICAgICAgfQoKICAgICAgY29tcG9zZUZuKG1hc2tEYXRhLmRhdGEsIGxheWVyRGF0YS5kYXRhLCB0cmFuc2Zlck1hcCk7CiAgICAgIG1hc2tDdHgucHV0SW1hZ2VEYXRhKGxheWVyRGF0YSwgMCwgcm93KTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGNvbXBvc2VTTWFzayhjdHgsIHNtYXNrLCBsYXllckN0eCwgd2ViR0xDb250ZXh0KSB7CiAgICB2YXIgbWFzayA9IHNtYXNrLmNhbnZhczsKICAgIHZhciBtYXNrQ3R4ID0gc21hc2suY29udGV4dDsKICAgIGN0eC5zZXRUcmFuc2Zvcm0oc21hc2suc2NhbGVYLCAwLCAwLCBzbWFzay5zY2FsZVksIHNtYXNrLm9mZnNldFgsIHNtYXNrLm9mZnNldFkpOwogICAgdmFyIGJhY2tkcm9wID0gc21hc2suYmFja2Ryb3AgfHwgbnVsbDsKCiAgICBpZiAoIXNtYXNrLnRyYW5zZmVyTWFwICYmIHdlYkdMQ29udGV4dC5pc0VuYWJsZWQpIHsKICAgICAgdmFyIGNvbXBvc2VkID0gd2ViR0xDb250ZXh0LmNvbXBvc2VTTWFzayh7CiAgICAgICAgbGF5ZXI6IGxheWVyQ3R4LmNhbnZhcywKICAgICAgICBtYXNrOiBtYXNrLAogICAgICAgIHByb3BlcnRpZXM6IHsKICAgICAgICAgIHN1YnR5cGU6IHNtYXNrLnN1YnR5cGUsCiAgICAgICAgICBiYWNrZHJvcDogYmFja2Ryb3AKICAgICAgICB9CiAgICAgIH0pOwogICAgICBjdHguc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApOwogICAgICBjdHguZHJhd0ltYWdlKGNvbXBvc2VkLCBzbWFzay5vZmZzZXRYLCBzbWFzay5vZmZzZXRZKTsKICAgICAgcmV0dXJuOwogICAgfQoKICAgIGdlbmVyaWNDb21wb3NlU01hc2sobWFza0N0eCwgbGF5ZXJDdHgsIG1hc2sud2lkdGgsIG1hc2suaGVpZ2h0LCBzbWFzay5zdWJ0eXBlLCBiYWNrZHJvcCwgc21hc2sudHJhbnNmZXJNYXApOwogICAgY3R4LmRyYXdJbWFnZShtYXNrLCAwLCAwKTsKICB9CgogIHZhciBMSU5FX0NBUF9TVFlMRVMgPSBbImJ1dHQiLCAicm91bmQiLCAic3F1YXJlIl07CiAgdmFyIExJTkVfSk9JTl9TVFlMRVMgPSBbIm1pdGVyIiwgInJvdW5kIiwgImJldmVsIl07CiAgdmFyIE5PUk1BTF9DTElQID0ge307CiAgdmFyIEVPX0NMSVAgPSB7fTsKICBDYW52YXNHcmFwaGljcy5wcm90b3R5cGUgPSB7CiAgICBiZWdpbkRyYXdpbmc6IGZ1bmN0aW9uIGJlZ2luRHJhd2luZyhfcmVmKSB7CiAgICAgIHZhciB0cmFuc2Zvcm0gPSBfcmVmLnRyYW5zZm9ybSwKICAgICAgICAgIHZpZXdwb3J0ID0gX3JlZi52aWV3cG9ydCwKICAgICAgICAgIF9yZWYkdHJhbnNwYXJlbmN5ID0gX3JlZi50cmFuc3BhcmVuY3ksCiAgICAgICAgICB0cmFuc3BhcmVuY3kgPSBfcmVmJHRyYW5zcGFyZW5jeSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJHRyYW5zcGFyZW5jeSwKICAgICAgICAgIF9yZWYkYmFja2dyb3VuZCA9IF9yZWYuYmFja2dyb3VuZCwKICAgICAgICAgIGJhY2tncm91bmQgPSBfcmVmJGJhY2tncm91bmQgPT09IHZvaWQgMCA/IG51bGwgOiBfcmVmJGJhY2tncm91bmQ7CiAgICAgIHZhciB3aWR0aCA9IHRoaXMuY3R4LmNhbnZhcy53aWR0aDsKICAgICAgdmFyIGhlaWdodCA9IHRoaXMuY3R4LmNhbnZhcy5oZWlnaHQ7CiAgICAgIHRoaXMuY3R4LnNhdmUoKTsKICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gYmFja2dyb3VuZCB8fCAicmdiKDI1NSwgMjU1LCAyNTUpIjsKICAgICAgdGhpcy5jdHguZmlsbFJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7CiAgICAgIHRoaXMuY3R4LnJlc3RvcmUoKTsKCiAgICAgIGlmICh0cmFuc3BhcmVuY3kpIHsKICAgICAgICB2YXIgdHJhbnNwYXJlbnRDYW52YXMgPSB0aGlzLmNhY2hlZENhbnZhc2VzLmdldENhbnZhcygidHJhbnNwYXJlbnQiLCB3aWR0aCwgaGVpZ2h0LCB0cnVlKTsKICAgICAgICB0aGlzLmNvbXBvc2l0ZUN0eCA9IHRoaXMuY3R4OwogICAgICAgIHRoaXMudHJhbnNwYXJlbnRDYW52YXMgPSB0cmFuc3BhcmVudENhbnZhcy5jYW52YXM7CiAgICAgICAgdGhpcy5jdHggPSB0cmFuc3BhcmVudENhbnZhcy5jb250ZXh0OwogICAgICAgIHRoaXMuY3R4LnNhdmUoKTsKICAgICAgICB0aGlzLmN0eC50cmFuc2Zvcm0uYXBwbHkodGhpcy5jdHgsIHRoaXMuY29tcG9zaXRlQ3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm0pOwogICAgICB9CgogICAgICB0aGlzLmN0eC5zYXZlKCk7CiAgICAgIHJlc2V0Q3R4VG9EZWZhdWx0KHRoaXMuY3R4KTsKCiAgICAgIGlmICh0cmFuc2Zvcm0pIHsKICAgICAgICB0aGlzLmN0eC50cmFuc2Zvcm0uYXBwbHkodGhpcy5jdHgsIHRyYW5zZm9ybSk7CiAgICAgIH0KCiAgICAgIHRoaXMuY3R4LnRyYW5zZm9ybS5hcHBseSh0aGlzLmN0eCwgdmlld3BvcnQudHJhbnNmb3JtKTsKICAgICAgdGhpcy5iYXNlVHJhbnNmb3JtID0gdGhpcy5jdHgubW96Q3VycmVudFRyYW5zZm9ybS5zbGljZSgpOwoKICAgICAgaWYgKHRoaXMuaW1hZ2VMYXllcikgewogICAgICAgIHRoaXMuaW1hZ2VMYXllci5iZWdpbkxheW91dCgpOwogICAgICB9CiAgICB9LAogICAgZXhlY3V0ZU9wZXJhdG9yTGlzdDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfZXhlY3V0ZU9wZXJhdG9yTGlzdChvcGVyYXRvckxpc3QsIGV4ZWN1dGlvblN0YXJ0SWR4LCBjb250aW51ZUNhbGxiYWNrLCBzdGVwcGVyKSB7CiAgICAgIHZhciBhcmdzQXJyYXkgPSBvcGVyYXRvckxpc3QuYXJnc0FycmF5OwogICAgICB2YXIgZm5BcnJheSA9IG9wZXJhdG9yTGlzdC5mbkFycmF5OwogICAgICB2YXIgaSA9IGV4ZWN1dGlvblN0YXJ0SWR4IHx8IDA7CiAgICAgIHZhciBhcmdzQXJyYXlMZW4gPSBhcmdzQXJyYXkubGVuZ3RoOwoKICAgICAgaWYgKGFyZ3NBcnJheUxlbiA9PT0gaSkgewogICAgICAgIHJldHVybiBpOwogICAgICB9CgogICAgICB2YXIgY2h1bmtPcGVyYXRpb25zID0gYXJnc0FycmF5TGVuIC0gaSA+IEVYRUNVVElPTl9TVEVQUyAmJiB0eXBlb2YgY29udGludWVDYWxsYmFjayA9PT0gImZ1bmN0aW9uIjsKICAgICAgdmFyIGVuZFRpbWUgPSBjaHVua09wZXJhdGlvbnMgPyBEYXRlLm5vdygpICsgRVhFQ1VUSU9OX1RJTUUgOiAwOwogICAgICB2YXIgc3RlcHMgPSAwOwogICAgICB2YXIgY29tbW9uT2JqcyA9IHRoaXMuY29tbW9uT2JqczsKICAgICAgdmFyIG9ianMgPSB0aGlzLm9ianM7CiAgICAgIHZhciBmbklkOwoKICAgICAgd2hpbGUgKHRydWUpIHsKICAgICAgICBpZiAoc3RlcHBlciAhPT0gdW5kZWZpbmVkICYmIGkgPT09IHN0ZXBwZXIubmV4dEJyZWFrUG9pbnQpIHsKICAgICAgICAgIHN0ZXBwZXIuYnJlYWtJdChpLCBjb250aW51ZUNhbGxiYWNrKTsKICAgICAgICAgIHJldHVybiBpOwogICAgICAgIH0KCiAgICAgICAgZm5JZCA9IGZuQXJyYXlbaV07CgogICAgICAgIGlmIChmbklkICE9PSBfdXRpbC5PUFMuZGVwZW5kZW5jeSkgewogICAgICAgICAgdGhpc1tmbklkXS5hcHBseSh0aGlzLCBhcmdzQXJyYXlbaV0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoYXJnc0FycmF5W2ldKSwKICAgICAgICAgICAgICBfc3RlcDsKCiAgICAgICAgICB0cnkgewogICAgICAgICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykgewogICAgICAgICAgICAgIHZhciBkZXBPYmpJZCA9IF9zdGVwLnZhbHVlOwogICAgICAgICAgICAgIHZhciBvYmpzUG9vbCA9IGRlcE9iaklkLnN0YXJ0c1dpdGgoImdfIikgPyBjb21tb25PYmpzIDogb2JqczsKCiAgICAgICAgICAgICAgaWYgKCFvYmpzUG9vbC5oYXMoZGVwT2JqSWQpKSB7CiAgICAgICAgICAgICAgICBvYmpzUG9vbC5nZXQoZGVwT2JqSWQsIGNvbnRpbnVlQ2FsbGJhY2spOwogICAgICAgICAgICAgICAgcmV0dXJuIGk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgX2l0ZXJhdG9yLmUoZXJyKTsKICAgICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgIF9pdGVyYXRvci5mKCk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBpKys7CgogICAgICAgIGlmIChpID09PSBhcmdzQXJyYXlMZW4pIHsKICAgICAgICAgIHJldHVybiBpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGNodW5rT3BlcmF0aW9ucyAmJiArK3N0ZXBzID4gRVhFQ1VUSU9OX1NURVBTKSB7CiAgICAgICAgICBpZiAoRGF0ZS5ub3coKSA+IGVuZFRpbWUpIHsKICAgICAgICAgICAgY29udGludWVDYWxsYmFjaygpOwogICAgICAgICAgICByZXR1cm4gaTsKICAgICAgICAgIH0KCiAgICAgICAgICBzdGVwcyA9IDA7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgZW5kRHJhd2luZzogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfZW5kRHJhd2luZygpIHsKICAgICAgaWYgKHRoaXMuY3VycmVudC5hY3RpdmVTTWFzayAhPT0gbnVsbCkgewogICAgICAgIHRoaXMuZW5kU01hc2tHcm91cCgpOwogICAgICB9CgogICAgICB0aGlzLmN0eC5yZXN0b3JlKCk7CgogICAgICBpZiAodGhpcy50cmFuc3BhcmVudENhbnZhcykgewogICAgICAgIHRoaXMuY3R4ID0gdGhpcy5jb21wb3NpdGVDdHg7CiAgICAgICAgdGhpcy5jdHguc2F2ZSgpOwogICAgICAgIHRoaXMuY3R4LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCAwLCAwKTsKICAgICAgICB0aGlzLmN0eC5kcmF3SW1hZ2UodGhpcy50cmFuc3BhcmVudENhbnZhcywgMCwgMCk7CiAgICAgICAgdGhpcy5jdHgucmVzdG9yZSgpOwogICAgICAgIHRoaXMudHJhbnNwYXJlbnRDYW52YXMgPSBudWxsOwogICAgICB9CgogICAgICB0aGlzLmNhY2hlZENhbnZhc2VzLmNsZWFyKCk7CiAgICAgIHRoaXMud2ViR0xDb250ZXh0LmNsZWFyKCk7CgogICAgICBpZiAodGhpcy5pbWFnZUxheWVyKSB7CiAgICAgICAgdGhpcy5pbWFnZUxheWVyLmVuZExheW91dCgpOwogICAgICB9CiAgICB9LAogICAgc2V0TGluZVdpZHRoOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19zZXRMaW5lV2lkdGgod2lkdGgpIHsKICAgICAgdGhpcy5jdXJyZW50LmxpbmVXaWR0aCA9IHdpZHRoOwogICAgICB0aGlzLmN0eC5saW5lV2lkdGggPSB3aWR0aDsKICAgIH0sCiAgICBzZXRMaW5lQ2FwOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19zZXRMaW5lQ2FwKHN0eWxlKSB7CiAgICAgIHRoaXMuY3R4LmxpbmVDYXAgPSBMSU5FX0NBUF9TVFlMRVNbc3R5bGVdOwogICAgfSwKICAgIHNldExpbmVKb2luOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19zZXRMaW5lSm9pbihzdHlsZSkgewogICAgICB0aGlzLmN0eC5saW5lSm9pbiA9IExJTkVfSk9JTl9TVFlMRVNbc3R5bGVdOwogICAgfSwKICAgIHNldE1pdGVyTGltaXQ6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX3NldE1pdGVyTGltaXQobGltaXQpIHsKICAgICAgdGhpcy5jdHgubWl0ZXJMaW1pdCA9IGxpbWl0OwogICAgfSwKICAgIHNldERhc2g6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX3NldERhc2goZGFzaEFycmF5LCBkYXNoUGhhc2UpIHsKICAgICAgdmFyIGN0eCA9IHRoaXMuY3R4OwoKICAgICAgaWYgKGN0eC5zZXRMaW5lRGFzaCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgY3R4LnNldExpbmVEYXNoKGRhc2hBcnJheSk7CiAgICAgICAgY3R4LmxpbmVEYXNoT2Zmc2V0ID0gZGFzaFBoYXNlOwogICAgICB9CiAgICB9LAogICAgc2V0UmVuZGVyaW5nSW50ZW50OiBmdW5jdGlvbiBzZXRSZW5kZXJpbmdJbnRlbnQoaW50ZW50KSB7fSwKICAgIHNldEZsYXRuZXNzOiBmdW5jdGlvbiBzZXRGbGF0bmVzcyhmbGF0bmVzcykge30sCiAgICBzZXRHU3RhdGU6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX3NldEdTdGF0ZShzdGF0ZXMpIHsKICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gc3RhdGVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICB2YXIgc3RhdGUgPSBzdGF0ZXNbaV07CiAgICAgICAgdmFyIGtleSA9IHN0YXRlWzBdOwogICAgICAgIHZhciB2YWx1ZSA9IHN0YXRlWzFdOwoKICAgICAgICBzd2l0Y2ggKGtleSkgewogICAgICAgICAgY2FzZSAiTFciOgogICAgICAgICAgICB0aGlzLnNldExpbmVXaWR0aCh2YWx1ZSk7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgIkxDIjoKICAgICAgICAgICAgdGhpcy5zZXRMaW5lQ2FwKHZhbHVlKTsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAiTEoiOgogICAgICAgICAgICB0aGlzLnNldExpbmVKb2luKHZhbHVlKTsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAiTUwiOgogICAgICAgICAgICB0aGlzLnNldE1pdGVyTGltaXQodmFsdWUpOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlICJEIjoKICAgICAgICAgICAgdGhpcy5zZXREYXNoKHZhbHVlWzBdLCB2YWx1ZVsxXSk7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgIlJJIjoKICAgICAgICAgICAgdGhpcy5zZXRSZW5kZXJpbmdJbnRlbnQodmFsdWUpOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlICJGTCI6CiAgICAgICAgICAgIHRoaXMuc2V0RmxhdG5lc3ModmFsdWUpOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlICJGb250IjoKICAgICAgICAgICAgdGhpcy5zZXRGb250KHZhbHVlWzBdLCB2YWx1ZVsxXSk7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgIkNBIjoKICAgICAgICAgICAgdGhpcy5jdXJyZW50LnN0cm9rZUFscGhhID0gc3RhdGVbMV07CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgImNhIjoKICAgICAgICAgICAgdGhpcy5jdXJyZW50LmZpbGxBbHBoYSA9IHN0YXRlWzFdOwogICAgICAgICAgICB0aGlzLmN0eC5nbG9iYWxBbHBoYSA9IHN0YXRlWzFdOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlICJCTSI6CiAgICAgICAgICAgIHRoaXMuY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IHZhbHVlOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlICJTTWFzayI6CiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnQuYWN0aXZlU01hc2spIHsKICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0ZVN0YWNrLmxlbmd0aCA+IDAgJiYgdGhpcy5zdGF0ZVN0YWNrW3RoaXMuc3RhdGVTdGFjay5sZW5ndGggLSAxXS5hY3RpdmVTTWFzayA9PT0gdGhpcy5jdXJyZW50LmFjdGl2ZVNNYXNrKSB7CiAgICAgICAgICAgICAgICB0aGlzLnN1c3BlbmRTTWFza0dyb3VwKCk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHRoaXMuZW5kU01hc2tHcm91cCgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGhpcy5jdXJyZW50LmFjdGl2ZVNNYXNrID0gdmFsdWUgPyB0aGlzLnRlbXBTTWFzayA6IG51bGw7CgogICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50LmFjdGl2ZVNNYXNrKSB7CiAgICAgICAgICAgICAgdGhpcy5iZWdpblNNYXNrR3JvdXAoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGhpcy50ZW1wU01hc2sgPSBudWxsOwogICAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBiZWdpblNNYXNrR3JvdXA6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2JlZ2luU01hc2tHcm91cCgpIHsKICAgICAgdmFyIGFjdGl2ZVNNYXNrID0gdGhpcy5jdXJyZW50LmFjdGl2ZVNNYXNrOwogICAgICB2YXIgZHJhd25XaWR0aCA9IGFjdGl2ZVNNYXNrLmNhbnZhcy53aWR0aDsKICAgICAgdmFyIGRyYXduSGVpZ2h0ID0gYWN0aXZlU01hc2suY2FudmFzLmhlaWdodDsKICAgICAgdmFyIGNhY2hlSWQgPSAic21hc2tHcm91cEF0IiArIHRoaXMuZ3JvdXBMZXZlbDsKICAgICAgdmFyIHNjcmF0Y2hDYW52YXMgPSB0aGlzLmNhY2hlZENhbnZhc2VzLmdldENhbnZhcyhjYWNoZUlkLCBkcmF3bldpZHRoLCBkcmF3bkhlaWdodCwgdHJ1ZSk7CiAgICAgIHZhciBjdXJyZW50Q3R4ID0gdGhpcy5jdHg7CiAgICAgIHZhciBjdXJyZW50VHJhbnNmb3JtID0gY3VycmVudEN0eC5tb3pDdXJyZW50VHJhbnNmb3JtOwogICAgICB0aGlzLmN0eC5zYXZlKCk7CiAgICAgIHZhciBncm91cEN0eCA9IHNjcmF0Y2hDYW52YXMuY29udGV4dDsKICAgICAgZ3JvdXBDdHguc2NhbGUoMSAvIGFjdGl2ZVNNYXNrLnNjYWxlWCwgMSAvIGFjdGl2ZVNNYXNrLnNjYWxlWSk7CiAgICAgIGdyb3VwQ3R4LnRyYW5zbGF0ZSgtYWN0aXZlU01hc2sub2Zmc2V0WCwgLWFjdGl2ZVNNYXNrLm9mZnNldFkpOwogICAgICBncm91cEN0eC50cmFuc2Zvcm0uYXBwbHkoZ3JvdXBDdHgsIGN1cnJlbnRUcmFuc2Zvcm0pOwogICAgICBhY3RpdmVTTWFzay5zdGFydFRyYW5zZm9ybUludmVyc2UgPSBncm91cEN0eC5tb3pDdXJyZW50VHJhbnNmb3JtSW52ZXJzZTsKICAgICAgY29weUN0eFN0YXRlKGN1cnJlbnRDdHgsIGdyb3VwQ3R4KTsKICAgICAgdGhpcy5jdHggPSBncm91cEN0eDsKICAgICAgdGhpcy5zZXRHU3RhdGUoW1siQk0iLCAic291cmNlLW92ZXIiXSwgWyJjYSIsIDFdLCBbIkNBIiwgMV1dKTsKICAgICAgdGhpcy5ncm91cFN0YWNrLnB1c2goY3VycmVudEN0eCk7CiAgICAgIHRoaXMuZ3JvdXBMZXZlbCsrOwogICAgfSwKICAgIHN1c3BlbmRTTWFza0dyb3VwOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19lbmRTTWFza0dyb3VwKCkgewogICAgICB2YXIgZ3JvdXBDdHggPSB0aGlzLmN0eDsKICAgICAgdGhpcy5ncm91cExldmVsLS07CiAgICAgIHRoaXMuY3R4ID0gdGhpcy5ncm91cFN0YWNrLnBvcCgpOwogICAgICBjb21wb3NlU01hc2sodGhpcy5jdHgsIHRoaXMuY3VycmVudC5hY3RpdmVTTWFzaywgZ3JvdXBDdHgsIHRoaXMud2ViR0xDb250ZXh0KTsKICAgICAgdGhpcy5jdHgucmVzdG9yZSgpOwogICAgICB0aGlzLmN0eC5zYXZlKCk7CiAgICAgIGNvcHlDdHhTdGF0ZShncm91cEN0eCwgdGhpcy5jdHgpOwogICAgICB0aGlzLmN1cnJlbnQucmVzdW1lU01hc2tDdHggPSBncm91cEN0eDsKCiAgICAgIHZhciBkZWx0YVRyYW5zZm9ybSA9IF91dGlsLlV0aWwudHJhbnNmb3JtKHRoaXMuY3VycmVudC5hY3RpdmVTTWFzay5zdGFydFRyYW5zZm9ybUludmVyc2UsIGdyb3VwQ3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm0pOwoKICAgICAgdGhpcy5jdHgudHJhbnNmb3JtLmFwcGx5KHRoaXMuY3R4LCBkZWx0YVRyYW5zZm9ybSk7CiAgICAgIGdyb3VwQ3R4LnNhdmUoKTsKICAgICAgZ3JvdXBDdHguc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApOwogICAgICBncm91cEN0eC5jbGVhclJlY3QoMCwgMCwgZ3JvdXBDdHguY2FudmFzLndpZHRoLCBncm91cEN0eC5jYW52YXMuaGVpZ2h0KTsKICAgICAgZ3JvdXBDdHgucmVzdG9yZSgpOwogICAgfSwKICAgIHJlc3VtZVNNYXNrR3JvdXA6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2VuZFNNYXNrR3JvdXAoKSB7CiAgICAgIHZhciBncm91cEN0eCA9IHRoaXMuY3VycmVudC5yZXN1bWVTTWFza0N0eDsKICAgICAgdmFyIGN1cnJlbnRDdHggPSB0aGlzLmN0eDsKICAgICAgdGhpcy5jdHggPSBncm91cEN0eDsKICAgICAgdGhpcy5ncm91cFN0YWNrLnB1c2goY3VycmVudEN0eCk7CiAgICAgIHRoaXMuZ3JvdXBMZXZlbCsrOwogICAgfSwKICAgIGVuZFNNYXNrR3JvdXA6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2VuZFNNYXNrR3JvdXAoKSB7CiAgICAgIHZhciBncm91cEN0eCA9IHRoaXMuY3R4OwogICAgICB0aGlzLmdyb3VwTGV2ZWwtLTsKICAgICAgdGhpcy5jdHggPSB0aGlzLmdyb3VwU3RhY2sucG9wKCk7CiAgICAgIGNvbXBvc2VTTWFzayh0aGlzLmN0eCwgdGhpcy5jdXJyZW50LmFjdGl2ZVNNYXNrLCBncm91cEN0eCwgdGhpcy53ZWJHTENvbnRleHQpOwogICAgICB0aGlzLmN0eC5yZXN0b3JlKCk7CiAgICAgIGNvcHlDdHhTdGF0ZShncm91cEN0eCwgdGhpcy5jdHgpOwoKICAgICAgdmFyIGRlbHRhVHJhbnNmb3JtID0gX3V0aWwuVXRpbC50cmFuc2Zvcm0odGhpcy5jdXJyZW50LmFjdGl2ZVNNYXNrLnN0YXJ0VHJhbnNmb3JtSW52ZXJzZSwgZ3JvdXBDdHgubW96Q3VycmVudFRyYW5zZm9ybSk7CgogICAgICB0aGlzLmN0eC50cmFuc2Zvcm0uYXBwbHkodGhpcy5jdHgsIGRlbHRhVHJhbnNmb3JtKTsKICAgIH0sCiAgICBzYXZlOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19zYXZlKCkgewogICAgICB0aGlzLmN0eC5zYXZlKCk7CiAgICAgIHZhciBvbGQgPSB0aGlzLmN1cnJlbnQ7CiAgICAgIHRoaXMuc3RhdGVTdGFjay5wdXNoKG9sZCk7CiAgICAgIHRoaXMuY3VycmVudCA9IG9sZC5jbG9uZSgpOwogICAgICB0aGlzLmN1cnJlbnQucmVzdW1lU01hc2tDdHggPSBudWxsOwogICAgfSwKICAgIHJlc3RvcmU6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX3Jlc3RvcmUoKSB7CiAgICAgIGlmICh0aGlzLmN1cnJlbnQucmVzdW1lU01hc2tDdHgpIHsKICAgICAgICB0aGlzLnJlc3VtZVNNYXNrR3JvdXAoKTsKICAgICAgfQoKICAgICAgaWYgKHRoaXMuY3VycmVudC5hY3RpdmVTTWFzayAhPT0gbnVsbCAmJiAodGhpcy5zdGF0ZVN0YWNrLmxlbmd0aCA9PT0gMCB8fCB0aGlzLnN0YXRlU3RhY2tbdGhpcy5zdGF0ZVN0YWNrLmxlbmd0aCAtIDFdLmFjdGl2ZVNNYXNrICE9PSB0aGlzLmN1cnJlbnQuYWN0aXZlU01hc2spKSB7CiAgICAgICAgdGhpcy5lbmRTTWFza0dyb3VwKCk7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLnN0YXRlU3RhY2subGVuZ3RoICE9PSAwKSB7CiAgICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5zdGF0ZVN0YWNrLnBvcCgpOwogICAgICAgIHRoaXMuY3R4LnJlc3RvcmUoKTsKICAgICAgICB0aGlzLnBlbmRpbmdDbGlwID0gbnVsbDsKICAgICAgICB0aGlzLl9jYWNoZWRHZXRTaW5nbGVQaXhlbFdpZHRoID0gbnVsbDsKICAgICAgfQogICAgfSwKICAgIHRyYW5zZm9ybTogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfdHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYpIHsKICAgICAgdGhpcy5jdHgudHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYpOwogICAgICB0aGlzLl9jYWNoZWRHZXRTaW5nbGVQaXhlbFdpZHRoID0gbnVsbDsKICAgIH0sCiAgICBjb25zdHJ1Y3RQYXRoOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19jb25zdHJ1Y3RQYXRoKG9wcywgYXJncykgewogICAgICB2YXIgY3R4ID0gdGhpcy5jdHg7CiAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5jdXJyZW50OwogICAgICB2YXIgeCA9IGN1cnJlbnQueCwKICAgICAgICAgIHkgPSBjdXJyZW50Lnk7CgogICAgICBmb3IgKHZhciBpID0gMCwgaiA9IDAsIGlpID0gb3BzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICBzd2l0Y2ggKG9wc1tpXSB8IDApIHsKICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnJlY3RhbmdsZToKICAgICAgICAgICAgeCA9IGFyZ3NbaisrXTsKICAgICAgICAgICAgeSA9IGFyZ3NbaisrXTsKICAgICAgICAgICAgdmFyIHdpZHRoID0gYXJnc1tqKytdOwogICAgICAgICAgICB2YXIgaGVpZ2h0ID0gYXJnc1tqKytdOwoKICAgICAgICAgICAgaWYgKHdpZHRoID09PSAwKSB7CiAgICAgICAgICAgICAgd2lkdGggPSB0aGlzLmdldFNpbmdsZVBpeGVsV2lkdGgoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGhlaWdodCA9PT0gMCkgewogICAgICAgICAgICAgIGhlaWdodCA9IHRoaXMuZ2V0U2luZ2xlUGl4ZWxXaWR0aCgpOwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgeHcgPSB4ICsgd2lkdGg7CiAgICAgICAgICAgIHZhciB5aCA9IHkgKyBoZWlnaHQ7CiAgICAgICAgICAgIHRoaXMuY3R4Lm1vdmVUbyh4LCB5KTsKICAgICAgICAgICAgdGhpcy5jdHgubGluZVRvKHh3LCB5KTsKICAgICAgICAgICAgdGhpcy5jdHgubGluZVRvKHh3LCB5aCk7CiAgICAgICAgICAgIHRoaXMuY3R4LmxpbmVUbyh4LCB5aCk7CiAgICAgICAgICAgIHRoaXMuY3R4LmxpbmVUbyh4LCB5KTsKICAgICAgICAgICAgdGhpcy5jdHguY2xvc2VQYXRoKCk7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLm1vdmVUbzoKICAgICAgICAgICAgeCA9IGFyZ3NbaisrXTsKICAgICAgICAgICAgeSA9IGFyZ3NbaisrXTsKICAgICAgICAgICAgY3R4Lm1vdmVUbyh4LCB5KTsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSBfdXRpbC5PUFMubGluZVRvOgogICAgICAgICAgICB4ID0gYXJnc1tqKytdOwogICAgICAgICAgICB5ID0gYXJnc1tqKytdOwogICAgICAgICAgICBjdHgubGluZVRvKHgsIHkpOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlIF91dGlsLk9QUy5jdXJ2ZVRvOgogICAgICAgICAgICB4ID0gYXJnc1tqICsgNF07CiAgICAgICAgICAgIHkgPSBhcmdzW2ogKyA1XTsKICAgICAgICAgICAgY3R4LmJlemllckN1cnZlVG8oYXJnc1tqXSwgYXJnc1tqICsgMV0sIGFyZ3NbaiArIDJdLCBhcmdzW2ogKyAzXSwgeCwgeSk7CiAgICAgICAgICAgIGogKz0gNjsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY3VydmVUbzI6CiAgICAgICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKHgsIHksIGFyZ3Nbal0sIGFyZ3NbaiArIDFdLCBhcmdzW2ogKyAyXSwgYXJnc1tqICsgM10pOwogICAgICAgICAgICB4ID0gYXJnc1tqICsgMl07CiAgICAgICAgICAgIHkgPSBhcmdzW2ogKyAzXTsKICAgICAgICAgICAgaiArPSA0OwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlIF91dGlsLk9QUy5jdXJ2ZVRvMzoKICAgICAgICAgICAgeCA9IGFyZ3NbaiArIDJdOwogICAgICAgICAgICB5ID0gYXJnc1tqICsgM107CiAgICAgICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKGFyZ3Nbal0sIGFyZ3NbaiArIDFdLCB4LCB5LCB4LCB5KTsKICAgICAgICAgICAgaiArPSA0OwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlIF91dGlsLk9QUy5jbG9zZVBhdGg6CiAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CgogICAgICBjdXJyZW50LnNldEN1cnJlbnRQb2ludCh4LCB5KTsKICAgIH0sCiAgICBjbG9zZVBhdGg6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2Nsb3NlUGF0aCgpIHsKICAgICAgdGhpcy5jdHguY2xvc2VQYXRoKCk7CiAgICB9LAogICAgc3Ryb2tlOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19zdHJva2UoY29uc3VtZVBhdGgpIHsKICAgICAgY29uc3VtZVBhdGggPSB0eXBlb2YgY29uc3VtZVBhdGggIT09ICJ1bmRlZmluZWQiID8gY29uc3VtZVBhdGggOiB0cnVlOwogICAgICB2YXIgY3R4ID0gdGhpcy5jdHg7CiAgICAgIHZhciBzdHJva2VDb2xvciA9IHRoaXMuY3VycmVudC5zdHJva2VDb2xvcjsKICAgICAgY3R4Lmdsb2JhbEFscGhhID0gdGhpcy5jdXJyZW50LnN0cm9rZUFscGhhOwoKICAgICAgaWYgKHN0cm9rZUNvbG9yICYmIHN0cm9rZUNvbG9yLmhhc093blByb3BlcnR5KCJ0eXBlIikgJiYgc3Ryb2tlQ29sb3IudHlwZSA9PT0gIlBhdHRlcm4iKSB7CiAgICAgICAgY3R4LnNhdmUoKTsKICAgICAgICB2YXIgdHJhbnNmb3JtID0gY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm07CgogICAgICAgIHZhciBzY2FsZSA9IF91dGlsLlV0aWwuc2luZ3VsYXJWYWx1ZURlY29tcG9zZTJkU2NhbGUodHJhbnNmb3JtKVswXTsKCiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gc3Ryb2tlQ29sb3IuZ2V0UGF0dGVybihjdHgsIHRoaXMpOwogICAgICAgIGN0eC5saW5lV2lkdGggPSBNYXRoLm1heCh0aGlzLmdldFNpbmdsZVBpeGVsV2lkdGgoKSAqIE1JTl9XSURUSF9GQUNUT1IsIHRoaXMuY3VycmVudC5saW5lV2lkdGggKiBzY2FsZSk7CiAgICAgICAgY3R4LnN0cm9rZSgpOwogICAgICAgIGN0eC5yZXN0b3JlKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IE1hdGgubWF4KHRoaXMuZ2V0U2luZ2xlUGl4ZWxXaWR0aCgpICogTUlOX1dJRFRIX0ZBQ1RPUiwgdGhpcy5jdXJyZW50LmxpbmVXaWR0aCk7CiAgICAgICAgY3R4LnN0cm9rZSgpOwogICAgICB9CgogICAgICBpZiAoY29uc3VtZVBhdGgpIHsKICAgICAgICB0aGlzLmNvbnN1bWVQYXRoKCk7CiAgICAgIH0KCiAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IHRoaXMuY3VycmVudC5maWxsQWxwaGE7CiAgICB9LAogICAgY2xvc2VTdHJva2U6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2Nsb3NlU3Ryb2tlKCkgewogICAgICB0aGlzLmNsb3NlUGF0aCgpOwogICAgICB0aGlzLnN0cm9rZSgpOwogICAgfSwKICAgIGZpbGw6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2ZpbGwoY29uc3VtZVBhdGgpIHsKICAgICAgY29uc3VtZVBhdGggPSB0eXBlb2YgY29uc3VtZVBhdGggIT09ICJ1bmRlZmluZWQiID8gY29uc3VtZVBhdGggOiB0cnVlOwogICAgICB2YXIgY3R4ID0gdGhpcy5jdHg7CiAgICAgIHZhciBmaWxsQ29sb3IgPSB0aGlzLmN1cnJlbnQuZmlsbENvbG9yOwogICAgICB2YXIgaXNQYXR0ZXJuRmlsbCA9IHRoaXMuY3VycmVudC5wYXR0ZXJuRmlsbDsKICAgICAgdmFyIG5lZWRSZXN0b3JlID0gZmFsc2U7CgogICAgICBpZiAoaXNQYXR0ZXJuRmlsbCkgewogICAgICAgIGN0eC5zYXZlKCk7CgogICAgICAgIGlmICh0aGlzLmJhc2VUcmFuc2Zvcm0pIHsKICAgICAgICAgIGN0eC5zZXRUcmFuc2Zvcm0uYXBwbHkoY3R4LCB0aGlzLmJhc2VUcmFuc2Zvcm0pOwogICAgICAgIH0KCiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGZpbGxDb2xvci5nZXRQYXR0ZXJuKGN0eCwgdGhpcyk7CiAgICAgICAgbmVlZFJlc3RvcmUgPSB0cnVlOwogICAgICB9CgogICAgICBpZiAodGhpcy5wZW5kaW5nRU9GaWxsKSB7CiAgICAgICAgY3R4LmZpbGwoImV2ZW5vZGQiKTsKICAgICAgICB0aGlzLnBlbmRpbmdFT0ZpbGwgPSBmYWxzZTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjdHguZmlsbCgpOwogICAgICB9CgogICAgICBpZiAobmVlZFJlc3RvcmUpIHsKICAgICAgICBjdHgucmVzdG9yZSgpOwogICAgICB9CgogICAgICBpZiAoY29uc3VtZVBhdGgpIHsKICAgICAgICB0aGlzLmNvbnN1bWVQYXRoKCk7CiAgICAgIH0KICAgIH0sCiAgICBlb0ZpbGw6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2VvRmlsbCgpIHsKICAgICAgdGhpcy5wZW5kaW5nRU9GaWxsID0gdHJ1ZTsKICAgICAgdGhpcy5maWxsKCk7CiAgICB9LAogICAgZmlsbFN0cm9rZTogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfZmlsbFN0cm9rZSgpIHsKICAgICAgdGhpcy5maWxsKGZhbHNlKTsKICAgICAgdGhpcy5zdHJva2UoZmFsc2UpOwogICAgICB0aGlzLmNvbnN1bWVQYXRoKCk7CiAgICB9LAogICAgZW9GaWxsU3Ryb2tlOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19lb0ZpbGxTdHJva2UoKSB7CiAgICAgIHRoaXMucGVuZGluZ0VPRmlsbCA9IHRydWU7CiAgICAgIHRoaXMuZmlsbFN0cm9rZSgpOwogICAgfSwKICAgIGNsb3NlRmlsbFN0cm9rZTogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfY2xvc2VGaWxsU3Ryb2tlKCkgewogICAgICB0aGlzLmNsb3NlUGF0aCgpOwogICAgICB0aGlzLmZpbGxTdHJva2UoKTsKICAgIH0sCiAgICBjbG9zZUVPRmlsbFN0cm9rZTogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfY2xvc2VFT0ZpbGxTdHJva2UoKSB7CiAgICAgIHRoaXMucGVuZGluZ0VPRmlsbCA9IHRydWU7CiAgICAgIHRoaXMuY2xvc2VQYXRoKCk7CiAgICAgIHRoaXMuZmlsbFN0cm9rZSgpOwogICAgfSwKICAgIGVuZFBhdGg6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2VuZFBhdGgoKSB7CiAgICAgIHRoaXMuY29uc3VtZVBhdGgoKTsKICAgIH0sCiAgICBjbGlwOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19jbGlwKCkgewogICAgICB0aGlzLnBlbmRpbmdDbGlwID0gTk9STUFMX0NMSVA7CiAgICB9LAogICAgZW9DbGlwOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19lb0NsaXAoKSB7CiAgICAgIHRoaXMucGVuZGluZ0NsaXAgPSBFT19DTElQOwogICAgfSwKICAgIGJlZ2luVGV4dDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfYmVnaW5UZXh0KCkgewogICAgICB0aGlzLmN1cnJlbnQudGV4dE1hdHJpeCA9IF91dGlsLklERU5USVRZX01BVFJJWDsKICAgICAgdGhpcy5jdXJyZW50LnRleHRNYXRyaXhTY2FsZSA9IDE7CiAgICAgIHRoaXMuY3VycmVudC54ID0gdGhpcy5jdXJyZW50LmxpbmVYID0gMDsKICAgICAgdGhpcy5jdXJyZW50LnkgPSB0aGlzLmN1cnJlbnQubGluZVkgPSAwOwogICAgfSwKICAgIGVuZFRleHQ6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2VuZFRleHQoKSB7CiAgICAgIHZhciBwYXRocyA9IHRoaXMucGVuZGluZ1RleHRQYXRoczsKICAgICAgdmFyIGN0eCA9IHRoaXMuY3R4OwoKICAgICAgaWYgKHBhdGhzID09PSB1bmRlZmluZWQpIHsKICAgICAgICBjdHguYmVnaW5QYXRoKCk7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBjdHguc2F2ZSgpOwogICAgICBjdHguYmVnaW5QYXRoKCk7CgogICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGhzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdmFyIHBhdGggPSBwYXRoc1tpXTsKICAgICAgICBjdHguc2V0VHJhbnNmb3JtLmFwcGx5KGN0eCwgcGF0aC50cmFuc2Zvcm0pOwogICAgICAgIGN0eC50cmFuc2xhdGUocGF0aC54LCBwYXRoLnkpOwogICAgICAgIHBhdGguYWRkVG9QYXRoKGN0eCwgcGF0aC5mb250U2l6ZSk7CiAgICAgIH0KCiAgICAgIGN0eC5yZXN0b3JlKCk7CiAgICAgIGN0eC5jbGlwKCk7CiAgICAgIGN0eC5iZWdpblBhdGgoKTsKICAgICAgZGVsZXRlIHRoaXMucGVuZGluZ1RleHRQYXRoczsKICAgIH0sCiAgICBzZXRDaGFyU3BhY2luZzogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3Nfc2V0Q2hhclNwYWNpbmcoc3BhY2luZykgewogICAgICB0aGlzLmN1cnJlbnQuY2hhclNwYWNpbmcgPSBzcGFjaW5nOwogICAgfSwKICAgIHNldFdvcmRTcGFjaW5nOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19zZXRXb3JkU3BhY2luZyhzcGFjaW5nKSB7CiAgICAgIHRoaXMuY3VycmVudC53b3JkU3BhY2luZyA9IHNwYWNpbmc7CiAgICB9LAogICAgc2V0SFNjYWxlOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19zZXRIU2NhbGUoc2NhbGUpIHsKICAgICAgdGhpcy5jdXJyZW50LnRleHRIU2NhbGUgPSBzY2FsZSAvIDEwMDsKICAgIH0sCiAgICBzZXRMZWFkaW5nOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19zZXRMZWFkaW5nKGxlYWRpbmcpIHsKICAgICAgdGhpcy5jdXJyZW50LmxlYWRpbmcgPSAtbGVhZGluZzsKICAgIH0sCiAgICBzZXRGb250OiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19zZXRGb250KGZvbnRSZWZOYW1lLCBzaXplKSB7CiAgICAgIHZhciBmb250T2JqID0gdGhpcy5jb21tb25PYmpzLmdldChmb250UmVmTmFtZSk7CiAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5jdXJyZW50OwoKICAgICAgaWYgKCFmb250T2JqKSB7CiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJDYW4ndCBmaW5kIGZvbnQgZm9yICIuY29uY2F0KGZvbnRSZWZOYW1lKSk7CiAgICAgIH0KCiAgICAgIGN1cnJlbnQuZm9udE1hdHJpeCA9IGZvbnRPYmouZm9udE1hdHJpeCA/IGZvbnRPYmouZm9udE1hdHJpeCA6IF91dGlsLkZPTlRfSURFTlRJVFlfTUFUUklYOwoKICAgICAgaWYgKGN1cnJlbnQuZm9udE1hdHJpeFswXSA9PT0gMCB8fCBjdXJyZW50LmZvbnRNYXRyaXhbM10gPT09IDApIHsKICAgICAgICAoMCwgX3V0aWwud2FybikoIkludmFsaWQgZm9udCBtYXRyaXggZm9yIGZvbnQgIiArIGZvbnRSZWZOYW1lKTsKICAgICAgfQoKICAgICAgaWYgKHNpemUgPCAwKSB7CiAgICAgICAgc2l6ZSA9IC1zaXplOwogICAgICAgIGN1cnJlbnQuZm9udERpcmVjdGlvbiA9IC0xOwogICAgICB9IGVsc2UgewogICAgICAgIGN1cnJlbnQuZm9udERpcmVjdGlvbiA9IDE7CiAgICAgIH0KCiAgICAgIHRoaXMuY3VycmVudC5mb250ID0gZm9udE9iajsKICAgICAgdGhpcy5jdXJyZW50LmZvbnRTaXplID0gc2l6ZTsKCiAgICAgIGlmIChmb250T2JqLmlzVHlwZTNGb250KSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgbmFtZSA9IGZvbnRPYmoubG9hZGVkTmFtZSB8fCAic2Fucy1zZXJpZiI7CiAgICAgIHZhciBib2xkID0gIm5vcm1hbCI7CgogICAgICBpZiAoZm9udE9iai5ibGFjaykgewogICAgICAgIGJvbGQgPSAiOTAwIjsKICAgICAgfSBlbHNlIGlmIChmb250T2JqLmJvbGQpIHsKICAgICAgICBib2xkID0gImJvbGQiOwogICAgICB9CgogICAgICB2YXIgaXRhbGljID0gZm9udE9iai5pdGFsaWMgPyAiaXRhbGljIiA6ICJub3JtYWwiOwogICAgICB2YXIgdHlwZWZhY2UgPSAiXCIiLmNvbmNhdChuYW1lLCAiXCIsICIpLmNvbmNhdChmb250T2JqLmZhbGxiYWNrTmFtZSk7CiAgICAgIHZhciBicm93c2VyRm9udFNpemUgPSBzaXplOwoKICAgICAgaWYgKHNpemUgPCBNSU5fRk9OVF9TSVpFKSB7CiAgICAgICAgYnJvd3NlckZvbnRTaXplID0gTUlOX0ZPTlRfU0laRTsKICAgICAgfSBlbHNlIGlmIChzaXplID4gTUFYX0ZPTlRfU0laRSkgewogICAgICAgIGJyb3dzZXJGb250U2l6ZSA9IE1BWF9GT05UX1NJWkU7CiAgICAgIH0KCiAgICAgIHRoaXMuY3VycmVudC5mb250U2l6ZVNjYWxlID0gc2l6ZSAvIGJyb3dzZXJGb250U2l6ZTsKICAgICAgdGhpcy5jdHguZm9udCA9ICIiLmNvbmNhdChpdGFsaWMsICIgIikuY29uY2F0KGJvbGQsICIgIikuY29uY2F0KGJyb3dzZXJGb250U2l6ZSwgInB4ICIpLmNvbmNhdCh0eXBlZmFjZSk7CiAgICB9LAogICAgc2V0VGV4dFJlbmRlcmluZ01vZGU6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX3NldFRleHRSZW5kZXJpbmdNb2RlKG1vZGUpIHsKICAgICAgdGhpcy5jdXJyZW50LnRleHRSZW5kZXJpbmdNb2RlID0gbW9kZTsKICAgIH0sCiAgICBzZXRUZXh0UmlzZTogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3Nfc2V0VGV4dFJpc2UocmlzZSkgewogICAgICB0aGlzLmN1cnJlbnQudGV4dFJpc2UgPSByaXNlOwogICAgfSwKICAgIG1vdmVUZXh0OiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19tb3ZlVGV4dCh4LCB5KSB7CiAgICAgIHRoaXMuY3VycmVudC54ID0gdGhpcy5jdXJyZW50LmxpbmVYICs9IHg7CiAgICAgIHRoaXMuY3VycmVudC55ID0gdGhpcy5jdXJyZW50LmxpbmVZICs9IHk7CiAgICB9LAogICAgc2V0TGVhZGluZ01vdmVUZXh0OiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19zZXRMZWFkaW5nTW92ZVRleHQoeCwgeSkgewogICAgICB0aGlzLnNldExlYWRpbmcoLXkpOwogICAgICB0aGlzLm1vdmVUZXh0KHgsIHkpOwogICAgfSwKICAgIHNldFRleHRNYXRyaXg6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX3NldFRleHRNYXRyaXgoYSwgYiwgYywgZCwgZSwgZikgewogICAgICB0aGlzLmN1cnJlbnQudGV4dE1hdHJpeCA9IFthLCBiLCBjLCBkLCBlLCBmXTsKICAgICAgdGhpcy5jdXJyZW50LnRleHRNYXRyaXhTY2FsZSA9IE1hdGguc3FydChhICogYSArIGIgKiBiKTsKICAgICAgdGhpcy5jdXJyZW50LnggPSB0aGlzLmN1cnJlbnQubGluZVggPSAwOwogICAgICB0aGlzLmN1cnJlbnQueSA9IHRoaXMuY3VycmVudC5saW5lWSA9IDA7CiAgICB9LAogICAgbmV4dExpbmU6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX25leHRMaW5lKCkgewogICAgICB0aGlzLm1vdmVUZXh0KDAsIHRoaXMuY3VycmVudC5sZWFkaW5nKTsKICAgIH0sCiAgICBwYWludENoYXI6IGZ1bmN0aW9uIHBhaW50Q2hhcihjaGFyYWN0ZXIsIHgsIHksIHBhdHRlcm5UcmFuc2Zvcm0pIHsKICAgICAgdmFyIGN0eCA9IHRoaXMuY3R4OwogICAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDsKICAgICAgdmFyIGZvbnQgPSBjdXJyZW50LmZvbnQ7CiAgICAgIHZhciB0ZXh0UmVuZGVyaW5nTW9kZSA9IGN1cnJlbnQudGV4dFJlbmRlcmluZ01vZGU7CiAgICAgIHZhciBmb250U2l6ZSA9IGN1cnJlbnQuZm9udFNpemUgLyBjdXJyZW50LmZvbnRTaXplU2NhbGU7CiAgICAgIHZhciBmaWxsU3Ryb2tlTW9kZSA9IHRleHRSZW5kZXJpbmdNb2RlICYgX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTF9TVFJPS0VfTUFTSzsKICAgICAgdmFyIGlzQWRkVG9QYXRoU2V0ID0gISEodGV4dFJlbmRlcmluZ01vZGUgJiBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5BRERfVE9fUEFUSF9GTEFHKTsKICAgICAgdmFyIHBhdHRlcm5GaWxsID0gY3VycmVudC5wYXR0ZXJuRmlsbCAmJiAhZm9udC5taXNzaW5nRmlsZTsKICAgICAgdmFyIGFkZFRvUGF0aDsKCiAgICAgIGlmIChmb250LmRpc2FibGVGb250RmFjZSB8fCBpc0FkZFRvUGF0aFNldCB8fCBwYXR0ZXJuRmlsbCkgewogICAgICAgIGFkZFRvUGF0aCA9IGZvbnQuZ2V0UGF0aEdlbmVyYXRvcih0aGlzLmNvbW1vbk9ianMsIGNoYXJhY3Rlcik7CiAgICAgIH0KCiAgICAgIGlmIChmb250LmRpc2FibGVGb250RmFjZSB8fCBwYXR0ZXJuRmlsbCkgewogICAgICAgIGN0eC5zYXZlKCk7CiAgICAgICAgY3R4LnRyYW5zbGF0ZSh4LCB5KTsKICAgICAgICBjdHguYmVnaW5QYXRoKCk7CiAgICAgICAgYWRkVG9QYXRoKGN0eCwgZm9udFNpemUpOwoKICAgICAgICBpZiAocGF0dGVyblRyYW5zZm9ybSkgewogICAgICAgICAgY3R4LnNldFRyYW5zZm9ybS5hcHBseShjdHgsIHBhdHRlcm5UcmFuc2Zvcm0pOwogICAgICAgIH0KCiAgICAgICAgaWYgKGZpbGxTdHJva2VNb2RlID09PSBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5GSUxMIHx8IGZpbGxTdHJva2VNb2RlID09PSBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5GSUxMX1NUUk9LRSkgewogICAgICAgICAgY3R4LmZpbGwoKTsKICAgICAgICB9CgogICAgICAgIGlmIChmaWxsU3Ryb2tlTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuU1RST0tFIHx8IGZpbGxTdHJva2VNb2RlID09PSBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5GSUxMX1NUUk9LRSkgewogICAgICAgICAgY3R4LnN0cm9rZSgpOwogICAgICAgIH0KCiAgICAgICAgY3R4LnJlc3RvcmUoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAoZmlsbFN0cm9rZU1vZGUgPT09IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTEwgfHwgZmlsbFN0cm9rZU1vZGUgPT09IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTExfU1RST0tFKSB7CiAgICAgICAgICBjdHguZmlsbFRleHQoY2hhcmFjdGVyLCB4LCB5KTsKICAgICAgICB9CgogICAgICAgIGlmIChmaWxsU3Ryb2tlTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuU1RST0tFIHx8IGZpbGxTdHJva2VNb2RlID09PSBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5GSUxMX1NUUk9LRSkgewogICAgICAgICAgY3R4LnN0cm9rZVRleHQoY2hhcmFjdGVyLCB4LCB5KTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmIChpc0FkZFRvUGF0aFNldCkgewogICAgICAgIHZhciBwYXRocyA9IHRoaXMucGVuZGluZ1RleHRQYXRocyB8fCAodGhpcy5wZW5kaW5nVGV4dFBhdGhzID0gW10pOwogICAgICAgIHBhdGhzLnB1c2goewogICAgICAgICAgdHJhbnNmb3JtOiBjdHgubW96Q3VycmVudFRyYW5zZm9ybSwKICAgICAgICAgIHg6IHgsCiAgICAgICAgICB5OiB5LAogICAgICAgICAgZm9udFNpemU6IGZvbnRTaXplLAogICAgICAgICAgYWRkVG9QYXRoOiBhZGRUb1BhdGgKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKCiAgICBnZXQgaXNGb250U3VicGl4ZWxBQUVuYWJsZWQoKSB7CiAgICAgIHZhciBfdGhpcyRjYWNoZWRDYW52YXNlcyQgPSB0aGlzLmNhY2hlZENhbnZhc2VzLmdldENhbnZhcygiaXNGb250U3VicGl4ZWxBQUVuYWJsZWQiLCAxMCwgMTApLAogICAgICAgICAgY3R4ID0gX3RoaXMkY2FjaGVkQ2FudmFzZXMkLmNvbnRleHQ7CgogICAgICBjdHguc2NhbGUoMS41LCAxKTsKICAgICAgY3R4LmZpbGxUZXh0KCJJIiwgMCwgMTApOwogICAgICB2YXIgZGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgMTAsIDEwKS5kYXRhOwogICAgICB2YXIgZW5hYmxlZCA9IGZhbHNlOwoKICAgICAgZm9yICh2YXIgaSA9IDM7IGkgPCBkYXRhLmxlbmd0aDsgaSArPSA0KSB7CiAgICAgICAgaWYgKGRhdGFbaV0gPiAwICYmIGRhdGFbaV0gPCAyNTUpIHsKICAgICAgICAgIGVuYWJsZWQgPSB0cnVlOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gKDAsIF91dGlsLnNoYWRvdykodGhpcywgImlzRm9udFN1YnBpeGVsQUFFbmFibGVkIiwgZW5hYmxlZCk7CiAgICB9LAoKICAgIHNob3dUZXh0OiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19zaG93VGV4dChnbHlwaHMpIHsKICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7CiAgICAgIHZhciBmb250ID0gY3VycmVudC5mb250OwoKICAgICAgaWYgKGZvbnQuaXNUeXBlM0ZvbnQpIHsKICAgICAgICByZXR1cm4gdGhpcy5zaG93VHlwZTNUZXh0KGdseXBocyk7CiAgICAgIH0KCiAgICAgIHZhciBmb250U2l6ZSA9IGN1cnJlbnQuZm9udFNpemU7CgogICAgICBpZiAoZm9udFNpemUgPT09IDApIHsKICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICB9CgogICAgICB2YXIgY3R4ID0gdGhpcy5jdHg7CiAgICAgIHZhciBmb250U2l6ZVNjYWxlID0gY3VycmVudC5mb250U2l6ZVNjYWxlOwogICAgICB2YXIgY2hhclNwYWNpbmcgPSBjdXJyZW50LmNoYXJTcGFjaW5nOwogICAgICB2YXIgd29yZFNwYWNpbmcgPSBjdXJyZW50LndvcmRTcGFjaW5nOwogICAgICB2YXIgZm9udERpcmVjdGlvbiA9IGN1cnJlbnQuZm9udERpcmVjdGlvbjsKICAgICAgdmFyIHRleHRIU2NhbGUgPSBjdXJyZW50LnRleHRIU2NhbGUgKiBmb250RGlyZWN0aW9uOwogICAgICB2YXIgZ2x5cGhzTGVuZ3RoID0gZ2x5cGhzLmxlbmd0aDsKICAgICAgdmFyIHZlcnRpY2FsID0gZm9udC52ZXJ0aWNhbDsKICAgICAgdmFyIHNwYWNpbmdEaXIgPSB2ZXJ0aWNhbCA/IDEgOiAtMTsKICAgICAgdmFyIGRlZmF1bHRWTWV0cmljcyA9IGZvbnQuZGVmYXVsdFZNZXRyaWNzOwogICAgICB2YXIgd2lkdGhBZHZhbmNlU2NhbGUgPSBmb250U2l6ZSAqIGN1cnJlbnQuZm9udE1hdHJpeFswXTsKICAgICAgdmFyIHNpbXBsZUZpbGxUZXh0ID0gY3VycmVudC50ZXh0UmVuZGVyaW5nTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTCAmJiAhZm9udC5kaXNhYmxlRm9udEZhY2UgJiYgIWN1cnJlbnQucGF0dGVybkZpbGw7CiAgICAgIGN0eC5zYXZlKCk7CiAgICAgIHZhciBwYXR0ZXJuVHJhbnNmb3JtOwoKICAgICAgaWYgKGN1cnJlbnQucGF0dGVybkZpbGwpIHsKICAgICAgICBjdHguc2F2ZSgpOwogICAgICAgIHZhciBwYXR0ZXJuID0gY3VycmVudC5maWxsQ29sb3IuZ2V0UGF0dGVybihjdHgsIHRoaXMpOwogICAgICAgIHBhdHRlcm5UcmFuc2Zvcm0gPSBjdHgubW96Q3VycmVudFRyYW5zZm9ybTsKICAgICAgICBjdHgucmVzdG9yZSgpOwogICAgICAgIGN0eC5maWxsU3R5bGUgPSBwYXR0ZXJuOwogICAgICB9CgogICAgICBjdHgudHJhbnNmb3JtLmFwcGx5KGN0eCwgY3VycmVudC50ZXh0TWF0cml4KTsKICAgICAgY3R4LnRyYW5zbGF0ZShjdXJyZW50LngsIGN1cnJlbnQueSArIGN1cnJlbnQudGV4dFJpc2UpOwoKICAgICAgaWYgKGZvbnREaXJlY3Rpb24gPiAwKSB7CiAgICAgICAgY3R4LnNjYWxlKHRleHRIU2NhbGUsIC0xKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjdHguc2NhbGUodGV4dEhTY2FsZSwgMSk7CiAgICAgIH0KCiAgICAgIHZhciBsaW5lV2lkdGggPSBjdXJyZW50LmxpbmVXaWR0aDsKICAgICAgdmFyIHNjYWxlID0gY3VycmVudC50ZXh0TWF0cml4U2NhbGU7CgogICAgICBpZiAoc2NhbGUgPT09IDAgfHwgbGluZVdpZHRoID09PSAwKSB7CiAgICAgICAgdmFyIGZpbGxTdHJva2VNb2RlID0gY3VycmVudC50ZXh0UmVuZGVyaW5nTW9kZSAmIF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTExfU1RST0tFX01BU0s7CgogICAgICAgIGlmIChmaWxsU3Ryb2tlTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuU1RST0tFIHx8IGZpbGxTdHJva2VNb2RlID09PSBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5GSUxMX1NUUk9LRSkgewogICAgICAgICAgdGhpcy5fY2FjaGVkR2V0U2luZ2xlUGl4ZWxXaWR0aCA9IG51bGw7CiAgICAgICAgICBsaW5lV2lkdGggPSB0aGlzLmdldFNpbmdsZVBpeGVsV2lkdGgoKSAqIE1JTl9XSURUSF9GQUNUT1I7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIGxpbmVXaWR0aCAvPSBzY2FsZTsKICAgICAgfQoKICAgICAgaWYgKGZvbnRTaXplU2NhbGUgIT09IDEuMCkgewogICAgICAgIGN0eC5zY2FsZShmb250U2l6ZVNjYWxlLCBmb250U2l6ZVNjYWxlKTsKICAgICAgICBsaW5lV2lkdGggLz0gZm9udFNpemVTY2FsZTsKICAgICAgfQoKICAgICAgY3R4LmxpbmVXaWR0aCA9IGxpbmVXaWR0aDsKICAgICAgdmFyIHggPSAwLAogICAgICAgICAgaTsKCiAgICAgIGZvciAoaSA9IDA7IGkgPCBnbHlwaHNMZW5ndGg7ICsraSkgewogICAgICAgIHZhciBnbHlwaCA9IGdseXBoc1tpXTsKCiAgICAgICAgaWYgKCgwLCBfdXRpbC5pc051bSkoZ2x5cGgpKSB7CiAgICAgICAgICB4ICs9IHNwYWNpbmdEaXIgKiBnbHlwaCAqIGZvbnRTaXplIC8gMTAwMDsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KCiAgICAgICAgdmFyIHJlc3RvcmVOZWVkZWQgPSBmYWxzZTsKICAgICAgICB2YXIgc3BhY2luZyA9IChnbHlwaC5pc1NwYWNlID8gd29yZFNwYWNpbmcgOiAwKSArIGNoYXJTcGFjaW5nOwogICAgICAgIHZhciBjaGFyYWN0ZXIgPSBnbHlwaC5mb250Q2hhcjsKICAgICAgICB2YXIgYWNjZW50ID0gZ2x5cGguYWNjZW50OwogICAgICAgIHZhciBzY2FsZWRYLCBzY2FsZWRZLCBzY2FsZWRBY2NlbnRYLCBzY2FsZWRBY2NlbnRZOwogICAgICAgIHZhciB3aWR0aCA9IGdseXBoLndpZHRoOwoKICAgICAgICBpZiAodmVydGljYWwpIHsKICAgICAgICAgIHZhciB2bWV0cmljLCB2eCwgdnk7CiAgICAgICAgICB2bWV0cmljID0gZ2x5cGgudm1ldHJpYyB8fCBkZWZhdWx0Vk1ldHJpY3M7CiAgICAgICAgICB2eCA9IGdseXBoLnZtZXRyaWMgPyB2bWV0cmljWzFdIDogd2lkdGggKiAwLjU7CiAgICAgICAgICB2eCA9IC12eCAqIHdpZHRoQWR2YW5jZVNjYWxlOwogICAgICAgICAgdnkgPSB2bWV0cmljWzJdICogd2lkdGhBZHZhbmNlU2NhbGU7CiAgICAgICAgICB3aWR0aCA9IHZtZXRyaWMgPyAtdm1ldHJpY1swXSA6IHdpZHRoOwogICAgICAgICAgc2NhbGVkWCA9IHZ4IC8gZm9udFNpemVTY2FsZTsKICAgICAgICAgIHNjYWxlZFkgPSAoeCArIHZ5KSAvIGZvbnRTaXplU2NhbGU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHNjYWxlZFggPSB4IC8gZm9udFNpemVTY2FsZTsKICAgICAgICAgIHNjYWxlZFkgPSAwOwogICAgICAgIH0KCiAgICAgICAgaWYgKGZvbnQucmVtZWFzdXJlICYmIHdpZHRoID4gMCkgewogICAgICAgICAgdmFyIG1lYXN1cmVkV2lkdGggPSBjdHgubWVhc3VyZVRleHQoY2hhcmFjdGVyKS53aWR0aCAqIDEwMDAgLyBmb250U2l6ZSAqIGZvbnRTaXplU2NhbGU7CgogICAgICAgICAgaWYgKHdpZHRoIDwgbWVhc3VyZWRXaWR0aCAmJiB0aGlzLmlzRm9udFN1YnBpeGVsQUFFbmFibGVkKSB7CiAgICAgICAgICAgIHZhciBjaGFyYWN0ZXJTY2FsZVggPSB3aWR0aCAvIG1lYXN1cmVkV2lkdGg7CiAgICAgICAgICAgIHJlc3RvcmVOZWVkZWQgPSB0cnVlOwogICAgICAgICAgICBjdHguc2F2ZSgpOwogICAgICAgICAgICBjdHguc2NhbGUoY2hhcmFjdGVyU2NhbGVYLCAxKTsKICAgICAgICAgICAgc2NhbGVkWCAvPSBjaGFyYWN0ZXJTY2FsZVg7CiAgICAgICAgICB9IGVsc2UgaWYgKHdpZHRoICE9PSBtZWFzdXJlZFdpZHRoKSB7CiAgICAgICAgICAgIHNjYWxlZFggKz0gKHdpZHRoIC0gbWVhc3VyZWRXaWR0aCkgLyAyMDAwICogZm9udFNpemUgLyBmb250U2l6ZVNjYWxlOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYgKGdseXBoLmlzSW5Gb250IHx8IGZvbnQubWlzc2luZ0ZpbGUpIHsKICAgICAgICAgIGlmIChzaW1wbGVGaWxsVGV4dCAmJiAhYWNjZW50KSB7CiAgICAgICAgICAgIGN0eC5maWxsVGV4dChjaGFyYWN0ZXIsIHNjYWxlZFgsIHNjYWxlZFkpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5wYWludENoYXIoY2hhcmFjdGVyLCBzY2FsZWRYLCBzY2FsZWRZLCBwYXR0ZXJuVHJhbnNmb3JtKTsKCiAgICAgICAgICAgIGlmIChhY2NlbnQpIHsKICAgICAgICAgICAgICBzY2FsZWRBY2NlbnRYID0gc2NhbGVkWCArIGFjY2VudC5vZmZzZXQueCAvIGZvbnRTaXplU2NhbGU7CiAgICAgICAgICAgICAgc2NhbGVkQWNjZW50WSA9IHNjYWxlZFkgLSBhY2NlbnQub2Zmc2V0LnkgLyBmb250U2l6ZVNjYWxlOwogICAgICAgICAgICAgIHRoaXMucGFpbnRDaGFyKGFjY2VudC5mb250Q2hhciwgc2NhbGVkQWNjZW50WCwgc2NhbGVkQWNjZW50WSwgcGF0dGVyblRyYW5zZm9ybSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZhciBjaGFyV2lkdGg7CgogICAgICAgIGlmICh2ZXJ0aWNhbCkgewogICAgICAgICAgY2hhcldpZHRoID0gd2lkdGggKiB3aWR0aEFkdmFuY2VTY2FsZSAtIHNwYWNpbmcgKiBmb250RGlyZWN0aW9uOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjaGFyV2lkdGggPSB3aWR0aCAqIHdpZHRoQWR2YW5jZVNjYWxlICsgc3BhY2luZyAqIGZvbnREaXJlY3Rpb247CiAgICAgICAgfQoKICAgICAgICB4ICs9IGNoYXJXaWR0aDsKCiAgICAgICAgaWYgKHJlc3RvcmVOZWVkZWQpIHsKICAgICAgICAgIGN0eC5yZXN0b3JlKCk7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAodmVydGljYWwpIHsKICAgICAgICBjdXJyZW50LnkgLT0geDsKICAgICAgfSBlbHNlIHsKICAgICAgICBjdXJyZW50LnggKz0geCAqIHRleHRIU2NhbGU7CiAgICAgIH0KCiAgICAgIGN0eC5yZXN0b3JlKCk7CiAgICB9LAogICAgc2hvd1R5cGUzVGV4dDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3Nfc2hvd1R5cGUzVGV4dChnbHlwaHMpIHsKICAgICAgdmFyIGN0eCA9IHRoaXMuY3R4OwogICAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDsKICAgICAgdmFyIGZvbnQgPSBjdXJyZW50LmZvbnQ7CiAgICAgIHZhciBmb250U2l6ZSA9IGN1cnJlbnQuZm9udFNpemU7CiAgICAgIHZhciBmb250RGlyZWN0aW9uID0gY3VycmVudC5mb250RGlyZWN0aW9uOwogICAgICB2YXIgc3BhY2luZ0RpciA9IGZvbnQudmVydGljYWwgPyAxIDogLTE7CiAgICAgIHZhciBjaGFyU3BhY2luZyA9IGN1cnJlbnQuY2hhclNwYWNpbmc7CiAgICAgIHZhciB3b3JkU3BhY2luZyA9IGN1cnJlbnQud29yZFNwYWNpbmc7CiAgICAgIHZhciB0ZXh0SFNjYWxlID0gY3VycmVudC50ZXh0SFNjYWxlICogZm9udERpcmVjdGlvbjsKICAgICAgdmFyIGZvbnRNYXRyaXggPSBjdXJyZW50LmZvbnRNYXRyaXggfHwgX3V0aWwuRk9OVF9JREVOVElUWV9NQVRSSVg7CiAgICAgIHZhciBnbHlwaHNMZW5ndGggPSBnbHlwaHMubGVuZ3RoOwogICAgICB2YXIgaXNUZXh0SW52aXNpYmxlID0gY3VycmVudC50ZXh0UmVuZGVyaW5nTW9kZSA9PT0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuSU5WSVNJQkxFOwogICAgICB2YXIgaSwgZ2x5cGgsIHdpZHRoLCBzcGFjaW5nTGVuZ3RoOwoKICAgICAgaWYgKGlzVGV4dEludmlzaWJsZSB8fCBmb250U2l6ZSA9PT0gMCkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdGhpcy5fY2FjaGVkR2V0U2luZ2xlUGl4ZWxXaWR0aCA9IG51bGw7CiAgICAgIGN0eC5zYXZlKCk7CiAgICAgIGN0eC50cmFuc2Zvcm0uYXBwbHkoY3R4LCBjdXJyZW50LnRleHRNYXRyaXgpOwogICAgICBjdHgudHJhbnNsYXRlKGN1cnJlbnQueCwgY3VycmVudC55KTsKICAgICAgY3R4LnNjYWxlKHRleHRIU2NhbGUsIGZvbnREaXJlY3Rpb24pOwoKICAgICAgZm9yIChpID0gMDsgaSA8IGdseXBoc0xlbmd0aDsgKytpKSB7CiAgICAgICAgZ2x5cGggPSBnbHlwaHNbaV07CgogICAgICAgIGlmICgoMCwgX3V0aWwuaXNOdW0pKGdseXBoKSkgewogICAgICAgICAgc3BhY2luZ0xlbmd0aCA9IHNwYWNpbmdEaXIgKiBnbHlwaCAqIGZvbnRTaXplIC8gMTAwMDsKICAgICAgICAgIHRoaXMuY3R4LnRyYW5zbGF0ZShzcGFjaW5nTGVuZ3RoLCAwKTsKICAgICAgICAgIGN1cnJlbnQueCArPSBzcGFjaW5nTGVuZ3RoICogdGV4dEhTY2FsZTsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KCiAgICAgICAgdmFyIHNwYWNpbmcgPSAoZ2x5cGguaXNTcGFjZSA/IHdvcmRTcGFjaW5nIDogMCkgKyBjaGFyU3BhY2luZzsKICAgICAgICB2YXIgb3BlcmF0b3JMaXN0ID0gZm9udC5jaGFyUHJvY09wZXJhdG9yTGlzdFtnbHlwaC5vcGVyYXRvckxpc3RJZF07CgogICAgICAgIGlmICghb3BlcmF0b3JMaXN0KSB7CiAgICAgICAgICAoMCwgX3V0aWwud2FybikoIlR5cGUzIGNoYXJhY3RlciBcIiIuY29uY2F0KGdseXBoLm9wZXJhdG9yTGlzdElkLCAiXCIgaXMgbm90IGF2YWlsYWJsZS4iKSk7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CgogICAgICAgIHRoaXMucHJvY2Vzc2luZ1R5cGUzID0gZ2x5cGg7CiAgICAgICAgdGhpcy5zYXZlKCk7CiAgICAgICAgY3R4LnNjYWxlKGZvbnRTaXplLCBmb250U2l6ZSk7CiAgICAgICAgY3R4LnRyYW5zZm9ybS5hcHBseShjdHgsIGZvbnRNYXRyaXgpOwogICAgICAgIHRoaXMuZXhlY3V0ZU9wZXJhdG9yTGlzdChvcGVyYXRvckxpc3QpOwogICAgICAgIHRoaXMucmVzdG9yZSgpOwoKICAgICAgICB2YXIgdHJhbnNmb3JtZWQgPSBfdXRpbC5VdGlsLmFwcGx5VHJhbnNmb3JtKFtnbHlwaC53aWR0aCwgMF0sIGZvbnRNYXRyaXgpOwoKICAgICAgICB3aWR0aCA9IHRyYW5zZm9ybWVkWzBdICogZm9udFNpemUgKyBzcGFjaW5nOwogICAgICAgIGN0eC50cmFuc2xhdGUod2lkdGgsIDApOwogICAgICAgIGN1cnJlbnQueCArPSB3aWR0aCAqIHRleHRIU2NhbGU7CiAgICAgIH0KCiAgICAgIGN0eC5yZXN0b3JlKCk7CiAgICAgIHRoaXMucHJvY2Vzc2luZ1R5cGUzID0gbnVsbDsKICAgIH0sCiAgICBzZXRDaGFyV2lkdGg6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX3NldENoYXJXaWR0aCh4V2lkdGgsIHlXaWR0aCkge30sCiAgICBzZXRDaGFyV2lkdGhBbmRCb3VuZHM6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX3NldENoYXJXaWR0aEFuZEJvdW5kcyh4V2lkdGgsIHlXaWR0aCwgbGx4LCBsbHksIHVyeCwgdXJ5KSB7CiAgICAgIHRoaXMuY3R4LnJlY3QobGx4LCBsbHksIHVyeCAtIGxseCwgdXJ5IC0gbGx5KTsKICAgICAgdGhpcy5jbGlwKCk7CiAgICAgIHRoaXMuZW5kUGF0aCgpOwogICAgfSwKICAgIGdldENvbG9yTl9QYXR0ZXJuOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19nZXRDb2xvck5fUGF0dGVybihJUikgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdmFyIHBhdHRlcm47CgogICAgICBpZiAoSVJbMF0gPT09ICJUaWxpbmdQYXR0ZXJuIikgewogICAgICAgIHZhciBjb2xvciA9IElSWzFdOwogICAgICAgIHZhciBiYXNlVHJhbnNmb3JtID0gdGhpcy5iYXNlVHJhbnNmb3JtIHx8IHRoaXMuY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm0uc2xpY2UoKTsKICAgICAgICB2YXIgY2FudmFzR3JhcGhpY3NGYWN0b3J5ID0gewogICAgICAgICAgY3JlYXRlQ2FudmFzR3JhcGhpY3M6IGZ1bmN0aW9uIGNyZWF0ZUNhbnZhc0dyYXBoaWNzKGN0eCkgewogICAgICAgICAgICByZXR1cm4gbmV3IENhbnZhc0dyYXBoaWNzKGN0eCwgX3RoaXMuY29tbW9uT2JqcywgX3RoaXMub2JqcywgX3RoaXMuY2FudmFzRmFjdG9yeSwgX3RoaXMud2ViR0xDb250ZXh0KTsKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICAgIHBhdHRlcm4gPSBuZXcgX3BhdHRlcm5faGVscGVyLlRpbGluZ1BhdHRlcm4oSVIsIGNvbG9yLCB0aGlzLmN0eCwgY2FudmFzR3JhcGhpY3NGYWN0b3J5LCBiYXNlVHJhbnNmb3JtKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBwYXR0ZXJuID0gKDAsIF9wYXR0ZXJuX2hlbHBlci5nZXRTaGFkaW5nUGF0dGVybkZyb21JUikoSVIpOwogICAgICB9CgogICAgICByZXR1cm4gcGF0dGVybjsKICAgIH0sCiAgICBzZXRTdHJva2VDb2xvck46IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX3NldFN0cm9rZUNvbG9yTigpIHsKICAgICAgdGhpcy5jdXJyZW50LnN0cm9rZUNvbG9yID0gdGhpcy5nZXRDb2xvck5fUGF0dGVybihhcmd1bWVudHMpOwogICAgfSwKICAgIHNldEZpbGxDb2xvck46IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX3NldEZpbGxDb2xvck4oKSB7CiAgICAgIHRoaXMuY3VycmVudC5maWxsQ29sb3IgPSB0aGlzLmdldENvbG9yTl9QYXR0ZXJuKGFyZ3VtZW50cyk7CiAgICAgIHRoaXMuY3VycmVudC5wYXR0ZXJuRmlsbCA9IHRydWU7CiAgICB9LAogICAgc2V0U3Ryb2tlUkdCQ29sb3I6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX3NldFN0cm9rZVJHQkNvbG9yKHIsIGcsIGIpIHsKICAgICAgdmFyIGNvbG9yID0gX3V0aWwuVXRpbC5tYWtlQ3NzUmdiKHIsIGcsIGIpOwoKICAgICAgdGhpcy5jdHguc3Ryb2tlU3R5bGUgPSBjb2xvcjsKICAgICAgdGhpcy5jdXJyZW50LnN0cm9rZUNvbG9yID0gY29sb3I7CiAgICB9LAogICAgc2V0RmlsbFJHQkNvbG9yOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19zZXRGaWxsUkdCQ29sb3IociwgZywgYikgewogICAgICB2YXIgY29sb3IgPSBfdXRpbC5VdGlsLm1ha2VDc3NSZ2IociwgZywgYik7CgogICAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSBjb2xvcjsKICAgICAgdGhpcy5jdXJyZW50LmZpbGxDb2xvciA9IGNvbG9yOwogICAgICB0aGlzLmN1cnJlbnQucGF0dGVybkZpbGwgPSBmYWxzZTsKICAgIH0sCiAgICBzaGFkaW5nRmlsbDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3Nfc2hhZGluZ0ZpbGwocGF0dGVybklSKSB7CiAgICAgIHZhciBjdHggPSB0aGlzLmN0eDsKICAgICAgdGhpcy5zYXZlKCk7CiAgICAgIHZhciBwYXR0ZXJuID0gKDAsIF9wYXR0ZXJuX2hlbHBlci5nZXRTaGFkaW5nUGF0dGVybkZyb21JUikocGF0dGVybklSKTsKICAgICAgY3R4LmZpbGxTdHlsZSA9IHBhdHRlcm4uZ2V0UGF0dGVybihjdHgsIHRoaXMsIHRydWUpOwogICAgICB2YXIgaW52ID0gY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm1JbnZlcnNlOwoKICAgICAgaWYgKGludikgewogICAgICAgIHZhciBjYW52YXMgPSBjdHguY2FudmFzOwogICAgICAgIHZhciB3aWR0aCA9IGNhbnZhcy53aWR0aDsKICAgICAgICB2YXIgaGVpZ2h0ID0gY2FudmFzLmhlaWdodDsKCiAgICAgICAgdmFyIGJsID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbMCwgMF0sIGludik7CgogICAgICAgIHZhciBiciA9IF91dGlsLlV0aWwuYXBwbHlUcmFuc2Zvcm0oWzAsIGhlaWdodF0sIGludik7CgogICAgICAgIHZhciB1bCA9IF91dGlsLlV0aWwuYXBwbHlUcmFuc2Zvcm0oW3dpZHRoLCAwXSwgaW52KTsKCiAgICAgICAgdmFyIHVyID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbd2lkdGgsIGhlaWdodF0sIGludik7CgogICAgICAgIHZhciB4MCA9IE1hdGgubWluKGJsWzBdLCBiclswXSwgdWxbMF0sIHVyWzBdKTsKICAgICAgICB2YXIgeTAgPSBNYXRoLm1pbihibFsxXSwgYnJbMV0sIHVsWzFdLCB1clsxXSk7CiAgICAgICAgdmFyIHgxID0gTWF0aC5tYXgoYmxbMF0sIGJyWzBdLCB1bFswXSwgdXJbMF0pOwogICAgICAgIHZhciB5MSA9IE1hdGgubWF4KGJsWzFdLCBiclsxXSwgdWxbMV0sIHVyWzFdKTsKICAgICAgICB0aGlzLmN0eC5maWxsUmVjdCh4MCwgeTAsIHgxIC0geDAsIHkxIC0geTApOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuY3R4LmZpbGxSZWN0KC0xZTEwLCAtMWUxMCwgMmUxMCwgMmUxMCk7CiAgICAgIH0KCiAgICAgIHRoaXMucmVzdG9yZSgpOwogICAgfSwKICAgIGJlZ2luSW5saW5lSW1hZ2U6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2JlZ2luSW5saW5lSW1hZ2UoKSB7CiAgICAgICgwLCBfdXRpbC51bnJlYWNoYWJsZSkoIlNob3VsZCBub3QgY2FsbCBiZWdpbklubGluZUltYWdlIik7CiAgICB9LAogICAgYmVnaW5JbWFnZURhdGE6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2JlZ2luSW1hZ2VEYXRhKCkgewogICAgICAoMCwgX3V0aWwudW5yZWFjaGFibGUpKCJTaG91bGQgbm90IGNhbGwgYmVnaW5JbWFnZURhdGEiKTsKICAgIH0sCiAgICBwYWludEZvcm1YT2JqZWN0QmVnaW46IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX3BhaW50Rm9ybVhPYmplY3RCZWdpbihtYXRyaXgsIGJib3gpIHsKICAgICAgdGhpcy5zYXZlKCk7CiAgICAgIHRoaXMuYmFzZVRyYW5zZm9ybVN0YWNrLnB1c2godGhpcy5iYXNlVHJhbnNmb3JtKTsKCiAgICAgIGlmIChBcnJheS5pc0FycmF5KG1hdHJpeCkgJiYgbWF0cml4Lmxlbmd0aCA9PT0gNikgewogICAgICAgIHRoaXMudHJhbnNmb3JtLmFwcGx5KHRoaXMsIG1hdHJpeCk7CiAgICAgIH0KCiAgICAgIHRoaXMuYmFzZVRyYW5zZm9ybSA9IHRoaXMuY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm07CgogICAgICBpZiAoYmJveCkgewogICAgICAgIHZhciB3aWR0aCA9IGJib3hbMl0gLSBiYm94WzBdOwogICAgICAgIHZhciBoZWlnaHQgPSBiYm94WzNdIC0gYmJveFsxXTsKICAgICAgICB0aGlzLmN0eC5yZWN0KGJib3hbMF0sIGJib3hbMV0sIHdpZHRoLCBoZWlnaHQpOwogICAgICAgIHRoaXMuY2xpcCgpOwogICAgICAgIHRoaXMuZW5kUGF0aCgpOwogICAgICB9CiAgICB9LAogICAgcGFpbnRGb3JtWE9iamVjdEVuZDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfcGFpbnRGb3JtWE9iamVjdEVuZCgpIHsKICAgICAgdGhpcy5yZXN0b3JlKCk7CiAgICAgIHRoaXMuYmFzZVRyYW5zZm9ybSA9IHRoaXMuYmFzZVRyYW5zZm9ybVN0YWNrLnBvcCgpOwogICAgfSwKICAgIGJlZ2luR3JvdXA6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2JlZ2luR3JvdXAoZ3JvdXApIHsKICAgICAgdGhpcy5zYXZlKCk7CiAgICAgIHZhciBjdXJyZW50Q3R4ID0gdGhpcy5jdHg7CgogICAgICBpZiAoIWdyb3VwLmlzb2xhdGVkKSB7CiAgICAgICAgKDAsIF91dGlsLmluZm8pKCJUT0RPOiBTdXBwb3J0IG5vbi1pc29sYXRlZCBncm91cHMuIik7CiAgICAgIH0KCiAgICAgIGlmIChncm91cC5rbm9ja291dCkgewogICAgICAgICgwLCBfdXRpbC53YXJuKSgiS25vY2tvdXQgZ3JvdXBzIG5vdCBzdXBwb3J0ZWQuIik7CiAgICAgIH0KCiAgICAgIHZhciBjdXJyZW50VHJhbnNmb3JtID0gY3VycmVudEN0eC5tb3pDdXJyZW50VHJhbnNmb3JtOwoKICAgICAgaWYgKGdyb3VwLm1hdHJpeCkgewogICAgICAgIGN1cnJlbnRDdHgudHJhbnNmb3JtLmFwcGx5KGN1cnJlbnRDdHgsIGdyb3VwLm1hdHJpeCk7CiAgICAgIH0KCiAgICAgIGlmICghZ3JvdXAuYmJveCkgewogICAgICAgIHRocm93IG5ldyBFcnJvcigiQm91bmRpbmcgYm94IGlzIHJlcXVpcmVkLiIpOwogICAgICB9CgogICAgICB2YXIgYm91bmRzID0gX3V0aWwuVXRpbC5nZXRBeGlhbEFsaWduZWRCb3VuZGluZ0JveChncm91cC5iYm94LCBjdXJyZW50Q3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm0pOwoKICAgICAgdmFyIGNhbnZhc0JvdW5kcyA9IFswLCAwLCBjdXJyZW50Q3R4LmNhbnZhcy53aWR0aCwgY3VycmVudEN0eC5jYW52YXMuaGVpZ2h0XTsKICAgICAgYm91bmRzID0gX3V0aWwuVXRpbC5pbnRlcnNlY3QoYm91bmRzLCBjYW52YXNCb3VuZHMpIHx8IFswLCAwLCAwLCAwXTsKICAgICAgdmFyIG9mZnNldFggPSBNYXRoLmZsb29yKGJvdW5kc1swXSk7CiAgICAgIHZhciBvZmZzZXRZID0gTWF0aC5mbG9vcihib3VuZHNbMV0pOwogICAgICB2YXIgZHJhd25XaWR0aCA9IE1hdGgubWF4KE1hdGguY2VpbChib3VuZHNbMl0pIC0gb2Zmc2V0WCwgMSk7CiAgICAgIHZhciBkcmF3bkhlaWdodCA9IE1hdGgubWF4KE1hdGguY2VpbChib3VuZHNbM10pIC0gb2Zmc2V0WSwgMSk7CiAgICAgIHZhciBzY2FsZVggPSAxLAogICAgICAgICAgc2NhbGVZID0gMTsKCiAgICAgIGlmIChkcmF3bldpZHRoID4gTUFYX0dST1VQX1NJWkUpIHsKICAgICAgICBzY2FsZVggPSBkcmF3bldpZHRoIC8gTUFYX0dST1VQX1NJWkU7CiAgICAgICAgZHJhd25XaWR0aCA9IE1BWF9HUk9VUF9TSVpFOwogICAgICB9CgogICAgICBpZiAoZHJhd25IZWlnaHQgPiBNQVhfR1JPVVBfU0laRSkgewogICAgICAgIHNjYWxlWSA9IGRyYXduSGVpZ2h0IC8gTUFYX0dST1VQX1NJWkU7CiAgICAgICAgZHJhd25IZWlnaHQgPSBNQVhfR1JPVVBfU0laRTsKICAgICAgfQoKICAgICAgdmFyIGNhY2hlSWQgPSAiZ3JvdXBBdCIgKyB0aGlzLmdyb3VwTGV2ZWw7CgogICAgICBpZiAoZ3JvdXAuc21hc2spIHsKICAgICAgICBjYWNoZUlkICs9ICJfc21hc2tfIiArIHRoaXMuc21hc2tDb3VudGVyKysgJSAyOwogICAgICB9CgogICAgICB2YXIgc2NyYXRjaENhbnZhcyA9IHRoaXMuY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKGNhY2hlSWQsIGRyYXduV2lkdGgsIGRyYXduSGVpZ2h0LCB0cnVlKTsKICAgICAgdmFyIGdyb3VwQ3R4ID0gc2NyYXRjaENhbnZhcy5jb250ZXh0OwogICAgICBncm91cEN0eC5zY2FsZSgxIC8gc2NhbGVYLCAxIC8gc2NhbGVZKTsKICAgICAgZ3JvdXBDdHgudHJhbnNsYXRlKC1vZmZzZXRYLCAtb2Zmc2V0WSk7CiAgICAgIGdyb3VwQ3R4LnRyYW5zZm9ybS5hcHBseShncm91cEN0eCwgY3VycmVudFRyYW5zZm9ybSk7CgogICAgICBpZiAoZ3JvdXAuc21hc2spIHsKICAgICAgICB0aGlzLnNtYXNrU3RhY2sucHVzaCh7CiAgICAgICAgICBjYW52YXM6IHNjcmF0Y2hDYW52YXMuY2FudmFzLAogICAgICAgICAgY29udGV4dDogZ3JvdXBDdHgsCiAgICAgICAgICBvZmZzZXRYOiBvZmZzZXRYLAogICAgICAgICAgb2Zmc2V0WTogb2Zmc2V0WSwKICAgICAgICAgIHNjYWxlWDogc2NhbGVYLAogICAgICAgICAgc2NhbGVZOiBzY2FsZVksCiAgICAgICAgICBzdWJ0eXBlOiBncm91cC5zbWFzay5zdWJ0eXBlLAogICAgICAgICAgYmFja2Ryb3A6IGdyb3VwLnNtYXNrLmJhY2tkcm9wLAogICAgICAgICAgdHJhbnNmZXJNYXA6IGdyb3VwLnNtYXNrLnRyYW5zZmVyTWFwIHx8IG51bGwsCiAgICAgICAgICBzdGFydFRyYW5zZm9ybUludmVyc2U6IG51bGwKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBjdXJyZW50Q3R4LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCAwLCAwKTsKICAgICAgICBjdXJyZW50Q3R4LnRyYW5zbGF0ZShvZmZzZXRYLCBvZmZzZXRZKTsKICAgICAgICBjdXJyZW50Q3R4LnNjYWxlKHNjYWxlWCwgc2NhbGVZKTsKICAgICAgfQoKICAgICAgY29weUN0eFN0YXRlKGN1cnJlbnRDdHgsIGdyb3VwQ3R4KTsKICAgICAgdGhpcy5jdHggPSBncm91cEN0eDsKICAgICAgdGhpcy5zZXRHU3RhdGUoW1siQk0iLCAic291cmNlLW92ZXIiXSwgWyJjYSIsIDFdLCBbIkNBIiwgMV1dKTsKICAgICAgdGhpcy5ncm91cFN0YWNrLnB1c2goY3VycmVudEN0eCk7CiAgICAgIHRoaXMuZ3JvdXBMZXZlbCsrOwogICAgICB0aGlzLmN1cnJlbnQuYWN0aXZlU01hc2sgPSBudWxsOwogICAgfSwKICAgIGVuZEdyb3VwOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19lbmRHcm91cChncm91cCkgewogICAgICB0aGlzLmdyb3VwTGV2ZWwtLTsKICAgICAgdmFyIGdyb3VwQ3R4ID0gdGhpcy5jdHg7CiAgICAgIHRoaXMuY3R4ID0gdGhpcy5ncm91cFN0YWNrLnBvcCgpOwoKICAgICAgaWYgKHRoaXMuY3R4LmltYWdlU21vb3RoaW5nRW5hYmxlZCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgdGhpcy5jdHguaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5jdHgubW96SW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gZmFsc2U7CiAgICAgIH0KCiAgICAgIGlmIChncm91cC5zbWFzaykgewogICAgICAgIHRoaXMudGVtcFNNYXNrID0gdGhpcy5zbWFza1N0YWNrLnBvcCgpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuY3R4LmRyYXdJbWFnZShncm91cEN0eC5jYW52YXMsIDAsIDApOwogICAgICB9CgogICAgICB0aGlzLnJlc3RvcmUoKTsKICAgIH0sCiAgICBiZWdpbkFubm90YXRpb25zOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19iZWdpbkFubm90YXRpb25zKCkgewogICAgICB0aGlzLnNhdmUoKTsKCiAgICAgIGlmICh0aGlzLmJhc2VUcmFuc2Zvcm0pIHsKICAgICAgICB0aGlzLmN0eC5zZXRUcmFuc2Zvcm0uYXBwbHkodGhpcy5jdHgsIHRoaXMuYmFzZVRyYW5zZm9ybSk7CiAgICAgIH0KICAgIH0sCiAgICBlbmRBbm5vdGF0aW9uczogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfZW5kQW5ub3RhdGlvbnMoKSB7CiAgICAgIHRoaXMucmVzdG9yZSgpOwogICAgfSwKICAgIGJlZ2luQW5ub3RhdGlvbjogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfYmVnaW5Bbm5vdGF0aW9uKHJlY3QsIHRyYW5zZm9ybSwgbWF0cml4KSB7CiAgICAgIHRoaXMuc2F2ZSgpOwogICAgICByZXNldEN0eFRvRGVmYXVsdCh0aGlzLmN0eCk7CiAgICAgIHRoaXMuY3VycmVudCA9IG5ldyBDYW52YXNFeHRyYVN0YXRlKCk7CgogICAgICBpZiAoQXJyYXkuaXNBcnJheShyZWN0KSAmJiByZWN0Lmxlbmd0aCA9PT0gNCkgewogICAgICAgIHZhciB3aWR0aCA9IHJlY3RbMl0gLSByZWN0WzBdOwogICAgICAgIHZhciBoZWlnaHQgPSByZWN0WzNdIC0gcmVjdFsxXTsKICAgICAgICB0aGlzLmN0eC5yZWN0KHJlY3RbMF0sIHJlY3RbMV0sIHdpZHRoLCBoZWlnaHQpOwogICAgICAgIHRoaXMuY2xpcCgpOwogICAgICAgIHRoaXMuZW5kUGF0aCgpOwogICAgICB9CgogICAgICB0aGlzLnRyYW5zZm9ybS5hcHBseSh0aGlzLCB0cmFuc2Zvcm0pOwogICAgICB0aGlzLnRyYW5zZm9ybS5hcHBseSh0aGlzLCBtYXRyaXgpOwogICAgfSwKICAgIGVuZEFubm90YXRpb246IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2VuZEFubm90YXRpb24oKSB7CiAgICAgIHRoaXMucmVzdG9yZSgpOwogICAgfSwKICAgIHBhaW50SW1hZ2VNYXNrWE9iamVjdDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfcGFpbnRJbWFnZU1hc2tYT2JqZWN0KGltZykgewogICAgICB2YXIgY3R4ID0gdGhpcy5jdHg7CiAgICAgIHZhciB3aWR0aCA9IGltZy53aWR0aCwKICAgICAgICAgIGhlaWdodCA9IGltZy5oZWlnaHQ7CiAgICAgIHZhciBmaWxsQ29sb3IgPSB0aGlzLmN1cnJlbnQuZmlsbENvbG9yOwogICAgICB2YXIgaXNQYXR0ZXJuRmlsbCA9IHRoaXMuY3VycmVudC5wYXR0ZXJuRmlsbDsKICAgICAgdmFyIGdseXBoID0gdGhpcy5wcm9jZXNzaW5nVHlwZTM7CgogICAgICBpZiAoQ09NUElMRV9UWVBFM19HTFlQSFMgJiYgZ2x5cGggJiYgZ2x5cGguY29tcGlsZWQgPT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmICh3aWR0aCA8PSBNQVhfU0laRV9UT19DT01QSUxFICYmIGhlaWdodCA8PSBNQVhfU0laRV9UT19DT01QSUxFKSB7CiAgICAgICAgICBnbHlwaC5jb21waWxlZCA9IGNvbXBpbGVUeXBlM0dseXBoKHsKICAgICAgICAgICAgZGF0YTogaW1nLmRhdGEsCiAgICAgICAgICAgIHdpZHRoOiB3aWR0aCwKICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQKICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBnbHlwaC5jb21waWxlZCA9IG51bGw7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAoZ2x5cGggJiYgZ2x5cGguY29tcGlsZWQpIHsKICAgICAgICBnbHlwaC5jb21waWxlZChjdHgpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIG1hc2tDYW52YXMgPSB0aGlzLmNhY2hlZENhbnZhc2VzLmdldENhbnZhcygibWFza0NhbnZhcyIsIHdpZHRoLCBoZWlnaHQpOwogICAgICB2YXIgbWFza0N0eCA9IG1hc2tDYW52YXMuY29udGV4dDsKICAgICAgbWFza0N0eC5zYXZlKCk7CiAgICAgIHB1dEJpbmFyeUltYWdlTWFzayhtYXNrQ3R4LCBpbWcpOwogICAgICBtYXNrQ3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICJzb3VyY2UtaW4iOwogICAgICBtYXNrQ3R4LmZpbGxTdHlsZSA9IGlzUGF0dGVybkZpbGwgPyBmaWxsQ29sb3IuZ2V0UGF0dGVybihtYXNrQ3R4LCB0aGlzKSA6IGZpbGxDb2xvcjsKICAgICAgbWFza0N0eC5maWxsUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTsKICAgICAgbWFza0N0eC5yZXN0b3JlKCk7CiAgICAgIHRoaXMucGFpbnRJbmxpbmVJbWFnZVhPYmplY3QobWFza0NhbnZhcy5jYW52YXMpOwogICAgfSwKICAgIHBhaW50SW1hZ2VNYXNrWE9iamVjdFJlcGVhdDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfcGFpbnRJbWFnZU1hc2tYT2JqZWN0UmVwZWF0KGltZ0RhdGEsIHNjYWxlWCwgc2NhbGVZLCBwb3NpdGlvbnMpIHsKICAgICAgdmFyIHdpZHRoID0gaW1nRGF0YS53aWR0aDsKICAgICAgdmFyIGhlaWdodCA9IGltZ0RhdGEuaGVpZ2h0OwogICAgICB2YXIgZmlsbENvbG9yID0gdGhpcy5jdXJyZW50LmZpbGxDb2xvcjsKICAgICAgdmFyIGlzUGF0dGVybkZpbGwgPSB0aGlzLmN1cnJlbnQucGF0dGVybkZpbGw7CiAgICAgIHZhciBtYXNrQ2FudmFzID0gdGhpcy5jYWNoZWRDYW52YXNlcy5nZXRDYW52YXMoIm1hc2tDYW52YXMiLCB3aWR0aCwgaGVpZ2h0KTsKICAgICAgdmFyIG1hc2tDdHggPSBtYXNrQ2FudmFzLmNvbnRleHQ7CiAgICAgIG1hc2tDdHguc2F2ZSgpOwogICAgICBwdXRCaW5hcnlJbWFnZU1hc2sobWFza0N0eCwgaW1nRGF0YSk7CiAgICAgIG1hc2tDdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gInNvdXJjZS1pbiI7CiAgICAgIG1hc2tDdHguZmlsbFN0eWxlID0gaXNQYXR0ZXJuRmlsbCA/IGZpbGxDb2xvci5nZXRQYXR0ZXJuKG1hc2tDdHgsIHRoaXMpIDogZmlsbENvbG9yOwogICAgICBtYXNrQ3R4LmZpbGxSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpOwogICAgICBtYXNrQ3R4LnJlc3RvcmUoKTsKICAgICAgdmFyIGN0eCA9IHRoaXMuY3R4OwoKICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gcG9zaXRpb25zLmxlbmd0aDsgaSA8IGlpOyBpICs9IDIpIHsKICAgICAgICBjdHguc2F2ZSgpOwogICAgICAgIGN0eC50cmFuc2Zvcm0oc2NhbGVYLCAwLCAwLCBzY2FsZVksIHBvc2l0aW9uc1tpXSwgcG9zaXRpb25zW2kgKyAxXSk7CiAgICAgICAgY3R4LnNjYWxlKDEsIC0xKTsKICAgICAgICBjdHguZHJhd0ltYWdlKG1hc2tDYW52YXMuY2FudmFzLCAwLCAwLCB3aWR0aCwgaGVpZ2h0LCAwLCAtMSwgMSwgMSk7CiAgICAgICAgY3R4LnJlc3RvcmUoKTsKICAgICAgfQogICAgfSwKICAgIHBhaW50SW1hZ2VNYXNrWE9iamVjdEdyb3VwOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19wYWludEltYWdlTWFza1hPYmplY3RHcm91cChpbWFnZXMpIHsKICAgICAgdmFyIGN0eCA9IHRoaXMuY3R4OwogICAgICB2YXIgZmlsbENvbG9yID0gdGhpcy5jdXJyZW50LmZpbGxDb2xvcjsKICAgICAgdmFyIGlzUGF0dGVybkZpbGwgPSB0aGlzLmN1cnJlbnQucGF0dGVybkZpbGw7CgogICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBpbWFnZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICAgIHZhciBpbWFnZSA9IGltYWdlc1tpXTsKICAgICAgICB2YXIgd2lkdGggPSBpbWFnZS53aWR0aCwKICAgICAgICAgICAgaGVpZ2h0ID0gaW1hZ2UuaGVpZ2h0OwogICAgICAgIHZhciBtYXNrQ2FudmFzID0gdGhpcy5jYWNoZWRDYW52YXNlcy5nZXRDYW52YXMoIm1hc2tDYW52YXMiLCB3aWR0aCwgaGVpZ2h0KTsKICAgICAgICB2YXIgbWFza0N0eCA9IG1hc2tDYW52YXMuY29udGV4dDsKICAgICAgICBtYXNrQ3R4LnNhdmUoKTsKICAgICAgICBwdXRCaW5hcnlJbWFnZU1hc2sobWFza0N0eCwgaW1hZ2UpOwogICAgICAgIG1hc2tDdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gInNvdXJjZS1pbiI7CiAgICAgICAgbWFza0N0eC5maWxsU3R5bGUgPSBpc1BhdHRlcm5GaWxsID8gZmlsbENvbG9yLmdldFBhdHRlcm4obWFza0N0eCwgdGhpcykgOiBmaWxsQ29sb3I7CiAgICAgICAgbWFza0N0eC5maWxsUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTsKICAgICAgICBtYXNrQ3R4LnJlc3RvcmUoKTsKICAgICAgICBjdHguc2F2ZSgpOwogICAgICAgIGN0eC50cmFuc2Zvcm0uYXBwbHkoY3R4LCBpbWFnZS50cmFuc2Zvcm0pOwogICAgICAgIGN0eC5zY2FsZSgxLCAtMSk7CiAgICAgICAgY3R4LmRyYXdJbWFnZShtYXNrQ2FudmFzLmNhbnZhcywgMCwgMCwgd2lkdGgsIGhlaWdodCwgMCwgLTEsIDEsIDEpOwogICAgICAgIGN0eC5yZXN0b3JlKCk7CiAgICAgIH0KICAgIH0sCiAgICBwYWludEltYWdlWE9iamVjdDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfcGFpbnRJbWFnZVhPYmplY3Qob2JqSWQpIHsKICAgICAgdmFyIGltZ0RhdGEgPSBvYmpJZC5zdGFydHNXaXRoKCJnXyIpID8gdGhpcy5jb21tb25PYmpzLmdldChvYmpJZCkgOiB0aGlzLm9ianMuZ2V0KG9iaklkKTsKCiAgICAgIGlmICghaW1nRGF0YSkgewogICAgICAgICgwLCBfdXRpbC53YXJuKSgiRGVwZW5kZW50IGltYWdlIGlzbid0IHJlYWR5IHlldCIpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdGhpcy5wYWludElubGluZUltYWdlWE9iamVjdChpbWdEYXRhKTsKICAgIH0sCiAgICBwYWludEltYWdlWE9iamVjdFJlcGVhdDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfcGFpbnRJbWFnZVhPYmplY3RSZXBlYXQob2JqSWQsIHNjYWxlWCwgc2NhbGVZLCBwb3NpdGlvbnMpIHsKICAgICAgdmFyIGltZ0RhdGEgPSBvYmpJZC5zdGFydHNXaXRoKCJnXyIpID8gdGhpcy5jb21tb25PYmpzLmdldChvYmpJZCkgOiB0aGlzLm9ianMuZ2V0KG9iaklkKTsKCiAgICAgIGlmICghaW1nRGF0YSkgewogICAgICAgICgwLCBfdXRpbC53YXJuKSgiRGVwZW5kZW50IGltYWdlIGlzbid0IHJlYWR5IHlldCIpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIHdpZHRoID0gaW1nRGF0YS53aWR0aDsKICAgICAgdmFyIGhlaWdodCA9IGltZ0RhdGEuaGVpZ2h0OwogICAgICB2YXIgbWFwID0gW107CgogICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBwb3NpdGlvbnMubGVuZ3RoOyBpIDwgaWk7IGkgKz0gMikgewogICAgICAgIG1hcC5wdXNoKHsKICAgICAgICAgIHRyYW5zZm9ybTogW3NjYWxlWCwgMCwgMCwgc2NhbGVZLCBwb3NpdGlvbnNbaV0sIHBvc2l0aW9uc1tpICsgMV1dLAogICAgICAgICAgeDogMCwKICAgICAgICAgIHk6IDAsCiAgICAgICAgICB3OiB3aWR0aCwKICAgICAgICAgIGg6IGhlaWdodAogICAgICAgIH0pOwogICAgICB9CgogICAgICB0aGlzLnBhaW50SW5saW5lSW1hZ2VYT2JqZWN0R3JvdXAoaW1nRGF0YSwgbWFwKTsKICAgIH0sCiAgICBwYWludElubGluZUltYWdlWE9iamVjdDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfcGFpbnRJbmxpbmVJbWFnZVhPYmplY3QoaW1nRGF0YSkgewogICAgICB2YXIgd2lkdGggPSBpbWdEYXRhLndpZHRoOwogICAgICB2YXIgaGVpZ2h0ID0gaW1nRGF0YS5oZWlnaHQ7CiAgICAgIHZhciBjdHggPSB0aGlzLmN0eDsKICAgICAgdGhpcy5zYXZlKCk7CiAgICAgIGN0eC5zY2FsZSgxIC8gd2lkdGgsIC0xIC8gaGVpZ2h0KTsKICAgICAgdmFyIGN1cnJlbnRUcmFuc2Zvcm0gPSBjdHgubW96Q3VycmVudFRyYW5zZm9ybUludmVyc2U7CiAgICAgIHZhciBhID0gY3VycmVudFRyYW5zZm9ybVswXSwKICAgICAgICAgIGIgPSBjdXJyZW50VHJhbnNmb3JtWzFdOwogICAgICB2YXIgd2lkdGhTY2FsZSA9IE1hdGgubWF4KE1hdGguc3FydChhICogYSArIGIgKiBiKSwgMSk7CiAgICAgIHZhciBjID0gY3VycmVudFRyYW5zZm9ybVsyXSwKICAgICAgICAgIGQgPSBjdXJyZW50VHJhbnNmb3JtWzNdOwogICAgICB2YXIgaGVpZ2h0U2NhbGUgPSBNYXRoLm1heChNYXRoLnNxcnQoYyAqIGMgKyBkICogZCksIDEpOwogICAgICB2YXIgaW1nVG9QYWludCwgdG1wQ2FudmFzOwoKICAgICAgaWYgKHR5cGVvZiBIVE1MRWxlbWVudCA9PT0gImZ1bmN0aW9uIiAmJiBpbWdEYXRhIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHwgIWltZ0RhdGEuZGF0YSkgewogICAgICAgIGltZ1RvUGFpbnQgPSBpbWdEYXRhOwogICAgICB9IGVsc2UgewogICAgICAgIHRtcENhbnZhcyA9IHRoaXMuY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKCJpbmxpbmVJbWFnZSIsIHdpZHRoLCBoZWlnaHQpOwogICAgICAgIHZhciB0bXBDdHggPSB0bXBDYW52YXMuY29udGV4dDsKICAgICAgICBwdXRCaW5hcnlJbWFnZURhdGEodG1wQ3R4LCBpbWdEYXRhKTsKICAgICAgICBpbWdUb1BhaW50ID0gdG1wQ2FudmFzLmNhbnZhczsKICAgICAgfQoKICAgICAgdmFyIHBhaW50V2lkdGggPSB3aWR0aCwKICAgICAgICAgIHBhaW50SGVpZ2h0ID0gaGVpZ2h0OwogICAgICB2YXIgdG1wQ2FudmFzSWQgPSAicHJlc2NhbGUxIjsKCiAgICAgIHdoaWxlICh3aWR0aFNjYWxlID4gMiAmJiBwYWludFdpZHRoID4gMSB8fCBoZWlnaHRTY2FsZSA+IDIgJiYgcGFpbnRIZWlnaHQgPiAxKSB7CiAgICAgICAgdmFyIG5ld1dpZHRoID0gcGFpbnRXaWR0aCwKICAgICAgICAgICAgbmV3SGVpZ2h0ID0gcGFpbnRIZWlnaHQ7CgogICAgICAgIGlmICh3aWR0aFNjYWxlID4gMiAmJiBwYWludFdpZHRoID4gMSkgewogICAgICAgICAgbmV3V2lkdGggPSBNYXRoLmNlaWwocGFpbnRXaWR0aCAvIDIpOwogICAgICAgICAgd2lkdGhTY2FsZSAvPSBwYWludFdpZHRoIC8gbmV3V2lkdGg7CiAgICAgICAgfQoKICAgICAgICBpZiAoaGVpZ2h0U2NhbGUgPiAyICYmIHBhaW50SGVpZ2h0ID4gMSkgewogICAgICAgICAgbmV3SGVpZ2h0ID0gTWF0aC5jZWlsKHBhaW50SGVpZ2h0IC8gMik7CiAgICAgICAgICBoZWlnaHRTY2FsZSAvPSBwYWludEhlaWdodCAvIG5ld0hlaWdodDsKICAgICAgICB9CgogICAgICAgIHRtcENhbnZhcyA9IHRoaXMuY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKHRtcENhbnZhc0lkLCBuZXdXaWR0aCwgbmV3SGVpZ2h0KTsKICAgICAgICB0bXBDdHggPSB0bXBDYW52YXMuY29udGV4dDsKICAgICAgICB0bXBDdHguY2xlYXJSZWN0KDAsIDAsIG5ld1dpZHRoLCBuZXdIZWlnaHQpOwogICAgICAgIHRtcEN0eC5kcmF3SW1hZ2UoaW1nVG9QYWludCwgMCwgMCwgcGFpbnRXaWR0aCwgcGFpbnRIZWlnaHQsIDAsIDAsIG5ld1dpZHRoLCBuZXdIZWlnaHQpOwogICAgICAgIGltZ1RvUGFpbnQgPSB0bXBDYW52YXMuY2FudmFzOwogICAgICAgIHBhaW50V2lkdGggPSBuZXdXaWR0aDsKICAgICAgICBwYWludEhlaWdodCA9IG5ld0hlaWdodDsKICAgICAgICB0bXBDYW52YXNJZCA9IHRtcENhbnZhc0lkID09PSAicHJlc2NhbGUxIiA/ICJwcmVzY2FsZTIiIDogInByZXNjYWxlMSI7CiAgICAgIH0KCiAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nVG9QYWludCwgMCwgMCwgcGFpbnRXaWR0aCwgcGFpbnRIZWlnaHQsIDAsIC1oZWlnaHQsIHdpZHRoLCBoZWlnaHQpOwoKICAgICAgaWYgKHRoaXMuaW1hZ2VMYXllcikgewogICAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuZ2V0Q2FudmFzUG9zaXRpb24oMCwgLWhlaWdodCk7CiAgICAgICAgdGhpcy5pbWFnZUxheWVyLmFwcGVuZEltYWdlKHsKICAgICAgICAgIGltZ0RhdGE6IGltZ0RhdGEsCiAgICAgICAgICBsZWZ0OiBwb3NpdGlvblswXSwKICAgICAgICAgIHRvcDogcG9zaXRpb25bMV0sCiAgICAgICAgICB3aWR0aDogd2lkdGggLyBjdXJyZW50VHJhbnNmb3JtWzBdLAogICAgICAgICAgaGVpZ2h0OiBoZWlnaHQgLyBjdXJyZW50VHJhbnNmb3JtWzNdCiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIHRoaXMucmVzdG9yZSgpOwogICAgfSwKICAgIHBhaW50SW5saW5lSW1hZ2VYT2JqZWN0R3JvdXA6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX3BhaW50SW5saW5lSW1hZ2VYT2JqZWN0R3JvdXAoaW1nRGF0YSwgbWFwKSB7CiAgICAgIHZhciBjdHggPSB0aGlzLmN0eDsKICAgICAgdmFyIHcgPSBpbWdEYXRhLndpZHRoOwogICAgICB2YXIgaCA9IGltZ0RhdGEuaGVpZ2h0OwogICAgICB2YXIgdG1wQ2FudmFzID0gdGhpcy5jYWNoZWRDYW52YXNlcy5nZXRDYW52YXMoImlubGluZUltYWdlIiwgdywgaCk7CiAgICAgIHZhciB0bXBDdHggPSB0bXBDYW52YXMuY29udGV4dDsKICAgICAgcHV0QmluYXJ5SW1hZ2VEYXRhKHRtcEN0eCwgaW1nRGF0YSk7CgogICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBtYXAubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICAgIHZhciBlbnRyeSA9IG1hcFtpXTsKICAgICAgICBjdHguc2F2ZSgpOwogICAgICAgIGN0eC50cmFuc2Zvcm0uYXBwbHkoY3R4LCBlbnRyeS50cmFuc2Zvcm0pOwogICAgICAgIGN0eC5zY2FsZSgxLCAtMSk7CiAgICAgICAgY3R4LmRyYXdJbWFnZSh0bXBDYW52YXMuY2FudmFzLCBlbnRyeS54LCBlbnRyeS55LCBlbnRyeS53LCBlbnRyeS5oLCAwLCAtMSwgMSwgMSk7CgogICAgICAgIGlmICh0aGlzLmltYWdlTGF5ZXIpIHsKICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMuZ2V0Q2FudmFzUG9zaXRpb24oZW50cnkueCwgZW50cnkueSk7CiAgICAgICAgICB0aGlzLmltYWdlTGF5ZXIuYXBwZW5kSW1hZ2UoewogICAgICAgICAgICBpbWdEYXRhOiBpbWdEYXRhLAogICAgICAgICAgICBsZWZ0OiBwb3NpdGlvblswXSwKICAgICAgICAgICAgdG9wOiBwb3NpdGlvblsxXSwKICAgICAgICAgICAgd2lkdGg6IHcsCiAgICAgICAgICAgIGhlaWdodDogaAogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBjdHgucmVzdG9yZSgpOwogICAgICB9CiAgICB9LAogICAgcGFpbnRTb2xpZENvbG9ySW1hZ2VNYXNrOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19wYWludFNvbGlkQ29sb3JJbWFnZU1hc2soKSB7CiAgICAgIHRoaXMuY3R4LmZpbGxSZWN0KDAsIDAsIDEsIDEpOwogICAgfSwKICAgIHBhaW50WE9iamVjdDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfcGFpbnRYT2JqZWN0KCkgewogICAgICAoMCwgX3V0aWwud2FybikoIlVuc3VwcG9ydGVkICdwYWludFhPYmplY3QnIGNvbW1hbmQuIik7CiAgICB9LAogICAgbWFya1BvaW50OiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19tYXJrUG9pbnQodGFnKSB7fSwKICAgIG1hcmtQb2ludFByb3BzOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19tYXJrUG9pbnRQcm9wcyh0YWcsIHByb3BlcnRpZXMpIHt9LAogICAgYmVnaW5NYXJrZWRDb250ZW50OiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19iZWdpbk1hcmtlZENvbnRlbnQodGFnKSB7fSwKICAgIGJlZ2luTWFya2VkQ29udGVudFByb3BzOiBmdW5jdGlvbiBDYW52YXNHcmFwaGljc19iZWdpbk1hcmtlZENvbnRlbnRQcm9wcyh0YWcsIHByb3BlcnRpZXMpIHt9LAogICAgZW5kTWFya2VkQ29udGVudDogZnVuY3Rpb24gQ2FudmFzR3JhcGhpY3NfZW5kTWFya2VkQ29udGVudCgpIHt9LAogICAgYmVnaW5Db21wYXQ6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2JlZ2luQ29tcGF0KCkge30sCiAgICBlbmRDb21wYXQ6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2VuZENvbXBhdCgpIHt9LAogICAgY29uc3VtZVBhdGg6IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2NvbnN1bWVQYXRoKCkgewogICAgICB2YXIgY3R4ID0gdGhpcy5jdHg7CgogICAgICBpZiAodGhpcy5wZW5kaW5nQ2xpcCkgewogICAgICAgIGlmICh0aGlzLnBlbmRpbmdDbGlwID09PSBFT19DTElQKSB7CiAgICAgICAgICBjdHguY2xpcCgiZXZlbm9kZCIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjdHguY2xpcCgpOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5wZW5kaW5nQ2xpcCA9IG51bGw7CiAgICAgIH0KCiAgICAgIGN0eC5iZWdpblBhdGgoKTsKICAgIH0sCiAgICBnZXRTaW5nbGVQaXhlbFdpZHRoOiBmdW5jdGlvbiBnZXRTaW5nbGVQaXhlbFdpZHRoKHNjYWxlKSB7CiAgICAgIGlmICh0aGlzLl9jYWNoZWRHZXRTaW5nbGVQaXhlbFdpZHRoID09PSBudWxsKSB7CiAgICAgICAgdmFyIGludmVyc2UgPSB0aGlzLmN0eC5tb3pDdXJyZW50VHJhbnNmb3JtSW52ZXJzZTsKICAgICAgICB0aGlzLl9jYWNoZWRHZXRTaW5nbGVQaXhlbFdpZHRoID0gTWF0aC5zcXJ0KE1hdGgubWF4KGludmVyc2VbMF0gKiBpbnZlcnNlWzBdICsgaW52ZXJzZVsxXSAqIGludmVyc2VbMV0sIGludmVyc2VbMl0gKiBpbnZlcnNlWzJdICsgaW52ZXJzZVszXSAqIGludmVyc2VbM10pKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZEdldFNpbmdsZVBpeGVsV2lkdGg7CiAgICB9LAogICAgZ2V0Q2FudmFzUG9zaXRpb246IGZ1bmN0aW9uIENhbnZhc0dyYXBoaWNzX2dldENhbnZhc1Bvc2l0aW9uKHgsIHkpIHsKICAgICAgdmFyIHRyYW5zZm9ybSA9IHRoaXMuY3R4Lm1vekN1cnJlbnRUcmFuc2Zvcm07CiAgICAgIHJldHVybiBbdHJhbnNmb3JtWzBdICogeCArIHRyYW5zZm9ybVsyXSAqIHkgKyB0cmFuc2Zvcm1bNF0sIHRyYW5zZm9ybVsxXSAqIHggKyB0cmFuc2Zvcm1bM10gKiB5ICsgdHJhbnNmb3JtWzVdXTsKICAgIH0KICB9OwoKICBmb3IgKHZhciBvcCBpbiBfdXRpbC5PUFMpIHsKICAgIENhbnZhc0dyYXBoaWNzLnByb3RvdHlwZVtfdXRpbC5PUFNbb3BdXSA9IENhbnZhc0dyYXBoaWNzLnByb3RvdHlwZVtvcF07CiAgfQoKICByZXR1cm4gQ2FudmFzR3JhcGhpY3M7Cn0oKTsKCmV4cG9ydHMuQ2FudmFzR3JhcGhpY3MgPSBDYW52YXNHcmFwaGljczsKCi8qKiovIH0pLAovKiAyMDIgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5nZXRTaGFkaW5nUGF0dGVybkZyb21JUiA9IGdldFNoYWRpbmdQYXR0ZXJuRnJvbUlSOwpleHBvcnRzLlRpbGluZ1BhdHRlcm4gPSB2b2lkIDA7Cgp2YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDUpOwoKdmFyIFNoYWRpbmdJUnMgPSB7fTsKCmZ1bmN0aW9uIGFwcGx5Qm91bmRpbmdCb3goY3R4LCBiYm94KSB7CiAgaWYgKCFiYm94IHx8IHR5cGVvZiBQYXRoMkQgPT09ICJ1bmRlZmluZWQiKSB7CiAgICByZXR1cm47CiAgfQoKICB2YXIgd2lkdGggPSBiYm94WzJdIC0gYmJveFswXTsKICB2YXIgaGVpZ2h0ID0gYmJveFszXSAtIGJib3hbMV07CiAgdmFyIHJlZ2lvbiA9IG5ldyBQYXRoMkQoKTsKICByZWdpb24ucmVjdChiYm94WzBdLCBiYm94WzFdLCB3aWR0aCwgaGVpZ2h0KTsKICBjdHguY2xpcChyZWdpb24pOwp9CgpTaGFkaW5nSVJzLlJhZGlhbEF4aWFsID0gewogIGZyb21JUjogZnVuY3Rpb24gUmFkaWFsQXhpYWxfZnJvbUlSKHJhdykgewogICAgdmFyIHR5cGUgPSByYXdbMV07CiAgICB2YXIgYmJveCA9IHJhd1syXTsKICAgIHZhciBjb2xvclN0b3BzID0gcmF3WzNdOwogICAgdmFyIHAwID0gcmF3WzRdOwogICAgdmFyIHAxID0gcmF3WzVdOwogICAgdmFyIHIwID0gcmF3WzZdOwogICAgdmFyIHIxID0gcmF3WzddOwogICAgcmV0dXJuIHsKICAgICAgdHlwZTogIlBhdHRlcm4iLAogICAgICBnZXRQYXR0ZXJuOiBmdW5jdGlvbiBSYWRpYWxBeGlhbF9nZXRQYXR0ZXJuKGN0eCkgewogICAgICAgIGFwcGx5Qm91bmRpbmdCb3goY3R4LCBiYm94KTsKICAgICAgICB2YXIgZ3JhZDsKCiAgICAgICAgaWYgKHR5cGUgPT09ICJheGlhbCIpIHsKICAgICAgICAgIGdyYWQgPSBjdHguY3JlYXRlTGluZWFyR3JhZGllbnQocDBbMF0sIHAwWzFdLCBwMVswXSwgcDFbMV0pOwogICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gInJhZGlhbCIpIHsKICAgICAgICAgIGdyYWQgPSBjdHguY3JlYXRlUmFkaWFsR3JhZGllbnQocDBbMF0sIHAwWzFdLCByMCwgcDFbMF0sIHAxWzFdLCByMSk7CiAgICAgICAgfQoKICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBjb2xvclN0b3BzLmxlbmd0aDsgaSA8IGlpOyArK2kpIHsKICAgICAgICAgIHZhciBjID0gY29sb3JTdG9wc1tpXTsKICAgICAgICAgIGdyYWQuYWRkQ29sb3JTdG9wKGNbMF0sIGNbMV0pOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGdyYWQ7CiAgICAgIH0KICAgIH07CiAgfQp9OwoKdmFyIGNyZWF0ZU1lc2hDYW52YXMgPSBmdW5jdGlvbiBjcmVhdGVNZXNoQ2FudmFzQ2xvc3VyZSgpIHsKICBmdW5jdGlvbiBkcmF3VHJpYW5nbGUoZGF0YSwgY29udGV4dCwgcDEsIHAyLCBwMywgYzEsIGMyLCBjMykgewogICAgdmFyIGNvb3JkcyA9IGNvbnRleHQuY29vcmRzLAogICAgICAgIGNvbG9ycyA9IGNvbnRleHQuY29sb3JzOwogICAgdmFyIGJ5dGVzID0gZGF0YS5kYXRhLAogICAgICAgIHJvd1NpemUgPSBkYXRhLndpZHRoICogNDsKICAgIHZhciB0bXA7CgogICAgaWYgKGNvb3Jkc1twMSArIDFdID4gY29vcmRzW3AyICsgMV0pIHsKICAgICAgdG1wID0gcDE7CiAgICAgIHAxID0gcDI7CiAgICAgIHAyID0gdG1wOwogICAgICB0bXAgPSBjMTsKICAgICAgYzEgPSBjMjsKICAgICAgYzIgPSB0bXA7CiAgICB9CgogICAgaWYgKGNvb3Jkc1twMiArIDFdID4gY29vcmRzW3AzICsgMV0pIHsKICAgICAgdG1wID0gcDI7CiAgICAgIHAyID0gcDM7CiAgICAgIHAzID0gdG1wOwogICAgICB0bXAgPSBjMjsKICAgICAgYzIgPSBjMzsKICAgICAgYzMgPSB0bXA7CiAgICB9CgogICAgaWYgKGNvb3Jkc1twMSArIDFdID4gY29vcmRzW3AyICsgMV0pIHsKICAgICAgdG1wID0gcDE7CiAgICAgIHAxID0gcDI7CiAgICAgIHAyID0gdG1wOwogICAgICB0bXAgPSBjMTsKICAgICAgYzEgPSBjMjsKICAgICAgYzIgPSB0bXA7CiAgICB9CgogICAgdmFyIHgxID0gKGNvb3Jkc1twMV0gKyBjb250ZXh0Lm9mZnNldFgpICogY29udGV4dC5zY2FsZVg7CiAgICB2YXIgeTEgPSAoY29vcmRzW3AxICsgMV0gKyBjb250ZXh0Lm9mZnNldFkpICogY29udGV4dC5zY2FsZVk7CiAgICB2YXIgeDIgPSAoY29vcmRzW3AyXSArIGNvbnRleHQub2Zmc2V0WCkgKiBjb250ZXh0LnNjYWxlWDsKICAgIHZhciB5MiA9IChjb29yZHNbcDIgKyAxXSArIGNvbnRleHQub2Zmc2V0WSkgKiBjb250ZXh0LnNjYWxlWTsKICAgIHZhciB4MyA9IChjb29yZHNbcDNdICsgY29udGV4dC5vZmZzZXRYKSAqIGNvbnRleHQuc2NhbGVYOwogICAgdmFyIHkzID0gKGNvb3Jkc1twMyArIDFdICsgY29udGV4dC5vZmZzZXRZKSAqIGNvbnRleHQuc2NhbGVZOwoKICAgIGlmICh5MSA+PSB5MykgewogICAgICByZXR1cm47CiAgICB9CgogICAgdmFyIGMxciA9IGNvbG9yc1tjMV0sCiAgICAgICAgYzFnID0gY29sb3JzW2MxICsgMV0sCiAgICAgICAgYzFiID0gY29sb3JzW2MxICsgMl07CiAgICB2YXIgYzJyID0gY29sb3JzW2MyXSwKICAgICAgICBjMmcgPSBjb2xvcnNbYzIgKyAxXSwKICAgICAgICBjMmIgPSBjb2xvcnNbYzIgKyAyXTsKICAgIHZhciBjM3IgPSBjb2xvcnNbYzNdLAogICAgICAgIGMzZyA9IGNvbG9yc1tjMyArIDFdLAogICAgICAgIGMzYiA9IGNvbG9yc1tjMyArIDJdOwogICAgdmFyIG1pblkgPSBNYXRoLnJvdW5kKHkxKSwKICAgICAgICBtYXhZID0gTWF0aC5yb3VuZCh5Myk7CiAgICB2YXIgeGEsIGNhciwgY2FnLCBjYWI7CiAgICB2YXIgeGIsIGNiciwgY2JnLCBjYmI7CgogICAgZm9yICh2YXIgeSA9IG1pblk7IHkgPD0gbWF4WTsgeSsrKSB7CiAgICAgIGlmICh5IDwgeTIpIHsKICAgICAgICB2YXIgX2sgPSB2b2lkIDA7CgogICAgICAgIGlmICh5IDwgeTEpIHsKICAgICAgICAgIF9rID0gMDsKICAgICAgICB9IGVsc2UgaWYgKHkxID09PSB5MikgewogICAgICAgICAgX2sgPSAxOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBfayA9ICh5MSAtIHkpIC8gKHkxIC0geTIpOwogICAgICAgIH0KCiAgICAgICAgeGEgPSB4MSAtICh4MSAtIHgyKSAqIF9rOwogICAgICAgIGNhciA9IGMxciAtIChjMXIgLSBjMnIpICogX2s7CiAgICAgICAgY2FnID0gYzFnIC0gKGMxZyAtIGMyZykgKiBfazsKICAgICAgICBjYWIgPSBjMWIgLSAoYzFiIC0gYzJiKSAqIF9rOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciBfazIgPSB2b2lkIDA7CgogICAgICAgIGlmICh5ID4geTMpIHsKICAgICAgICAgIF9rMiA9IDE7CiAgICAgICAgfSBlbHNlIGlmICh5MiA9PT0geTMpIHsKICAgICAgICAgIF9rMiA9IDA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIF9rMiA9ICh5MiAtIHkpIC8gKHkyIC0geTMpOwogICAgICAgIH0KCiAgICAgICAgeGEgPSB4MiAtICh4MiAtIHgzKSAqIF9rMjsKICAgICAgICBjYXIgPSBjMnIgLSAoYzJyIC0gYzNyKSAqIF9rMjsKICAgICAgICBjYWcgPSBjMmcgLSAoYzJnIC0gYzNnKSAqIF9rMjsKICAgICAgICBjYWIgPSBjMmIgLSAoYzJiIC0gYzNiKSAqIF9rMjsKICAgICAgfQoKICAgICAgdmFyIGsgPSB2b2lkIDA7CgogICAgICBpZiAoeSA8IHkxKSB7CiAgICAgICAgayA9IDA7CiAgICAgIH0gZWxzZSBpZiAoeSA+IHkzKSB7CiAgICAgICAgayA9IDE7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgayA9ICh5MSAtIHkpIC8gKHkxIC0geTMpOwogICAgICB9CgogICAgICB4YiA9IHgxIC0gKHgxIC0geDMpICogazsKICAgICAgY2JyID0gYzFyIC0gKGMxciAtIGMzcikgKiBrOwogICAgICBjYmcgPSBjMWcgLSAoYzFnIC0gYzNnKSAqIGs7CiAgICAgIGNiYiA9IGMxYiAtIChjMWIgLSBjM2IpICogazsKICAgICAgdmFyIHgxXyA9IE1hdGgucm91bmQoTWF0aC5taW4oeGEsIHhiKSk7CiAgICAgIHZhciB4Ml8gPSBNYXRoLnJvdW5kKE1hdGgubWF4KHhhLCB4YikpOwogICAgICB2YXIgaiA9IHJvd1NpemUgKiB5ICsgeDFfICogNDsKCiAgICAgIGZvciAodmFyIHggPSB4MV87IHggPD0geDJfOyB4KyspIHsKICAgICAgICBrID0gKHhhIC0geCkgLyAoeGEgLSB4Yik7CgogICAgICAgIGlmIChrIDwgMCkgewogICAgICAgICAgayA9IDA7CiAgICAgICAgfSBlbHNlIGlmIChrID4gMSkgewogICAgICAgICAgayA9IDE7CiAgICAgICAgfQoKICAgICAgICBieXRlc1tqKytdID0gY2FyIC0gKGNhciAtIGNicikgKiBrIHwgMDsKICAgICAgICBieXRlc1tqKytdID0gY2FnIC0gKGNhZyAtIGNiZykgKiBrIHwgMDsKICAgICAgICBieXRlc1tqKytdID0gY2FiIC0gKGNhYiAtIGNiYikgKiBrIHwgMDsKICAgICAgICBieXRlc1tqKytdID0gMjU1OwogICAgICB9CiAgICB9CiAgfQoKICBmdW5jdGlvbiBkcmF3RmlndXJlKGRhdGEsIGZpZ3VyZSwgY29udGV4dCkgewogICAgdmFyIHBzID0gZmlndXJlLmNvb3JkczsKICAgIHZhciBjcyA9IGZpZ3VyZS5jb2xvcnM7CiAgICB2YXIgaSwgaWk7CgogICAgc3dpdGNoIChmaWd1cmUudHlwZSkgewogICAgICBjYXNlICJsYXR0aWNlIjoKICAgICAgICB2YXIgdmVydGljZXNQZXJSb3cgPSBmaWd1cmUudmVydGljZXNQZXJSb3c7CiAgICAgICAgdmFyIHJvd3MgPSBNYXRoLmZsb29yKHBzLmxlbmd0aCAvIHZlcnRpY2VzUGVyUm93KSAtIDE7CiAgICAgICAgdmFyIGNvbHMgPSB2ZXJ0aWNlc1BlclJvdyAtIDE7CgogICAgICAgIGZvciAoaSA9IDA7IGkgPCByb3dzOyBpKyspIHsKICAgICAgICAgIHZhciBxID0gaSAqIHZlcnRpY2VzUGVyUm93OwoKICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgY29sczsgaisrLCBxKyspIHsKICAgICAgICAgICAgZHJhd1RyaWFuZ2xlKGRhdGEsIGNvbnRleHQsIHBzW3FdLCBwc1txICsgMV0sIHBzW3EgKyB2ZXJ0aWNlc1BlclJvd10sIGNzW3FdLCBjc1txICsgMV0sIGNzW3EgKyB2ZXJ0aWNlc1BlclJvd10pOwogICAgICAgICAgICBkcmF3VHJpYW5nbGUoZGF0YSwgY29udGV4dCwgcHNbcSArIHZlcnRpY2VzUGVyUm93ICsgMV0sIHBzW3EgKyAxXSwgcHNbcSArIHZlcnRpY2VzUGVyUm93XSwgY3NbcSArIHZlcnRpY2VzUGVyUm93ICsgMV0sIGNzW3EgKyAxXSwgY3NbcSArIHZlcnRpY2VzUGVyUm93XSk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBicmVhazsKCiAgICAgIGNhc2UgInRyaWFuZ2xlcyI6CiAgICAgICAgZm9yIChpID0gMCwgaWkgPSBwcy5sZW5ndGg7IGkgPCBpaTsgaSArPSAzKSB7CiAgICAgICAgICBkcmF3VHJpYW5nbGUoZGF0YSwgY29udGV4dCwgcHNbaV0sIHBzW2kgKyAxXSwgcHNbaSArIDJdLCBjc1tpXSwgY3NbaSArIDFdLCBjc1tpICsgMl0pOwogICAgICAgIH0KCiAgICAgICAgYnJlYWs7CgogICAgICBkZWZhdWx0OgogICAgICAgIHRocm93IG5ldyBFcnJvcigiaWxsZWdhbCBmaWd1cmUiKTsKICAgIH0KICB9CgogIGZ1bmN0aW9uIGNyZWF0ZU1lc2hDYW52YXMoYm91bmRzLCBjb21iaW5lc1NjYWxlLCBjb29yZHMsIGNvbG9ycywgZmlndXJlcywgYmFja2dyb3VuZENvbG9yLCBjYWNoZWRDYW52YXNlcywgd2ViR0xDb250ZXh0KSB7CiAgICB2YXIgRVhQRUNURURfU0NBTEUgPSAxLjE7CiAgICB2YXIgTUFYX1BBVFRFUk5fU0laRSA9IDMwMDA7CiAgICB2YXIgQk9SREVSX1NJWkUgPSAyOwogICAgdmFyIG9mZnNldFggPSBNYXRoLmZsb29yKGJvdW5kc1swXSk7CiAgICB2YXIgb2Zmc2V0WSA9IE1hdGguZmxvb3IoYm91bmRzWzFdKTsKICAgIHZhciBib3VuZHNXaWR0aCA9IE1hdGguY2VpbChib3VuZHNbMl0pIC0gb2Zmc2V0WDsKICAgIHZhciBib3VuZHNIZWlnaHQgPSBNYXRoLmNlaWwoYm91bmRzWzNdKSAtIG9mZnNldFk7CiAgICB2YXIgd2lkdGggPSBNYXRoLm1pbihNYXRoLmNlaWwoTWF0aC5hYnMoYm91bmRzV2lkdGggKiBjb21iaW5lc1NjYWxlWzBdICogRVhQRUNURURfU0NBTEUpKSwgTUFYX1BBVFRFUk5fU0laRSk7CiAgICB2YXIgaGVpZ2h0ID0gTWF0aC5taW4oTWF0aC5jZWlsKE1hdGguYWJzKGJvdW5kc0hlaWdodCAqIGNvbWJpbmVzU2NhbGVbMV0gKiBFWFBFQ1RFRF9TQ0FMRSkpLCBNQVhfUEFUVEVSTl9TSVpFKTsKICAgIHZhciBzY2FsZVggPSBib3VuZHNXaWR0aCAvIHdpZHRoOwogICAgdmFyIHNjYWxlWSA9IGJvdW5kc0hlaWdodCAvIGhlaWdodDsKICAgIHZhciBjb250ZXh0ID0gewogICAgICBjb29yZHM6IGNvb3JkcywKICAgICAgY29sb3JzOiBjb2xvcnMsCiAgICAgIG9mZnNldFg6IC1vZmZzZXRYLAogICAgICBvZmZzZXRZOiAtb2Zmc2V0WSwKICAgICAgc2NhbGVYOiAxIC8gc2NhbGVYLAogICAgICBzY2FsZVk6IDEgLyBzY2FsZVkKICAgIH07CiAgICB2YXIgcGFkZGVkV2lkdGggPSB3aWR0aCArIEJPUkRFUl9TSVpFICogMjsKICAgIHZhciBwYWRkZWRIZWlnaHQgPSBoZWlnaHQgKyBCT1JERVJfU0laRSAqIDI7CiAgICB2YXIgY2FudmFzLCB0bXBDYW52YXMsIGksIGlpOwoKICAgIGlmICh3ZWJHTENvbnRleHQuaXNFbmFibGVkKSB7CiAgICAgIGNhbnZhcyA9IHdlYkdMQ29udGV4dC5kcmF3RmlndXJlcyh7CiAgICAgICAgd2lkdGg6IHdpZHRoLAogICAgICAgIGhlaWdodDogaGVpZ2h0LAogICAgICAgIGJhY2tncm91bmRDb2xvcjogYmFja2dyb3VuZENvbG9yLAogICAgICAgIGZpZ3VyZXM6IGZpZ3VyZXMsCiAgICAgICAgY29udGV4dDogY29udGV4dAogICAgICB9KTsKICAgICAgdG1wQ2FudmFzID0gY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKCJtZXNoIiwgcGFkZGVkV2lkdGgsIHBhZGRlZEhlaWdodCwgZmFsc2UpOwogICAgICB0bXBDYW52YXMuY29udGV4dC5kcmF3SW1hZ2UoY2FudmFzLCBCT1JERVJfU0laRSwgQk9SREVSX1NJWkUpOwogICAgICBjYW52YXMgPSB0bXBDYW52YXMuY2FudmFzOwogICAgfSBlbHNlIHsKICAgICAgdG1wQ2FudmFzID0gY2FjaGVkQ2FudmFzZXMuZ2V0Q2FudmFzKCJtZXNoIiwgcGFkZGVkV2lkdGgsIHBhZGRlZEhlaWdodCwgZmFsc2UpOwogICAgICB2YXIgdG1wQ3R4ID0gdG1wQ2FudmFzLmNvbnRleHQ7CiAgICAgIHZhciBkYXRhID0gdG1wQ3R4LmNyZWF0ZUltYWdlRGF0YSh3aWR0aCwgaGVpZ2h0KTsKCiAgICAgIGlmIChiYWNrZ3JvdW5kQ29sb3IpIHsKICAgICAgICB2YXIgYnl0ZXMgPSBkYXRhLmRhdGE7CgogICAgICAgIGZvciAoaSA9IDAsIGlpID0gYnl0ZXMubGVuZ3RoOyBpIDwgaWk7IGkgKz0gNCkgewogICAgICAgICAgYnl0ZXNbaV0gPSBiYWNrZ3JvdW5kQ29sb3JbMF07CiAgICAgICAgICBieXRlc1tpICsgMV0gPSBiYWNrZ3JvdW5kQ29sb3JbMV07CiAgICAgICAgICBieXRlc1tpICsgMl0gPSBiYWNrZ3JvdW5kQ29sb3JbMl07CiAgICAgICAgICBieXRlc1tpICsgM10gPSAyNTU7CiAgICAgICAgfQogICAgICB9CgogICAgICBmb3IgKGkgPSAwOyBpIDwgZmlndXJlcy5sZW5ndGg7IGkrKykgewogICAgICAgIGRyYXdGaWd1cmUoZGF0YSwgZmlndXJlc1tpXSwgY29udGV4dCk7CiAgICAgIH0KCiAgICAgIHRtcEN0eC5wdXRJbWFnZURhdGEoZGF0YSwgQk9SREVSX1NJWkUsIEJPUkRFUl9TSVpFKTsKICAgICAgY2FudmFzID0gdG1wQ2FudmFzLmNhbnZhczsKICAgIH0KCiAgICByZXR1cm4gewogICAgICBjYW52YXM6IGNhbnZhcywKICAgICAgb2Zmc2V0WDogb2Zmc2V0WCAtIEJPUkRFUl9TSVpFICogc2NhbGVYLAogICAgICBvZmZzZXRZOiBvZmZzZXRZIC0gQk9SREVSX1NJWkUgKiBzY2FsZVksCiAgICAgIHNjYWxlWDogc2NhbGVYLAogICAgICBzY2FsZVk6IHNjYWxlWQogICAgfTsKICB9CgogIHJldHVybiBjcmVhdGVNZXNoQ2FudmFzOwp9KCk7CgpTaGFkaW5nSVJzLk1lc2ggPSB7CiAgZnJvbUlSOiBmdW5jdGlvbiBNZXNoX2Zyb21JUihyYXcpIHsKICAgIHZhciBjb29yZHMgPSByYXdbMl07CiAgICB2YXIgY29sb3JzID0gcmF3WzNdOwogICAgdmFyIGZpZ3VyZXMgPSByYXdbNF07CiAgICB2YXIgYm91bmRzID0gcmF3WzVdOwogICAgdmFyIG1hdHJpeCA9IHJhd1s2XTsKICAgIHZhciBiYm94ID0gcmF3WzddOwogICAgdmFyIGJhY2tncm91bmQgPSByYXdbOF07CiAgICByZXR1cm4gewogICAgICB0eXBlOiAiUGF0dGVybiIsCiAgICAgIGdldFBhdHRlcm46IGZ1bmN0aW9uIE1lc2hfZ2V0UGF0dGVybihjdHgsIG93bmVyLCBzaGFkaW5nRmlsbCkgewogICAgICAgIGFwcGx5Qm91bmRpbmdCb3goY3R4LCBiYm94KTsKICAgICAgICB2YXIgc2NhbGU7CgogICAgICAgIGlmIChzaGFkaW5nRmlsbCkgewogICAgICAgICAgc2NhbGUgPSBfdXRpbC5VdGlsLnNpbmd1bGFyVmFsdWVEZWNvbXBvc2UyZFNjYWxlKGN0eC5tb3pDdXJyZW50VHJhbnNmb3JtKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgc2NhbGUgPSBfdXRpbC5VdGlsLnNpbmd1bGFyVmFsdWVEZWNvbXBvc2UyZFNjYWxlKG93bmVyLmJhc2VUcmFuc2Zvcm0pOwoKICAgICAgICAgIGlmIChtYXRyaXgpIHsKICAgICAgICAgICAgdmFyIG1hdHJpeFNjYWxlID0gX3V0aWwuVXRpbC5zaW5ndWxhclZhbHVlRGVjb21wb3NlMmRTY2FsZShtYXRyaXgpOwoKICAgICAgICAgICAgc2NhbGUgPSBbc2NhbGVbMF0gKiBtYXRyaXhTY2FsZVswXSwgc2NhbGVbMV0gKiBtYXRyaXhTY2FsZVsxXV07CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICB2YXIgdGVtcG9yYXJ5UGF0dGVybkNhbnZhcyA9IGNyZWF0ZU1lc2hDYW52YXMoYm91bmRzLCBzY2FsZSwgY29vcmRzLCBjb2xvcnMsIGZpZ3VyZXMsIHNoYWRpbmdGaWxsID8gbnVsbCA6IGJhY2tncm91bmQsIG93bmVyLmNhY2hlZENhbnZhc2VzLCBvd25lci53ZWJHTENvbnRleHQpOwoKICAgICAgICBpZiAoIXNoYWRpbmdGaWxsKSB7CiAgICAgICAgICBjdHguc2V0VHJhbnNmb3JtLmFwcGx5KGN0eCwgb3duZXIuYmFzZVRyYW5zZm9ybSk7CgogICAgICAgICAgaWYgKG1hdHJpeCkgewogICAgICAgICAgICBjdHgudHJhbnNmb3JtLmFwcGx5KGN0eCwgbWF0cml4KTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGN0eC50cmFuc2xhdGUodGVtcG9yYXJ5UGF0dGVybkNhbnZhcy5vZmZzZXRYLCB0ZW1wb3JhcnlQYXR0ZXJuQ2FudmFzLm9mZnNldFkpOwogICAgICAgIGN0eC5zY2FsZSh0ZW1wb3JhcnlQYXR0ZXJuQ2FudmFzLnNjYWxlWCwgdGVtcG9yYXJ5UGF0dGVybkNhbnZhcy5zY2FsZVkpOwogICAgICAgIHJldHVybiBjdHguY3JlYXRlUGF0dGVybih0ZW1wb3JhcnlQYXR0ZXJuQ2FudmFzLmNhbnZhcywgIm5vLXJlcGVhdCIpOwogICAgICB9CiAgICB9OwogIH0KfTsKU2hhZGluZ0lScy5EdW1teSA9IHsKICBmcm9tSVI6IGZ1bmN0aW9uIER1bW15X2Zyb21JUigpIHsKICAgIHJldHVybiB7CiAgICAgIHR5cGU6ICJQYXR0ZXJuIiwKICAgICAgZ2V0UGF0dGVybjogZnVuY3Rpb24gRHVtbXlfZnJvbUlSX2dldFBhdHRlcm4oKSB7CiAgICAgICAgcmV0dXJuICJob3RwaW5rIjsKICAgICAgfQogICAgfTsKICB9Cn07CgpmdW5jdGlvbiBnZXRTaGFkaW5nUGF0dGVybkZyb21JUihyYXcpIHsKICB2YXIgc2hhZGluZ0lSID0gU2hhZGluZ0lSc1tyYXdbMF1dOwoKICBpZiAoIXNoYWRpbmdJUikgewogICAgdGhyb3cgbmV3IEVycm9yKCJVbmtub3duIElSIHR5cGU6ICIuY29uY2F0KHJhd1swXSkpOwogIH0KCiAgcmV0dXJuIHNoYWRpbmdJUi5mcm9tSVIocmF3KTsKfQoKdmFyIFRpbGluZ1BhdHRlcm4gPSBmdW5jdGlvbiBUaWxpbmdQYXR0ZXJuQ2xvc3VyZSgpIHsKICB2YXIgUGFpbnRUeXBlID0gewogICAgQ09MT1JFRDogMSwKICAgIFVOQ09MT1JFRDogMgogIH07CiAgdmFyIE1BWF9QQVRURVJOX1NJWkUgPSAzMDAwOwoKICBmdW5jdGlvbiBUaWxpbmdQYXR0ZXJuKElSLCBjb2xvciwgY3R4LCBjYW52YXNHcmFwaGljc0ZhY3RvcnksIGJhc2VUcmFuc2Zvcm0pIHsKICAgIHRoaXMub3BlcmF0b3JMaXN0ID0gSVJbMl07CiAgICB0aGlzLm1hdHJpeCA9IElSWzNdIHx8IFsxLCAwLCAwLCAxLCAwLCAwXTsKICAgIHRoaXMuYmJveCA9IElSWzRdOwogICAgdGhpcy54c3RlcCA9IElSWzVdOwogICAgdGhpcy55c3RlcCA9IElSWzZdOwogICAgdGhpcy5wYWludFR5cGUgPSBJUls3XTsKICAgIHRoaXMudGlsaW5nVHlwZSA9IElSWzhdOwogICAgdGhpcy5jb2xvciA9IGNvbG9yOwogICAgdGhpcy5jYW52YXNHcmFwaGljc0ZhY3RvcnkgPSBjYW52YXNHcmFwaGljc0ZhY3Rvcnk7CiAgICB0aGlzLmJhc2VUcmFuc2Zvcm0gPSBiYXNlVHJhbnNmb3JtOwogICAgdGhpcy50eXBlID0gIlBhdHRlcm4iOwogICAgdGhpcy5jdHggPSBjdHg7CiAgfQoKICBUaWxpbmdQYXR0ZXJuLnByb3RvdHlwZSA9IHsKICAgIGNyZWF0ZVBhdHRlcm5DYW52YXM6IGZ1bmN0aW9uIFRpbGluUGF0dGVybl9jcmVhdGVQYXR0ZXJuQ2FudmFzKG93bmVyKSB7CiAgICAgIHZhciBvcGVyYXRvckxpc3QgPSB0aGlzLm9wZXJhdG9yTGlzdDsKICAgICAgdmFyIGJib3ggPSB0aGlzLmJib3g7CiAgICAgIHZhciB4c3RlcCA9IHRoaXMueHN0ZXA7CiAgICAgIHZhciB5c3RlcCA9IHRoaXMueXN0ZXA7CiAgICAgIHZhciBwYWludFR5cGUgPSB0aGlzLnBhaW50VHlwZTsKICAgICAgdmFyIHRpbGluZ1R5cGUgPSB0aGlzLnRpbGluZ1R5cGU7CiAgICAgIHZhciBjb2xvciA9IHRoaXMuY29sb3I7CiAgICAgIHZhciBjYW52YXNHcmFwaGljc0ZhY3RvcnkgPSB0aGlzLmNhbnZhc0dyYXBoaWNzRmFjdG9yeTsKICAgICAgKDAsIF91dGlsLmluZm8pKCJUaWxpbmdUeXBlOiAiICsgdGlsaW5nVHlwZSk7CiAgICAgIHZhciB4MCA9IGJib3hbMF0sCiAgICAgICAgICB5MCA9IGJib3hbMV0sCiAgICAgICAgICB4MSA9IGJib3hbMl0sCiAgICAgICAgICB5MSA9IGJib3hbM107CgogICAgICB2YXIgbWF0cml4U2NhbGUgPSBfdXRpbC5VdGlsLnNpbmd1bGFyVmFsdWVEZWNvbXBvc2UyZFNjYWxlKHRoaXMubWF0cml4KTsKCiAgICAgIHZhciBjdXJNYXRyaXhTY2FsZSA9IF91dGlsLlV0aWwuc2luZ3VsYXJWYWx1ZURlY29tcG9zZTJkU2NhbGUodGhpcy5iYXNlVHJhbnNmb3JtKTsKCiAgICAgIHZhciBjb21iaW5lZFNjYWxlID0gW21hdHJpeFNjYWxlWzBdICogY3VyTWF0cml4U2NhbGVbMF0sIG1hdHJpeFNjYWxlWzFdICogY3VyTWF0cml4U2NhbGVbMV1dOwogICAgICB2YXIgZGlteCA9IHRoaXMuZ2V0U2l6ZUFuZFNjYWxlKHhzdGVwLCB0aGlzLmN0eC5jYW52YXMud2lkdGgsIGNvbWJpbmVkU2NhbGVbMF0pOwogICAgICB2YXIgZGlteSA9IHRoaXMuZ2V0U2l6ZUFuZFNjYWxlKHlzdGVwLCB0aGlzLmN0eC5jYW52YXMuaGVpZ2h0LCBjb21iaW5lZFNjYWxlWzFdKTsKICAgICAgdmFyIHRtcENhbnZhcyA9IG93bmVyLmNhY2hlZENhbnZhc2VzLmdldENhbnZhcygicGF0dGVybiIsIGRpbXguc2l6ZSwgZGlteS5zaXplLCB0cnVlKTsKICAgICAgdmFyIHRtcEN0eCA9IHRtcENhbnZhcy5jb250ZXh0OwogICAgICB2YXIgZ3JhcGhpY3MgPSBjYW52YXNHcmFwaGljc0ZhY3RvcnkuY3JlYXRlQ2FudmFzR3JhcGhpY3ModG1wQ3R4KTsKICAgICAgZ3JhcGhpY3MuZ3JvdXBMZXZlbCA9IG93bmVyLmdyb3VwTGV2ZWw7CiAgICAgIHRoaXMuc2V0RmlsbEFuZFN0cm9rZVN0eWxlVG9Db250ZXh0KGdyYXBoaWNzLCBwYWludFR5cGUsIGNvbG9yKTsKICAgICAgZ3JhcGhpY3MudHJhbnNmb3JtKGRpbXguc2NhbGUsIDAsIDAsIGRpbXkuc2NhbGUsIDAsIDApOwogICAgICBncmFwaGljcy50cmFuc2Zvcm0oMSwgMCwgMCwgMSwgLXgwLCAteTApOwogICAgICB0aGlzLmNsaXBCYm94KGdyYXBoaWNzLCBiYm94LCB4MCwgeTAsIHgxLCB5MSk7CiAgICAgIGdyYXBoaWNzLmV4ZWN1dGVPcGVyYXRvckxpc3Qob3BlcmF0b3JMaXN0KTsKICAgICAgdGhpcy5jdHgudHJhbnNmb3JtKDEsIDAsIDAsIDEsIHgwLCB5MCk7CiAgICAgIHRoaXMuY3R4LnNjYWxlKDEgLyBkaW14LnNjYWxlLCAxIC8gZGlteS5zY2FsZSk7CiAgICAgIHJldHVybiB0bXBDYW52YXMuY2FudmFzOwogICAgfSwKICAgIGdldFNpemVBbmRTY2FsZTogZnVuY3Rpb24gVGlsaW5nUGF0dGVybl9nZXRTaXplQW5kU2NhbGUoc3RlcCwgcmVhbE91dHB1dFNpemUsIHNjYWxlKSB7CiAgICAgIHN0ZXAgPSBNYXRoLmFicyhzdGVwKTsKICAgICAgdmFyIG1heFNpemUgPSBNYXRoLm1heChNQVhfUEFUVEVSTl9TSVpFLCByZWFsT3V0cHV0U2l6ZSk7CiAgICAgIHZhciBzaXplID0gTWF0aC5jZWlsKHN0ZXAgKiBzY2FsZSk7CgogICAgICBpZiAoc2l6ZSA+PSBtYXhTaXplKSB7CiAgICAgICAgc2l6ZSA9IG1heFNpemU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc2NhbGUgPSBzaXplIC8gc3RlcDsKICAgICAgfQoKICAgICAgcmV0dXJuIHsKICAgICAgICBzY2FsZTogc2NhbGUsCiAgICAgICAgc2l6ZTogc2l6ZQogICAgICB9OwogICAgfSwKICAgIGNsaXBCYm94OiBmdW5jdGlvbiBjbGlwQmJveChncmFwaGljcywgYmJveCwgeDAsIHkwLCB4MSwgeTEpIHsKICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYmJveCkgJiYgYmJveC5sZW5ndGggPT09IDQpIHsKICAgICAgICB2YXIgYmJveFdpZHRoID0geDEgLSB4MDsKICAgICAgICB2YXIgYmJveEhlaWdodCA9IHkxIC0geTA7CiAgICAgICAgZ3JhcGhpY3MuY3R4LnJlY3QoeDAsIHkwLCBiYm94V2lkdGgsIGJib3hIZWlnaHQpOwogICAgICAgIGdyYXBoaWNzLmNsaXAoKTsKICAgICAgICBncmFwaGljcy5lbmRQYXRoKCk7CiAgICAgIH0KICAgIH0sCiAgICBzZXRGaWxsQW5kU3Ryb2tlU3R5bGVUb0NvbnRleHQ6IGZ1bmN0aW9uIHNldEZpbGxBbmRTdHJva2VTdHlsZVRvQ29udGV4dChncmFwaGljcywgcGFpbnRUeXBlLCBjb2xvcikgewogICAgICB2YXIgY29udGV4dCA9IGdyYXBoaWNzLmN0eCwKICAgICAgICAgIGN1cnJlbnQgPSBncmFwaGljcy5jdXJyZW50OwoKICAgICAgc3dpdGNoIChwYWludFR5cGUpIHsKICAgICAgICBjYXNlIFBhaW50VHlwZS5DT0xPUkVEOgogICAgICAgICAgdmFyIGN0eCA9IHRoaXMuY3R4OwogICAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSBjdHguZmlsbFN0eWxlOwogICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IGN0eC5zdHJva2VTdHlsZTsKICAgICAgICAgIGN1cnJlbnQuZmlsbENvbG9yID0gY3R4LmZpbGxTdHlsZTsKICAgICAgICAgIGN1cnJlbnQuc3Ryb2tlQ29sb3IgPSBjdHguc3Ryb2tlU3R5bGU7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSBQYWludFR5cGUuVU5DT0xPUkVEOgogICAgICAgICAgdmFyIGNzc0NvbG9yID0gX3V0aWwuVXRpbC5tYWtlQ3NzUmdiKGNvbG9yWzBdLCBjb2xvclsxXSwgY29sb3JbMl0pOwoKICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gY3NzQ29sb3I7CiAgICAgICAgICBjb250ZXh0LnN0cm9rZVN0eWxlID0gY3NzQ29sb3I7CiAgICAgICAgICBjdXJyZW50LmZpbGxDb2xvciA9IGNzc0NvbG9yOwogICAgICAgICAgY3VycmVudC5zdHJva2VDb2xvciA9IGNzc0NvbG9yOwogICAgICAgICAgYnJlYWs7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICB0aHJvdyBuZXcgX3V0aWwuRm9ybWF0RXJyb3IoIlVuc3VwcG9ydGVkIHBhaW50IHR5cGU6ICIuY29uY2F0KHBhaW50VHlwZSkpOwogICAgICB9CiAgICB9LAogICAgZ2V0UGF0dGVybjogZnVuY3Rpb24gVGlsaW5nUGF0dGVybl9nZXRQYXR0ZXJuKGN0eCwgb3duZXIpIHsKICAgICAgY3R4ID0gdGhpcy5jdHg7CiAgICAgIGN0eC5zZXRUcmFuc2Zvcm0uYXBwbHkoY3R4LCB0aGlzLmJhc2VUcmFuc2Zvcm0pOwogICAgICBjdHgudHJhbnNmb3JtLmFwcGx5KGN0eCwgdGhpcy5tYXRyaXgpOwogICAgICB2YXIgdGVtcG9yYXJ5UGF0dGVybkNhbnZhcyA9IHRoaXMuY3JlYXRlUGF0dGVybkNhbnZhcyhvd25lcik7CiAgICAgIHJldHVybiBjdHguY3JlYXRlUGF0dGVybih0ZW1wb3JhcnlQYXR0ZXJuQ2FudmFzLCAicmVwZWF0Iik7CiAgICB9CiAgfTsKICByZXR1cm4gVGlsaW5nUGF0dGVybjsKfSgpOwoKZXhwb3J0cy5UaWxpbmdQYXR0ZXJuID0gVGlsaW5nUGF0dGVybjsKCi8qKiovIH0pLAovKiAyMDMgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5HbG9iYWxXb3JrZXJPcHRpb25zID0gdm9pZCAwOwp2YXIgR2xvYmFsV29ya2VyT3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CmV4cG9ydHMuR2xvYmFsV29ya2VyT3B0aW9ucyA9IEdsb2JhbFdvcmtlck9wdGlvbnM7Ckdsb2JhbFdvcmtlck9wdGlvbnMud29ya2VyUG9ydCA9IEdsb2JhbFdvcmtlck9wdGlvbnMud29ya2VyUG9ydCA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IEdsb2JhbFdvcmtlck9wdGlvbnMud29ya2VyUG9ydDsKR2xvYmFsV29ya2VyT3B0aW9ucy53b3JrZXJTcmMgPSBHbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclNyYyA9PT0gdW5kZWZpbmVkID8gIiIgOiBHbG9iYWxXb3JrZXJPcHRpb25zLndvcmtlclNyYzsKCi8qKiovIH0pLAovKiAyMDQgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5NZXNzYWdlSGFuZGxlciA9IHZvaWQgMDsKCnZhciBfcmVnZW5lcmF0b3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd19wZGZqc19yZXF1aXJlX18oMikpOwoKdmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXyg1KTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICJkZWZhdWx0Ijogb2JqIH07IH0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9Cgp2YXIgQ2FsbGJhY2tLaW5kID0gewogIFVOS05PV046IDAsCiAgREFUQTogMSwKICBFUlJPUjogMgp9Owp2YXIgU3RyZWFtS2luZCA9IHsKICBVTktOT1dOOiAwLAogIENBTkNFTDogMSwKICBDQU5DRUxfQ09NUExFVEU6IDIsCiAgQ0xPU0U6IDMsCiAgRU5RVUVVRTogNCwKICBFUlJPUjogNSwKICBQVUxMOiA2LAogIFBVTExfQ09NUExFVEU6IDcsCiAgU1RBUlRfQ09NUExFVEU6IDgKfTsKCmZ1bmN0aW9uIHdyYXBSZWFzb24ocmVhc29uKSB7CiAgaWYgKF90eXBlb2YocmVhc29uKSAhPT0gIm9iamVjdCIgfHwgcmVhc29uID09PSBudWxsKSB7CiAgICByZXR1cm4gcmVhc29uOwogIH0KCiAgc3dpdGNoIChyZWFzb24ubmFtZSkgewogICAgY2FzZSAiQWJvcnRFeGNlcHRpb24iOgogICAgICByZXR1cm4gbmV3IF91dGlsLkFib3J0RXhjZXB0aW9uKHJlYXNvbi5tZXNzYWdlKTsKCiAgICBjYXNlICJNaXNzaW5nUERGRXhjZXB0aW9uIjoKICAgICAgcmV0dXJuIG5ldyBfdXRpbC5NaXNzaW5nUERGRXhjZXB0aW9uKHJlYXNvbi5tZXNzYWdlKTsKCiAgICBjYXNlICJVbmV4cGVjdGVkUmVzcG9uc2VFeGNlcHRpb24iOgogICAgICByZXR1cm4gbmV3IF91dGlsLlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbihyZWFzb24ubWVzc2FnZSwgcmVhc29uLnN0YXR1cyk7CgogICAgY2FzZSAiVW5rbm93bkVycm9yRXhjZXB0aW9uIjoKICAgICAgcmV0dXJuIG5ldyBfdXRpbC5Vbmtub3duRXJyb3JFeGNlcHRpb24ocmVhc29uLm1lc3NhZ2UsIHJlYXNvbi5kZXRhaWxzKTsKCiAgICBkZWZhdWx0OgogICAgICByZXR1cm4gbmV3IF91dGlsLlVua25vd25FcnJvckV4Y2VwdGlvbihyZWFzb24ubWVzc2FnZSwgcmVhc29uLnRvU3RyaW5nKCkpOwogIH0KfQoKdmFyIE1lc3NhZ2VIYW5kbGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBNZXNzYWdlSGFuZGxlcihzb3VyY2VOYW1lLCB0YXJnZXROYW1lLCBjb21PYmopIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lc3NhZ2VIYW5kbGVyKTsKCiAgICB0aGlzLnNvdXJjZU5hbWUgPSBzb3VyY2VOYW1lOwogICAgdGhpcy50YXJnZXROYW1lID0gdGFyZ2V0TmFtZTsKICAgIHRoaXMuY29tT2JqID0gY29tT2JqOwogICAgdGhpcy5jYWxsYmFja0lkID0gMTsKICAgIHRoaXMuc3RyZWFtSWQgPSAxOwogICAgdGhpcy5wb3N0TWVzc2FnZVRyYW5zZmVycyA9IHRydWU7CiAgICB0aGlzLnN0cmVhbVNpbmtzID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKICAgIHRoaXMuc3RyZWFtQ29udHJvbGxlcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpOwogICAgdGhpcy5jYWxsYmFja0NhcGFiaWxpdGllcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICB0aGlzLmFjdGlvbkhhbmRsZXIgPSBPYmplY3QuY3JlYXRlKG51bGwpOwoKICAgIHRoaXMuX29uQ29tT2JqT25NZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgIHZhciBkYXRhID0gZXZlbnQuZGF0YTsKCiAgICAgIGlmIChkYXRhLnRhcmdldE5hbWUgIT09IF90aGlzLnNvdXJjZU5hbWUpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmIChkYXRhLnN0cmVhbSkgewogICAgICAgIF90aGlzLl9wcm9jZXNzU3RyZWFtTWVzc2FnZShkYXRhKTsKCiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAoZGF0YS5jYWxsYmFjaykgewogICAgICAgIHZhciBjYWxsYmFja0lkID0gZGF0YS5jYWxsYmFja0lkOwogICAgICAgIHZhciBjYXBhYmlsaXR5ID0gX3RoaXMuY2FsbGJhY2tDYXBhYmlsaXRpZXNbY2FsbGJhY2tJZF07CgogICAgICAgIGlmICghY2FwYWJpbGl0eSkgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJDYW5ub3QgcmVzb2x2ZSBjYWxsYmFjayAiLmNvbmNhdChjYWxsYmFja0lkKSk7CiAgICAgICAgfQoKICAgICAgICBkZWxldGUgX3RoaXMuY2FsbGJhY2tDYXBhYmlsaXRpZXNbY2FsbGJhY2tJZF07CgogICAgICAgIGlmIChkYXRhLmNhbGxiYWNrID09PSBDYWxsYmFja0tpbmQuREFUQSkgewogICAgICAgICAgY2FwYWJpbGl0eS5yZXNvbHZlKGRhdGEuZGF0YSk7CiAgICAgICAgfSBlbHNlIGlmIChkYXRhLmNhbGxiYWNrID09PSBDYWxsYmFja0tpbmQuRVJST1IpIHsKICAgICAgICAgIGNhcGFiaWxpdHkucmVqZWN0KHdyYXBSZWFzb24oZGF0YS5yZWFzb24pKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJVbmV4cGVjdGVkIGNhbGxiYWNrIGNhc2UiKTsKICAgICAgICB9CgogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIGFjdGlvbiA9IF90aGlzLmFjdGlvbkhhbmRsZXJbZGF0YS5hY3Rpb25dOwoKICAgICAgaWYgKCFhY3Rpb24pIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlVua25vd24gYWN0aW9uIGZyb20gd29ya2VyOiAiLmNvbmNhdChkYXRhLmFjdGlvbikpOwogICAgICB9CgogICAgICBpZiAoZGF0YS5jYWxsYmFja0lkKSB7CiAgICAgICAgdmFyIGNiU291cmNlTmFtZSA9IF90aGlzLnNvdXJjZU5hbWU7CiAgICAgICAgdmFyIGNiVGFyZ2V0TmFtZSA9IGRhdGEuc291cmNlTmFtZTsKICAgICAgICBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgewogICAgICAgICAgcmVzb2x2ZShhY3Rpb24oZGF0YS5kYXRhKSk7CiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2UoewogICAgICAgICAgICBzb3VyY2VOYW1lOiBjYlNvdXJjZU5hbWUsCiAgICAgICAgICAgIHRhcmdldE5hbWU6IGNiVGFyZ2V0TmFtZSwKICAgICAgICAgICAgY2FsbGJhY2s6IENhbGxiYWNrS2luZC5EQVRBLAogICAgICAgICAgICBjYWxsYmFja0lkOiBkYXRhLmNhbGxiYWNrSWQsCiAgICAgICAgICAgIGRhdGE6IHJlc3VsdAogICAgICAgICAgfSk7CiAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHsKICAgICAgICAgICAgc291cmNlTmFtZTogY2JTb3VyY2VOYW1lLAogICAgICAgICAgICB0YXJnZXROYW1lOiBjYlRhcmdldE5hbWUsCiAgICAgICAgICAgIGNhbGxiYWNrOiBDYWxsYmFja0tpbmQuRVJST1IsCiAgICAgICAgICAgIGNhbGxiYWNrSWQ6IGRhdGEuY2FsbGJhY2tJZCwKICAgICAgICAgICAgcmVhc29uOiB3cmFwUmVhc29uKHJlYXNvbikKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgaWYgKGRhdGEuc3RyZWFtSWQpIHsKICAgICAgICBfdGhpcy5fY3JlYXRlU3RyZWFtU2luayhkYXRhKTsKCiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBhY3Rpb24oZGF0YS5kYXRhKTsKICAgIH07CgogICAgY29tT2JqLmFkZEV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLCB0aGlzLl9vbkNvbU9iak9uTWVzc2FnZSk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoTWVzc2FnZUhhbmRsZXIsIFt7CiAgICBrZXk6ICJvbiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb24oYWN0aW9uTmFtZSwgaGFuZGxlcikgewogICAgICB2YXIgYWggPSB0aGlzLmFjdGlvbkhhbmRsZXI7CgogICAgICBpZiAoYWhbYWN0aW9uTmFtZV0pIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIlRoZXJlIGlzIGFscmVhZHkgYW4gYWN0aW9uTmFtZSBjYWxsZWQgXCIiLmNvbmNhdChhY3Rpb25OYW1lLCAiXCIiKSk7CiAgICAgIH0KCiAgICAgIGFoW2FjdGlvbk5hbWVdID0gaGFuZGxlcjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJzZW5kIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzZW5kKGFjdGlvbk5hbWUsIGRhdGEsIHRyYW5zZmVycykgewogICAgICB0aGlzLl9wb3N0TWVzc2FnZSh7CiAgICAgICAgc291cmNlTmFtZTogdGhpcy5zb3VyY2VOYW1lLAogICAgICAgIHRhcmdldE5hbWU6IHRoaXMudGFyZ2V0TmFtZSwKICAgICAgICBhY3Rpb246IGFjdGlvbk5hbWUsCiAgICAgICAgZGF0YTogZGF0YQogICAgICB9LCB0cmFuc2ZlcnMpOwogICAgfQogIH0sIHsKICAgIGtleTogInNlbmRXaXRoUHJvbWlzZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2VuZFdpdGhQcm9taXNlKGFjdGlvbk5hbWUsIGRhdGEsIHRyYW5zZmVycykgewogICAgICB2YXIgY2FsbGJhY2tJZCA9IHRoaXMuY2FsbGJhY2tJZCsrOwogICAgICB2YXIgY2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTsKICAgICAgdGhpcy5jYWxsYmFja0NhcGFiaWxpdGllc1tjYWxsYmFja0lkXSA9IGNhcGFiaWxpdHk7CgogICAgICB0cnkgewogICAgICAgIHRoaXMuX3Bvc3RNZXNzYWdlKHsKICAgICAgICAgIHNvdXJjZU5hbWU6IHRoaXMuc291cmNlTmFtZSwKICAgICAgICAgIHRhcmdldE5hbWU6IHRoaXMudGFyZ2V0TmFtZSwKICAgICAgICAgIGFjdGlvbjogYWN0aW9uTmFtZSwKICAgICAgICAgIGNhbGxiYWNrSWQ6IGNhbGxiYWNrSWQsCiAgICAgICAgICBkYXRhOiBkYXRhCiAgICAgICAgfSwgdHJhbnNmZXJzKTsKICAgICAgfSBjYXRjaCAoZXgpIHsKICAgICAgICBjYXBhYmlsaXR5LnJlamVjdChleCk7CiAgICAgIH0KCiAgICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAic2VuZFdpdGhTdHJlYW0iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHNlbmRXaXRoU3RyZWFtKGFjdGlvbk5hbWUsIGRhdGEsIHF1ZXVlaW5nU3RyYXRlZ3ksIHRyYW5zZmVycykgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciBzdHJlYW1JZCA9IHRoaXMuc3RyZWFtSWQrKzsKICAgICAgdmFyIHNvdXJjZU5hbWUgPSB0aGlzLnNvdXJjZU5hbWU7CiAgICAgIHZhciB0YXJnZXROYW1lID0gdGhpcy50YXJnZXROYW1lOwogICAgICB2YXIgY29tT2JqID0gdGhpcy5jb21PYmo7CiAgICAgIHJldHVybiBuZXcgUmVhZGFibGVTdHJlYW0oewogICAgICAgIHN0YXJ0OiBmdW5jdGlvbiBzdGFydChjb250cm9sbGVyKSB7CiAgICAgICAgICB2YXIgc3RhcnRDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpOwogICAgICAgICAgX3RoaXMyLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXSA9IHsKICAgICAgICAgICAgY29udHJvbGxlcjogY29udHJvbGxlciwKICAgICAgICAgICAgc3RhcnRDYWxsOiBzdGFydENhcGFiaWxpdHksCiAgICAgICAgICAgIHB1bGxDYWxsOiBudWxsLAogICAgICAgICAgICBjYW5jZWxDYWxsOiBudWxsLAogICAgICAgICAgICBpc0Nsb3NlZDogZmFsc2UKICAgICAgICAgIH07CgogICAgICAgICAgX3RoaXMyLl9wb3N0TWVzc2FnZSh7CiAgICAgICAgICAgIHNvdXJjZU5hbWU6IHNvdXJjZU5hbWUsCiAgICAgICAgICAgIHRhcmdldE5hbWU6IHRhcmdldE5hbWUsCiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uTmFtZSwKICAgICAgICAgICAgc3RyZWFtSWQ6IHN0cmVhbUlkLAogICAgICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgICAgICBkZXNpcmVkU2l6ZTogY29udHJvbGxlci5kZXNpcmVkU2l6ZQogICAgICAgICAgfSwgdHJhbnNmZXJzKTsKCiAgICAgICAgICByZXR1cm4gc3RhcnRDYXBhYmlsaXR5LnByb21pc2U7CiAgICAgICAgfSwKICAgICAgICBwdWxsOiBmdW5jdGlvbiBwdWxsKGNvbnRyb2xsZXIpIHsKICAgICAgICAgIHZhciBwdWxsQ2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTsKICAgICAgICAgIF90aGlzMi5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0ucHVsbENhbGwgPSBwdWxsQ2FwYWJpbGl0eTsKICAgICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7CiAgICAgICAgICAgIHNvdXJjZU5hbWU6IHNvdXJjZU5hbWUsCiAgICAgICAgICAgIHRhcmdldE5hbWU6IHRhcmdldE5hbWUsCiAgICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5QVUxMLAogICAgICAgICAgICBzdHJlYW1JZDogc3RyZWFtSWQsCiAgICAgICAgICAgIGRlc2lyZWRTaXplOiBjb250cm9sbGVyLmRlc2lyZWRTaXplCiAgICAgICAgICB9KTsKICAgICAgICAgIHJldHVybiBwdWxsQ2FwYWJpbGl0eS5wcm9taXNlOwogICAgICAgIH0sCiAgICAgICAgY2FuY2VsOiBmdW5jdGlvbiBjYW5jZWwocmVhc29uKSB7CiAgICAgICAgICAoMCwgX3V0aWwuYXNzZXJ0KShyZWFzb24gaW5zdGFuY2VvZiBFcnJvciwgImNhbmNlbCBtdXN0IGhhdmUgYSB2YWxpZCByZWFzb24iKTsKICAgICAgICAgIHZhciBjYW5jZWxDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpOwogICAgICAgICAgX3RoaXMyLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5jYW5jZWxDYWxsID0gY2FuY2VsQ2FwYWJpbGl0eTsKICAgICAgICAgIF90aGlzMi5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0uaXNDbG9zZWQgPSB0cnVlOwogICAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHsKICAgICAgICAgICAgc291cmNlTmFtZTogc291cmNlTmFtZSwKICAgICAgICAgICAgdGFyZ2V0TmFtZTogdGFyZ2V0TmFtZSwKICAgICAgICAgICAgc3RyZWFtOiBTdHJlYW1LaW5kLkNBTkNFTCwKICAgICAgICAgICAgc3RyZWFtSWQ6IHN0cmVhbUlkLAogICAgICAgICAgICByZWFzb246IHdyYXBSZWFzb24ocmVhc29uKQogICAgICAgICAgfSk7CiAgICAgICAgICByZXR1cm4gY2FuY2VsQ2FwYWJpbGl0eS5wcm9taXNlOwogICAgICAgIH0KICAgICAgfSwgcXVldWVpbmdTdHJhdGVneSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX2NyZWF0ZVN0cmVhbVNpbmsiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9jcmVhdGVTdHJlYW1TaW5rKGRhdGEpIHsKICAgICAgdmFyIHNlbGYgPSB0aGlzOwogICAgICB2YXIgYWN0aW9uID0gdGhpcy5hY3Rpb25IYW5kbGVyW2RhdGEuYWN0aW9uXTsKICAgICAgdmFyIHN0cmVhbUlkID0gZGF0YS5zdHJlYW1JZDsKICAgICAgdmFyIHNvdXJjZU5hbWUgPSB0aGlzLnNvdXJjZU5hbWU7CiAgICAgIHZhciB0YXJnZXROYW1lID0gZGF0YS5zb3VyY2VOYW1lOwogICAgICB2YXIgY29tT2JqID0gdGhpcy5jb21PYmo7CiAgICAgIHZhciBzdHJlYW1TaW5rID0gewogICAgICAgIGVucXVldWU6IGZ1bmN0aW9uIGVucXVldWUoY2h1bmspIHsKICAgICAgICAgIHZhciBzaXplID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxOwogICAgICAgICAgdmFyIHRyYW5zZmVycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkOwoKICAgICAgICAgIGlmICh0aGlzLmlzQ2FuY2VsbGVkKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgbGFzdERlc2lyZWRTaXplID0gdGhpcy5kZXNpcmVkU2l6ZTsKICAgICAgICAgIHRoaXMuZGVzaXJlZFNpemUgLT0gc2l6ZTsKCiAgICAgICAgICBpZiAobGFzdERlc2lyZWRTaXplID4gMCAmJiB0aGlzLmRlc2lyZWRTaXplIDw9IDApIHsKICAgICAgICAgICAgdGhpcy5zaW5rQ2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTsKICAgICAgICAgICAgdGhpcy5yZWFkeSA9IHRoaXMuc2lua0NhcGFiaWxpdHkucHJvbWlzZTsKICAgICAgICAgIH0KCiAgICAgICAgICBzZWxmLl9wb3N0TWVzc2FnZSh7CiAgICAgICAgICAgIHNvdXJjZU5hbWU6IHNvdXJjZU5hbWUsCiAgICAgICAgICAgIHRhcmdldE5hbWU6IHRhcmdldE5hbWUsCiAgICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5FTlFVRVVFLAogICAgICAgICAgICBzdHJlYW1JZDogc3RyZWFtSWQsCiAgICAgICAgICAgIGNodW5rOiBjaHVuawogICAgICAgICAgfSwgdHJhbnNmZXJzKTsKICAgICAgICB9LAogICAgICAgIGNsb3NlOiBmdW5jdGlvbiBjbG9zZSgpIHsKICAgICAgICAgIGlmICh0aGlzLmlzQ2FuY2VsbGVkKSB7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgIH0KCiAgICAgICAgICB0aGlzLmlzQ2FuY2VsbGVkID0gdHJ1ZTsKICAgICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7CiAgICAgICAgICAgIHNvdXJjZU5hbWU6IHNvdXJjZU5hbWUsCiAgICAgICAgICAgIHRhcmdldE5hbWU6IHRhcmdldE5hbWUsCiAgICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5DTE9TRSwKICAgICAgICAgICAgc3RyZWFtSWQ6IHN0cmVhbUlkCiAgICAgICAgICB9KTsKICAgICAgICAgIGRlbGV0ZSBzZWxmLnN0cmVhbVNpbmtzW3N0cmVhbUlkXTsKICAgICAgICB9LAogICAgICAgIGVycm9yOiBmdW5jdGlvbiBlcnJvcihyZWFzb24pIHsKICAgICAgICAgICgwLCBfdXRpbC5hc3NlcnQpKHJlYXNvbiBpbnN0YW5jZW9mIEVycm9yLCAiZXJyb3IgbXVzdCBoYXZlIGEgdmFsaWQgcmVhc29uIik7CgogICAgICAgICAgaWYgKHRoaXMuaXNDYW5jZWxsZWQpIHsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgfQoKICAgICAgICAgIHRoaXMuaXNDYW5jZWxsZWQgPSB0cnVlOwogICAgICAgICAgY29tT2JqLnBvc3RNZXNzYWdlKHsKICAgICAgICAgICAgc291cmNlTmFtZTogc291cmNlTmFtZSwKICAgICAgICAgICAgdGFyZ2V0TmFtZTogdGFyZ2V0TmFtZSwKICAgICAgICAgICAgc3RyZWFtOiBTdHJlYW1LaW5kLkVSUk9SLAogICAgICAgICAgICBzdHJlYW1JZDogc3RyZWFtSWQsCiAgICAgICAgICAgIHJlYXNvbjogd3JhcFJlYXNvbihyZWFzb24pCiAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIHNpbmtDYXBhYmlsaXR5OiAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCksCiAgICAgICAgb25QdWxsOiBudWxsLAogICAgICAgIG9uQ2FuY2VsOiBudWxsLAogICAgICAgIGlzQ2FuY2VsbGVkOiBmYWxzZSwKICAgICAgICBkZXNpcmVkU2l6ZTogZGF0YS5kZXNpcmVkU2l6ZSwKICAgICAgICByZWFkeTogbnVsbAogICAgICB9OwogICAgICBzdHJlYW1TaW5rLnNpbmtDYXBhYmlsaXR5LnJlc29sdmUoKTsKICAgICAgc3RyZWFtU2luay5yZWFkeSA9IHN0cmVhbVNpbmsuc2lua0NhcGFiaWxpdHkucHJvbWlzZTsKICAgICAgdGhpcy5zdHJlYW1TaW5rc1tzdHJlYW1JZF0gPSBzdHJlYW1TaW5rOwogICAgICBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgewogICAgICAgIHJlc29sdmUoYWN0aW9uKGRhdGEuZGF0YSwgc3RyZWFtU2luaykpOwogICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2UoewogICAgICAgICAgc291cmNlTmFtZTogc291cmNlTmFtZSwKICAgICAgICAgIHRhcmdldE5hbWU6IHRhcmdldE5hbWUsCiAgICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuU1RBUlRfQ09NUExFVEUsCiAgICAgICAgICBzdHJlYW1JZDogc3RyZWFtSWQsCiAgICAgICAgICBzdWNjZXNzOiB0cnVlCiAgICAgICAgfSk7CiAgICAgIH0sIGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2UoewogICAgICAgICAgc291cmNlTmFtZTogc291cmNlTmFtZSwKICAgICAgICAgIHRhcmdldE5hbWU6IHRhcmdldE5hbWUsCiAgICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuU1RBUlRfQ09NUExFVEUsCiAgICAgICAgICBzdHJlYW1JZDogc3RyZWFtSWQsCiAgICAgICAgICByZWFzb246IHdyYXBSZWFzb24ocmVhc29uKQogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfcHJvY2Vzc1N0cmVhbU1lc3NhZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9wcm9jZXNzU3RyZWFtTWVzc2FnZShkYXRhKSB7CiAgICAgIHZhciBzdHJlYW1JZCA9IGRhdGEuc3RyZWFtSWQ7CiAgICAgIHZhciBzb3VyY2VOYW1lID0gdGhpcy5zb3VyY2VOYW1lOwogICAgICB2YXIgdGFyZ2V0TmFtZSA9IGRhdGEuc291cmNlTmFtZTsKICAgICAgdmFyIGNvbU9iaiA9IHRoaXMuY29tT2JqOwoKICAgICAgc3dpdGNoIChkYXRhLnN0cmVhbSkgewogICAgICAgIGNhc2UgU3RyZWFtS2luZC5TVEFSVF9DT01QTEVURToKICAgICAgICAgIGlmIChkYXRhLnN1Y2Nlc3MpIHsKICAgICAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0uc3RhcnRDYWxsLnJlc29sdmUoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuc3RyZWFtQ29udHJvbGxlcnNbc3RyZWFtSWRdLnN0YXJ0Q2FsbC5yZWplY3Qod3JhcFJlYXNvbihkYXRhLnJlYXNvbikpOwogICAgICAgICAgfQoKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIFN0cmVhbUtpbmQuUFVMTF9DT01QTEVURToKICAgICAgICAgIGlmIChkYXRhLnN1Y2Nlc3MpIHsKICAgICAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0ucHVsbENhbGwucmVzb2x2ZSgpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0ucHVsbENhbGwucmVqZWN0KHdyYXBSZWFzb24oZGF0YS5yZWFzb24pKTsKICAgICAgICAgIH0KCiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSBTdHJlYW1LaW5kLlBVTEw6CiAgICAgICAgICBpZiAoIXRoaXMuc3RyZWFtU2lua3Nbc3RyZWFtSWRdKSB7CiAgICAgICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7CiAgICAgICAgICAgICAgc291cmNlTmFtZTogc291cmNlTmFtZSwKICAgICAgICAgICAgICB0YXJnZXROYW1lOiB0YXJnZXROYW1lLAogICAgICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5QVUxMX0NPTVBMRVRFLAogICAgICAgICAgICAgIHN0cmVhbUlkOiBzdHJlYW1JZCwKICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAodGhpcy5zdHJlYW1TaW5rc1tzdHJlYW1JZF0uZGVzaXJlZFNpemUgPD0gMCAmJiBkYXRhLmRlc2lyZWRTaXplID4gMCkgewogICAgICAgICAgICB0aGlzLnN0cmVhbVNpbmtzW3N0cmVhbUlkXS5zaW5rQ2FwYWJpbGl0eS5yZXNvbHZlKCk7CiAgICAgICAgICB9CgogICAgICAgICAgdGhpcy5zdHJlYW1TaW5rc1tzdHJlYW1JZF0uZGVzaXJlZFNpemUgPSBkYXRhLmRlc2lyZWRTaXplOwogICAgICAgICAgdmFyIG9uUHVsbCA9IHRoaXMuc3RyZWFtU2lua3NbZGF0YS5zdHJlYW1JZF0ub25QdWxsOwogICAgICAgICAgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgICAgICAgcmVzb2x2ZShvblB1bGwgJiYgb25QdWxsKCkpOwogICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGNvbU9iai5wb3N0TWVzc2FnZSh7CiAgICAgICAgICAgICAgc291cmNlTmFtZTogc291cmNlTmFtZSwKICAgICAgICAgICAgICB0YXJnZXROYW1lOiB0YXJnZXROYW1lLAogICAgICAgICAgICAgIHN0cmVhbTogU3RyZWFtS2luZC5QVUxMX0NPTVBMRVRFLAogICAgICAgICAgICAgIHN0cmVhbUlkOiBzdHJlYW1JZCwKICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2UoewogICAgICAgICAgICAgIHNvdXJjZU5hbWU6IHNvdXJjZU5hbWUsCiAgICAgICAgICAgICAgdGFyZ2V0TmFtZTogdGFyZ2V0TmFtZSwKICAgICAgICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuUFVMTF9DT01QTEVURSwKICAgICAgICAgICAgICBzdHJlYW1JZDogc3RyZWFtSWQsCiAgICAgICAgICAgICAgcmVhc29uOiB3cmFwUmVhc29uKHJlYXNvbikKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9KTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIFN0cmVhbUtpbmQuRU5RVUVVRToKICAgICAgICAgICgwLCBfdXRpbC5hc3NlcnQpKHRoaXMuc3RyZWFtQ29udHJvbGxlcnNbc3RyZWFtSWRdLCAiZW5xdWV1ZSBzaG91bGQgaGF2ZSBzdHJlYW0gY29udHJvbGxlciIpOwoKICAgICAgICAgIGlmICh0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5pc0Nsb3NlZCkgewogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KCiAgICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5jb250cm9sbGVyLmVucXVldWUoZGF0YS5jaHVuayk7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSBTdHJlYW1LaW5kLkNMT1NFOgogICAgICAgICAgKDAsIF91dGlsLmFzc2VydCkodGhpcy5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0sICJjbG9zZSBzaG91bGQgaGF2ZSBzdHJlYW0gY29udHJvbGxlciIpOwoKICAgICAgICAgIGlmICh0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5pc0Nsb3NlZCkgewogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KCiAgICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5pc0Nsb3NlZCA9IHRydWU7CiAgICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5jb250cm9sbGVyLmNsb3NlKCk7CgogICAgICAgICAgdGhpcy5fZGVsZXRlU3RyZWFtQ29udHJvbGxlcihzdHJlYW1JZCk7CgogICAgICAgICAgYnJlYWs7CgogICAgICAgIGNhc2UgU3RyZWFtS2luZC5FUlJPUjoKICAgICAgICAgICgwLCBfdXRpbC5hc3NlcnQpKHRoaXMuc3RyZWFtQ29udHJvbGxlcnNbc3RyZWFtSWRdLCAiZXJyb3Igc2hvdWxkIGhhdmUgc3RyZWFtIGNvbnRyb2xsZXIiKTsKICAgICAgICAgIHRoaXMuc3RyZWFtQ29udHJvbGxlcnNbc3RyZWFtSWRdLmNvbnRyb2xsZXIuZXJyb3Iod3JhcFJlYXNvbihkYXRhLnJlYXNvbikpOwoKICAgICAgICAgIHRoaXMuX2RlbGV0ZVN0cmVhbUNvbnRyb2xsZXIoc3RyZWFtSWQpOwoKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIFN0cmVhbUtpbmQuQ0FOQ0VMX0NPTVBMRVRFOgogICAgICAgICAgaWYgKGRhdGEuc3VjY2VzcykgewogICAgICAgICAgICB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5jYW5jZWxDYWxsLnJlc29sdmUoKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuc3RyZWFtQ29udHJvbGxlcnNbc3RyZWFtSWRdLmNhbmNlbENhbGwucmVqZWN0KHdyYXBSZWFzb24oZGF0YS5yZWFzb24pKTsKICAgICAgICAgIH0KCiAgICAgICAgICB0aGlzLl9kZWxldGVTdHJlYW1Db250cm9sbGVyKHN0cmVhbUlkKTsKCiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSBTdHJlYW1LaW5kLkNBTkNFTDoKICAgICAgICAgIGlmICghdGhpcy5zdHJlYW1TaW5rc1tzdHJlYW1JZF0pIHsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIG9uQ2FuY2VsID0gdGhpcy5zdHJlYW1TaW5rc1tkYXRhLnN0cmVhbUlkXS5vbkNhbmNlbDsKICAgICAgICAgIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7CiAgICAgICAgICAgIHJlc29sdmUob25DYW5jZWwgJiYgb25DYW5jZWwod3JhcFJlYXNvbihkYXRhLnJlYXNvbikpKTsKICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2UoewogICAgICAgICAgICAgIHNvdXJjZU5hbWU6IHNvdXJjZU5hbWUsCiAgICAgICAgICAgICAgdGFyZ2V0TmFtZTogdGFyZ2V0TmFtZSwKICAgICAgICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuQ0FOQ0VMX0NPTVBMRVRFLAogICAgICAgICAgICAgIHN0cmVhbUlkOiBzdHJlYW1JZCwKICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgICBjb21PYmoucG9zdE1lc3NhZ2UoewogICAgICAgICAgICAgIHNvdXJjZU5hbWU6IHNvdXJjZU5hbWUsCiAgICAgICAgICAgICAgdGFyZ2V0TmFtZTogdGFyZ2V0TmFtZSwKICAgICAgICAgICAgICBzdHJlYW06IFN0cmVhbUtpbmQuQ0FOQ0VMX0NPTVBMRVRFLAogICAgICAgICAgICAgIHN0cmVhbUlkOiBzdHJlYW1JZCwKICAgICAgICAgICAgICByZWFzb246IHdyYXBSZWFzb24ocmVhc29uKQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgICAgdGhpcy5zdHJlYW1TaW5rc1tzdHJlYW1JZF0uc2lua0NhcGFiaWxpdHkucmVqZWN0KHdyYXBSZWFzb24oZGF0YS5yZWFzb24pKTsKICAgICAgICAgIHRoaXMuc3RyZWFtU2lua3Nbc3RyZWFtSWRdLmlzQ2FuY2VsbGVkID0gdHJ1ZTsKICAgICAgICAgIGRlbGV0ZSB0aGlzLnN0cmVhbVNpbmtzW3N0cmVhbUlkXTsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJVbmV4cGVjdGVkIHN0cmVhbSBjYXNlIik7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJfZGVsZXRlU3RyZWFtQ29udHJvbGxlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2RlbGV0ZVN0cmVhbUNvbnRyb2xsZXIyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JbImRlZmF1bHQiXS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoc3RyZWFtSWQpIHsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yWyJkZWZhdWx0Il0ud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsU2V0dGxlZChbdGhpcy5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0uc3RhcnRDYWxsLCB0aGlzLnN0cmVhbUNvbnRyb2xsZXJzW3N0cmVhbUlkXS5wdWxsQ2FsbCwgdGhpcy5zdHJlYW1Db250cm9sbGVyc1tzdHJlYW1JZF0uY2FuY2VsQ2FsbF0ubWFwKGZ1bmN0aW9uIChjYXBhYmlsaXR5KSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBjYXBhYmlsaXR5ICYmIGNhcGFiaWxpdHkucHJvbWlzZTsKICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuc3RyZWFtQ29udHJvbGxlcnNbc3RyZWFtSWRdOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gX2RlbGV0ZVN0cmVhbUNvbnRyb2xsZXIoX3gpIHsKICAgICAgICByZXR1cm4gX2RlbGV0ZVN0cmVhbUNvbnRyb2xsZXIyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBfZGVsZXRlU3RyZWFtQ29udHJvbGxlcjsKICAgIH0oKQogIH0sIHsKICAgIGtleTogIl9wb3N0TWVzc2FnZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3Bvc3RNZXNzYWdlKG1lc3NhZ2UsIHRyYW5zZmVycykgewogICAgICBpZiAodHJhbnNmZXJzICYmIHRoaXMucG9zdE1lc3NhZ2VUcmFuc2ZlcnMpIHsKICAgICAgICB0aGlzLmNvbU9iai5wb3N0TWVzc2FnZShtZXNzYWdlLCB0cmFuc2ZlcnMpOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuY29tT2JqLnBvc3RNZXNzYWdlKG1lc3NhZ2UpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiZGVzdHJveSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZGVzdHJveSgpIHsKICAgICAgdGhpcy5jb21PYmoucmVtb3ZlRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsIHRoaXMuX29uQ29tT2JqT25NZXNzYWdlKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBNZXNzYWdlSGFuZGxlcjsKfSgpOwoKZXhwb3J0cy5NZXNzYWdlSGFuZGxlciA9IE1lc3NhZ2VIYW5kbGVyOwoKLyoqKi8gfSksCi8qIDIwNSAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7CgoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLk1ldGFkYXRhID0gdm9pZCAwOwoKdmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXyg1KTsKCnZhciBfeG1sX3BhcnNlciA9IF9fd19wZGZqc19yZXF1aXJlX18oMjA2KTsKCmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpOyB9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAidW5kZWZpbmVkIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfQoKZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0OyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gInVuZGVmaW5lZCIgfHwgb1tTeW1ib2wuaXRlcmF0b3JdID09IG51bGwpIHsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gIm51bWJlciIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UyKSB7IHRocm93IF9lMjsgfSwgZjogRiB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC4iKTsgfSB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIGRpZEVyciA9IGZhbHNlLCBlcnI7IHJldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IGl0ID0gb1tTeW1ib2wuaXRlcmF0b3JdKCk7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciBzdGVwID0gaXQubmV4dCgpOyBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lOyByZXR1cm4gc3RlcDsgfSwgZTogZnVuY3Rpb24gZShfZTMpIHsgZGlkRXJyID0gdHJ1ZTsgZXJyID0gX2UzOyB9LCBmOiBmdW5jdGlvbiBmKCkgeyB0cnkgeyBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXRbInJldHVybiJdICE9IG51bGwpIGl0WyJyZXR1cm4iXSgpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9CgpmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09ICJzdHJpbmciKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gIk9iamVjdCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09ICJNYXAiIHx8IG4gPT09ICJTZXQiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09ICJBcmd1bWVudHMiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfQoKZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKdmFyIE1ldGFkYXRhID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBNZXRhZGF0YShkYXRhKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWV0YWRhdGEpOwoKICAgICgwLCBfdXRpbC5hc3NlcnQpKHR5cGVvZiBkYXRhID09PSAic3RyaW5nIiwgIk1ldGFkYXRhOiBpbnB1dCBpcyBub3QgYSBzdHJpbmciKTsKICAgIGRhdGEgPSB0aGlzLl9yZXBhaXIoZGF0YSk7CiAgICB2YXIgcGFyc2VyID0gbmV3IF94bWxfcGFyc2VyLlNpbXBsZVhNTFBhcnNlcigpOwogICAgdmFyIHhtbERvY3VtZW50ID0gcGFyc2VyLnBhcnNlRnJvbVN0cmluZyhkYXRhKTsKICAgIHRoaXMuX21ldGFkYXRhTWFwID0gbmV3IE1hcCgpOwoKICAgIGlmICh4bWxEb2N1bWVudCkgewogICAgICB0aGlzLl9wYXJzZSh4bWxEb2N1bWVudCk7CiAgICB9CiAgfQoKICBfY3JlYXRlQ2xhc3MoTWV0YWRhdGEsIFt7CiAgICBrZXk6ICJfcmVwYWlyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfcmVwYWlyKGRhdGEpIHsKICAgICAgcmV0dXJuIGRhdGEucmVwbGFjZSgvXltePF0rLywgIiIpLnJlcGxhY2UoLz5cXDM3NlxcMzc3KFtePF0rKS9nLCBmdW5jdGlvbiAoYWxsLCBjb2RlcykgewogICAgICAgIHZhciBieXRlcyA9IGNvZGVzLnJlcGxhY2UoL1xcKFswLTNdKShbMC03XSkoWzAtN10pL2csIGZ1bmN0aW9uIChjb2RlLCBkMSwgZDIsIGQzKSB7CiAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShkMSAqIDY0ICsgZDIgKiA4ICsgZDMgKiAxKTsKICAgICAgICB9KS5yZXBsYWNlKC8mKGFtcHxhcG9zfGd0fGx0fHF1b3QpOy9nLCBmdW5jdGlvbiAoc3RyLCBuYW1lKSB7CiAgICAgICAgICBzd2l0Y2ggKG5hbWUpIHsKICAgICAgICAgICAgY2FzZSAiYW1wIjoKICAgICAgICAgICAgICByZXR1cm4gIiYiOwoKICAgICAgICAgICAgY2FzZSAiYXBvcyI6CiAgICAgICAgICAgICAgcmV0dXJuICInIjsKCiAgICAgICAgICAgIGNhc2UgImd0IjoKICAgICAgICAgICAgICByZXR1cm4gIj4iOwoKICAgICAgICAgICAgY2FzZSAibHQiOgogICAgICAgICAgICAgIHJldHVybiAiPCI7CgogICAgICAgICAgICBjYXNlICJxdW90IjoKICAgICAgICAgICAgICByZXR1cm4gJyInOwogICAgICAgICAgfQoKICAgICAgICAgIHRocm93IG5ldyBFcnJvcigiX3JlcGFpcjogIi5jb25jYXQobmFtZSwgIiBpc24ndCBkZWZpbmVkLiIpKTsKICAgICAgICB9KTsKICAgICAgICB2YXIgY2hhcnMgPSAiIjsKCiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gYnl0ZXMubGVuZ3RoOyBpIDwgaWk7IGkgKz0gMikgewogICAgICAgICAgdmFyIGNvZGUgPSBieXRlcy5jaGFyQ29kZUF0KGkpICogMjU2ICsgYnl0ZXMuY2hhckNvZGVBdChpICsgMSk7CgogICAgICAgICAgaWYgKGNvZGUgPj0gMzIgJiYgY29kZSA8IDEyNyAmJiBjb2RlICE9PSA2MCAmJiBjb2RlICE9PSA2MiAmJiBjb2RlICE9PSAzOCkgewogICAgICAgICAgICBjaGFycyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY2hhcnMgKz0gIiYjeCIgKyAoMHgxMDAwMCArIGNvZGUpLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMSkgKyAiOyI7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gIj4iICsgY2hhcnM7CiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogIl9wYXJzZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3BhcnNlKHhtbERvY3VtZW50KSB7CiAgICAgIHZhciByZGYgPSB4bWxEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7CgogICAgICBpZiAocmRmLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICJyZGY6cmRmIikgewogICAgICAgIHJkZiA9IHJkZi5maXJzdENoaWxkOwoKICAgICAgICB3aGlsZSAocmRmICYmIHJkZi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAicmRmOnJkZiIpIHsKICAgICAgICAgIHJkZiA9IHJkZi5uZXh0U2libGluZzsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHZhciBub2RlTmFtZSA9IHJkZiA/IHJkZi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIDogbnVsbDsKCiAgICAgIGlmICghcmRmIHx8IG5vZGVOYW1lICE9PSAicmRmOnJkZiIgfHwgIXJkZi5oYXNDaGlsZE5vZGVzKCkpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciBjaGlsZHJlbiA9IHJkZi5jaGlsZE5vZGVzOwoKICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICAgIHZhciBkZXNjID0gY2hpbGRyZW5baV07CgogICAgICAgIGlmIChkZXNjLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICJyZGY6ZGVzY3JpcHRpb24iKSB7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CgogICAgICAgIGZvciAodmFyIGogPSAwLCBqaiA9IGRlc2MuY2hpbGROb2Rlcy5sZW5ndGg7IGogPCBqajsgaisrKSB7CiAgICAgICAgICBpZiAoZGVzYy5jaGlsZE5vZGVzW2pdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09ICIjdGV4dCIpIHsKICAgICAgICAgICAgdmFyIGVudHJ5ID0gZGVzYy5jaGlsZE5vZGVzW2pdOwogICAgICAgICAgICB2YXIgbmFtZSA9IGVudHJ5Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7CgogICAgICAgICAgICB0aGlzLl9tZXRhZGF0YU1hcC5zZXQobmFtZSwgZW50cnkudGV4dENvbnRlbnQudHJpbSgpKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldChuYW1lKSB7CiAgICAgIHJldHVybiB0aGlzLl9tZXRhZGF0YU1hcC5oYXMobmFtZSkgPyB0aGlzLl9tZXRhZGF0YU1hcC5nZXQobmFtZSkgOiBudWxsOwogICAgfQogIH0sIHsKICAgIGtleTogImdldEFsbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QWxsKCkgewogICAgICB2YXIgb2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTsKCiAgICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLl9tZXRhZGF0YU1hcCksCiAgICAgICAgICBfc3RlcDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBfc3RlcCR2YWx1ZSA9IF9zbGljZWRUb0FycmF5KF9zdGVwLnZhbHVlLCAyKSwKICAgICAgICAgICAgICBrZXkgPSBfc3RlcCR2YWx1ZVswXSwKICAgICAgICAgICAgICB2YWx1ZSA9IF9zdGVwJHZhbHVlWzFdOwoKICAgICAgICAgIG9ialtrZXldID0gdmFsdWU7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvci5mKCk7CiAgICAgIH0KCiAgICAgIHJldHVybiBvYmo7CiAgICB9CiAgfSwgewogICAga2V5OiAiaGFzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBoYXMobmFtZSkgewogICAgICByZXR1cm4gdGhpcy5fbWV0YWRhdGFNYXAuaGFzKG5hbWUpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIE1ldGFkYXRhOwp9KCk7CgpleHBvcnRzLk1ldGFkYXRhID0gTWV0YWRhdGE7CgovKioqLyB9KSwKLyogMjA2ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuU2ltcGxlWE1MUGFyc2VyID0gdm9pZCAwOwoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfQoKZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC4iKTsgfQoKZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSAic3RyaW5nIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09ICJPYmplY3QiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSAiTWFwIiB8fCBuID09PSAiU2V0IikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSAiQXJndW1lbnRzIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH0KCmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfQoKZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gInVuZGVmaW5lZCIgfHwgIShTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pWyJyZXR1cm4iXSAhPSBudWxsKSBfaVsicmV0dXJuIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9CgpmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7IH0KCmZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ICE9PSAidW5kZWZpbmVkIiAmJiBSZWZsZWN0LmdldCkgeyBfZ2V0ID0gUmVmbGVjdC5nZXQ7IH0gZWxzZSB7IF9nZXQgPSBmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7IHZhciBiYXNlID0gX3N1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7IGlmICghYmFzZSkgcmV0dXJuOyB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYmFzZSwgcHJvcGVydHkpOyBpZiAoZGVzYy5nZXQpIHsgcmV0dXJuIGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpOyB9IHJldHVybiBkZXNjLnZhbHVlOyB9OyB9IHJldHVybiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyIHx8IHRhcmdldCk7IH0KCmZ1bmN0aW9uIF9zdXBlclByb3BCYXNlKG9iamVjdCwgcHJvcGVydHkpIHsgd2hpbGUgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkpIHsgb2JqZWN0ID0gX2dldFByb3RvdHlwZU9mKG9iamVjdCk7IGlmIChvYmplY3QgPT09IG51bGwpIGJyZWFrOyB9IHJldHVybiBvYmplY3Q7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoInZhbHVlIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0KCmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9Cgp2YXIgWE1MUGFyc2VyRXJyb3JDb2RlID0gewogIE5vRXJyb3I6IDAsCiAgRW5kT2ZEb2N1bWVudDogLTEsCiAgVW50ZXJtaW5hdGVkQ2RhdDogLTIsCiAgVW50ZXJtaW5hdGVkWG1sRGVjbGFyYXRpb246IC0zLAogIFVudGVybWluYXRlZERvY3R5cGVEZWNsYXJhdGlvbjogLTQsCiAgVW50ZXJtaW5hdGVkQ29tbWVudDogLTUsCiAgTWFsZm9ybWVkRWxlbWVudDogLTYsCiAgT3V0T2ZNZW1vcnk6IC03LAogIFVudGVybWluYXRlZEF0dHJpYnV0ZVZhbHVlOiAtOCwKICBVbnRlcm1pbmF0ZWRFbGVtZW50OiAtOSwKICBFbGVtZW50TmV2ZXJCZWd1bjogLTEwCn07CgpmdW5jdGlvbiBpc1doaXRlc3BhY2UocywgaW5kZXgpIHsKICB2YXIgY2ggPSBzW2luZGV4XTsKICByZXR1cm4gY2ggPT09ICIgIiB8fCBjaCA9PT0gIlxuIiB8fCBjaCA9PT0gIlxyIiB8fCBjaCA9PT0gIlx0IjsKfQoKZnVuY3Rpb24gaXNXaGl0ZXNwYWNlU3RyaW5nKHMpIHsKICBmb3IgKHZhciBpID0gMCwgaWkgPSBzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgIGlmICghaXNXaGl0ZXNwYWNlKHMsIGkpKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9CgogIHJldHVybiB0cnVlOwp9Cgp2YXIgWE1MUGFyc2VyQmFzZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gWE1MUGFyc2VyQmFzZSgpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBYTUxQYXJzZXJCYXNlKTsKICB9CgogIF9jcmVhdGVDbGFzcyhYTUxQYXJzZXJCYXNlLCBbewogICAga2V5OiAiX3Jlc29sdmVFbnRpdGllcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3Jlc29sdmVFbnRpdGllcyhzKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICByZXR1cm4gcy5yZXBsYWNlKC8mKFteO10rKTsvZywgZnVuY3Rpb24gKGFsbCwgZW50aXR5KSB7CiAgICAgICAgaWYgKGVudGl0eS5zdWJzdHJpbmcoMCwgMikgPT09ICIjeCIpIHsKICAgICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGVudGl0eS5zdWJzdHJpbmcoMiksIDE2KSk7CiAgICAgICAgfSBlbHNlIGlmIChlbnRpdHkuc3Vic3RyaW5nKDAsIDEpID09PSAiIyIpIHsKICAgICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KGVudGl0eS5zdWJzdHJpbmcoMSksIDEwKSk7CiAgICAgICAgfQoKICAgICAgICBzd2l0Y2ggKGVudGl0eSkgewogICAgICAgICAgY2FzZSAibHQiOgogICAgICAgICAgICByZXR1cm4gIjwiOwoKICAgICAgICAgIGNhc2UgImd0IjoKICAgICAgICAgICAgcmV0dXJuICI+IjsKCiAgICAgICAgICBjYXNlICJhbXAiOgogICAgICAgICAgICByZXR1cm4gIiYiOwoKICAgICAgICAgIGNhc2UgInF1b3QiOgogICAgICAgICAgICByZXR1cm4gJyInOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIF90aGlzLm9uUmVzb2x2ZUVudGl0eShlbnRpdHkpOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfcGFyc2VDb250ZW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfcGFyc2VDb250ZW50KHMsIHN0YXJ0KSB7CiAgICAgIHZhciBhdHRyaWJ1dGVzID0gW107CiAgICAgIHZhciBwb3MgPSBzdGFydDsKCiAgICAgIGZ1bmN0aW9uIHNraXBXcygpIHsKICAgICAgICB3aGlsZSAocG9zIDwgcy5sZW5ndGggJiYgaXNXaGl0ZXNwYWNlKHMsIHBvcykpIHsKICAgICAgICAgICsrcG9zOwogICAgICAgIH0KICAgICAgfQoKICAgICAgd2hpbGUgKHBvcyA8IHMubGVuZ3RoICYmICFpc1doaXRlc3BhY2UocywgcG9zKSAmJiBzW3Bvc10gIT09ICI+IiAmJiBzW3Bvc10gIT09ICIvIikgewogICAgICAgICsrcG9zOwogICAgICB9CgogICAgICB2YXIgbmFtZSA9IHMuc3Vic3RyaW5nKHN0YXJ0LCBwb3MpOwogICAgICBza2lwV3MoKTsKCiAgICAgIHdoaWxlIChwb3MgPCBzLmxlbmd0aCAmJiBzW3Bvc10gIT09ICI+IiAmJiBzW3Bvc10gIT09ICIvIiAmJiBzW3Bvc10gIT09ICI/IikgewogICAgICAgIHNraXBXcygpOwogICAgICAgIHZhciBhdHRyTmFtZSA9ICIiLAogICAgICAgICAgICBhdHRyVmFsdWUgPSAiIjsKCiAgICAgICAgd2hpbGUgKHBvcyA8IHMubGVuZ3RoICYmICFpc1doaXRlc3BhY2UocywgcG9zKSAmJiBzW3Bvc10gIT09ICI9IikgewogICAgICAgICAgYXR0ck5hbWUgKz0gc1twb3NdOwogICAgICAgICAgKytwb3M7CiAgICAgICAgfQoKICAgICAgICBza2lwV3MoKTsKCiAgICAgICAgaWYgKHNbcG9zXSAhPT0gIj0iKSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CgogICAgICAgICsrcG9zOwogICAgICAgIHNraXBXcygpOwogICAgICAgIHZhciBhdHRyRW5kQ2hhciA9IHNbcG9zXTsKCiAgICAgICAgaWYgKGF0dHJFbmRDaGFyICE9PSAnIicgJiYgYXR0ckVuZENoYXIgIT09ICInIikgewogICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfQoKICAgICAgICB2YXIgYXR0ckVuZEluZGV4ID0gcy5pbmRleE9mKGF0dHJFbmRDaGFyLCArK3Bvcyk7CgogICAgICAgIGlmIChhdHRyRW5kSW5kZXggPCAwKSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CgogICAgICAgIGF0dHJWYWx1ZSA9IHMuc3Vic3RyaW5nKHBvcywgYXR0ckVuZEluZGV4KTsKICAgICAgICBhdHRyaWJ1dGVzLnB1c2goewogICAgICAgICAgbmFtZTogYXR0ck5hbWUsCiAgICAgICAgICB2YWx1ZTogdGhpcy5fcmVzb2x2ZUVudGl0aWVzKGF0dHJWYWx1ZSkKICAgICAgICB9KTsKICAgICAgICBwb3MgPSBhdHRyRW5kSW5kZXggKyAxOwogICAgICAgIHNraXBXcygpOwogICAgICB9CgogICAgICByZXR1cm4gewogICAgICAgIG5hbWU6IG5hbWUsCiAgICAgICAgYXR0cmlidXRlczogYXR0cmlidXRlcywKICAgICAgICBwYXJzZWQ6IHBvcyAtIHN0YXJ0CiAgICAgIH07CiAgICB9CiAgfSwgewogICAga2V5OiAiX3BhcnNlUHJvY2Vzc2luZ0luc3RydWN0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfcGFyc2VQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24ocywgc3RhcnQpIHsKICAgICAgdmFyIHBvcyA9IHN0YXJ0OwoKICAgICAgZnVuY3Rpb24gc2tpcFdzKCkgewogICAgICAgIHdoaWxlIChwb3MgPCBzLmxlbmd0aCAmJiBpc1doaXRlc3BhY2UocywgcG9zKSkgewogICAgICAgICAgKytwb3M7CiAgICAgICAgfQogICAgICB9CgogICAgICB3aGlsZSAocG9zIDwgcy5sZW5ndGggJiYgIWlzV2hpdGVzcGFjZShzLCBwb3MpICYmIHNbcG9zXSAhPT0gIj4iICYmIHNbcG9zXSAhPT0gIi8iKSB7CiAgICAgICAgKytwb3M7CiAgICAgIH0KCiAgICAgIHZhciBuYW1lID0gcy5zdWJzdHJpbmcoc3RhcnQsIHBvcyk7CiAgICAgIHNraXBXcygpOwogICAgICB2YXIgYXR0clN0YXJ0ID0gcG9zOwoKICAgICAgd2hpbGUgKHBvcyA8IHMubGVuZ3RoICYmIChzW3Bvc10gIT09ICI/IiB8fCBzW3BvcyArIDFdICE9PSAiPiIpKSB7CiAgICAgICAgKytwb3M7CiAgICAgIH0KCiAgICAgIHZhciB2YWx1ZSA9IHMuc3Vic3RyaW5nKGF0dHJTdGFydCwgcG9zKTsKICAgICAgcmV0dXJuIHsKICAgICAgICBuYW1lOiBuYW1lLAogICAgICAgIHZhbHVlOiB2YWx1ZSwKICAgICAgICBwYXJzZWQ6IHBvcyAtIHN0YXJ0CiAgICAgIH07CiAgICB9CiAgfSwgewogICAga2V5OiAicGFyc2VYbWwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBhcnNlWG1sKHMpIHsKICAgICAgdmFyIGkgPSAwOwoKICAgICAgd2hpbGUgKGkgPCBzLmxlbmd0aCkgewogICAgICAgIHZhciBjaCA9IHNbaV07CiAgICAgICAgdmFyIGogPSBpOwoKICAgICAgICBpZiAoY2ggPT09ICI8IikgewogICAgICAgICAgKytqOwogICAgICAgICAgdmFyIGNoMiA9IHNbal07CiAgICAgICAgICB2YXIgcSA9IHZvaWQgMDsKCiAgICAgICAgICBzd2l0Y2ggKGNoMikgewogICAgICAgICAgICBjYXNlICIvIjoKICAgICAgICAgICAgICArK2o7CiAgICAgICAgICAgICAgcSA9IHMuaW5kZXhPZigiPiIsIGopOwoKICAgICAgICAgICAgICBpZiAocSA8IDApIHsKICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihYTUxQYXJzZXJFcnJvckNvZGUuVW50ZXJtaW5hdGVkRWxlbWVudCk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICB0aGlzLm9uRW5kRWxlbWVudChzLnN1YnN0cmluZyhqLCBxKSk7CiAgICAgICAgICAgICAgaiA9IHEgKyAxOwogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgY2FzZSAiPyI6CiAgICAgICAgICAgICAgKytqOwoKICAgICAgICAgICAgICB2YXIgcGkgPSB0aGlzLl9wYXJzZVByb2Nlc3NpbmdJbnN0cnVjdGlvbihzLCBqKTsKCiAgICAgICAgICAgICAgaWYgKHMuc3Vic3RyaW5nKGogKyBwaS5wYXJzZWQsIGogKyBwaS5wYXJzZWQgKyAyKSAhPT0gIj8+IikgewogICAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKFhNTFBhcnNlckVycm9yQ29kZS5VbnRlcm1pbmF0ZWRYbWxEZWNsYXJhdGlvbik7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICB0aGlzLm9uUGkocGkubmFtZSwgcGkudmFsdWUpOwogICAgICAgICAgICAgIGogKz0gcGkucGFyc2VkICsgMjsKICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgIGNhc2UgIiEiOgogICAgICAgICAgICAgIGlmIChzLnN1YnN0cmluZyhqICsgMSwgaiArIDMpID09PSAiLS0iKSB7CiAgICAgICAgICAgICAgICBxID0gcy5pbmRleE9mKCItLT4iLCBqICsgMyk7CgogICAgICAgICAgICAgICAgaWYgKHEgPCAwKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihYTUxQYXJzZXJFcnJvckNvZGUuVW50ZXJtaW5hdGVkQ29tbWVudCk7CiAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aGlzLm9uQ29tbWVudChzLnN1YnN0cmluZyhqICsgMywgcSkpOwogICAgICAgICAgICAgICAgaiA9IHEgKyAzOwogICAgICAgICAgICAgIH0gZWxzZSBpZiAocy5zdWJzdHJpbmcoaiArIDEsIGogKyA4KSA9PT0gIltDREFUQVsiKSB7CiAgICAgICAgICAgICAgICBxID0gcy5pbmRleE9mKCJdXT4iLCBqICsgOCk7CgogICAgICAgICAgICAgICAgaWYgKHEgPCAwKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihYTUxQYXJzZXJFcnJvckNvZGUuVW50ZXJtaW5hdGVkQ2RhdCk7CiAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aGlzLm9uQ2RhdGEocy5zdWJzdHJpbmcoaiArIDgsIHEpKTsKICAgICAgICAgICAgICAgIGogPSBxICsgMzsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKHMuc3Vic3RyaW5nKGogKyAxLCBqICsgOCkgPT09ICJET0NUWVBFIikgewogICAgICAgICAgICAgICAgdmFyIHEyID0gcy5pbmRleE9mKCJbIiwgaiArIDgpOwogICAgICAgICAgICAgICAgdmFyIGNvbXBsZXhEb2N0eXBlID0gZmFsc2U7CiAgICAgICAgICAgICAgICBxID0gcy5pbmRleE9mKCI+IiwgaiArIDgpOwoKICAgICAgICAgICAgICAgIGlmIChxIDwgMCkgewogICAgICAgICAgICAgICAgICB0aGlzLm9uRXJyb3IoWE1MUGFyc2VyRXJyb3JDb2RlLlVudGVybWluYXRlZERvY3R5cGVEZWNsYXJhdGlvbik7CiAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAocTIgPiAwICYmIHEgPiBxMikgewogICAgICAgICAgICAgICAgICBxID0gcy5pbmRleE9mKCJdPiIsIGogKyA4KTsKCiAgICAgICAgICAgICAgICAgIGlmIChxIDwgMCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihYTUxQYXJzZXJFcnJvckNvZGUuVW50ZXJtaW5hdGVkRG9jdHlwZURlY2xhcmF0aW9uKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIGNvbXBsZXhEb2N0eXBlID0gdHJ1ZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2YXIgZG9jdHlwZUNvbnRlbnQgPSBzLnN1YnN0cmluZyhqICsgOCwgcSArIChjb21wbGV4RG9jdHlwZSA/IDEgOiAwKSk7CiAgICAgICAgICAgICAgICB0aGlzLm9uRG9jdHlwZShkb2N0eXBlQ29udGVudCk7CiAgICAgICAgICAgICAgICBqID0gcSArIChjb21wbGV4RG9jdHlwZSA/IDIgOiAxKTsKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKFhNTFBhcnNlckVycm9yQ29kZS5NYWxmb3JtZWRFbGVtZW50KTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICB2YXIgY29udGVudCA9IHRoaXMuX3BhcnNlQ29udGVudChzLCBqKTsKCiAgICAgICAgICAgICAgaWYgKGNvbnRlbnQgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgIHRoaXMub25FcnJvcihYTUxQYXJzZXJFcnJvckNvZGUuTWFsZm9ybWVkRWxlbWVudCk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICB2YXIgaXNDbG9zZWQgPSBmYWxzZTsKCiAgICAgICAgICAgICAgaWYgKHMuc3Vic3RyaW5nKGogKyBjb250ZW50LnBhcnNlZCwgaiArIGNvbnRlbnQucGFyc2VkICsgMikgPT09ICIvPiIpIHsKICAgICAgICAgICAgICAgIGlzQ2xvc2VkID0gdHJ1ZTsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKHMuc3Vic3RyaW5nKGogKyBjb250ZW50LnBhcnNlZCwgaiArIGNvbnRlbnQucGFyc2VkICsgMSkgIT09ICI+IikgewogICAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKFhNTFBhcnNlckVycm9yQ29kZS5VbnRlcm1pbmF0ZWRFbGVtZW50KTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgIHRoaXMub25CZWdpbkVsZW1lbnQoY29udGVudC5uYW1lLCBjb250ZW50LmF0dHJpYnV0ZXMsIGlzQ2xvc2VkKTsKICAgICAgICAgICAgICBqICs9IGNvbnRlbnQucGFyc2VkICsgKGlzQ2xvc2VkID8gMiA6IDEpOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB3aGlsZSAoaiA8IHMubGVuZ3RoICYmIHNbal0gIT09ICI8IikgewogICAgICAgICAgICBqKys7CiAgICAgICAgICB9CgogICAgICAgICAgdmFyIHRleHQgPSBzLnN1YnN0cmluZyhpLCBqKTsKICAgICAgICAgIHRoaXMub25UZXh0KHRoaXMuX3Jlc29sdmVFbnRpdGllcyh0ZXh0KSk7CiAgICAgICAgfQoKICAgICAgICBpID0gajsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogIm9uUmVzb2x2ZUVudGl0eSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25SZXNvbHZlRW50aXR5KG5hbWUpIHsKICAgICAgcmV0dXJuICImIi5jb25jYXQobmFtZSwgIjsiKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJvblBpIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvblBpKG5hbWUsIHZhbHVlKSB7fQogIH0sIHsKICAgIGtleTogIm9uQ29tbWVudCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25Db21tZW50KHRleHQpIHt9CiAgfSwgewogICAga2V5OiAib25DZGF0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25DZGF0YSh0ZXh0KSB7fQogIH0sIHsKICAgIGtleTogIm9uRG9jdHlwZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25Eb2N0eXBlKGRvY3R5cGVDb250ZW50KSB7fQogIH0sIHsKICAgIGtleTogIm9uVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25UZXh0KHRleHQpIHt9CiAgfSwgewogICAga2V5OiAib25CZWdpbkVsZW1lbnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uQmVnaW5FbGVtZW50KG5hbWUsIGF0dHJpYnV0ZXMsIGlzRW1wdHkpIHt9CiAgfSwgewogICAga2V5OiAib25FbmRFbGVtZW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkVuZEVsZW1lbnQobmFtZSkge30KICB9LCB7CiAgICBrZXk6ICJvbkVycm9yIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkVycm9yKGNvZGUpIHt9CiAgfV0pOwoKICByZXR1cm4gWE1MUGFyc2VyQmFzZTsKfSgpOwoKdmFyIFNpbXBsZURPTU5vZGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFNpbXBsZURPTU5vZGUobm9kZU5hbWUsIG5vZGVWYWx1ZSkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNpbXBsZURPTU5vZGUpOwoKICAgIHRoaXMubm9kZU5hbWUgPSBub2RlTmFtZTsKICAgIHRoaXMubm9kZVZhbHVlID0gbm9kZVZhbHVlOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICJwYXJlbnROb2RlIiwgewogICAgICB2YWx1ZTogbnVsbCwKICAgICAgd3JpdGFibGU6IHRydWUKICAgIH0pOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFNpbXBsZURPTU5vZGUsIFt7CiAgICBrZXk6ICJoYXNDaGlsZE5vZGVzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNDaGlsZE5vZGVzKCkgewogICAgICByZXR1cm4gdGhpcy5jaGlsZE5vZGVzICYmIHRoaXMuY2hpbGROb2Rlcy5sZW5ndGggPiAwOwogICAgfQogIH0sIHsKICAgIGtleTogImZpcnN0Q2hpbGQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLmNoaWxkTm9kZXMgJiYgdGhpcy5jaGlsZE5vZGVzWzBdOwogICAgfQogIH0sIHsKICAgIGtleTogIm5leHRTaWJsaW5nIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgY2hpbGROb2RlcyA9IHRoaXMucGFyZW50Tm9kZS5jaGlsZE5vZGVzOwoKICAgICAgaWYgKCFjaGlsZE5vZGVzKSB7CiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgfQoKICAgICAgdmFyIGluZGV4ID0gY2hpbGROb2Rlcy5pbmRleE9mKHRoaXMpOwoKICAgICAgaWYgKGluZGV4ID09PSAtMSkgewogICAgICAgIHJldHVybiB1bmRlZmluZWQ7CiAgICAgIH0KCiAgICAgIHJldHVybiBjaGlsZE5vZGVzW2luZGV4ICsgMV07CiAgICB9CiAgfSwgewogICAga2V5OiAidGV4dENvbnRlbnQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIGlmICghdGhpcy5jaGlsZE5vZGVzKSB7CiAgICAgICAgcmV0dXJuIHRoaXMubm9kZVZhbHVlIHx8ICIiOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy5jaGlsZE5vZGVzLm1hcChmdW5jdGlvbiAoY2hpbGQpIHsKICAgICAgICByZXR1cm4gY2hpbGQudGV4dENvbnRlbnQ7CiAgICAgIH0pLmpvaW4oIiIpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFNpbXBsZURPTU5vZGU7Cn0oKTsKCnZhciBTaW1wbGVYTUxQYXJzZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9YTUxQYXJzZXJCYXNlKSB7CiAgX2luaGVyaXRzKFNpbXBsZVhNTFBhcnNlciwgX1hNTFBhcnNlckJhc2UpOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFNpbXBsZVhNTFBhcnNlcik7CgogIGZ1bmN0aW9uIFNpbXBsZVhNTFBhcnNlcigpIHsKICAgIHZhciBfdGhpczI7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNpbXBsZVhNTFBhcnNlcik7CgogICAgX3RoaXMyID0gX3N1cGVyLmNhbGwodGhpcyk7CiAgICBfdGhpczIuX2N1cnJlbnRGcmFnbWVudCA9IG51bGw7CiAgICBfdGhpczIuX3N0YWNrID0gbnVsbDsKICAgIF90aGlzMi5fZXJyb3JDb2RlID0gWE1MUGFyc2VyRXJyb3JDb2RlLk5vRXJyb3I7CiAgICByZXR1cm4gX3RoaXMyOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFNpbXBsZVhNTFBhcnNlciwgW3sKICAgIGtleTogInBhcnNlRnJvbVN0cmluZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcGFyc2VGcm9tU3RyaW5nKGRhdGEpIHsKICAgICAgdGhpcy5fY3VycmVudEZyYWdtZW50ID0gW107CiAgICAgIHRoaXMuX3N0YWNrID0gW107CiAgICAgIHRoaXMuX2Vycm9yQ29kZSA9IFhNTFBhcnNlckVycm9yQ29kZS5Ob0Vycm9yOwogICAgICB0aGlzLnBhcnNlWG1sKGRhdGEpOwoKICAgICAgaWYgKHRoaXMuX2Vycm9yQ29kZSAhPT0gWE1MUGFyc2VyRXJyb3JDb2RlLk5vRXJyb3IpIHsKICAgICAgICByZXR1cm4gdW5kZWZpbmVkOwogICAgICB9CgogICAgICB2YXIgX3RoaXMkX2N1cnJlbnRGcmFnbWVuID0gX3NsaWNlZFRvQXJyYXkodGhpcy5fY3VycmVudEZyYWdtZW50LCAxKSwKICAgICAgICAgIGRvY3VtZW50RWxlbWVudCA9IF90aGlzJF9jdXJyZW50RnJhZ21lblswXTsKCiAgICAgIGlmICghZG9jdW1lbnRFbGVtZW50KSB7CiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgfQoKICAgICAgcmV0dXJuIHsKICAgICAgICBkb2N1bWVudEVsZW1lbnQ6IGRvY3VtZW50RWxlbWVudAogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogIm9uUmVzb2x2ZUVudGl0eSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25SZXNvbHZlRW50aXR5KG5hbWUpIHsKICAgICAgc3dpdGNoIChuYW1lKSB7CiAgICAgICAgY2FzZSAiYXBvcyI6CiAgICAgICAgICByZXR1cm4gIiciOwogICAgICB9CgogICAgICByZXR1cm4gX2dldChfZ2V0UHJvdG90eXBlT2YoU2ltcGxlWE1MUGFyc2VyLnByb3RvdHlwZSksICJvblJlc29sdmVFbnRpdHkiLCB0aGlzKS5jYWxsKHRoaXMsIG5hbWUpOwogICAgfQogIH0sIHsKICAgIGtleTogIm9uVGV4dCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25UZXh0KHRleHQpIHsKICAgICAgaWYgKGlzV2hpdGVzcGFjZVN0cmluZyh0ZXh0KSkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIG5vZGUgPSBuZXcgU2ltcGxlRE9NTm9kZSgiI3RleHQiLCB0ZXh0KTsKCiAgICAgIHRoaXMuX2N1cnJlbnRGcmFnbWVudC5wdXNoKG5vZGUpOwogICAgfQogIH0sIHsKICAgIGtleTogIm9uQ2RhdGEiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uQ2RhdGEodGV4dCkgewogICAgICB2YXIgbm9kZSA9IG5ldyBTaW1wbGVET01Ob2RlKCIjdGV4dCIsIHRleHQpOwoKICAgICAgdGhpcy5fY3VycmVudEZyYWdtZW50LnB1c2gobm9kZSk7CiAgICB9CiAgfSwgewogICAga2V5OiAib25CZWdpbkVsZW1lbnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIG9uQmVnaW5FbGVtZW50KG5hbWUsIGF0dHJpYnV0ZXMsIGlzRW1wdHkpIHsKICAgICAgdmFyIG5vZGUgPSBuZXcgU2ltcGxlRE9NTm9kZShuYW1lKTsKICAgICAgbm9kZS5jaGlsZE5vZGVzID0gW107CgogICAgICB0aGlzLl9jdXJyZW50RnJhZ21lbnQucHVzaChub2RlKTsKCiAgICAgIGlmIChpc0VtcHR5KSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB0aGlzLl9zdGFjay5wdXNoKHRoaXMuX2N1cnJlbnRGcmFnbWVudCk7CgogICAgICB0aGlzLl9jdXJyZW50RnJhZ21lbnQgPSBub2RlLmNoaWxkTm9kZXM7CiAgICB9CiAgfSwgewogICAga2V5OiAib25FbmRFbGVtZW50IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBvbkVuZEVsZW1lbnQobmFtZSkgewogICAgICB0aGlzLl9jdXJyZW50RnJhZ21lbnQgPSB0aGlzLl9zdGFjay5wb3AoKSB8fCBbXTsKICAgICAgdmFyIGxhc3RFbGVtZW50ID0gdGhpcy5fY3VycmVudEZyYWdtZW50W3RoaXMuX2N1cnJlbnRGcmFnbWVudC5sZW5ndGggLSAxXTsKCiAgICAgIGlmICghbGFzdEVsZW1lbnQpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGxhc3RFbGVtZW50LmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICAgIGxhc3RFbGVtZW50LmNoaWxkTm9kZXNbaV0ucGFyZW50Tm9kZSA9IGxhc3RFbGVtZW50OwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAib25FcnJvciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25FcnJvcihjb2RlKSB7CiAgICAgIHRoaXMuX2Vycm9yQ29kZSA9IGNvZGU7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gU2ltcGxlWE1MUGFyc2VyOwp9KFhNTFBhcnNlckJhc2UpOwoKZXhwb3J0cy5TaW1wbGVYTUxQYXJzZXIgPSBTaW1wbGVYTUxQYXJzZXI7CgovKioqLyB9KSwKLyogMjA3ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuUERGRGF0YVRyYW5zcG9ydFN0cmVhbSA9IHZvaWQgMDsKCnZhciBfcmVnZW5lcmF0b3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd19wZGZqc19yZXF1aXJlX18oMikpOwoKdmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXyg1KTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICJkZWZhdWx0Ijogb2JqIH07IH0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9CgpmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkgeyB2YXIgaXQ7IGlmICh0eXBlb2YgU3ltYm9sID09PSAidW5kZWZpbmVkIiB8fCBvW1N5bWJvbC5pdGVyYXRvcl0gPT0gbnVsbCkgeyBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSAibnVtYmVyIikgeyBpZiAoaXQpIG8gPSBpdDsgdmFyIGkgPSAwOyB2YXIgRiA9IGZ1bmN0aW9uIEYoKSB7fTsgcmV0dXJuIHsgczogRiwgbjogZnVuY3Rpb24gbigpIHsgaWYgKGkgPj0gby5sZW5ndGgpIHJldHVybiB7IGRvbmU6IHRydWUgfTsgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiBvW2krK10gfTsgfSwgZTogZnVuY3Rpb24gZShfZSkgeyB0aHJvdyBfZTsgfSwgZjogRiB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC4iKTsgfSB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIGRpZEVyciA9IGZhbHNlLCBlcnI7IHJldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IGl0ID0gb1tTeW1ib2wuaXRlcmF0b3JdKCk7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciBzdGVwID0gaXQubmV4dCgpOyBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lOyByZXR1cm4gc3RlcDsgfSwgZTogZnVuY3Rpb24gZShfZTIpIHsgZGlkRXJyID0gdHJ1ZTsgZXJyID0gX2UyOyB9LCBmOiBmdW5jdGlvbiBmKCkgeyB0cnkgeyBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXRbInJldHVybiJdICE9IG51bGwpIGl0WyJyZXR1cm4iXSgpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9CgpmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09ICJzdHJpbmciKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gIk9iamVjdCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09ICJNYXAiIHx8IG4gPT09ICJTZXQiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09ICJBcmd1bWVudHMiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfQoKZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKdmFyIFBERkRhdGFUcmFuc3BvcnRTdHJlYW0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFBERkRhdGFUcmFuc3BvcnRTdHJlYW0ocGFyYW1zLCBwZGZEYXRhUmFuZ2VUcmFuc3BvcnQpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBERkRhdGFUcmFuc3BvcnRTdHJlYW0pOwoKICAgICgwLCBfdXRpbC5hc3NlcnQpKHBkZkRhdGFSYW5nZVRyYW5zcG9ydCwgJ1BERkRhdGFUcmFuc3BvcnRTdHJlYW0gLSBtaXNzaW5nIHJlcXVpcmVkICJwZGZEYXRhUmFuZ2VUcmFuc3BvcnQiIGFyZ3VtZW50LicpOwogICAgdGhpcy5fcXVldWVkQ2h1bmtzID0gW107CiAgICB0aGlzLl9wcm9ncmVzc2l2ZURvbmUgPSBwYXJhbXMucHJvZ3Jlc3NpdmVEb25lIHx8IGZhbHNlOwogICAgdmFyIGluaXRpYWxEYXRhID0gcGFyYW1zLmluaXRpYWxEYXRhOwoKICAgIGlmIChpbml0aWFsRGF0YSAmJiBpbml0aWFsRGF0YS5sZW5ndGggPiAwKSB7CiAgICAgIHZhciBidWZmZXIgPSBuZXcgVWludDhBcnJheShpbml0aWFsRGF0YSkuYnVmZmVyOwoKICAgICAgdGhpcy5fcXVldWVkQ2h1bmtzLnB1c2goYnVmZmVyKTsKICAgIH0KCiAgICB0aGlzLl9wZGZEYXRhUmFuZ2VUcmFuc3BvcnQgPSBwZGZEYXRhUmFuZ2VUcmFuc3BvcnQ7CiAgICB0aGlzLl9pc1N0cmVhbWluZ1N1cHBvcnRlZCA9ICFwYXJhbXMuZGlzYWJsZVN0cmVhbTsKICAgIHRoaXMuX2lzUmFuZ2VTdXBwb3J0ZWQgPSAhcGFyYW1zLmRpc2FibGVSYW5nZTsKICAgIHRoaXMuX2NvbnRlbnRMZW5ndGggPSBwYXJhbXMubGVuZ3RoOwogICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIgPSBudWxsOwogICAgdGhpcy5fcmFuZ2VSZWFkZXJzID0gW107CgogICAgdGhpcy5fcGRmRGF0YVJhbmdlVHJhbnNwb3J0LmFkZFJhbmdlTGlzdGVuZXIoZnVuY3Rpb24gKGJlZ2luLCBjaHVuaykgewogICAgICBfdGhpcy5fb25SZWNlaXZlRGF0YSh7CiAgICAgICAgYmVnaW46IGJlZ2luLAogICAgICAgIGNodW5rOiBjaHVuawogICAgICB9KTsKICAgIH0pOwoKICAgIHRoaXMuX3BkZkRhdGFSYW5nZVRyYW5zcG9ydC5hZGRQcm9ncmVzc0xpc3RlbmVyKGZ1bmN0aW9uIChsb2FkZWQsIHRvdGFsKSB7CiAgICAgIF90aGlzLl9vblByb2dyZXNzKHsKICAgICAgICBsb2FkZWQ6IGxvYWRlZCwKICAgICAgICB0b3RhbDogdG90YWwKICAgICAgfSk7CiAgICB9KTsKCiAgICB0aGlzLl9wZGZEYXRhUmFuZ2VUcmFuc3BvcnQuYWRkUHJvZ3Jlc3NpdmVSZWFkTGlzdGVuZXIoZnVuY3Rpb24gKGNodW5rKSB7CiAgICAgIF90aGlzLl9vblJlY2VpdmVEYXRhKHsKICAgICAgICBjaHVuazogY2h1bmsKICAgICAgfSk7CiAgICB9KTsKCiAgICB0aGlzLl9wZGZEYXRhUmFuZ2VUcmFuc3BvcnQuYWRkUHJvZ3Jlc3NpdmVEb25lTGlzdGVuZXIoZnVuY3Rpb24gKCkgewogICAgICBfdGhpcy5fb25Qcm9ncmVzc2l2ZURvbmUoKTsKICAgIH0pOwoKICAgIHRoaXMuX3BkZkRhdGFSYW5nZVRyYW5zcG9ydC50cmFuc3BvcnRSZWFkeSgpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFBERkRhdGFUcmFuc3BvcnRTdHJlYW0sIFt7CiAgICBrZXk6ICJfb25SZWNlaXZlRGF0YSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUmVjZWl2ZURhdGEoYXJncykgewogICAgICB2YXIgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkoYXJncy5jaHVuaykuYnVmZmVyOwoKICAgICAgaWYgKGFyZ3MuYmVnaW4gPT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmICh0aGlzLl9mdWxsUmVxdWVzdFJlYWRlcikgewogICAgICAgICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIuX2VucXVldWUoYnVmZmVyKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5fcXVldWVkQ2h1bmtzLnB1c2goYnVmZmVyKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIGZvdW5kID0gdGhpcy5fcmFuZ2VSZWFkZXJzLnNvbWUoZnVuY3Rpb24gKHJhbmdlUmVhZGVyKSB7CiAgICAgICAgICBpZiAocmFuZ2VSZWFkZXIuX2JlZ2luICE9PSBhcmdzLmJlZ2luKSB7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgIH0KCiAgICAgICAgICByYW5nZVJlYWRlci5fZW5xdWV1ZShidWZmZXIpOwoKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0pOwoKICAgICAgICAoMCwgX3V0aWwuYXNzZXJ0KShmb3VuZCwgIl9vblJlY2VpdmVEYXRhIC0gbm8gYFBERkRhdGFUcmFuc3BvcnRTdHJlYW1SYW5nZVJlYWRlcmAgaW5zdGFuY2UgZm91bmQuIik7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJfb25Qcm9ncmVzcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUHJvZ3Jlc3MoZXZ0KSB7CiAgICAgIGlmIChldnQudG90YWwgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHZhciBmaXJzdFJlYWRlciA9IHRoaXMuX3JhbmdlUmVhZGVyc1swXTsKCiAgICAgICAgaWYgKGZpcnN0UmVhZGVyICYmIGZpcnN0UmVhZGVyLm9uUHJvZ3Jlc3MpIHsKICAgICAgICAgIGZpcnN0UmVhZGVyLm9uUHJvZ3Jlc3MoewogICAgICAgICAgICBsb2FkZWQ6IGV2dC5sb2FkZWQKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB2YXIgZnVsbFJlYWRlciA9IHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyOwoKICAgICAgICBpZiAoZnVsbFJlYWRlciAmJiBmdWxsUmVhZGVyLm9uUHJvZ3Jlc3MpIHsKICAgICAgICAgIGZ1bGxSZWFkZXIub25Qcm9ncmVzcyh7CiAgICAgICAgICAgIGxvYWRlZDogZXZ0LmxvYWRlZCwKICAgICAgICAgICAgdG90YWw6IGV2dC50b3RhbAogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiX29uUHJvZ3Jlc3NpdmVEb25lIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Qcm9ncmVzc2l2ZURvbmUoKSB7CiAgICAgIGlmICh0aGlzLl9mdWxsUmVxdWVzdFJlYWRlcikgewogICAgICAgIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyLnByb2dyZXNzaXZlRG9uZSgpOwogICAgICB9CgogICAgICB0aGlzLl9wcm9ncmVzc2l2ZURvbmUgPSB0cnVlOwogICAgfQogIH0sIHsKICAgIGtleTogIl9yZW1vdmVSYW5nZVJlYWRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3JlbW92ZVJhbmdlUmVhZGVyKHJlYWRlcikgewogICAgICB2YXIgaSA9IHRoaXMuX3JhbmdlUmVhZGVycy5pbmRleE9mKHJlYWRlcik7CgogICAgICBpZiAoaSA+PSAwKSB7CiAgICAgICAgdGhpcy5fcmFuZ2VSZWFkZXJzLnNwbGljZShpLCAxKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImdldEZ1bGxSZWFkZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZ1bGxSZWFkZXIoKSB7CiAgICAgICgwLCBfdXRpbC5hc3NlcnQpKCF0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciwgIlBERkRhdGFUcmFuc3BvcnRTdHJlYW0uZ2V0RnVsbFJlYWRlciBjYW4gb25seSBiZSBjYWxsZWQgb25jZS4iKTsKICAgICAgdmFyIHF1ZXVlZENodW5rcyA9IHRoaXMuX3F1ZXVlZENodW5rczsKICAgICAgdGhpcy5fcXVldWVkQ2h1bmtzID0gbnVsbDsKICAgICAgcmV0dXJuIG5ldyBQREZEYXRhVHJhbnNwb3J0U3RyZWFtUmVhZGVyKHRoaXMsIHF1ZXVlZENodW5rcywgdGhpcy5fcHJvZ3Jlc3NpdmVEb25lKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRSYW5nZVJlYWRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmFuZ2VSZWFkZXIoYmVnaW4sIGVuZCkgewogICAgICBpZiAoZW5kIDw9IHRoaXMuX3Byb2dyZXNzaXZlRGF0YUxlbmd0aCkgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CgogICAgICB2YXIgcmVhZGVyID0gbmV3IFBERkRhdGFUcmFuc3BvcnRTdHJlYW1SYW5nZVJlYWRlcih0aGlzLCBiZWdpbiwgZW5kKTsKCiAgICAgIHRoaXMuX3BkZkRhdGFSYW5nZVRyYW5zcG9ydC5yZXF1ZXN0RGF0YVJhbmdlKGJlZ2luLCBlbmQpOwoKICAgICAgdGhpcy5fcmFuZ2VSZWFkZXJzLnB1c2gocmVhZGVyKTsKCiAgICAgIHJldHVybiByZWFkZXI7CiAgICB9CiAgfSwgewogICAga2V5OiAiY2FuY2VsQWxsUmVxdWVzdHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbEFsbFJlcXVlc3RzKHJlYXNvbikgewogICAgICBpZiAodGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIpIHsKICAgICAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlci5jYW5jZWwocmVhc29uKTsKICAgICAgfQoKICAgICAgdmFyIHJlYWRlcnMgPSB0aGlzLl9yYW5nZVJlYWRlcnMuc2xpY2UoMCk7CgogICAgICByZWFkZXJzLmZvckVhY2goZnVuY3Rpb24gKHJhbmdlUmVhZGVyKSB7CiAgICAgICAgcmFuZ2VSZWFkZXIuY2FuY2VsKHJlYXNvbik7CiAgICAgIH0pOwoKICAgICAgdGhpcy5fcGRmRGF0YVJhbmdlVHJhbnNwb3J0LmFib3J0KCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX3Byb2dyZXNzaXZlRGF0YUxlbmd0aCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyID8gdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIuX2xvYWRlZCA6IDA7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUERGRGF0YVRyYW5zcG9ydFN0cmVhbTsKfSgpOwoKZXhwb3J0cy5QREZEYXRhVHJhbnNwb3J0U3RyZWFtID0gUERGRGF0YVRyYW5zcG9ydFN0cmVhbTsKCnZhciBQREZEYXRhVHJhbnNwb3J0U3RyZWFtUmVhZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBQREZEYXRhVHJhbnNwb3J0U3RyZWFtUmVhZGVyKHN0cmVhbSwgcXVldWVkQ2h1bmtzKSB7CiAgICB2YXIgcHJvZ3Jlc3NpdmVEb25lID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUERGRGF0YVRyYW5zcG9ydFN0cmVhbVJlYWRlcik7CgogICAgdGhpcy5fc3RyZWFtID0gc3RyZWFtOwogICAgdGhpcy5fZG9uZSA9IHByb2dyZXNzaXZlRG9uZSB8fCBmYWxzZTsKICAgIHRoaXMuX2ZpbGVuYW1lID0gbnVsbDsKICAgIHRoaXMuX3F1ZXVlZENodW5rcyA9IHF1ZXVlZENodW5rcyB8fCBbXTsKICAgIHRoaXMuX2xvYWRlZCA9IDA7CgogICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMuX3F1ZXVlZENodW5rcyksCiAgICAgICAgX3N0ZXA7CgogICAgdHJ5IHsKICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgICB2YXIgY2h1bmsgPSBfc3RlcC52YWx1ZTsKICAgICAgICB0aGlzLl9sb2FkZWQgKz0gY2h1bmsuYnl0ZUxlbmd0aDsKICAgICAgfQogICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgIF9pdGVyYXRvci5lKGVycik7CiAgICB9IGZpbmFsbHkgewogICAgICBfaXRlcmF0b3IuZigpOwogICAgfQoKICAgIHRoaXMuX3JlcXVlc3RzID0gW107CiAgICB0aGlzLl9oZWFkZXJzUmVhZHkgPSBQcm9taXNlLnJlc29sdmUoKTsKICAgIHN0cmVhbS5fZnVsbFJlcXVlc3RSZWFkZXIgPSB0aGlzOwogICAgdGhpcy5vblByb2dyZXNzID0gbnVsbDsKICB9CgogIF9jcmVhdGVDbGFzcyhQREZEYXRhVHJhbnNwb3J0U3RyZWFtUmVhZGVyLCBbewogICAga2V5OiAiX2VucXVldWUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9lbnF1ZXVlKGNodW5rKSB7CiAgICAgIGlmICh0aGlzLl9kb25lKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAodGhpcy5fcmVxdWVzdHMubGVuZ3RoID4gMCkgewogICAgICAgIHZhciByZXF1ZXN0Q2FwYWJpbGl0eSA9IHRoaXMuX3JlcXVlc3RzLnNoaWZ0KCk7CgogICAgICAgIHJlcXVlc3RDYXBhYmlsaXR5LnJlc29sdmUoewogICAgICAgICAgdmFsdWU6IGNodW5rLAogICAgICAgICAgZG9uZTogZmFsc2UKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLl9xdWV1ZWRDaHVua3MucHVzaChjaHVuayk7CiAgICAgIH0KCiAgICAgIHRoaXMuX2xvYWRlZCArPSBjaHVuay5ieXRlTGVuZ3RoOwogICAgfQogIH0sIHsKICAgIGtleTogInJlYWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9yZWFkID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JbImRlZmF1bHQiXS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIGNodW5rLCByZXF1ZXN0Q2FwYWJpbGl0eTsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yWyJkZWZhdWx0Il0ud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGlmICghKHRoaXMuX3F1ZXVlZENodW5rcy5sZW5ndGggPiAwKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY2h1bmsgPSB0aGlzLl9xdWV1ZWRDaHVua3Muc2hpZnQoKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICAgICAgdmFsdWU6IGNodW5rLAogICAgICAgICAgICAgICAgICBkb25lOiBmYWxzZQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIGlmICghdGhpcy5fZG9uZSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLAogICAgICAgICAgICAgICAgICBkb25lOiB0cnVlCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgcmVxdWVzdENhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7CgogICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdHMucHVzaChyZXF1ZXN0Q2FwYWJpbGl0eSk7CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgcmVxdWVzdENhcGFiaWxpdHkucHJvbWlzZSk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiByZWFkKCkgewogICAgICAgIHJldHVybiBfcmVhZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gcmVhZDsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImNhbmNlbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuY2VsKHJlYXNvbikgewogICAgICB0aGlzLl9kb25lID0gdHJ1ZTsKCiAgICAgIHRoaXMuX3JlcXVlc3RzLmZvckVhY2goZnVuY3Rpb24gKHJlcXVlc3RDYXBhYmlsaXR5KSB7CiAgICAgICAgcmVxdWVzdENhcGFiaWxpdHkucmVzb2x2ZSh7CiAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLAogICAgICAgICAgZG9uZTogdHJ1ZQogICAgICAgIH0pOwogICAgICB9KTsKCiAgICAgIHRoaXMuX3JlcXVlc3RzID0gW107CiAgICB9CiAgfSwgewogICAga2V5OiAicHJvZ3Jlc3NpdmVEb25lIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwcm9ncmVzc2l2ZURvbmUoKSB7CiAgICAgIGlmICh0aGlzLl9kb25lKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB0aGlzLl9kb25lID0gdHJ1ZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJoZWFkZXJzUmVhZHkiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9oZWFkZXJzUmVhZHk7CiAgICB9CiAgfSwgewogICAga2V5OiAiZmlsZW5hbWUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9maWxlbmFtZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc1JhbmdlU3VwcG9ydGVkIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fc3RyZWFtLl9pc1JhbmdlU3VwcG9ydGVkOwogICAgfQogIH0sIHsKICAgIGtleTogImlzU3RyZWFtaW5nU3VwcG9ydGVkIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fc3RyZWFtLl9pc1N0cmVhbWluZ1N1cHBvcnRlZDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjb250ZW50TGVuZ3RoIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fc3RyZWFtLl9jb250ZW50TGVuZ3RoOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFBERkRhdGFUcmFuc3BvcnRTdHJlYW1SZWFkZXI7Cn0oKTsKCnZhciBQREZEYXRhVHJhbnNwb3J0U3RyZWFtUmFuZ2VSZWFkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFBERkRhdGFUcmFuc3BvcnRTdHJlYW1SYW5nZVJlYWRlcihzdHJlYW0sIGJlZ2luLCBlbmQpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQREZEYXRhVHJhbnNwb3J0U3RyZWFtUmFuZ2VSZWFkZXIpOwoKICAgIHRoaXMuX3N0cmVhbSA9IHN0cmVhbTsKICAgIHRoaXMuX2JlZ2luID0gYmVnaW47CiAgICB0aGlzLl9lbmQgPSBlbmQ7CiAgICB0aGlzLl9xdWV1ZWRDaHVuayA9IG51bGw7CiAgICB0aGlzLl9yZXF1ZXN0cyA9IFtdOwogICAgdGhpcy5fZG9uZSA9IGZhbHNlOwogICAgdGhpcy5vblByb2dyZXNzID0gbnVsbDsKICB9CgogIF9jcmVhdGVDbGFzcyhQREZEYXRhVHJhbnNwb3J0U3RyZWFtUmFuZ2VSZWFkZXIsIFt7CiAgICBrZXk6ICJfZW5xdWV1ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2VucXVldWUoY2h1bmspIHsKICAgICAgaWYgKHRoaXMuX2RvbmUpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLl9yZXF1ZXN0cy5sZW5ndGggPT09IDApIHsKICAgICAgICB0aGlzLl9xdWV1ZWRDaHVuayA9IGNodW5rOwogICAgICB9IGVsc2UgewogICAgICAgIHZhciByZXF1ZXN0c0NhcGFiaWxpdHkgPSB0aGlzLl9yZXF1ZXN0cy5zaGlmdCgpOwoKICAgICAgICByZXF1ZXN0c0NhcGFiaWxpdHkucmVzb2x2ZSh7CiAgICAgICAgICB2YWx1ZTogY2h1bmssCiAgICAgICAgICBkb25lOiBmYWxzZQogICAgICAgIH0pOwoKICAgICAgICB0aGlzLl9yZXF1ZXN0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXF1ZXN0Q2FwYWJpbGl0eSkgewogICAgICAgICAgcmVxdWVzdENhcGFiaWxpdHkucmVzb2x2ZSh7CiAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWQsCiAgICAgICAgICAgIGRvbmU6IHRydWUKICAgICAgICAgIH0pOwogICAgICAgIH0pOwoKICAgICAgICB0aGlzLl9yZXF1ZXN0cyA9IFtdOwogICAgICB9CgogICAgICB0aGlzLl9kb25lID0gdHJ1ZTsKCiAgICAgIHRoaXMuX3N0cmVhbS5fcmVtb3ZlUmFuZ2VSZWFkZXIodGhpcyk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVhZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3JlYWQyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JbImRlZmF1bHQiXS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHZhciBjaHVuaywgcmVxdWVzdENhcGFiaWxpdHk7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclsiZGVmYXVsdCJdLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9xdWV1ZWRDaHVuaykgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNodW5rID0gdGhpcy5fcXVldWVkQ2h1bms7CiAgICAgICAgICAgICAgICB0aGlzLl9xdWV1ZWRDaHVuayA9IG51bGw7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgICAgICB2YWx1ZTogY2h1bmssCiAgICAgICAgICAgICAgICAgIGRvbmU6IGZhbHNlCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9kb25lKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCwKICAgICAgICAgICAgICAgICAgZG9uZTogdHJ1ZQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIHJlcXVlc3RDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpOwoKICAgICAgICAgICAgICAgIHRoaXMuX3JlcXVlc3RzLnB1c2gocmVxdWVzdENhcGFiaWxpdHkpOwoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCByZXF1ZXN0Q2FwYWJpbGl0eS5wcm9taXNlKTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gcmVhZCgpIHsKICAgICAgICByZXR1cm4gX3JlYWQyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiByZWFkOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiY2FuY2VsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjYW5jZWwocmVhc29uKSB7CiAgICAgIHRoaXMuX2RvbmUgPSB0cnVlOwoKICAgICAgdGhpcy5fcmVxdWVzdHMuZm9yRWFjaChmdW5jdGlvbiAocmVxdWVzdENhcGFiaWxpdHkpIHsKICAgICAgICByZXF1ZXN0Q2FwYWJpbGl0eS5yZXNvbHZlKHsKICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWQsCiAgICAgICAgICBkb25lOiB0cnVlCiAgICAgICAgfSk7CiAgICAgIH0pOwoKICAgICAgdGhpcy5fcmVxdWVzdHMgPSBbXTsKCiAgICAgIHRoaXMuX3N0cmVhbS5fcmVtb3ZlUmFuZ2VSZWFkZXIodGhpcyk7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNTdHJlYW1pbmdTdXBwb3J0ZWQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9XSk7CgogIHJldHVybiBQREZEYXRhVHJhbnNwb3J0U3RyZWFtUmFuZ2VSZWFkZXI7Cn0oKTsKCi8qKiovIH0pLAovKiAyMDggKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5XZWJHTENvbnRleHQgPSB2b2lkIDA7Cgp2YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDUpOwoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCnZhciBXZWJHTENvbnRleHQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFdlYkdMQ29udGV4dChfcmVmKSB7CiAgICB2YXIgX3JlZiRlbmFibGUgPSBfcmVmLmVuYWJsZSwKICAgICAgICBlbmFibGUgPSBfcmVmJGVuYWJsZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmJGVuYWJsZTsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2ViR0xDb250ZXh0KTsKCiAgICB0aGlzLl9lbmFibGVkID0gZW5hYmxlID09PSB0cnVlOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFdlYkdMQ29udGV4dCwgW3sKICAgIGtleTogImNvbXBvc2VTTWFzayIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9zZVNNYXNrKF9yZWYyKSB7CiAgICAgIHZhciBsYXllciA9IF9yZWYyLmxheWVyLAogICAgICAgICAgbWFzayA9IF9yZWYyLm1hc2ssCiAgICAgICAgICBwcm9wZXJ0aWVzID0gX3JlZjIucHJvcGVydGllczsKICAgICAgcmV0dXJuIFdlYkdMVXRpbHMuY29tcG9zZVNNYXNrKGxheWVyLCBtYXNrLCBwcm9wZXJ0aWVzKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJkcmF3RmlndXJlcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZHJhd0ZpZ3VyZXMoX3JlZjMpIHsKICAgICAgdmFyIHdpZHRoID0gX3JlZjMud2lkdGgsCiAgICAgICAgICBoZWlnaHQgPSBfcmVmMy5oZWlnaHQsCiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3IgPSBfcmVmMy5iYWNrZ3JvdW5kQ29sb3IsCiAgICAgICAgICBmaWd1cmVzID0gX3JlZjMuZmlndXJlcywKICAgICAgICAgIGNvbnRleHQgPSBfcmVmMy5jb250ZXh0OwogICAgICByZXR1cm4gV2ViR0xVdGlscy5kcmF3RmlndXJlcyh3aWR0aCwgaGVpZ2h0LCBiYWNrZ3JvdW5kQ29sb3IsIGZpZ3VyZXMsIGNvbnRleHQpOwogICAgfQogIH0sIHsKICAgIGtleTogImNsZWFyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjbGVhcigpIHsKICAgICAgV2ViR0xVdGlscy5jbGVhbnVwKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNFbmFibGVkIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgZW5hYmxlZCA9IHRoaXMuX2VuYWJsZWQ7CgogICAgICBpZiAoZW5hYmxlZCkgewogICAgICAgIGVuYWJsZWQgPSBXZWJHTFV0aWxzLnRyeUluaXRHTCgpOwogICAgICB9CgogICAgICByZXR1cm4gKDAsIF91dGlsLnNoYWRvdykodGhpcywgImlzRW5hYmxlZCIsIGVuYWJsZWQpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFdlYkdMQ29udGV4dDsKfSgpOwoKZXhwb3J0cy5XZWJHTENvbnRleHQgPSBXZWJHTENvbnRleHQ7Cgp2YXIgV2ViR0xVdGlscyA9IGZ1bmN0aW9uIFdlYkdMVXRpbHNDbG9zdXJlKCkgewogIGZ1bmN0aW9uIGxvYWRTaGFkZXIoZ2wsIGNvZGUsIHNoYWRlclR5cGUpIHsKICAgIHZhciBzaGFkZXIgPSBnbC5jcmVhdGVTaGFkZXIoc2hhZGVyVHlwZSk7CiAgICBnbC5zaGFkZXJTb3VyY2Uoc2hhZGVyLCBjb2RlKTsKICAgIGdsLmNvbXBpbGVTaGFkZXIoc2hhZGVyKTsKICAgIHZhciBjb21waWxlZCA9IGdsLmdldFNoYWRlclBhcmFtZXRlcihzaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKTsKCiAgICBpZiAoIWNvbXBpbGVkKSB7CiAgICAgIHZhciBlcnJvck1zZyA9IGdsLmdldFNoYWRlckluZm9Mb2coc2hhZGVyKTsKICAgICAgdGhyb3cgbmV3IEVycm9yKCJFcnJvciBkdXJpbmcgc2hhZGVyIGNvbXBpbGF0aW9uOiAiICsgZXJyb3JNc2cpOwogICAgfQoKICAgIHJldHVybiBzaGFkZXI7CiAgfQoKICBmdW5jdGlvbiBjcmVhdGVWZXJ0ZXhTaGFkZXIoZ2wsIGNvZGUpIHsKICAgIHJldHVybiBsb2FkU2hhZGVyKGdsLCBjb2RlLCBnbC5WRVJURVhfU0hBREVSKTsKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50U2hhZGVyKGdsLCBjb2RlKSB7CiAgICByZXR1cm4gbG9hZFNoYWRlcihnbCwgY29kZSwgZ2wuRlJBR01FTlRfU0hBREVSKTsKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZVByb2dyYW0oZ2wsIHNoYWRlcnMpIHsKICAgIHZhciBwcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpOwoKICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IHNoYWRlcnMubGVuZ3RoOyBpIDwgaWk7ICsraSkgewogICAgICBnbC5hdHRhY2hTaGFkZXIocHJvZ3JhbSwgc2hhZGVyc1tpXSk7CiAgICB9CgogICAgZ2wubGlua1Byb2dyYW0ocHJvZ3JhbSk7CiAgICB2YXIgbGlua2VkID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcihwcm9ncmFtLCBnbC5MSU5LX1NUQVRVUyk7CgogICAgaWYgKCFsaW5rZWQpIHsKICAgICAgdmFyIGVycm9yTXNnID0gZ2wuZ2V0UHJvZ3JhbUluZm9Mb2cocHJvZ3JhbSk7CiAgICAgIHRocm93IG5ldyBFcnJvcigiRXJyb3IgZHVyaW5nIHByb2dyYW0gbGlua2luZzogIiArIGVycm9yTXNnKTsKICAgIH0KCiAgICByZXR1cm4gcHJvZ3JhbTsKICB9CgogIGZ1bmN0aW9uIGNyZWF0ZVRleHR1cmUoZ2wsIGltYWdlLCB0ZXh0dXJlSWQpIHsKICAgIGdsLmFjdGl2ZVRleHR1cmUodGV4dHVyZUlkKTsKICAgIHZhciB0ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpOwogICAgZ2wuYmluZFRleHR1cmUoZ2wuVEVYVFVSRV8yRCwgdGV4dHVyZSk7CiAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5DTEFNUF9UT19FREdFKTsKICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLkNMQU1QX1RPX0VER0UpOwogICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01JTl9GSUxURVIsIGdsLk5FQVJFU1QpOwogICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLk5FQVJFU1QpOwogICAgZ2wudGV4SW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCBnbC5SR0JBLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCBpbWFnZSk7CiAgICByZXR1cm4gdGV4dHVyZTsKICB9CgogIHZhciBjdXJyZW50R0wsIGN1cnJlbnRDYW52YXM7CgogIGZ1bmN0aW9uIGdlbmVyYXRlR0woKSB7CiAgICBpZiAoY3VycmVudEdMKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBjdXJyZW50Q2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiY2FudmFzIik7CiAgICBjdXJyZW50R0wgPSBjdXJyZW50Q2FudmFzLmdldENvbnRleHQoIndlYmdsIiwgewogICAgICBwcmVtdWx0aXBsaWVkYWxwaGE6IGZhbHNlCiAgICB9KTsKICB9CgogIHZhciBzbWFza1ZlcnRleFNoYWRlckNvZGUgPSAiXAogIGF0dHJpYnV0ZSB2ZWMyIGFfcG9zaXRpb247ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIGF0dHJpYnV0ZSB2ZWMyIGFfdGV4Q29vcmQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIHVuaWZvcm0gdmVjMiB1X3Jlc29sdXRpb247ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIHZhcnlpbmcgdmVjMiB2X3RleENvb3JkOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIHZvaWQgbWFpbigpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgdmVjMiBjbGlwU3BhY2UgPSAoYV9wb3NpdGlvbiAvIHVfcmVzb2x1dGlvbikgKiAyLjAgLSAxLjA7ICAgXAogICAgZ2xfUG9zaXRpb24gPSB2ZWM0KGNsaXBTcGFjZSAqIHZlYzIoMSwgLTEpLCAwLCAxKTsgICAgICAgICAgXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgdl90ZXhDb29yZCA9IGFfdGV4Q29vcmQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICB2YXIgc21hc2tGcmFnbWVudFNoYWRlckNvZGUgPSAiXAogIHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIHVuaWZvcm0gdmVjNCB1X2JhY2tkcm9wOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIHVuaWZvcm0gaW50IHVfc3VidHlwZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIHVuaWZvcm0gc2FtcGxlcjJEIHVfaW1hZ2U7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIHVuaWZvcm0gc2FtcGxlcjJEIHVfbWFzazsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIHZhcnlpbmcgdmVjMiB2X3RleENvb3JkOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIHZvaWQgbWFpbigpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgdmVjNCBpbWFnZUNvbG9yID0gdGV4dHVyZTJEKHVfaW1hZ2UsIHZfdGV4Q29vcmQpOyAgICAgICAgICAgXAogICAgdmVjNCBtYXNrQ29sb3IgPSB0ZXh0dXJlMkQodV9tYXNrLCB2X3RleENvb3JkKTsgICAgICAgICAgICAgXAogICAgaWYgKHVfYmFja2Ryb3AuYSA+IDAuMCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgICBtYXNrQ29sb3IucmdiID0gbWFza0NvbG9yLnJnYiAqIG1hc2tDb2xvci5hICsgICAgICAgICAgICAgXAogICAgICAgICAgICAgICAgICAgICAgdV9iYWNrZHJvcC5yZ2IgKiAoMS4wIC0gbWFza0NvbG9yLmEpOyAgICAgXAogICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgZmxvYXQgbHVtOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgaWYgKHVfc3VidHlwZSA9PSAwKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgICBsdW0gPSBtYXNrQ29sb3IuYTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgICBsdW0gPSBtYXNrQ29sb3IuciAqIDAuMyArIG1hc2tDb2xvci5nICogMC41OSArICAgICAgICAgICAgXAogICAgICAgICAgICBtYXNrQ29sb3IuYiAqIDAuMTE7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgaW1hZ2VDb2xvci5hICo9IGx1bTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgaW1hZ2VDb2xvci5yZ2IgKj0gaW1hZ2VDb2xvci5hOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgZ2xfRnJhZ0NvbG9yID0gaW1hZ2VDb2xvcjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICB2YXIgc21hc2tDYWNoZSA9IG51bGw7CgogIGZ1bmN0aW9uIGluaXRTbWFza0dMKCkgewogICAgdmFyIGNhbnZhcywgZ2w7CiAgICBnZW5lcmF0ZUdMKCk7CiAgICBjYW52YXMgPSBjdXJyZW50Q2FudmFzOwogICAgY3VycmVudENhbnZhcyA9IG51bGw7CiAgICBnbCA9IGN1cnJlbnRHTDsKICAgIGN1cnJlbnRHTCA9IG51bGw7CiAgICB2YXIgdmVydGV4U2hhZGVyID0gY3JlYXRlVmVydGV4U2hhZGVyKGdsLCBzbWFza1ZlcnRleFNoYWRlckNvZGUpOwogICAgdmFyIGZyYWdtZW50U2hhZGVyID0gY3JlYXRlRnJhZ21lbnRTaGFkZXIoZ2wsIHNtYXNrRnJhZ21lbnRTaGFkZXJDb2RlKTsKICAgIHZhciBwcm9ncmFtID0gY3JlYXRlUHJvZ3JhbShnbCwgW3ZlcnRleFNoYWRlciwgZnJhZ21lbnRTaGFkZXJdKTsKICAgIGdsLnVzZVByb2dyYW0ocHJvZ3JhbSk7CiAgICB2YXIgY2FjaGUgPSB7fTsKICAgIGNhY2hlLmdsID0gZ2w7CiAgICBjYWNoZS5jYW52YXMgPSBjYW52YXM7CiAgICBjYWNoZS5yZXNvbHV0aW9uTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgInVfcmVzb2x1dGlvbiIpOwogICAgY2FjaGUucG9zaXRpb25Mb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sICJhX3Bvc2l0aW9uIik7CiAgICBjYWNoZS5iYWNrZHJvcExvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICJ1X2JhY2tkcm9wIik7CiAgICBjYWNoZS5zdWJ0eXBlTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgInVfc3VidHlwZSIpOwogICAgdmFyIHRleENvb3JkTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCAiYV90ZXhDb29yZCIpOwogICAgdmFyIHRleExheWVyTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgInVfaW1hZ2UiKTsKICAgIHZhciB0ZXhNYXNrTG9jYXRpb24gPSBnbC5nZXRVbmlmb3JtTG9jYXRpb24ocHJvZ3JhbSwgInVfbWFzayIpOwogICAgdmFyIHRleENvb3JkQnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7CiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdGV4Q29vcmRCdWZmZXIpOwogICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkoWzAuMCwgMC4wLCAxLjAsIDAuMCwgMC4wLCAxLjAsIDAuMCwgMS4wLCAxLjAsIDAuMCwgMS4wLCAxLjBdKSwgZ2wuU1RBVElDX0RSQVcpOwogICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodGV4Q29vcmRMb2NhdGlvbik7CiAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHRleENvb3JkTG9jYXRpb24sIDIsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7CiAgICBnbC51bmlmb3JtMWkodGV4TGF5ZXJMb2NhdGlvbiwgMCk7CiAgICBnbC51bmlmb3JtMWkodGV4TWFza0xvY2F0aW9uLCAxKTsKICAgIHNtYXNrQ2FjaGUgPSBjYWNoZTsKICB9CgogIGZ1bmN0aW9uIGNvbXBvc2VTTWFzayhsYXllciwgbWFzaywgcHJvcGVydGllcykgewogICAgdmFyIHdpZHRoID0gbGF5ZXIud2lkdGgsCiAgICAgICAgaGVpZ2h0ID0gbGF5ZXIuaGVpZ2h0OwoKICAgIGlmICghc21hc2tDYWNoZSkgewogICAgICBpbml0U21hc2tHTCgpOwogICAgfQoKICAgIHZhciBjYWNoZSA9IHNtYXNrQ2FjaGUsCiAgICAgICAgY2FudmFzID0gY2FjaGUuY2FudmFzLAogICAgICAgIGdsID0gY2FjaGUuZ2w7CiAgICBjYW52YXMud2lkdGggPSB3aWR0aDsKICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7CiAgICBnbC52aWV3cG9ydCgwLCAwLCBnbC5kcmF3aW5nQnVmZmVyV2lkdGgsIGdsLmRyYXdpbmdCdWZmZXJIZWlnaHQpOwogICAgZ2wudW5pZm9ybTJmKGNhY2hlLnJlc29sdXRpb25Mb2NhdGlvbiwgd2lkdGgsIGhlaWdodCk7CgogICAgaWYgKHByb3BlcnRpZXMuYmFja2Ryb3ApIHsKICAgICAgZ2wudW5pZm9ybTRmKGNhY2hlLnJlc29sdXRpb25Mb2NhdGlvbiwgcHJvcGVydGllcy5iYWNrZHJvcFswXSwgcHJvcGVydGllcy5iYWNrZHJvcFsxXSwgcHJvcGVydGllcy5iYWNrZHJvcFsyXSwgMSk7CiAgICB9IGVsc2UgewogICAgICBnbC51bmlmb3JtNGYoY2FjaGUucmVzb2x1dGlvbkxvY2F0aW9uLCAwLCAwLCAwLCAwKTsKICAgIH0KCiAgICBnbC51bmlmb3JtMWkoY2FjaGUuc3VidHlwZUxvY2F0aW9uLCBwcm9wZXJ0aWVzLnN1YnR5cGUgPT09ICJMdW1pbm9zaXR5IiA/IDEgOiAwKTsKICAgIHZhciB0ZXh0dXJlID0gY3JlYXRlVGV4dHVyZShnbCwgbGF5ZXIsIGdsLlRFWFRVUkUwKTsKICAgIHZhciBtYXNrVGV4dHVyZSA9IGNyZWF0ZVRleHR1cmUoZ2wsIG1hc2ssIGdsLlRFWFRVUkUxKTsKICAgIHZhciBidWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTsKICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBidWZmZXIpOwogICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkoWzAsIDAsIHdpZHRoLCAwLCAwLCBoZWlnaHQsIDAsIGhlaWdodCwgd2lkdGgsIDAsIHdpZHRoLCBoZWlnaHRdKSwgZ2wuU1RBVElDX0RSQVcpOwogICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoY2FjaGUucG9zaXRpb25Mb2NhdGlvbik7CiAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGNhY2hlLnBvc2l0aW9uTG9jYXRpb24sIDIsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7CiAgICBnbC5jbGVhckNvbG9yKDAsIDAsIDAsIDApOwogICAgZ2wuZW5hYmxlKGdsLkJMRU5EKTsKICAgIGdsLmJsZW5kRnVuYyhnbC5PTkUsIGdsLk9ORV9NSU5VU19TUkNfQUxQSEEpOwogICAgZ2wuY2xlYXIoZ2wuQ09MT1JfQlVGRkVSX0JJVCk7CiAgICBnbC5kcmF3QXJyYXlzKGdsLlRSSUFOR0xFUywgMCwgNik7CiAgICBnbC5mbHVzaCgpOwogICAgZ2wuZGVsZXRlVGV4dHVyZSh0ZXh0dXJlKTsKICAgIGdsLmRlbGV0ZVRleHR1cmUobWFza1RleHR1cmUpOwogICAgZ2wuZGVsZXRlQnVmZmVyKGJ1ZmZlcik7CiAgICByZXR1cm4gY2FudmFzOwogIH0KCiAgdmFyIGZpZ3VyZXNWZXJ0ZXhTaGFkZXJDb2RlID0gIlwKICBhdHRyaWJ1dGUgdmVjMiBhX3Bvc2l0aW9uOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKICBhdHRyaWJ1dGUgdmVjMyBhX2NvbG9yOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKICB1bmlmb3JtIHZlYzIgdV9yZXNvbHV0aW9uOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKICB1bmlmb3JtIHZlYzIgdV9zY2FsZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKICB1bmlmb3JtIHZlYzIgdV9vZmZzZXQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKICB2YXJ5aW5nIHZlYzQgdl9jb2xvcjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKICB2b2lkIG1haW4oKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKICAgIHZlYzIgcG9zaXRpb24gPSAoYV9wb3NpdGlvbiArIHVfb2Zmc2V0KSAqIHVfc2NhbGU7ICAgICAgICAgIFwKICAgIHZlYzIgY2xpcFNwYWNlID0gKHBvc2l0aW9uIC8gdV9yZXNvbHV0aW9uKSAqIDIuMCAtIDEuMDsgICAgIFwKICAgIGdsX1Bvc2l0aW9uID0gdmVjNChjbGlwU3BhY2UgKiB2ZWMyKDEsIC0xKSwgMCwgMSk7ICAgICAgICAgIFwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKICAgIHZfY29sb3IgPSB2ZWM0KGFfY29sb3IgLyAyNTUuMCwgMS4wKTsgICAgICAgICAgICAgICAgICAgICAgIFwKICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICI7CiAgdmFyIGZpZ3VyZXNGcmFnbWVudFNoYWRlckNvZGUgPSAiXAogIHByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIHZhcnlpbmcgdmVjNCB2X2NvbG9yOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIHZvaWQgbWFpbigpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgZ2xfRnJhZ0NvbG9yID0gdl9jb2xvcjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIjsKICB2YXIgZmlndXJlc0NhY2hlID0gbnVsbDsKCiAgZnVuY3Rpb24gaW5pdEZpZ3VyZXNHTCgpIHsKICAgIHZhciBjYW52YXMsIGdsOwogICAgZ2VuZXJhdGVHTCgpOwogICAgY2FudmFzID0gY3VycmVudENhbnZhczsKICAgIGN1cnJlbnRDYW52YXMgPSBudWxsOwogICAgZ2wgPSBjdXJyZW50R0w7CiAgICBjdXJyZW50R0wgPSBudWxsOwogICAgdmFyIHZlcnRleFNoYWRlciA9IGNyZWF0ZVZlcnRleFNoYWRlcihnbCwgZmlndXJlc1ZlcnRleFNoYWRlckNvZGUpOwogICAgdmFyIGZyYWdtZW50U2hhZGVyID0gY3JlYXRlRnJhZ21lbnRTaGFkZXIoZ2wsIGZpZ3VyZXNGcmFnbWVudFNoYWRlckNvZGUpOwogICAgdmFyIHByb2dyYW0gPSBjcmVhdGVQcm9ncmFtKGdsLCBbdmVydGV4U2hhZGVyLCBmcmFnbWVudFNoYWRlcl0pOwogICAgZ2wudXNlUHJvZ3JhbShwcm9ncmFtKTsKICAgIHZhciBjYWNoZSA9IHt9OwogICAgY2FjaGUuZ2wgPSBnbDsKICAgIGNhY2hlLmNhbnZhcyA9IGNhbnZhczsKICAgIGNhY2hlLnJlc29sdXRpb25Mb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAidV9yZXNvbHV0aW9uIik7CiAgICBjYWNoZS5zY2FsZUxvY2F0aW9uID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHByb2dyYW0sICJ1X3NjYWxlIik7CiAgICBjYWNoZS5vZmZzZXRMb2NhdGlvbiA9IGdsLmdldFVuaWZvcm1Mb2NhdGlvbihwcm9ncmFtLCAidV9vZmZzZXQiKTsKICAgIGNhY2hlLnBvc2l0aW9uTG9jYXRpb24gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbihwcm9ncmFtLCAiYV9wb3NpdGlvbiIpOwogICAgY2FjaGUuY29sb3JMb2NhdGlvbiA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHByb2dyYW0sICJhX2NvbG9yIik7CiAgICBmaWd1cmVzQ2FjaGUgPSBjYWNoZTsKICB9CgogIGZ1bmN0aW9uIGRyYXdGaWd1cmVzKHdpZHRoLCBoZWlnaHQsIGJhY2tncm91bmRDb2xvciwgZmlndXJlcywgY29udGV4dCkgewogICAgaWYgKCFmaWd1cmVzQ2FjaGUpIHsKICAgICAgaW5pdEZpZ3VyZXNHTCgpOwogICAgfQoKICAgIHZhciBjYWNoZSA9IGZpZ3VyZXNDYWNoZSwKICAgICAgICBjYW52YXMgPSBjYWNoZS5jYW52YXMsCiAgICAgICAgZ2wgPSBjYWNoZS5nbDsKICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoOwogICAgY2FudmFzLmhlaWdodCA9IGhlaWdodDsKICAgIGdsLnZpZXdwb3J0KDAsIDAsIGdsLmRyYXdpbmdCdWZmZXJXaWR0aCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCk7CiAgICBnbC51bmlmb3JtMmYoY2FjaGUucmVzb2x1dGlvbkxvY2F0aW9uLCB3aWR0aCwgaGVpZ2h0KTsKICAgIHZhciBjb3VudCA9IDA7CiAgICB2YXIgaSwgaWksIHJvd3M7CgogICAgZm9yIChpID0gMCwgaWkgPSBmaWd1cmVzLmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgc3dpdGNoIChmaWd1cmVzW2ldLnR5cGUpIHsKICAgICAgICBjYXNlICJsYXR0aWNlIjoKICAgICAgICAgIHJvd3MgPSBmaWd1cmVzW2ldLmNvb3Jkcy5sZW5ndGggLyBmaWd1cmVzW2ldLnZlcnRpY2VzUGVyUm93IHwgMDsKICAgICAgICAgIGNvdW50ICs9IChyb3dzIC0gMSkgKiAoZmlndXJlc1tpXS52ZXJ0aWNlc1BlclJvdyAtIDEpICogNjsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlICJ0cmlhbmdsZXMiOgogICAgICAgICAgY291bnQgKz0gZmlndXJlc1tpXS5jb29yZHMubGVuZ3RoOwogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KCiAgICB2YXIgY29vcmRzID0gbmV3IEZsb2F0MzJBcnJheShjb3VudCAqIDIpOwogICAgdmFyIGNvbG9ycyA9IG5ldyBVaW50OEFycmF5KGNvdW50ICogMyk7CiAgICB2YXIgY29vcmRzTWFwID0gY29udGV4dC5jb29yZHMsCiAgICAgICAgY29sb3JzTWFwID0gY29udGV4dC5jb2xvcnM7CiAgICB2YXIgcEluZGV4ID0gMCwKICAgICAgICBjSW5kZXggPSAwOwoKICAgIGZvciAoaSA9IDAsIGlpID0gZmlndXJlcy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgIHZhciBmaWd1cmUgPSBmaWd1cmVzW2ldLAogICAgICAgICAgcHMgPSBmaWd1cmUuY29vcmRzLAogICAgICAgICAgY3MgPSBmaWd1cmUuY29sb3JzOwoKICAgICAgc3dpdGNoIChmaWd1cmUudHlwZSkgewogICAgICAgIGNhc2UgImxhdHRpY2UiOgogICAgICAgICAgdmFyIGNvbHMgPSBmaWd1cmUudmVydGljZXNQZXJSb3c7CiAgICAgICAgICByb3dzID0gcHMubGVuZ3RoIC8gY29scyB8IDA7CgogICAgICAgICAgZm9yICh2YXIgcm93ID0gMTsgcm93IDwgcm93czsgcm93KyspIHsKICAgICAgICAgICAgdmFyIG9mZnNldCA9IHJvdyAqIGNvbHMgKyAxOwoKICAgICAgICAgICAgZm9yICh2YXIgY29sID0gMTsgY29sIDwgY29sczsgY29sKyssIG9mZnNldCsrKSB7CiAgICAgICAgICAgICAgY29vcmRzW3BJbmRleF0gPSBjb29yZHNNYXBbcHNbb2Zmc2V0IC0gY29scyAtIDFdXTsKICAgICAgICAgICAgICBjb29yZHNbcEluZGV4ICsgMV0gPSBjb29yZHNNYXBbcHNbb2Zmc2V0IC0gY29scyAtIDFdICsgMV07CiAgICAgICAgICAgICAgY29vcmRzW3BJbmRleCArIDJdID0gY29vcmRzTWFwW3BzW29mZnNldCAtIGNvbHNdXTsKICAgICAgICAgICAgICBjb29yZHNbcEluZGV4ICsgM10gPSBjb29yZHNNYXBbcHNbb2Zmc2V0IC0gY29sc10gKyAxXTsKICAgICAgICAgICAgICBjb29yZHNbcEluZGV4ICsgNF0gPSBjb29yZHNNYXBbcHNbb2Zmc2V0IC0gMV1dOwogICAgICAgICAgICAgIGNvb3Jkc1twSW5kZXggKyA1XSA9IGNvb3Jkc01hcFtwc1tvZmZzZXQgLSAxXSArIDFdOwogICAgICAgICAgICAgIGNvbG9yc1tjSW5kZXhdID0gY29sb3JzTWFwW2NzW29mZnNldCAtIGNvbHMgLSAxXV07CiAgICAgICAgICAgICAgY29sb3JzW2NJbmRleCArIDFdID0gY29sb3JzTWFwW2NzW29mZnNldCAtIGNvbHMgLSAxXSArIDFdOwogICAgICAgICAgICAgIGNvbG9yc1tjSW5kZXggKyAyXSA9IGNvbG9yc01hcFtjc1tvZmZzZXQgLSBjb2xzIC0gMV0gKyAyXTsKICAgICAgICAgICAgICBjb2xvcnNbY0luZGV4ICsgM10gPSBjb2xvcnNNYXBbY3Nbb2Zmc2V0IC0gY29sc11dOwogICAgICAgICAgICAgIGNvbG9yc1tjSW5kZXggKyA0XSA9IGNvbG9yc01hcFtjc1tvZmZzZXQgLSBjb2xzXSArIDFdOwogICAgICAgICAgICAgIGNvbG9yc1tjSW5kZXggKyA1XSA9IGNvbG9yc01hcFtjc1tvZmZzZXQgLSBjb2xzXSArIDJdOwogICAgICAgICAgICAgIGNvbG9yc1tjSW5kZXggKyA2XSA9IGNvbG9yc01hcFtjc1tvZmZzZXQgLSAxXV07CiAgICAgICAgICAgICAgY29sb3JzW2NJbmRleCArIDddID0gY29sb3JzTWFwW2NzW29mZnNldCAtIDFdICsgMV07CiAgICAgICAgICAgICAgY29sb3JzW2NJbmRleCArIDhdID0gY29sb3JzTWFwW2NzW29mZnNldCAtIDFdICsgMl07CiAgICAgICAgICAgICAgY29vcmRzW3BJbmRleCArIDZdID0gY29vcmRzW3BJbmRleCArIDJdOwogICAgICAgICAgICAgIGNvb3Jkc1twSW5kZXggKyA3XSA9IGNvb3Jkc1twSW5kZXggKyAzXTsKICAgICAgICAgICAgICBjb29yZHNbcEluZGV4ICsgOF0gPSBjb29yZHNbcEluZGV4ICsgNF07CiAgICAgICAgICAgICAgY29vcmRzW3BJbmRleCArIDldID0gY29vcmRzW3BJbmRleCArIDVdOwogICAgICAgICAgICAgIGNvb3Jkc1twSW5kZXggKyAxMF0gPSBjb29yZHNNYXBbcHNbb2Zmc2V0XV07CiAgICAgICAgICAgICAgY29vcmRzW3BJbmRleCArIDExXSA9IGNvb3Jkc01hcFtwc1tvZmZzZXRdICsgMV07CiAgICAgICAgICAgICAgY29sb3JzW2NJbmRleCArIDldID0gY29sb3JzW2NJbmRleCArIDNdOwogICAgICAgICAgICAgIGNvbG9yc1tjSW5kZXggKyAxMF0gPSBjb2xvcnNbY0luZGV4ICsgNF07CiAgICAgICAgICAgICAgY29sb3JzW2NJbmRleCArIDExXSA9IGNvbG9yc1tjSW5kZXggKyA1XTsKICAgICAgICAgICAgICBjb2xvcnNbY0luZGV4ICsgMTJdID0gY29sb3JzW2NJbmRleCArIDZdOwogICAgICAgICAgICAgIGNvbG9yc1tjSW5kZXggKyAxM10gPSBjb2xvcnNbY0luZGV4ICsgN107CiAgICAgICAgICAgICAgY29sb3JzW2NJbmRleCArIDE0XSA9IGNvbG9yc1tjSW5kZXggKyA4XTsKICAgICAgICAgICAgICBjb2xvcnNbY0luZGV4ICsgMTVdID0gY29sb3JzTWFwW2NzW29mZnNldF1dOwogICAgICAgICAgICAgIGNvbG9yc1tjSW5kZXggKyAxNl0gPSBjb2xvcnNNYXBbY3Nbb2Zmc2V0XSArIDFdOwogICAgICAgICAgICAgIGNvbG9yc1tjSW5kZXggKyAxN10gPSBjb2xvcnNNYXBbY3Nbb2Zmc2V0XSArIDJdOwogICAgICAgICAgICAgIHBJbmRleCArPSAxMjsKICAgICAgICAgICAgICBjSW5kZXggKz0gMTg7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSAidHJpYW5nbGVzIjoKICAgICAgICAgIGZvciAodmFyIGogPSAwLCBqaiA9IHBzLmxlbmd0aDsgaiA8IGpqOyBqKyspIHsKICAgICAgICAgICAgY29vcmRzW3BJbmRleF0gPSBjb29yZHNNYXBbcHNbal1dOwogICAgICAgICAgICBjb29yZHNbcEluZGV4ICsgMV0gPSBjb29yZHNNYXBbcHNbal0gKyAxXTsKICAgICAgICAgICAgY29sb3JzW2NJbmRleF0gPSBjb2xvcnNNYXBbY3Nbal1dOwogICAgICAgICAgICBjb2xvcnNbY0luZGV4ICsgMV0gPSBjb2xvcnNNYXBbY3Nbal0gKyAxXTsKICAgICAgICAgICAgY29sb3JzW2NJbmRleCArIDJdID0gY29sb3JzTWFwW2NzW2pdICsgMl07CiAgICAgICAgICAgIHBJbmRleCArPSAyOwogICAgICAgICAgICBjSW5kZXggKz0gMzsKICAgICAgICAgIH0KCiAgICAgICAgICBicmVhazsKICAgICAgfQogICAgfQoKICAgIGlmIChiYWNrZ3JvdW5kQ29sb3IpIHsKICAgICAgZ2wuY2xlYXJDb2xvcihiYWNrZ3JvdW5kQ29sb3JbMF0gLyAyNTUsIGJhY2tncm91bmRDb2xvclsxXSAvIDI1NSwgYmFja2dyb3VuZENvbG9yWzJdIC8gMjU1LCAxLjApOwogICAgfSBlbHNlIHsKICAgICAgZ2wuY2xlYXJDb2xvcigwLCAwLCAwLCAwKTsKICAgIH0KCiAgICBnbC5jbGVhcihnbC5DT0xPUl9CVUZGRVJfQklUKTsKICAgIHZhciBjb29yZHNCdWZmZXIgPSBnbC5jcmVhdGVCdWZmZXIoKTsKICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBjb29yZHNCdWZmZXIpOwogICAgZ2wuYnVmZmVyRGF0YShnbC5BUlJBWV9CVUZGRVIsIGNvb3JkcywgZ2wuU1RBVElDX0RSQVcpOwogICAgZ2wuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkoY2FjaGUucG9zaXRpb25Mb2NhdGlvbik7CiAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKGNhY2hlLnBvc2l0aW9uTG9jYXRpb24sIDIsIGdsLkZMT0FULCBmYWxzZSwgMCwgMCk7CiAgICB2YXIgY29sb3JzQnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7CiAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgY29sb3JzQnVmZmVyKTsKICAgIGdsLmJ1ZmZlckRhdGEoZ2wuQVJSQVlfQlVGRkVSLCBjb2xvcnMsIGdsLlNUQVRJQ19EUkFXKTsKICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KGNhY2hlLmNvbG9yTG9jYXRpb24pOwogICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihjYWNoZS5jb2xvckxvY2F0aW9uLCAzLCBnbC5VTlNJR05FRF9CWVRFLCBmYWxzZSwgMCwgMCk7CiAgICBnbC51bmlmb3JtMmYoY2FjaGUuc2NhbGVMb2NhdGlvbiwgY29udGV4dC5zY2FsZVgsIGNvbnRleHQuc2NhbGVZKTsKICAgIGdsLnVuaWZvcm0yZihjYWNoZS5vZmZzZXRMb2NhdGlvbiwgY29udGV4dC5vZmZzZXRYLCBjb250ZXh0Lm9mZnNldFkpOwogICAgZ2wuZHJhd0FycmF5cyhnbC5UUklBTkdMRVMsIDAsIGNvdW50KTsKICAgIGdsLmZsdXNoKCk7CiAgICBnbC5kZWxldGVCdWZmZXIoY29vcmRzQnVmZmVyKTsKICAgIGdsLmRlbGV0ZUJ1ZmZlcihjb2xvcnNCdWZmZXIpOwogICAgcmV0dXJuIGNhbnZhczsKICB9CgogIHJldHVybiB7CiAgICB0cnlJbml0R0w6IGZ1bmN0aW9uIHRyeUluaXRHTCgpIHsKICAgICAgdHJ5IHsKICAgICAgICBnZW5lcmF0ZUdMKCk7CiAgICAgICAgcmV0dXJuICEhY3VycmVudEdMOwogICAgICB9IGNhdGNoIChleCkge30KCiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0sCiAgICBjb21wb3NlU01hc2s6IGNvbXBvc2VTTWFzaywKICAgIGRyYXdGaWd1cmVzOiBkcmF3RmlndXJlcywKICAgIGNsZWFudXA6IGZ1bmN0aW9uIGNsZWFudXAoKSB7CiAgICAgIGlmIChzbWFza0NhY2hlICYmIHNtYXNrQ2FjaGUuY2FudmFzKSB7CiAgICAgICAgc21hc2tDYWNoZS5jYW52YXMud2lkdGggPSAwOwogICAgICAgIHNtYXNrQ2FjaGUuY2FudmFzLmhlaWdodCA9IDA7CiAgICAgIH0KCiAgICAgIGlmIChmaWd1cmVzQ2FjaGUgJiYgZmlndXJlc0NhY2hlLmNhbnZhcykgewogICAgICAgIGZpZ3VyZXNDYWNoZS5jYW52YXMud2lkdGggPSAwOwogICAgICAgIGZpZ3VyZXNDYWNoZS5jYW52YXMuaGVpZ2h0ID0gMDsKICAgICAgfQoKICAgICAgc21hc2tDYWNoZSA9IG51bGw7CiAgICAgIGZpZ3VyZXNDYWNoZSA9IG51bGw7CiAgICB9CiAgfTsKfSgpOwoKLyoqKi8gfSksCi8qIDIwOSAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7CgoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLkFubm90YXRpb25MYXllciA9IHZvaWQgMDsKCnZhciBfZGlzcGxheV91dGlscyA9IF9fd19wZGZqc19yZXF1aXJlX18oMSk7Cgp2YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDUpOwoKZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0OyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gInVuZGVmaW5lZCIgfHwgb1tTeW1ib2wuaXRlcmF0b3JdID09IG51bGwpIHsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gIm51bWJlciIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UpIHsgdGhyb3cgX2U7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuIik7IH0gdmFyIG5vcm1hbENvbXBsZXRpb24gPSB0cnVlLCBkaWRFcnIgPSBmYWxzZSwgZXJyOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyBpdCA9IG9bU3ltYm9sLml0ZXJhdG9yXSgpOyB9LCBuOiBmdW5jdGlvbiBuKCkgeyB2YXIgc3RlcCA9IGl0Lm5leHQoKTsgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTsgcmV0dXJuIHN0ZXA7IH0sIGU6IGZ1bmN0aW9uIGUoX2UyKSB7IGRpZEVyciA9IHRydWU7IGVyciA9IF9lMjsgfSwgZjogZnVuY3Rpb24gZigpIHsgdHJ5IHsgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0WyJyZXR1cm4iXSAhPSBudWxsKSBpdFsicmV0dXJuIl0oKTsgfSBmaW5hbGx5IHsgaWYgKGRpZEVycikgdGhyb3cgZXJyOyB9IH0gfTsgfQoKZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSAic3RyaW5nIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09ICJPYmplY3QiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSAiTWFwIiB8fCBuID09PSAiU2V0IikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSAiQXJndW1lbnRzIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH0KCmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfQoKZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikgeyBpZiAodHlwZW9mIFJlZmxlY3QgIT09ICJ1bmRlZmluZWQiICYmIFJlZmxlY3QuZ2V0KSB7IF9nZXQgPSBSZWZsZWN0LmdldDsgfSBlbHNlIHsgX2dldCA9IGZ1bmN0aW9uIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIpIHsgdmFyIGJhc2UgPSBfc3VwZXJQcm9wQmFzZSh0YXJnZXQsIHByb3BlcnR5KTsgaWYgKCFiYXNlKSByZXR1cm47IHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlLCBwcm9wZXJ0eSk7IGlmIChkZXNjLmdldCkgeyByZXR1cm4gZGVzYy5nZXQuY2FsbChyZWNlaXZlcik7IH0gcmV0dXJuIGRlc2MudmFsdWU7IH07IH0gcmV0dXJuIF9nZXQodGFyZ2V0LCBwcm9wZXJ0eSwgcmVjZWl2ZXIgfHwgdGFyZ2V0KTsgfQoKZnVuY3Rpb24gX3N1cGVyUHJvcEJhc2Uob2JqZWN0LCBwcm9wZXJ0eSkgeyB3aGlsZSAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KSkgeyBvYmplY3QgPSBfZ2V0UHJvdG90eXBlT2Yob2JqZWN0KTsgaWYgKG9iamVjdCA9PT0gbnVsbCkgYnJlYWs7IH0gcmV0dXJuIG9iamVjdDsgfQoKZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9CgpmdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSAiZnVuY3Rpb24iICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24iKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBfc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9CgpmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfQoKZnVuY3Rpb24gX2NyZWF0ZVN1cGVyKERlcml2ZWQpIHsgdmFyIGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCk7IHJldHVybiBmdW5jdGlvbiBfY3JlYXRlU3VwZXJJbnRlcm5hbCgpIHsgdmFyIFN1cGVyID0gX2dldFByb3RvdHlwZU9mKERlcml2ZWQpLCByZXN1bHQ7IGlmIChoYXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KSB7IHZhciBOZXdUYXJnZXQgPSBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3I7IHJlc3VsdCA9IFJlZmxlY3QuY29uc3RydWN0KFN1cGVyLCBhcmd1bWVudHMsIE5ld1RhcmdldCk7IH0gZWxzZSB7IHJlc3VsdCA9IFN1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH0gcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIHJlc3VsdCk7IH07IH0KCmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09ICJvYmplY3QiIHx8IHR5cGVvZiBjYWxsID09PSAiZnVuY3Rpb24iKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfQoKZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7IGlmIChzZWxmID09PSB2b2lkIDApIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWQiKTsgfSByZXR1cm4gc2VsZjsgfQoKZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAidW5kZWZpbmVkIiB8fCAhUmVmbGVjdC5jb25zdHJ1Y3QpIHJldHVybiBmYWxzZTsgaWYgKFJlZmxlY3QuY29uc3RydWN0LnNoYW0pIHJldHVybiBmYWxzZTsgaWYgKHR5cGVvZiBQcm94eSA9PT0gImZ1bmN0aW9uIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9CgpmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2YobykgeyByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pOyB9OyByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKdmFyIEFubm90YXRpb25FbGVtZW50RmFjdG9yeSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gQW5ub3RhdGlvbkVsZW1lbnRGYWN0b3J5KCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFubm90YXRpb25FbGVtZW50RmFjdG9yeSk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQW5ub3RhdGlvbkVsZW1lbnRGYWN0b3J5LCBudWxsLCBbewogICAga2V5OiAiY3JlYXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGUocGFyYW1ldGVycykgewogICAgICB2YXIgc3VidHlwZSA9IHBhcmFtZXRlcnMuZGF0YS5hbm5vdGF0aW9uVHlwZTsKCiAgICAgIHN3aXRjaCAoc3VidHlwZSkgewogICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuTElOSzoKICAgICAgICAgIHJldHVybiBuZXcgTGlua0Fubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpOwoKICAgICAgICBjYXNlIF91dGlsLkFubm90YXRpb25UeXBlLlRFWFQ6CiAgICAgICAgICByZXR1cm4gbmV3IFRleHRBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTsKCiAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5XSURHRVQ6CiAgICAgICAgICB2YXIgZmllbGRUeXBlID0gcGFyYW1ldGVycy5kYXRhLmZpZWxkVHlwZTsKCiAgICAgICAgICBzd2l0Y2ggKGZpZWxkVHlwZSkgewogICAgICAgICAgICBjYXNlICJUeCI6CiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBUZXh0V2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7CgogICAgICAgICAgICBjYXNlICJCdG4iOgogICAgICAgICAgICAgIGlmIChwYXJhbWV0ZXJzLmRhdGEucmFkaW9CdXR0b24pIHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmFkaW9CdXR0b25XaWRnZXRBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTsKICAgICAgICAgICAgICB9IGVsc2UgaWYgKHBhcmFtZXRlcnMuZGF0YS5jaGVja0JveCkgewogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDaGVja2JveFdpZGdldEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpOwogICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQdXNoQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7CgogICAgICAgICAgICBjYXNlICJDaCI6CiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDaG9pY2VXaWRnZXRBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gbmV3IFdpZGdldEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpOwoKICAgICAgICBjYXNlIF91dGlsLkFubm90YXRpb25UeXBlLlBPUFVQOgogICAgICAgICAgcmV0dXJuIG5ldyBQb3B1cEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpOwoKICAgICAgICBjYXNlIF91dGlsLkFubm90YXRpb25UeXBlLkZSRUVURVhUOgogICAgICAgICAgcmV0dXJuIG5ldyBGcmVlVGV4dEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpOwoKICAgICAgICBjYXNlIF91dGlsLkFubm90YXRpb25UeXBlLkxJTkU6CiAgICAgICAgICByZXR1cm4gbmV3IExpbmVBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTsKCiAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5TUVVBUkU6CiAgICAgICAgICByZXR1cm4gbmV3IFNxdWFyZUFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpOwoKICAgICAgICBjYXNlIF91dGlsLkFubm90YXRpb25UeXBlLkNJUkNMRToKICAgICAgICAgIHJldHVybiBuZXcgQ2lyY2xlQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7CgogICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuUE9MWUxJTkU6CiAgICAgICAgICByZXR1cm4gbmV3IFBvbHlsaW5lQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7CgogICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuQ0FSRVQ6CiAgICAgICAgICByZXR1cm4gbmV3IENhcmV0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7CgogICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuSU5LOgogICAgICAgICAgcmV0dXJuIG5ldyBJbmtBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTsKCiAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5QT0xZR09OOgogICAgICAgICAgcmV0dXJuIG5ldyBQb2x5Z29uQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7CgogICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuSElHSExJR0hUOgogICAgICAgICAgcmV0dXJuIG5ldyBIaWdobGlnaHRBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKTsKCiAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uVHlwZS5VTkRFUkxJTkU6CiAgICAgICAgICByZXR1cm4gbmV3IFVuZGVybGluZUFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpOwoKICAgICAgICBjYXNlIF91dGlsLkFubm90YXRpb25UeXBlLlNRVUlHR0xZOgogICAgICAgICAgcmV0dXJuIG5ldyBTcXVpZ2dseUFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpOwoKICAgICAgICBjYXNlIF91dGlsLkFubm90YXRpb25UeXBlLlNUUklLRU9VVDoKICAgICAgICAgIHJldHVybiBuZXcgU3RyaWtlT3V0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7CgogICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuU1RBTVA6CiAgICAgICAgICByZXR1cm4gbmV3IFN0YW1wQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7CgogICAgICAgIGNhc2UgX3V0aWwuQW5ub3RhdGlvblR5cGUuRklMRUFUVEFDSE1FTlQ6CiAgICAgICAgICByZXR1cm4gbmV3IEZpbGVBdHRhY2htZW50QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycyk7CgogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICByZXR1cm4gbmV3IEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpOwogICAgICB9CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQW5ub3RhdGlvbkVsZW1lbnRGYWN0b3J5Owp9KCk7Cgp2YXIgQW5ub3RhdGlvbkVsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpIHsKICAgIHZhciBpc1JlbmRlcmFibGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZhbHNlOwogICAgdmFyIGlnbm9yZUJvcmRlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFubm90YXRpb25FbGVtZW50KTsKCiAgICB0aGlzLmlzUmVuZGVyYWJsZSA9IGlzUmVuZGVyYWJsZTsKICAgIHRoaXMuZGF0YSA9IHBhcmFtZXRlcnMuZGF0YTsKICAgIHRoaXMubGF5ZXIgPSBwYXJhbWV0ZXJzLmxheWVyOwogICAgdGhpcy5wYWdlID0gcGFyYW1ldGVycy5wYWdlOwogICAgdGhpcy52aWV3cG9ydCA9IHBhcmFtZXRlcnMudmlld3BvcnQ7CiAgICB0aGlzLmxpbmtTZXJ2aWNlID0gcGFyYW1ldGVycy5saW5rU2VydmljZTsKICAgIHRoaXMuZG93bmxvYWRNYW5hZ2VyID0gcGFyYW1ldGVycy5kb3dubG9hZE1hbmFnZXI7CiAgICB0aGlzLmltYWdlUmVzb3VyY2VzUGF0aCA9IHBhcmFtZXRlcnMuaW1hZ2VSZXNvdXJjZXNQYXRoOwogICAgdGhpcy5yZW5kZXJJbnRlcmFjdGl2ZUZvcm1zID0gcGFyYW1ldGVycy5yZW5kZXJJbnRlcmFjdGl2ZUZvcm1zOwogICAgdGhpcy5zdmdGYWN0b3J5ID0gcGFyYW1ldGVycy5zdmdGYWN0b3J5OwoKICAgIGlmIChpc1JlbmRlcmFibGUpIHsKICAgICAgdGhpcy5jb250YWluZXIgPSB0aGlzLl9jcmVhdGVDb250YWluZXIoaWdub3JlQm9yZGVyKTsKICAgIH0KICB9CgogIF9jcmVhdGVDbGFzcyhBbm5vdGF0aW9uRWxlbWVudCwgW3sKICAgIGtleTogIl9jcmVhdGVDb250YWluZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9jcmVhdGVDb250YWluZXIoKSB7CiAgICAgIHZhciBpZ25vcmVCb3JkZXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlOwogICAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YSwKICAgICAgICAgIHBhZ2UgPSB0aGlzLnBhZ2UsCiAgICAgICAgICB2aWV3cG9ydCA9IHRoaXMudmlld3BvcnQ7CiAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzZWN0aW9uIik7CiAgICAgIHZhciB3aWR0aCA9IGRhdGEucmVjdFsyXSAtIGRhdGEucmVjdFswXTsKICAgICAgdmFyIGhlaWdodCA9IGRhdGEucmVjdFszXSAtIGRhdGEucmVjdFsxXTsKICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgiZGF0YS1hbm5vdGF0aW9uLWlkIiwgZGF0YS5pZCk7CgogICAgICB2YXIgcmVjdCA9IF91dGlsLlV0aWwubm9ybWFsaXplUmVjdChbZGF0YS5yZWN0WzBdLCBwYWdlLnZpZXdbM10gLSBkYXRhLnJlY3RbMV0gKyBwYWdlLnZpZXdbMV0sIGRhdGEucmVjdFsyXSwgcGFnZS52aWV3WzNdIC0gZGF0YS5yZWN0WzNdICsgcGFnZS52aWV3WzFdXSk7CgogICAgICBjb250YWluZXIuc3R5bGUudHJhbnNmb3JtID0gIm1hdHJpeCgiLmNvbmNhdCh2aWV3cG9ydC50cmFuc2Zvcm0uam9pbigiLCIpLCAiKSIpOwogICAgICBjb250YWluZXIuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gIi0iLmNvbmNhdChyZWN0WzBdLCAicHggLSIpLmNvbmNhdChyZWN0WzFdLCAicHgiKTsKCiAgICAgIGlmICghaWdub3JlQm9yZGVyICYmIGRhdGEuYm9yZGVyU3R5bGUud2lkdGggPiAwKSB7CiAgICAgICAgY29udGFpbmVyLnN0eWxlLmJvcmRlcldpZHRoID0gIiIuY29uY2F0KGRhdGEuYm9yZGVyU3R5bGUud2lkdGgsICJweCIpOwoKICAgICAgICBpZiAoZGF0YS5ib3JkZXJTdHlsZS5zdHlsZSAhPT0gX3V0aWwuQW5ub3RhdGlvbkJvcmRlclN0eWxlVHlwZS5VTkRFUkxJTkUpIHsKICAgICAgICAgIHdpZHRoID0gd2lkdGggLSAyICogZGF0YS5ib3JkZXJTdHlsZS53aWR0aDsKICAgICAgICAgIGhlaWdodCA9IGhlaWdodCAtIDIgKiBkYXRhLmJvcmRlclN0eWxlLndpZHRoOwogICAgICAgIH0KCiAgICAgICAgdmFyIGhvcml6b250YWxSYWRpdXMgPSBkYXRhLmJvcmRlclN0eWxlLmhvcml6b250YWxDb3JuZXJSYWRpdXM7CiAgICAgICAgdmFyIHZlcnRpY2FsUmFkaXVzID0gZGF0YS5ib3JkZXJTdHlsZS52ZXJ0aWNhbENvcm5lclJhZGl1czsKCiAgICAgICAgaWYgKGhvcml6b250YWxSYWRpdXMgPiAwIHx8IHZlcnRpY2FsUmFkaXVzID4gMCkgewogICAgICAgICAgdmFyIHJhZGl1cyA9ICIiLmNvbmNhdChob3Jpem9udGFsUmFkaXVzLCAicHggLyAiKS5jb25jYXQodmVydGljYWxSYWRpdXMsICJweCIpOwogICAgICAgICAgY29udGFpbmVyLnN0eWxlLmJvcmRlclJhZGl1cyA9IHJhZGl1czsKICAgICAgICB9CgogICAgICAgIHN3aXRjaCAoZGF0YS5ib3JkZXJTdHlsZS5zdHlsZSkgewogICAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uQm9yZGVyU3R5bGVUeXBlLlNPTElEOgogICAgICAgICAgICBjb250YWluZXIuc3R5bGUuYm9yZGVyU3R5bGUgPSAic29saWQiOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlIF91dGlsLkFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGUuREFTSEVEOgogICAgICAgICAgICBjb250YWluZXIuc3R5bGUuYm9yZGVyU3R5bGUgPSAiZGFzaGVkIjsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uQm9yZGVyU3R5bGVUeXBlLkJFVkVMRUQ6CiAgICAgICAgICAgICgwLCBfdXRpbC53YXJuKSgiVW5pbXBsZW1lbnRlZCBib3JkZXIgc3R5bGU6IGJldmVsZWQiKTsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSBfdXRpbC5Bbm5vdGF0aW9uQm9yZGVyU3R5bGVUeXBlLklOU0VUOgogICAgICAgICAgICAoMCwgX3V0aWwud2FybikoIlVuaW1wbGVtZW50ZWQgYm9yZGVyIHN0eWxlOiBpbnNldCIpOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlIF91dGlsLkFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGUuVU5ERVJMSU5FOgogICAgICAgICAgICBjb250YWluZXIuc3R5bGUuYm9yZGVyQm90dG9tU3R5bGUgPSAic29saWQiOwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICBicmVhazsKICAgICAgICB9CgogICAgICAgIGlmIChkYXRhLmNvbG9yKSB7CiAgICAgICAgICBjb250YWluZXIuc3R5bGUuYm9yZGVyQ29sb3IgPSBfdXRpbC5VdGlsLm1ha2VDc3NSZ2IoZGF0YS5jb2xvclswXSB8IDAsIGRhdGEuY29sb3JbMV0gfCAwLCBkYXRhLmNvbG9yWzJdIHwgMCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvbnRhaW5lci5zdHlsZS5ib3JkZXJXaWR0aCA9IDA7CiAgICAgICAgfQogICAgICB9CgogICAgICBjb250YWluZXIuc3R5bGUubGVmdCA9ICIiLmNvbmNhdChyZWN0WzBdLCAicHgiKTsKICAgICAgY29udGFpbmVyLnN0eWxlLnRvcCA9ICIiLmNvbmNhdChyZWN0WzFdLCAicHgiKTsKICAgICAgY29udGFpbmVyLnN0eWxlLndpZHRoID0gIiIuY29uY2F0KHdpZHRoLCAicHgiKTsKICAgICAgY29udGFpbmVyLnN0eWxlLmhlaWdodCA9ICIiLmNvbmNhdChoZWlnaHQsICJweCIpOwogICAgICByZXR1cm4gY29udGFpbmVyOwogICAgfQogIH0sIHsKICAgIGtleTogIl9jcmVhdGVQb3B1cCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2NyZWF0ZVBvcHVwKGNvbnRhaW5lciwgdHJpZ2dlciwgZGF0YSkgewogICAgICBpZiAoIXRyaWdnZXIpIHsKICAgICAgICB0cmlnZ2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICAgICAgdHJpZ2dlci5zdHlsZS5oZWlnaHQgPSBjb250YWluZXIuc3R5bGUuaGVpZ2h0OwogICAgICAgIHRyaWdnZXIuc3R5bGUud2lkdGggPSBjb250YWluZXIuc3R5bGUud2lkdGg7CiAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRyaWdnZXIpOwogICAgICB9CgogICAgICB2YXIgcG9wdXBFbGVtZW50ID0gbmV3IFBvcHVwRWxlbWVudCh7CiAgICAgICAgY29udGFpbmVyOiBjb250YWluZXIsCiAgICAgICAgdHJpZ2dlcjogdHJpZ2dlciwKICAgICAgICBjb2xvcjogZGF0YS5jb2xvciwKICAgICAgICB0aXRsZTogZGF0YS50aXRsZSwKICAgICAgICBtb2RpZmljYXRpb25EYXRlOiBkYXRhLm1vZGlmaWNhdGlvbkRhdGUsCiAgICAgICAgY29udGVudHM6IGRhdGEuY29udGVudHMsCiAgICAgICAgaGlkZVdyYXBwZXI6IHRydWUKICAgICAgfSk7CiAgICAgIHZhciBwb3B1cCA9IHBvcHVwRWxlbWVudC5yZW5kZXIoKTsKICAgICAgcG9wdXAuc3R5bGUubGVmdCA9IGNvbnRhaW5lci5zdHlsZS53aWR0aDsKICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHBvcHVwKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgKDAsIF91dGlsLnVucmVhY2hhYmxlKSgiQWJzdHJhY3QgbWV0aG9kIGBBbm5vdGF0aW9uRWxlbWVudC5yZW5kZXJgIGNhbGxlZCIpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEFubm90YXRpb25FbGVtZW50Owp9KCk7Cgp2YXIgTGlua0Fubm90YXRpb25FbGVtZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5ub3RhdGlvbkVsZW1lbnQpIHsKICBfaW5oZXJpdHMoTGlua0Fubm90YXRpb25FbGVtZW50LCBfQW5ub3RhdGlvbkVsZW1lbnQpOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKExpbmtBbm5vdGF0aW9uRWxlbWVudCk7CgogIGZ1bmN0aW9uIExpbmtBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGlua0Fubm90YXRpb25FbGVtZW50KTsKCiAgICB2YXIgaXNSZW5kZXJhYmxlID0gISEocGFyYW1ldGVycy5kYXRhLnVybCB8fCBwYXJhbWV0ZXJzLmRhdGEuZGVzdCB8fCBwYXJhbWV0ZXJzLmRhdGEuYWN0aW9uKTsKICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBwYXJhbWV0ZXJzLCBpc1JlbmRlcmFibGUpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKExpbmtBbm5vdGF0aW9uRWxlbWVudCwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSAibGlua0Fubm90YXRpb24iOwogICAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YSwKICAgICAgICAgIGxpbmtTZXJ2aWNlID0gdGhpcy5saW5rU2VydmljZTsKICAgICAgdmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJhIik7CgogICAgICBpZiAoZGF0YS51cmwpIHsKICAgICAgICAoMCwgX2Rpc3BsYXlfdXRpbHMuYWRkTGlua0F0dHJpYnV0ZXMpKGxpbmssIHsKICAgICAgICAgIHVybDogZGF0YS51cmwsCiAgICAgICAgICB0YXJnZXQ6IGRhdGEubmV3V2luZG93ID8gX2Rpc3BsYXlfdXRpbHMuTGlua1RhcmdldC5CTEFOSyA6IGxpbmtTZXJ2aWNlLmV4dGVybmFsTGlua1RhcmdldCwKICAgICAgICAgIHJlbDogbGlua1NlcnZpY2UuZXh0ZXJuYWxMaW5rUmVsLAogICAgICAgICAgZW5hYmxlZDogbGlua1NlcnZpY2UuZXh0ZXJuYWxMaW5rRW5hYmxlZAogICAgICAgIH0pOwogICAgICB9IGVsc2UgaWYgKGRhdGEuYWN0aW9uKSB7CiAgICAgICAgdGhpcy5fYmluZE5hbWVkQWN0aW9uKGxpbmssIGRhdGEuYWN0aW9uKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLl9iaW5kTGluayhsaW5rLCBkYXRhLmRlc3QpOwogICAgICB9CgogICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChsaW5rKTsKICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyOwogICAgfQogIH0sIHsKICAgIGtleTogIl9iaW5kTGluayIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2JpbmRMaW5rKGxpbmssIGRlc3RpbmF0aW9uKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBsaW5rLmhyZWYgPSB0aGlzLmxpbmtTZXJ2aWNlLmdldERlc3RpbmF0aW9uSGFzaChkZXN0aW5hdGlvbik7CgogICAgICBsaW5rLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKGRlc3RpbmF0aW9uKSB7CiAgICAgICAgICBfdGhpcy5saW5rU2VydmljZS5uYXZpZ2F0ZVRvKGRlc3RpbmF0aW9uKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfTsKCiAgICAgIGlmIChkZXN0aW5hdGlvbikgewogICAgICAgIGxpbmsuY2xhc3NOYW1lID0gImludGVybmFsTGluayI7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJfYmluZE5hbWVkQWN0aW9uIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfYmluZE5hbWVkQWN0aW9uKGxpbmssIGFjdGlvbikgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIGxpbmsuaHJlZiA9IHRoaXMubGlua1NlcnZpY2UuZ2V0QW5jaG9yVXJsKCIiKTsKCiAgICAgIGxpbmsub25jbGljayA9IGZ1bmN0aW9uICgpIHsKICAgICAgICBfdGhpczIubGlua1NlcnZpY2UuZXhlY3V0ZU5hbWVkQWN0aW9uKGFjdGlvbik7CgogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfTsKCiAgICAgIGxpbmsuY2xhc3NOYW1lID0gImludGVybmFsTGluayI7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gTGlua0Fubm90YXRpb25FbGVtZW50Owp9KEFubm90YXRpb25FbGVtZW50KTsKCnZhciBUZXh0QW5ub3RhdGlvbkVsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Bbm5vdGF0aW9uRWxlbWVudDIpIHsKICBfaW5oZXJpdHMoVGV4dEFubm90YXRpb25FbGVtZW50LCBfQW5ub3RhdGlvbkVsZW1lbnQyKTsKCiAgdmFyIF9zdXBlcjIgPSBfY3JlYXRlU3VwZXIoVGV4dEFubm90YXRpb25FbGVtZW50KTsKCiAgZnVuY3Rpb24gVGV4dEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBUZXh0QW5ub3RhdGlvbkVsZW1lbnQpOwoKICAgIHZhciBpc1JlbmRlcmFibGUgPSAhIShwYXJhbWV0ZXJzLmRhdGEuaGFzUG9wdXAgfHwgcGFyYW1ldGVycy5kYXRhLnRpdGxlIHx8IHBhcmFtZXRlcnMuZGF0YS5jb250ZW50cyk7CiAgICByZXR1cm4gX3N1cGVyMi5jYWxsKHRoaXMsIHBhcmFtZXRlcnMsIGlzUmVuZGVyYWJsZSk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoVGV4dEFubm90YXRpb25FbGVtZW50LCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9ICJ0ZXh0QW5ub3RhdGlvbiI7CiAgICAgIHZhciBpbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImltZyIpOwogICAgICBpbWFnZS5zdHlsZS5oZWlnaHQgPSB0aGlzLmNvbnRhaW5lci5zdHlsZS5oZWlnaHQ7CiAgICAgIGltYWdlLnN0eWxlLndpZHRoID0gdGhpcy5jb250YWluZXIuc3R5bGUud2lkdGg7CiAgICAgIGltYWdlLnNyYyA9IHRoaXMuaW1hZ2VSZXNvdXJjZXNQYXRoICsgImFubm90YXRpb24tIiArIHRoaXMuZGF0YS5uYW1lLnRvTG93ZXJDYXNlKCkgKyAiLnN2ZyI7CiAgICAgIGltYWdlLmFsdCA9ICJbe3t0eXBlfX0gQW5ub3RhdGlvbl0iOwogICAgICBpbWFnZS5kYXRhc2V0LmwxMG5JZCA9ICJ0ZXh0X2Fubm90YXRpb25fdHlwZSI7CiAgICAgIGltYWdlLmRhdGFzZXQubDEwbkFyZ3MgPSBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgdHlwZTogdGhpcy5kYXRhLm5hbWUKICAgICAgfSk7CgogICAgICBpZiAoIXRoaXMuZGF0YS5oYXNQb3B1cCkgewogICAgICAgIHRoaXMuX2NyZWF0ZVBvcHVwKHRoaXMuY29udGFpbmVyLCBpbWFnZSwgdGhpcy5kYXRhKTsKICAgICAgfQoKICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQoaW1hZ2UpOwogICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gVGV4dEFubm90YXRpb25FbGVtZW50Owp9KEFubm90YXRpb25FbGVtZW50KTsKCnZhciBXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Fubm90YXRpb25FbGVtZW50MykgewogIF9pbmhlcml0cyhXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCwgX0Fubm90YXRpb25FbGVtZW50Myk7CgogIHZhciBfc3VwZXIzID0gX2NyZWF0ZVN1cGVyKFdpZGdldEFubm90YXRpb25FbGVtZW50KTsKCiAgZnVuY3Rpb24gV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQoKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQpOwoKICAgIHJldHVybiBfc3VwZXIzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQsIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFdpZGdldEFubm90YXRpb25FbGVtZW50Owp9KEFubm90YXRpb25FbGVtZW50KTsKCnZhciBUZXh0V2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9XaWRnZXRBbm5vdGF0aW9uRWxlbSkgewogIF9pbmhlcml0cyhUZXh0V2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQsIF9XaWRnZXRBbm5vdGF0aW9uRWxlbSk7CgogIHZhciBfc3VwZXI0ID0gX2NyZWF0ZVN1cGVyKFRleHRXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCk7CgogIGZ1bmN0aW9uIFRleHRXaWRnZXRBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGV4dFdpZGdldEFubm90YXRpb25FbGVtZW50KTsKCiAgICB2YXIgaXNSZW5kZXJhYmxlID0gcGFyYW1ldGVycy5yZW5kZXJJbnRlcmFjdGl2ZUZvcm1zIHx8ICFwYXJhbWV0ZXJzLmRhdGEuaGFzQXBwZWFyYW5jZSAmJiAhIXBhcmFtZXRlcnMuZGF0YS5maWVsZFZhbHVlOwogICAgcmV0dXJuIF9zdXBlcjQuY2FsbCh0aGlzLCBwYXJhbWV0ZXJzLCBpc1JlbmRlcmFibGUpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFRleHRXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICB2YXIgVEVYVF9BTElHTk1FTlQgPSBbImxlZnQiLCAiY2VudGVyIiwgInJpZ2h0Il07CiAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9ICJ0ZXh0V2lkZ2V0QW5ub3RhdGlvbiI7CiAgICAgIHZhciBlbGVtZW50ID0gbnVsbDsKCiAgICAgIGlmICh0aGlzLnJlbmRlckludGVyYWN0aXZlRm9ybXMpIHsKICAgICAgICBpZiAodGhpcy5kYXRhLm11bHRpTGluZSkgewogICAgICAgICAgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInRleHRhcmVhIik7CiAgICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gdGhpcy5kYXRhLmZpZWxkVmFsdWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbnB1dCIpOwogICAgICAgICAgZWxlbWVudC50eXBlID0gInRleHQiOwogICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoInZhbHVlIiwgdGhpcy5kYXRhLmZpZWxkVmFsdWUpOwogICAgICAgIH0KCiAgICAgICAgZWxlbWVudC5kaXNhYmxlZCA9IHRoaXMuZGF0YS5yZWFkT25seTsKICAgICAgICBlbGVtZW50Lm5hbWUgPSB0aGlzLmRhdGEuZmllbGROYW1lOwoKICAgICAgICBpZiAodGhpcy5kYXRhLm1heExlbiAhPT0gbnVsbCkgewogICAgICAgICAgZWxlbWVudC5tYXhMZW5ndGggPSB0aGlzLmRhdGEubWF4TGVuOwogICAgICAgIH0KCiAgICAgICAgaWYgKHRoaXMuZGF0YS5jb21iKSB7CiAgICAgICAgICB2YXIgZmllbGRXaWR0aCA9IHRoaXMuZGF0YS5yZWN0WzJdIC0gdGhpcy5kYXRhLnJlY3RbMF07CiAgICAgICAgICB2YXIgY29tYldpZHRoID0gZmllbGRXaWR0aCAvIHRoaXMuZGF0YS5tYXhMZW47CiAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoImNvbWIiKTsKICAgICAgICAgIGVsZW1lbnQuc3R5bGUubGV0dGVyU3BhY2luZyA9ICJjYWxjKCIuY29uY2F0KGNvbWJXaWR0aCwgInB4IC0gMWNoKSIpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICAgICAgZWxlbWVudC50ZXh0Q29udGVudCA9IHRoaXMuZGF0YS5maWVsZFZhbHVlOwogICAgICAgIGVsZW1lbnQuc3R5bGUudmVydGljYWxBbGlnbiA9ICJtaWRkbGUiOwogICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICJ0YWJsZS1jZWxsIjsKICAgICAgICB2YXIgZm9udCA9IG51bGw7CgogICAgICAgIGlmICh0aGlzLmRhdGEuZm9udFJlZk5hbWUgJiYgdGhpcy5wYWdlLmNvbW1vbk9ianMuaGFzKHRoaXMuZGF0YS5mb250UmVmTmFtZSkpIHsKICAgICAgICAgIGZvbnQgPSB0aGlzLnBhZ2UuY29tbW9uT2Jqcy5nZXQodGhpcy5kYXRhLmZvbnRSZWZOYW1lKTsKICAgICAgICB9CgogICAgICAgIHRoaXMuX3NldFRleHRTdHlsZShlbGVtZW50LCBmb250KTsKICAgICAgfQoKICAgICAgaWYgKHRoaXMuZGF0YS50ZXh0QWxpZ25tZW50ICE9PSBudWxsKSB7CiAgICAgICAgZWxlbWVudC5zdHlsZS50ZXh0QWxpZ24gPSBURVhUX0FMSUdOTUVOVFt0aGlzLmRhdGEudGV4dEFsaWdubWVudF07CiAgICAgIH0KCiAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGVsZW1lbnQpOwogICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7CiAgICB9CiAgfSwgewogICAga2V5OiAiX3NldFRleHRTdHlsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldFRleHRTdHlsZShlbGVtZW50LCBmb250KSB7CiAgICAgIHZhciBzdHlsZSA9IGVsZW1lbnQuc3R5bGU7CiAgICAgIHN0eWxlLmZvbnRTaXplID0gIiIuY29uY2F0KHRoaXMuZGF0YS5mb250U2l6ZSwgInB4Iik7CiAgICAgIHN0eWxlLmRpcmVjdGlvbiA9IHRoaXMuZGF0YS5mb250RGlyZWN0aW9uIDwgMCA/ICJydGwiIDogImx0ciI7CgogICAgICBpZiAoIWZvbnQpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciBib2xkID0gIm5vcm1hbCI7CgogICAgICBpZiAoZm9udC5ibGFjaykgewogICAgICAgIGJvbGQgPSAiOTAwIjsKICAgICAgfSBlbHNlIGlmIChmb250LmJvbGQpIHsKICAgICAgICBib2xkID0gImJvbGQiOwogICAgICB9CgogICAgICBzdHlsZS5mb250V2VpZ2h0ID0gYm9sZDsKICAgICAgc3R5bGUuZm9udFN0eWxlID0gZm9udC5pdGFsaWMgPyAiaXRhbGljIiA6ICJub3JtYWwiOwogICAgICB2YXIgZm9udEZhbWlseSA9IGZvbnQubG9hZGVkTmFtZSA/ICJcIiIuY29uY2F0KGZvbnQubG9hZGVkTmFtZSwgIlwiLCAiKSA6ICIiOwogICAgICB2YXIgZmFsbGJhY2tOYW1lID0gZm9udC5mYWxsYmFja05hbWUgfHwgIkhlbHZldGljYSwgc2Fucy1zZXJpZiI7CiAgICAgIHN0eWxlLmZvbnRGYW1pbHkgPSBmb250RmFtaWx5ICsgZmFsbGJhY2tOYW1lOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFRleHRXaWRnZXRBbm5vdGF0aW9uRWxlbWVudDsKfShXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCk7Cgp2YXIgQ2hlY2tib3hXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1dpZGdldEFubm90YXRpb25FbGVtMikgewogIF9pbmhlcml0cyhDaGVja2JveFdpZGdldEFubm90YXRpb25FbGVtZW50LCBfV2lkZ2V0QW5ub3RhdGlvbkVsZW0yKTsKCiAgdmFyIF9zdXBlcjUgPSBfY3JlYXRlU3VwZXIoQ2hlY2tib3hXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCk7CgogIGZ1bmN0aW9uIENoZWNrYm94V2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycykgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENoZWNrYm94V2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQpOwoKICAgIHJldHVybiBfc3VwZXI1LmNhbGwodGhpcywgcGFyYW1ldGVycywgcGFyYW1ldGVycy5yZW5kZXJJbnRlcmFjdGl2ZUZvcm1zKTsKICB9CgogIF9jcmVhdGVDbGFzcyhDaGVja2JveFdpZGdldEFubm90YXRpb25FbGVtZW50LCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9ICJidXR0b25XaWRnZXRBbm5vdGF0aW9uIGNoZWNrQm94IjsKICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbnB1dCIpOwogICAgICBlbGVtZW50LmRpc2FibGVkID0gdGhpcy5kYXRhLnJlYWRPbmx5OwogICAgICBlbGVtZW50LnR5cGUgPSAiY2hlY2tib3giOwogICAgICBlbGVtZW50Lm5hbWUgPSB0aGlzLmRhdGEuZmllbGROYW1lOwoKICAgICAgaWYgKHRoaXMuZGF0YS5maWVsZFZhbHVlICYmIHRoaXMuZGF0YS5maWVsZFZhbHVlICE9PSAiT2ZmIikgewogICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKCJjaGVja2VkIiwgdHJ1ZSk7CiAgICAgIH0KCiAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKGVsZW1lbnQpOwogICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQ2hlY2tib3hXaWRnZXRBbm5vdGF0aW9uRWxlbWVudDsKfShXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCk7Cgp2YXIgUmFkaW9CdXR0b25XaWRnZXRBbm5vdGF0aW9uRWxlbWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1dpZGdldEFubm90YXRpb25FbGVtMykgewogIF9pbmhlcml0cyhSYWRpb0J1dHRvbldpZGdldEFubm90YXRpb25FbGVtZW50LCBfV2lkZ2V0QW5ub3RhdGlvbkVsZW0zKTsKCiAgdmFyIF9zdXBlcjYgPSBfY3JlYXRlU3VwZXIoUmFkaW9CdXR0b25XaWRnZXRBbm5vdGF0aW9uRWxlbWVudCk7CgogIGZ1bmN0aW9uIFJhZGlvQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycykgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJhZGlvQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQpOwoKICAgIHJldHVybiBfc3VwZXI2LmNhbGwodGhpcywgcGFyYW1ldGVycywgcGFyYW1ldGVycy5yZW5kZXJJbnRlcmFjdGl2ZUZvcm1zKTsKICB9CgogIF9jcmVhdGVDbGFzcyhSYWRpb0J1dHRvbldpZGdldEFubm90YXRpb25FbGVtZW50LCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9ICJidXR0b25XaWRnZXRBbm5vdGF0aW9uIHJhZGlvQnV0dG9uIjsKICAgICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbnB1dCIpOwogICAgICBlbGVtZW50LmRpc2FibGVkID0gdGhpcy5kYXRhLnJlYWRPbmx5OwogICAgICBlbGVtZW50LnR5cGUgPSAicmFkaW8iOwogICAgICBlbGVtZW50Lm5hbWUgPSB0aGlzLmRhdGEuZmllbGROYW1lOwoKICAgICAgaWYgKHRoaXMuZGF0YS5maWVsZFZhbHVlID09PSB0aGlzLmRhdGEuYnV0dG9uVmFsdWUpIHsKICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgiY2hlY2tlZCIsIHRydWUpOwogICAgICB9CgogICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZChlbGVtZW50KTsKICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFJhZGlvQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQ7Cn0oV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQpOwoKdmFyIFB1c2hCdXR0b25XaWRnZXRBbm5vdGF0aW9uRWxlbWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0xpbmtBbm5vdGF0aW9uRWxlbWVuKSB7CiAgX2luaGVyaXRzKFB1c2hCdXR0b25XaWRnZXRBbm5vdGF0aW9uRWxlbWVudCwgX0xpbmtBbm5vdGF0aW9uRWxlbWVuKTsKCiAgdmFyIF9zdXBlcjcgPSBfY3JlYXRlU3VwZXIoUHVzaEJ1dHRvbldpZGdldEFubm90YXRpb25FbGVtZW50KTsKCiAgZnVuY3Rpb24gUHVzaEJ1dHRvbldpZGdldEFubm90YXRpb25FbGVtZW50KCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFB1c2hCdXR0b25XaWRnZXRBbm5vdGF0aW9uRWxlbWVudCk7CgogICAgcmV0dXJuIF9zdXBlcjcuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICB9CgogIF9jcmVhdGVDbGFzcyhQdXNoQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQsIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdmFyIGNvbnRhaW5lciA9IF9nZXQoX2dldFByb3RvdHlwZU9mKFB1c2hCdXR0b25XaWRnZXRBbm5vdGF0aW9uRWxlbWVudC5wcm90b3R5cGUpLCAicmVuZGVyIiwgdGhpcykuY2FsbCh0aGlzKTsKCiAgICAgIGNvbnRhaW5lci5jbGFzc05hbWUgPSAiYnV0dG9uV2lkZ2V0QW5ub3RhdGlvbiBwdXNoQnV0dG9uIjsKICAgICAgcmV0dXJuIGNvbnRhaW5lcjsKICAgIH0KICB9XSk7CgogIHJldHVybiBQdXNoQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQ7Cn0oTGlua0Fubm90YXRpb25FbGVtZW50KTsKCnZhciBDaG9pY2VXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1dpZGdldEFubm90YXRpb25FbGVtNCkgewogIF9pbmhlcml0cyhDaG9pY2VXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCwgX1dpZGdldEFubm90YXRpb25FbGVtNCk7CgogIHZhciBfc3VwZXI4ID0gX2NyZWF0ZVN1cGVyKENob2ljZVdpZGdldEFubm90YXRpb25FbGVtZW50KTsKCiAgZnVuY3Rpb24gQ2hvaWNlV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycykgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENob2ljZVdpZGdldEFubm90YXRpb25FbGVtZW50KTsKCiAgICByZXR1cm4gX3N1cGVyOC5jYWxsKHRoaXMsIHBhcmFtZXRlcnMsIHBhcmFtZXRlcnMucmVuZGVySW50ZXJhY3RpdmVGb3Jtcyk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQ2hvaWNlV2lkZ2V0QW5ub3RhdGlvbkVsZW1lbnQsIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gImNob2ljZVdpZGdldEFubm90YXRpb24iOwogICAgICB2YXIgc2VsZWN0RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNlbGVjdCIpOwogICAgICBzZWxlY3RFbGVtZW50LmRpc2FibGVkID0gdGhpcy5kYXRhLnJlYWRPbmx5OwogICAgICBzZWxlY3RFbGVtZW50Lm5hbWUgPSB0aGlzLmRhdGEuZmllbGROYW1lOwoKICAgICAgaWYgKCF0aGlzLmRhdGEuY29tYm8pIHsKICAgICAgICBzZWxlY3RFbGVtZW50LnNpemUgPSB0aGlzLmRhdGEub3B0aW9ucy5sZW5ndGg7CgogICAgICAgIGlmICh0aGlzLmRhdGEubXVsdGlTZWxlY3QpIHsKICAgICAgICAgIHNlbGVjdEVsZW1lbnQubXVsdGlwbGUgPSB0cnVlOwogICAgICAgIH0KICAgICAgfQoKICAgICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHRoaXMuZGF0YS5vcHRpb25zKSwKICAgICAgICAgIF9zdGVwOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykgewogICAgICAgICAgdmFyIG9wdGlvbiA9IF9zdGVwLnZhbHVlOwogICAgICAgICAgdmFyIG9wdGlvbkVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJvcHRpb24iKTsKICAgICAgICAgIG9wdGlvbkVsZW1lbnQudGV4dENvbnRlbnQgPSBvcHRpb24uZGlzcGxheVZhbHVlOwogICAgICAgICAgb3B0aW9uRWxlbWVudC52YWx1ZSA9IG9wdGlvbi5leHBvcnRWYWx1ZTsKCiAgICAgICAgICBpZiAodGhpcy5kYXRhLmZpZWxkVmFsdWUuaW5jbHVkZXMob3B0aW9uLmRpc3BsYXlWYWx1ZSkpIHsKICAgICAgICAgICAgb3B0aW9uRWxlbWVudC5zZXRBdHRyaWJ1dGUoInNlbGVjdGVkIiwgdHJ1ZSk7CiAgICAgICAgICB9CgogICAgICAgICAgc2VsZWN0RWxlbWVudC5hcHBlbmRDaGlsZChvcHRpb25FbGVtZW50KTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvci5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yLmYoKTsKICAgICAgfQoKICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQoc2VsZWN0RWxlbWVudCk7CiAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjsKICAgIH0KICB9XSk7CgogIHJldHVybiBDaG9pY2VXaWRnZXRBbm5vdGF0aW9uRWxlbWVudDsKfShXaWRnZXRBbm5vdGF0aW9uRWxlbWVudCk7Cgp2YXIgUG9wdXBBbm5vdGF0aW9uRWxlbWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Fubm90YXRpb25FbGVtZW50NCkgewogIF9pbmhlcml0cyhQb3B1cEFubm90YXRpb25FbGVtZW50LCBfQW5ub3RhdGlvbkVsZW1lbnQ0KTsKCiAgdmFyIF9zdXBlcjkgPSBfY3JlYXRlU3VwZXIoUG9wdXBBbm5vdGF0aW9uRWxlbWVudCk7CgogIGZ1bmN0aW9uIFBvcHVwQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycykgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcHVwQW5ub3RhdGlvbkVsZW1lbnQpOwoKICAgIHZhciBpc1JlbmRlcmFibGUgPSAhIShwYXJhbWV0ZXJzLmRhdGEudGl0bGUgfHwgcGFyYW1ldGVycy5kYXRhLmNvbnRlbnRzKTsKICAgIHJldHVybiBfc3VwZXI5LmNhbGwodGhpcywgcGFyYW1ldGVycywgaXNSZW5kZXJhYmxlKTsKICB9CgogIF9jcmVhdGVDbGFzcyhQb3B1cEFubm90YXRpb25FbGVtZW50LCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHZhciBJR05PUkVfVFlQRVMgPSBbIkxpbmUiLCAiU3F1YXJlIiwgIkNpcmNsZSIsICJQb2x5TGluZSIsICJQb2x5Z29uIiwgIkluayJdOwogICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSAicG9wdXBBbm5vdGF0aW9uIjsKCiAgICAgIGlmIChJR05PUkVfVFlQRVMuaW5jbHVkZXModGhpcy5kYXRhLnBhcmVudFR5cGUpKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyOwogICAgICB9CgogICAgICB2YXIgc2VsZWN0b3IgPSAiW2RhdGEtYW5ub3RhdGlvbi1pZD1cIiIuY29uY2F0KHRoaXMuZGF0YS5wYXJlbnRJZCwgIlwiXSIpOwogICAgICB2YXIgcGFyZW50RWxlbWVudCA9IHRoaXMubGF5ZXIucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7CgogICAgICBpZiAoIXBhcmVudEVsZW1lbnQpIHsKICAgICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7CiAgICAgIH0KCiAgICAgIHZhciBwb3B1cCA9IG5ldyBQb3B1cEVsZW1lbnQoewogICAgICAgIGNvbnRhaW5lcjogdGhpcy5jb250YWluZXIsCiAgICAgICAgdHJpZ2dlcjogcGFyZW50RWxlbWVudCwKICAgICAgICBjb2xvcjogdGhpcy5kYXRhLmNvbG9yLAogICAgICAgIHRpdGxlOiB0aGlzLmRhdGEudGl0bGUsCiAgICAgICAgbW9kaWZpY2F0aW9uRGF0ZTogdGhpcy5kYXRhLm1vZGlmaWNhdGlvbkRhdGUsCiAgICAgICAgY29udGVudHM6IHRoaXMuZGF0YS5jb250ZW50cwogICAgICB9KTsKICAgICAgdmFyIHBhcmVudExlZnQgPSBwYXJzZUZsb2F0KHBhcmVudEVsZW1lbnQuc3R5bGUubGVmdCk7CiAgICAgIHZhciBwYXJlbnRXaWR0aCA9IHBhcnNlRmxvYXQocGFyZW50RWxlbWVudC5zdHlsZS53aWR0aCk7CiAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9ICItIi5jb25jYXQocGFyZW50TGVmdCArIHBhcmVudFdpZHRoLCAicHggLSIpLmNvbmNhdChwYXJlbnRFbGVtZW50LnN0eWxlLnRvcCk7CiAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLmxlZnQgPSAiIi5jb25jYXQocGFyZW50TGVmdCArIHBhcmVudFdpZHRoLCAicHgiKTsKICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQocG9wdXAucmVuZGVyKCkpOwogICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUG9wdXBBbm5vdGF0aW9uRWxlbWVudDsKfShBbm5vdGF0aW9uRWxlbWVudCk7Cgp2YXIgUG9wdXBFbGVtZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBQb3B1cEVsZW1lbnQocGFyYW1ldGVycykgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBvcHVwRWxlbWVudCk7CgogICAgdGhpcy5jb250YWluZXIgPSBwYXJhbWV0ZXJzLmNvbnRhaW5lcjsKICAgIHRoaXMudHJpZ2dlciA9IHBhcmFtZXRlcnMudHJpZ2dlcjsKICAgIHRoaXMuY29sb3IgPSBwYXJhbWV0ZXJzLmNvbG9yOwogICAgdGhpcy50aXRsZSA9IHBhcmFtZXRlcnMudGl0bGU7CiAgICB0aGlzLm1vZGlmaWNhdGlvbkRhdGUgPSBwYXJhbWV0ZXJzLm1vZGlmaWNhdGlvbkRhdGU7CiAgICB0aGlzLmNvbnRlbnRzID0gcGFyYW1ldGVycy5jb250ZW50czsKICAgIHRoaXMuaGlkZVdyYXBwZXIgPSBwYXJhbWV0ZXJzLmhpZGVXcmFwcGVyIHx8IGZhbHNlOwogICAgdGhpcy5waW5uZWQgPSBmYWxzZTsKICB9CgogIF9jcmVhdGVDbGFzcyhQb3B1cEVsZW1lbnQsIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdmFyIEJBQ0tHUk9VTkRfRU5MSUdIVCA9IDAuNzsKICAgICAgdmFyIHdyYXBwZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTsKICAgICAgd3JhcHBlci5jbGFzc05hbWUgPSAicG9wdXBXcmFwcGVyIjsKICAgICAgdGhpcy5oaWRlRWxlbWVudCA9IHRoaXMuaGlkZVdyYXBwZXIgPyB3cmFwcGVyIDogdGhpcy5jb250YWluZXI7CiAgICAgIHRoaXMuaGlkZUVsZW1lbnQuc2V0QXR0cmlidXRlKCJoaWRkZW4iLCB0cnVlKTsKICAgICAgdmFyIHBvcHVwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICAgIHBvcHVwLmNsYXNzTmFtZSA9ICJwb3B1cCI7CiAgICAgIHZhciBjb2xvciA9IHRoaXMuY29sb3I7CgogICAgICBpZiAoY29sb3IpIHsKICAgICAgICB2YXIgciA9IEJBQ0tHUk9VTkRfRU5MSUdIVCAqICgyNTUgLSBjb2xvclswXSkgKyBjb2xvclswXTsKICAgICAgICB2YXIgZyA9IEJBQ0tHUk9VTkRfRU5MSUdIVCAqICgyNTUgLSBjb2xvclsxXSkgKyBjb2xvclsxXTsKICAgICAgICB2YXIgYiA9IEJBQ0tHUk9VTkRfRU5MSUdIVCAqICgyNTUgLSBjb2xvclsyXSkgKyBjb2xvclsyXTsKICAgICAgICBwb3B1cC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBfdXRpbC5VdGlsLm1ha2VDc3NSZ2IociB8IDAsIGcgfCAwLCBiIHwgMCk7CiAgICAgIH0KCiAgICAgIHZhciB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImgxIik7CiAgICAgIHRpdGxlLnRleHRDb250ZW50ID0gdGhpcy50aXRsZTsKICAgICAgcG9wdXAuYXBwZW5kQ2hpbGQodGl0bGUpOwoKICAgICAgdmFyIGRhdGVPYmplY3QgPSBfZGlzcGxheV91dGlscy5QREZEYXRlU3RyaW5nLnRvRGF0ZU9iamVjdCh0aGlzLm1vZGlmaWNhdGlvbkRhdGUpOwoKICAgICAgaWYgKGRhdGVPYmplY3QpIHsKICAgICAgICB2YXIgbW9kaWZpY2F0aW9uRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNwYW4iKTsKICAgICAgICBtb2RpZmljYXRpb25EYXRlLnRleHRDb250ZW50ID0gInt7ZGF0ZX19LCB7e3RpbWV9fSI7CiAgICAgICAgbW9kaWZpY2F0aW9uRGF0ZS5kYXRhc2V0LmwxMG5JZCA9ICJhbm5vdGF0aW9uX2RhdGVfc3RyaW5nIjsKICAgICAgICBtb2RpZmljYXRpb25EYXRlLmRhdGFzZXQubDEwbkFyZ3MgPSBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICBkYXRlOiBkYXRlT2JqZWN0LnRvTG9jYWxlRGF0ZVN0cmluZygpLAogICAgICAgICAgdGltZTogZGF0ZU9iamVjdC50b0xvY2FsZVRpbWVTdHJpbmcoKQogICAgICAgIH0pOwogICAgICAgIHBvcHVwLmFwcGVuZENoaWxkKG1vZGlmaWNhdGlvbkRhdGUpOwogICAgICB9CgogICAgICB2YXIgY29udGVudHMgPSB0aGlzLl9mb3JtYXRDb250ZW50cyh0aGlzLmNvbnRlbnRzKTsKCiAgICAgIHBvcHVwLmFwcGVuZENoaWxkKGNvbnRlbnRzKTsKICAgICAgdGhpcy50cmlnZ2VyLmFkZEV2ZW50TGlzdGVuZXIoImNsaWNrIiwgdGhpcy5fdG9nZ2xlLmJpbmQodGhpcykpOwogICAgICB0aGlzLnRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lcigibW91c2VvdmVyIiwgdGhpcy5fc2hvdy5iaW5kKHRoaXMsIGZhbHNlKSk7CiAgICAgIHRoaXMudHJpZ2dlci5hZGRFdmVudExpc3RlbmVyKCJtb3VzZW91dCIsIHRoaXMuX2hpZGUuYmluZCh0aGlzLCBmYWxzZSkpOwogICAgICBwb3B1cC5hZGRFdmVudExpc3RlbmVyKCJjbGljayIsIHRoaXMuX2hpZGUuYmluZCh0aGlzLCB0cnVlKSk7CiAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQocG9wdXApOwogICAgICByZXR1cm4gd3JhcHBlcjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfZm9ybWF0Q29udGVudHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9mb3JtYXRDb250ZW50cyhjb250ZW50cykgewogICAgICB2YXIgcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInAiKTsKICAgICAgdmFyIGxpbmVzID0gY29udGVudHMuc3BsaXQoLyg/OlxyXG4/fFxuKS8pOwoKICAgICAgZm9yICh2YXIgaSA9IDAsIGlpID0gbGluZXMubGVuZ3RoOyBpIDwgaWk7ICsraSkgewogICAgICAgIHZhciBsaW5lID0gbGluZXNbaV07CiAgICAgICAgcC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShsaW5lKSk7CgogICAgICAgIGlmIChpIDwgaWkgLSAxKSB7CiAgICAgICAgICBwLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImJyIikpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIHA7CiAgICB9CiAgfSwgewogICAga2V5OiAiX3RvZ2dsZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3RvZ2dsZSgpIHsKICAgICAgaWYgKHRoaXMucGlubmVkKSB7CiAgICAgICAgdGhpcy5faGlkZSh0cnVlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLl9zaG93KHRydWUpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiX3Nob3ciLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9zaG93KCkgewogICAgICB2YXIgcGluID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTsKCiAgICAgIGlmIChwaW4pIHsKICAgICAgICB0aGlzLnBpbm5lZCA9IHRydWU7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLmhpZGVFbGVtZW50Lmhhc0F0dHJpYnV0ZSgiaGlkZGVuIikpIHsKICAgICAgICB0aGlzLmhpZGVFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgiaGlkZGVuIik7CiAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUuekluZGV4ICs9IDE7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJfaGlkZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2hpZGUoKSB7CiAgICAgIHZhciB1bnBpbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdHJ1ZTsKCiAgICAgIGlmICh1bnBpbikgewogICAgICAgIHRoaXMucGlubmVkID0gZmFsc2U7CiAgICAgIH0KCiAgICAgIGlmICghdGhpcy5oaWRlRWxlbWVudC5oYXNBdHRyaWJ1dGUoImhpZGRlbiIpICYmICF0aGlzLnBpbm5lZCkgewogICAgICAgIHRoaXMuaGlkZUVsZW1lbnQuc2V0QXR0cmlidXRlKCJoaWRkZW4iLCB0cnVlKTsKICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS56SW5kZXggLT0gMTsKICAgICAgfQogICAgfQogIH1dKTsKCiAgcmV0dXJuIFBvcHVwRWxlbWVudDsKfSgpOwoKdmFyIEZyZWVUZXh0QW5ub3RhdGlvbkVsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Bbm5vdGF0aW9uRWxlbWVudDUpIHsKICBfaW5oZXJpdHMoRnJlZVRleHRBbm5vdGF0aW9uRWxlbWVudCwgX0Fubm90YXRpb25FbGVtZW50NSk7CgogIHZhciBfc3VwZXIxMCA9IF9jcmVhdGVTdXBlcihGcmVlVGV4dEFubm90YXRpb25FbGVtZW50KTsKCiAgZnVuY3Rpb24gRnJlZVRleHRBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRnJlZVRleHRBbm5vdGF0aW9uRWxlbWVudCk7CgogICAgdmFyIGlzUmVuZGVyYWJsZSA9ICEhKHBhcmFtZXRlcnMuZGF0YS5oYXNQb3B1cCB8fCBwYXJhbWV0ZXJzLmRhdGEudGl0bGUgfHwgcGFyYW1ldGVycy5kYXRhLmNvbnRlbnRzKTsKICAgIHJldHVybiBfc3VwZXIxMC5jYWxsKHRoaXMsIHBhcmFtZXRlcnMsIGlzUmVuZGVyYWJsZSwgdHJ1ZSk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoRnJlZVRleHRBbm5vdGF0aW9uRWxlbWVudCwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSAiZnJlZVRleHRBbm5vdGF0aW9uIjsKCiAgICAgIGlmICghdGhpcy5kYXRhLmhhc1BvcHVwKSB7CiAgICAgICAgdGhpcy5fY3JlYXRlUG9wdXAodGhpcy5jb250YWluZXIsIG51bGwsIHRoaXMuZGF0YSk7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjsKICAgIH0KICB9XSk7CgogIHJldHVybiBGcmVlVGV4dEFubm90YXRpb25FbGVtZW50Owp9KEFubm90YXRpb25FbGVtZW50KTsKCnZhciBMaW5lQW5ub3RhdGlvbkVsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Bbm5vdGF0aW9uRWxlbWVudDYpIHsKICBfaW5oZXJpdHMoTGluZUFubm90YXRpb25FbGVtZW50LCBfQW5ub3RhdGlvbkVsZW1lbnQ2KTsKCiAgdmFyIF9zdXBlcjExID0gX2NyZWF0ZVN1cGVyKExpbmVBbm5vdGF0aW9uRWxlbWVudCk7CgogIGZ1bmN0aW9uIExpbmVBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGluZUFubm90YXRpb25FbGVtZW50KTsKCiAgICB2YXIgaXNSZW5kZXJhYmxlID0gISEocGFyYW1ldGVycy5kYXRhLmhhc1BvcHVwIHx8IHBhcmFtZXRlcnMuZGF0YS50aXRsZSB8fCBwYXJhbWV0ZXJzLmRhdGEuY29udGVudHMpOwogICAgcmV0dXJuIF9zdXBlcjExLmNhbGwodGhpcywgcGFyYW1ldGVycywgaXNSZW5kZXJhYmxlLCB0cnVlKTsKICB9CgogIF9jcmVhdGVDbGFzcyhMaW5lQW5ub3RhdGlvbkVsZW1lbnQsIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gImxpbmVBbm5vdGF0aW9uIjsKICAgICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICAgIHZhciB3aWR0aCA9IGRhdGEucmVjdFsyXSAtIGRhdGEucmVjdFswXTsKICAgICAgdmFyIGhlaWdodCA9IGRhdGEucmVjdFszXSAtIGRhdGEucmVjdFsxXTsKICAgICAgdmFyIHN2ZyA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGUod2lkdGgsIGhlaWdodCk7CiAgICAgIHZhciBsaW5lID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoInN2ZzpsaW5lIik7CiAgICAgIGxpbmUuc2V0QXR0cmlidXRlKCJ4MSIsIGRhdGEucmVjdFsyXSAtIGRhdGEubGluZUNvb3JkaW5hdGVzWzBdKTsKICAgICAgbGluZS5zZXRBdHRyaWJ1dGUoInkxIiwgZGF0YS5yZWN0WzNdIC0gZGF0YS5saW5lQ29vcmRpbmF0ZXNbMV0pOwogICAgICBsaW5lLnNldEF0dHJpYnV0ZSgieDIiLCBkYXRhLnJlY3RbMl0gLSBkYXRhLmxpbmVDb29yZGluYXRlc1syXSk7CiAgICAgIGxpbmUuc2V0QXR0cmlidXRlKCJ5MiIsIGRhdGEucmVjdFszXSAtIGRhdGEubGluZUNvb3JkaW5hdGVzWzNdKTsKICAgICAgbGluZS5zZXRBdHRyaWJ1dGUoInN0cm9rZS13aWR0aCIsIGRhdGEuYm9yZGVyU3R5bGUud2lkdGggfHwgMSk7CiAgICAgIGxpbmUuc2V0QXR0cmlidXRlKCJzdHJva2UiLCAidHJhbnNwYXJlbnQiKTsKICAgICAgc3ZnLmFwcGVuZENoaWxkKGxpbmUpOwogICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQoc3ZnKTsKCiAgICAgIHRoaXMuX2NyZWF0ZVBvcHVwKHRoaXMuY29udGFpbmVyLCBsaW5lLCBkYXRhKTsKCiAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjsKICAgIH0KICB9XSk7CgogIHJldHVybiBMaW5lQW5ub3RhdGlvbkVsZW1lbnQ7Cn0oQW5ub3RhdGlvbkVsZW1lbnQpOwoKdmFyIFNxdWFyZUFubm90YXRpb25FbGVtZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5ub3RhdGlvbkVsZW1lbnQ3KSB7CiAgX2luaGVyaXRzKFNxdWFyZUFubm90YXRpb25FbGVtZW50LCBfQW5ub3RhdGlvbkVsZW1lbnQ3KTsKCiAgdmFyIF9zdXBlcjEyID0gX2NyZWF0ZVN1cGVyKFNxdWFyZUFubm90YXRpb25FbGVtZW50KTsKCiAgZnVuY3Rpb24gU3F1YXJlQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycykgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNxdWFyZUFubm90YXRpb25FbGVtZW50KTsKCiAgICB2YXIgaXNSZW5kZXJhYmxlID0gISEocGFyYW1ldGVycy5kYXRhLmhhc1BvcHVwIHx8IHBhcmFtZXRlcnMuZGF0YS50aXRsZSB8fCBwYXJhbWV0ZXJzLmRhdGEuY29udGVudHMpOwogICAgcmV0dXJuIF9zdXBlcjEyLmNhbGwodGhpcywgcGFyYW1ldGVycywgaXNSZW5kZXJhYmxlLCB0cnVlKTsKICB9CgogIF9jcmVhdGVDbGFzcyhTcXVhcmVBbm5vdGF0aW9uRWxlbWVudCwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSAic3F1YXJlQW5ub3RhdGlvbiI7CiAgICAgIHZhciBkYXRhID0gdGhpcy5kYXRhOwogICAgICB2YXIgd2lkdGggPSBkYXRhLnJlY3RbMl0gLSBkYXRhLnJlY3RbMF07CiAgICAgIHZhciBoZWlnaHQgPSBkYXRhLnJlY3RbM10gLSBkYXRhLnJlY3RbMV07CiAgICAgIHZhciBzdmcgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlKHdpZHRoLCBoZWlnaHQpOwogICAgICB2YXIgYm9yZGVyV2lkdGggPSBkYXRhLmJvcmRlclN0eWxlLndpZHRoOwogICAgICB2YXIgc3F1YXJlID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoInN2ZzpyZWN0Iik7CiAgICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoIngiLCBib3JkZXJXaWR0aCAvIDIpOwogICAgICBzcXVhcmUuc2V0QXR0cmlidXRlKCJ5IiwgYm9yZGVyV2lkdGggLyAyKTsKICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZSgid2lkdGgiLCB3aWR0aCAtIGJvcmRlcldpZHRoKTsKICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZSgiaGVpZ2h0IiwgaGVpZ2h0IC0gYm9yZGVyV2lkdGgpOwogICAgICBzcXVhcmUuc2V0QXR0cmlidXRlKCJzdHJva2Utd2lkdGgiLCBib3JkZXJXaWR0aCB8fCAxKTsKICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZSgic3Ryb2tlIiwgInRyYW5zcGFyZW50Iik7CiAgICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoImZpbGwiLCAibm9uZSIpOwogICAgICBzdmcuYXBwZW5kQ2hpbGQoc3F1YXJlKTsKICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kKHN2Zyk7CgogICAgICB0aGlzLl9jcmVhdGVQb3B1cCh0aGlzLmNvbnRhaW5lciwgc3F1YXJlLCBkYXRhKTsKCiAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjsKICAgIH0KICB9XSk7CgogIHJldHVybiBTcXVhcmVBbm5vdGF0aW9uRWxlbWVudDsKfShBbm5vdGF0aW9uRWxlbWVudCk7Cgp2YXIgQ2lyY2xlQW5ub3RhdGlvbkVsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Bbm5vdGF0aW9uRWxlbWVudDgpIHsKICBfaW5oZXJpdHMoQ2lyY2xlQW5ub3RhdGlvbkVsZW1lbnQsIF9Bbm5vdGF0aW9uRWxlbWVudDgpOwoKICB2YXIgX3N1cGVyMTMgPSBfY3JlYXRlU3VwZXIoQ2lyY2xlQW5ub3RhdGlvbkVsZW1lbnQpOwoKICBmdW5jdGlvbiBDaXJjbGVBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ2lyY2xlQW5ub3RhdGlvbkVsZW1lbnQpOwoKICAgIHZhciBpc1JlbmRlcmFibGUgPSAhIShwYXJhbWV0ZXJzLmRhdGEuaGFzUG9wdXAgfHwgcGFyYW1ldGVycy5kYXRhLnRpdGxlIHx8IHBhcmFtZXRlcnMuZGF0YS5jb250ZW50cyk7CiAgICByZXR1cm4gX3N1cGVyMTMuY2FsbCh0aGlzLCBwYXJhbWV0ZXJzLCBpc1JlbmRlcmFibGUsIHRydWUpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKENpcmNsZUFubm90YXRpb25FbGVtZW50LCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9ICJjaXJjbGVBbm5vdGF0aW9uIjsKICAgICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICAgIHZhciB3aWR0aCA9IGRhdGEucmVjdFsyXSAtIGRhdGEucmVjdFswXTsKICAgICAgdmFyIGhlaWdodCA9IGRhdGEucmVjdFszXSAtIGRhdGEucmVjdFsxXTsKICAgICAgdmFyIHN2ZyA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGUod2lkdGgsIGhlaWdodCk7CiAgICAgIHZhciBib3JkZXJXaWR0aCA9IGRhdGEuYm9yZGVyU3R5bGUud2lkdGg7CiAgICAgIHZhciBjaXJjbGUgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudCgic3ZnOmVsbGlwc2UiKTsKICAgICAgY2lyY2xlLnNldEF0dHJpYnV0ZSgiY3giLCB3aWR0aCAvIDIpOwogICAgICBjaXJjbGUuc2V0QXR0cmlidXRlKCJjeSIsIGhlaWdodCAvIDIpOwogICAgICBjaXJjbGUuc2V0QXR0cmlidXRlKCJyeCIsIHdpZHRoIC8gMiAtIGJvcmRlcldpZHRoIC8gMik7CiAgICAgIGNpcmNsZS5zZXRBdHRyaWJ1dGUoInJ5IiwgaGVpZ2h0IC8gMiAtIGJvcmRlcldpZHRoIC8gMik7CiAgICAgIGNpcmNsZS5zZXRBdHRyaWJ1dGUoInN0cm9rZS13aWR0aCIsIGJvcmRlcldpZHRoIHx8IDEpOwogICAgICBjaXJjbGUuc2V0QXR0cmlidXRlKCJzdHJva2UiLCAidHJhbnNwYXJlbnQiKTsKICAgICAgY2lyY2xlLnNldEF0dHJpYnV0ZSgiZmlsbCIsICJub25lIik7CiAgICAgIHN2Zy5hcHBlbmRDaGlsZChjaXJjbGUpOwogICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmQoc3ZnKTsKCiAgICAgIHRoaXMuX2NyZWF0ZVBvcHVwKHRoaXMuY29udGFpbmVyLCBjaXJjbGUsIGRhdGEpOwoKICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIENpcmNsZUFubm90YXRpb25FbGVtZW50Owp9KEFubm90YXRpb25FbGVtZW50KTsKCnZhciBQb2x5bGluZUFubm90YXRpb25FbGVtZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5ub3RhdGlvbkVsZW1lbnQ5KSB7CiAgX2luaGVyaXRzKFBvbHlsaW5lQW5ub3RhdGlvbkVsZW1lbnQsIF9Bbm5vdGF0aW9uRWxlbWVudDkpOwoKICB2YXIgX3N1cGVyMTQgPSBfY3JlYXRlU3VwZXIoUG9seWxpbmVBbm5vdGF0aW9uRWxlbWVudCk7CgogIGZ1bmN0aW9uIFBvbHlsaW5lQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycykgewogICAgdmFyIF90aGlzMzsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9seWxpbmVBbm5vdGF0aW9uRWxlbWVudCk7CgogICAgdmFyIGlzUmVuZGVyYWJsZSA9ICEhKHBhcmFtZXRlcnMuZGF0YS5oYXNQb3B1cCB8fCBwYXJhbWV0ZXJzLmRhdGEudGl0bGUgfHwgcGFyYW1ldGVycy5kYXRhLmNvbnRlbnRzKTsKICAgIF90aGlzMyA9IF9zdXBlcjE0LmNhbGwodGhpcywgcGFyYW1ldGVycywgaXNSZW5kZXJhYmxlLCB0cnVlKTsKICAgIF90aGlzMy5jb250YWluZXJDbGFzc05hbWUgPSAicG9seWxpbmVBbm5vdGF0aW9uIjsKICAgIF90aGlzMy5zdmdFbGVtZW50TmFtZSA9ICJzdmc6cG9seWxpbmUiOwogICAgcmV0dXJuIF90aGlzMzsKICB9CgogIF9jcmVhdGVDbGFzcyhQb2x5bGluZUFubm90YXRpb25FbGVtZW50LCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9IHRoaXMuY29udGFpbmVyQ2xhc3NOYW1lOwogICAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YTsKICAgICAgdmFyIHdpZHRoID0gZGF0YS5yZWN0WzJdIC0gZGF0YS5yZWN0WzBdOwogICAgICB2YXIgaGVpZ2h0ID0gZGF0YS5yZWN0WzNdIC0gZGF0YS5yZWN0WzFdOwogICAgICB2YXIgc3ZnID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZSh3aWR0aCwgaGVpZ2h0KTsKICAgICAgdmFyIHBvaW50cyA9IFtdOwoKICAgICAgdmFyIF9pdGVyYXRvcjIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihkYXRhLnZlcnRpY2VzKSwKICAgICAgICAgIF9zdGVwMjsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IyLnMoKTsgIShfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBjb29yZGluYXRlID0gX3N0ZXAyLnZhbHVlOwogICAgICAgICAgdmFyIHggPSBjb29yZGluYXRlLnggLSBkYXRhLnJlY3RbMF07CiAgICAgICAgICB2YXIgeSA9IGRhdGEucmVjdFszXSAtIGNvb3JkaW5hdGUueTsKICAgICAgICAgIHBvaW50cy5wdXNoKHggKyAiLCIgKyB5KTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjIuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvcjIuZigpOwogICAgICB9CgogICAgICBwb2ludHMgPSBwb2ludHMuam9pbigiICIpOwogICAgICB2YXIgcG9seWxpbmUgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudCh0aGlzLnN2Z0VsZW1lbnROYW1lKTsKICAgICAgcG9seWxpbmUuc2V0QXR0cmlidXRlKCJwb2ludHMiLCBwb2ludHMpOwogICAgICBwb2x5bGluZS5zZXRBdHRyaWJ1dGUoInN0cm9rZS13aWR0aCIsIGRhdGEuYm9yZGVyU3R5bGUud2lkdGggfHwgMSk7CiAgICAgIHBvbHlsaW5lLnNldEF0dHJpYnV0ZSgic3Ryb2tlIiwgInRyYW5zcGFyZW50Iik7CiAgICAgIHBvbHlsaW5lLnNldEF0dHJpYnV0ZSgiZmlsbCIsICJub25lIik7CiAgICAgIHN2Zy5hcHBlbmRDaGlsZChwb2x5bGluZSk7CiAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZChzdmcpOwoKICAgICAgdGhpcy5fY3JlYXRlUG9wdXAodGhpcy5jb250YWluZXIsIHBvbHlsaW5lLCBkYXRhKTsKCiAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjsKICAgIH0KICB9XSk7CgogIHJldHVybiBQb2x5bGluZUFubm90YXRpb25FbGVtZW50Owp9KEFubm90YXRpb25FbGVtZW50KTsKCnZhciBQb2x5Z29uQW5ub3RhdGlvbkVsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Qb2x5bGluZUFubm90YXRpb25FbCkgewogIF9pbmhlcml0cyhQb2x5Z29uQW5ub3RhdGlvbkVsZW1lbnQsIF9Qb2x5bGluZUFubm90YXRpb25FbCk7CgogIHZhciBfc3VwZXIxNSA9IF9jcmVhdGVTdXBlcihQb2x5Z29uQW5ub3RhdGlvbkVsZW1lbnQpOwoKICBmdW5jdGlvbiBQb2x5Z29uQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycykgewogICAgdmFyIF90aGlzNDsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUG9seWdvbkFubm90YXRpb25FbGVtZW50KTsKCiAgICBfdGhpczQgPSBfc3VwZXIxNS5jYWxsKHRoaXMsIHBhcmFtZXRlcnMpOwogICAgX3RoaXM0LmNvbnRhaW5lckNsYXNzTmFtZSA9ICJwb2x5Z29uQW5ub3RhdGlvbiI7CiAgICBfdGhpczQuc3ZnRWxlbWVudE5hbWUgPSAic3ZnOnBvbHlnb24iOwogICAgcmV0dXJuIF90aGlzNDsKICB9CgogIHJldHVybiBQb2x5Z29uQW5ub3RhdGlvbkVsZW1lbnQ7Cn0oUG9seWxpbmVBbm5vdGF0aW9uRWxlbWVudCk7Cgp2YXIgQ2FyZXRBbm5vdGF0aW9uRWxlbWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Fubm90YXRpb25FbGVtZW50MTApIHsKICBfaW5oZXJpdHMoQ2FyZXRBbm5vdGF0aW9uRWxlbWVudCwgX0Fubm90YXRpb25FbGVtZW50MTApOwoKICB2YXIgX3N1cGVyMTYgPSBfY3JlYXRlU3VwZXIoQ2FyZXRBbm5vdGF0aW9uRWxlbWVudCk7CgogIGZ1bmN0aW9uIENhcmV0QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycykgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENhcmV0QW5ub3RhdGlvbkVsZW1lbnQpOwoKICAgIHZhciBpc1JlbmRlcmFibGUgPSAhIShwYXJhbWV0ZXJzLmRhdGEuaGFzUG9wdXAgfHwgcGFyYW1ldGVycy5kYXRhLnRpdGxlIHx8IHBhcmFtZXRlcnMuZGF0YS5jb250ZW50cyk7CiAgICByZXR1cm4gX3N1cGVyMTYuY2FsbCh0aGlzLCBwYXJhbWV0ZXJzLCBpc1JlbmRlcmFibGUsIHRydWUpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKENhcmV0QW5ub3RhdGlvbkVsZW1lbnQsIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gImNhcmV0QW5ub3RhdGlvbiI7CgogICAgICBpZiAoIXRoaXMuZGF0YS5oYXNQb3B1cCkgewogICAgICAgIHRoaXMuX2NyZWF0ZVBvcHVwKHRoaXMuY29udGFpbmVyLCBudWxsLCB0aGlzLmRhdGEpOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQ2FyZXRBbm5vdGF0aW9uRWxlbWVudDsKfShBbm5vdGF0aW9uRWxlbWVudCk7Cgp2YXIgSW5rQW5ub3RhdGlvbkVsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Bbm5vdGF0aW9uRWxlbWVudDExKSB7CiAgX2luaGVyaXRzKElua0Fubm90YXRpb25FbGVtZW50LCBfQW5ub3RhdGlvbkVsZW1lbnQxMSk7CgogIHZhciBfc3VwZXIxNyA9IF9jcmVhdGVTdXBlcihJbmtBbm5vdGF0aW9uRWxlbWVudCk7CgogIGZ1bmN0aW9uIElua0Fubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpIHsKICAgIHZhciBfdGhpczU7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIElua0Fubm90YXRpb25FbGVtZW50KTsKCiAgICB2YXIgaXNSZW5kZXJhYmxlID0gISEocGFyYW1ldGVycy5kYXRhLmhhc1BvcHVwIHx8IHBhcmFtZXRlcnMuZGF0YS50aXRsZSB8fCBwYXJhbWV0ZXJzLmRhdGEuY29udGVudHMpOwogICAgX3RoaXM1ID0gX3N1cGVyMTcuY2FsbCh0aGlzLCBwYXJhbWV0ZXJzLCBpc1JlbmRlcmFibGUsIHRydWUpOwogICAgX3RoaXM1LmNvbnRhaW5lckNsYXNzTmFtZSA9ICJpbmtBbm5vdGF0aW9uIjsKICAgIF90aGlzNS5zdmdFbGVtZW50TmFtZSA9ICJzdmc6cG9seWxpbmUiOwogICAgcmV0dXJuIF90aGlzNTsKICB9CgogIF9jcmVhdGVDbGFzcyhJbmtBbm5vdGF0aW9uRWxlbWVudCwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSB0aGlzLmNvbnRhaW5lckNsYXNzTmFtZTsKICAgICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7CiAgICAgIHZhciB3aWR0aCA9IGRhdGEucmVjdFsyXSAtIGRhdGEucmVjdFswXTsKICAgICAgdmFyIGhlaWdodCA9IGRhdGEucmVjdFszXSAtIGRhdGEucmVjdFsxXTsKICAgICAgdmFyIHN2ZyA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGUod2lkdGgsIGhlaWdodCk7CgogICAgICB2YXIgX2l0ZXJhdG9yMyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGRhdGEuaW5rTGlzdHMpLAogICAgICAgICAgX3N0ZXAzOwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvcjMucygpOyAhKF9zdGVwMyA9IF9pdGVyYXRvcjMubigpKS5kb25lOykgewogICAgICAgICAgdmFyIGlua0xpc3QgPSBfc3RlcDMudmFsdWU7CiAgICAgICAgICB2YXIgcG9pbnRzID0gW107CgogICAgICAgICAgdmFyIF9pdGVyYXRvcjQgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihpbmtMaXN0KSwKICAgICAgICAgICAgICBfc3RlcDQ7CgogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgZm9yIChfaXRlcmF0b3I0LnMoKTsgIShfc3RlcDQgPSBfaXRlcmF0b3I0Lm4oKSkuZG9uZTspIHsKICAgICAgICAgICAgICB2YXIgY29vcmRpbmF0ZSA9IF9zdGVwNC52YWx1ZTsKICAgICAgICAgICAgICB2YXIgeCA9IGNvb3JkaW5hdGUueCAtIGRhdGEucmVjdFswXTsKICAgICAgICAgICAgICB2YXIgeSA9IGRhdGEucmVjdFszXSAtIGNvb3JkaW5hdGUueTsKICAgICAgICAgICAgICBwb2ludHMucHVzaCgiIi5jb25jYXQoeCwgIiwiKS5jb25jYXQoeSkpOwogICAgICAgICAgICB9CiAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgX2l0ZXJhdG9yNC5lKGVycik7CiAgICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgICBfaXRlcmF0b3I0LmYoKTsKICAgICAgICAgIH0KCiAgICAgICAgICBwb2ludHMgPSBwb2ludHMuam9pbigiICIpOwogICAgICAgICAgdmFyIHBvbHlsaW5lID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQodGhpcy5zdmdFbGVtZW50TmFtZSk7CiAgICAgICAgICBwb2x5bGluZS5zZXRBdHRyaWJ1dGUoInBvaW50cyIsIHBvaW50cyk7CiAgICAgICAgICBwb2x5bGluZS5zZXRBdHRyaWJ1dGUoInN0cm9rZS13aWR0aCIsIGRhdGEuYm9yZGVyU3R5bGUud2lkdGggfHwgMSk7CiAgICAgICAgICBwb2x5bGluZS5zZXRBdHRyaWJ1dGUoInN0cm9rZSIsICJ0cmFuc3BhcmVudCIpOwogICAgICAgICAgcG9seWxpbmUuc2V0QXR0cmlidXRlKCJmaWxsIiwgIm5vbmUiKTsKCiAgICAgICAgICB0aGlzLl9jcmVhdGVQb3B1cCh0aGlzLmNvbnRhaW5lciwgcG9seWxpbmUsIGRhdGEpOwoKICAgICAgICAgIHN2Zy5hcHBlbmRDaGlsZChwb2x5bGluZSk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IzLmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3IzLmYoKTsKICAgICAgfQoKICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kKHN2Zyk7CiAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjsKICAgIH0KICB9XSk7CgogIHJldHVybiBJbmtBbm5vdGF0aW9uRWxlbWVudDsKfShBbm5vdGF0aW9uRWxlbWVudCk7Cgp2YXIgSGlnaGxpZ2h0QW5ub3RhdGlvbkVsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Bbm5vdGF0aW9uRWxlbWVudDEyKSB7CiAgX2luaGVyaXRzKEhpZ2hsaWdodEFubm90YXRpb25FbGVtZW50LCBfQW5ub3RhdGlvbkVsZW1lbnQxMik7CgogIHZhciBfc3VwZXIxOCA9IF9jcmVhdGVTdXBlcihIaWdobGlnaHRBbm5vdGF0aW9uRWxlbWVudCk7CgogIGZ1bmN0aW9uIEhpZ2hsaWdodEFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIaWdobGlnaHRBbm5vdGF0aW9uRWxlbWVudCk7CgogICAgdmFyIGlzUmVuZGVyYWJsZSA9ICEhKHBhcmFtZXRlcnMuZGF0YS5oYXNQb3B1cCB8fCBwYXJhbWV0ZXJzLmRhdGEudGl0bGUgfHwgcGFyYW1ldGVycy5kYXRhLmNvbnRlbnRzKTsKICAgIHJldHVybiBfc3VwZXIxOC5jYWxsKHRoaXMsIHBhcmFtZXRlcnMsIGlzUmVuZGVyYWJsZSwgdHJ1ZSk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoSGlnaGxpZ2h0QW5ub3RhdGlvbkVsZW1lbnQsIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gImhpZ2hsaWdodEFubm90YXRpb24iOwoKICAgICAgaWYgKCF0aGlzLmRhdGEuaGFzUG9wdXApIHsKICAgICAgICB0aGlzLl9jcmVhdGVQb3B1cCh0aGlzLmNvbnRhaW5lciwgbnVsbCwgdGhpcy5kYXRhKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEhpZ2hsaWdodEFubm90YXRpb25FbGVtZW50Owp9KEFubm90YXRpb25FbGVtZW50KTsKCnZhciBVbmRlcmxpbmVBbm5vdGF0aW9uRWxlbWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Fubm90YXRpb25FbGVtZW50MTMpIHsKICBfaW5oZXJpdHMoVW5kZXJsaW5lQW5ub3RhdGlvbkVsZW1lbnQsIF9Bbm5vdGF0aW9uRWxlbWVudDEzKTsKCiAgdmFyIF9zdXBlcjE5ID0gX2NyZWF0ZVN1cGVyKFVuZGVybGluZUFubm90YXRpb25FbGVtZW50KTsKCiAgZnVuY3Rpb24gVW5kZXJsaW5lQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycykgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFVuZGVybGluZUFubm90YXRpb25FbGVtZW50KTsKCiAgICB2YXIgaXNSZW5kZXJhYmxlID0gISEocGFyYW1ldGVycy5kYXRhLmhhc1BvcHVwIHx8IHBhcmFtZXRlcnMuZGF0YS50aXRsZSB8fCBwYXJhbWV0ZXJzLmRhdGEuY29udGVudHMpOwogICAgcmV0dXJuIF9zdXBlcjE5LmNhbGwodGhpcywgcGFyYW1ldGVycywgaXNSZW5kZXJhYmxlLCB0cnVlKTsKICB9CgogIF9jcmVhdGVDbGFzcyhVbmRlcmxpbmVBbm5vdGF0aW9uRWxlbWVudCwgW3sKICAgIGtleTogInJlbmRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkgewogICAgICB0aGlzLmNvbnRhaW5lci5jbGFzc05hbWUgPSAidW5kZXJsaW5lQW5ub3RhdGlvbiI7CgogICAgICBpZiAoIXRoaXMuZGF0YS5oYXNQb3B1cCkgewogICAgICAgIHRoaXMuX2NyZWF0ZVBvcHVwKHRoaXMuY29udGFpbmVyLCBudWxsLCB0aGlzLmRhdGEpOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gVW5kZXJsaW5lQW5ub3RhdGlvbkVsZW1lbnQ7Cn0oQW5ub3RhdGlvbkVsZW1lbnQpOwoKdmFyIFNxdWlnZ2x5QW5ub3RhdGlvbkVsZW1lbnQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Bbm5vdGF0aW9uRWxlbWVudDE0KSB7CiAgX2luaGVyaXRzKFNxdWlnZ2x5QW5ub3RhdGlvbkVsZW1lbnQsIF9Bbm5vdGF0aW9uRWxlbWVudDE0KTsKCiAgdmFyIF9zdXBlcjIwID0gX2NyZWF0ZVN1cGVyKFNxdWlnZ2x5QW5ub3RhdGlvbkVsZW1lbnQpOwoKICBmdW5jdGlvbiBTcXVpZ2dseUFubm90YXRpb25FbGVtZW50KHBhcmFtZXRlcnMpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTcXVpZ2dseUFubm90YXRpb25FbGVtZW50KTsKCiAgICB2YXIgaXNSZW5kZXJhYmxlID0gISEocGFyYW1ldGVycy5kYXRhLmhhc1BvcHVwIHx8IHBhcmFtZXRlcnMuZGF0YS50aXRsZSB8fCBwYXJhbWV0ZXJzLmRhdGEuY29udGVudHMpOwogICAgcmV0dXJuIF9zdXBlcjIwLmNhbGwodGhpcywgcGFyYW1ldGVycywgaXNSZW5kZXJhYmxlLCB0cnVlKTsKICB9CgogIF9jcmVhdGVDbGFzcyhTcXVpZ2dseUFubm90YXRpb25FbGVtZW50LCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9ICJzcXVpZ2dseUFubm90YXRpb24iOwoKICAgICAgaWYgKCF0aGlzLmRhdGEuaGFzUG9wdXApIHsKICAgICAgICB0aGlzLl9jcmVhdGVQb3B1cCh0aGlzLmNvbnRhaW5lciwgbnVsbCwgdGhpcy5kYXRhKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFNxdWlnZ2x5QW5ub3RhdGlvbkVsZW1lbnQ7Cn0oQW5ub3RhdGlvbkVsZW1lbnQpOwoKdmFyIFN0cmlrZU91dEFubm90YXRpb25FbGVtZW50ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQW5ub3RhdGlvbkVsZW1lbnQxNSkgewogIF9pbmhlcml0cyhTdHJpa2VPdXRBbm5vdGF0aW9uRWxlbWVudCwgX0Fubm90YXRpb25FbGVtZW50MTUpOwoKICB2YXIgX3N1cGVyMjEgPSBfY3JlYXRlU3VwZXIoU3RyaWtlT3V0QW5ub3RhdGlvbkVsZW1lbnQpOwoKICBmdW5jdGlvbiBTdHJpa2VPdXRBbm5vdGF0aW9uRWxlbWVudChwYXJhbWV0ZXJzKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RyaWtlT3V0QW5ub3RhdGlvbkVsZW1lbnQpOwoKICAgIHZhciBpc1JlbmRlcmFibGUgPSAhIShwYXJhbWV0ZXJzLmRhdGEuaGFzUG9wdXAgfHwgcGFyYW1ldGVycy5kYXRhLnRpdGxlIHx8IHBhcmFtZXRlcnMuZGF0YS5jb250ZW50cyk7CiAgICByZXR1cm4gX3N1cGVyMjEuY2FsbCh0aGlzLCBwYXJhbWV0ZXJzLCBpc1JlbmRlcmFibGUsIHRydWUpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFN0cmlrZU91dEFubm90YXRpb25FbGVtZW50LCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7CiAgICAgIHRoaXMuY29udGFpbmVyLmNsYXNzTmFtZSA9ICJzdHJpa2VvdXRBbm5vdGF0aW9uIjsKCiAgICAgIGlmICghdGhpcy5kYXRhLmhhc1BvcHVwKSB7CiAgICAgICAgdGhpcy5fY3JlYXRlUG9wdXAodGhpcy5jb250YWluZXIsIG51bGwsIHRoaXMuZGF0YSk7CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLmNvbnRhaW5lcjsKICAgIH0KICB9XSk7CgogIHJldHVybiBTdHJpa2VPdXRBbm5vdGF0aW9uRWxlbWVudDsKfShBbm5vdGF0aW9uRWxlbWVudCk7Cgp2YXIgU3RhbXBBbm5vdGF0aW9uRWxlbWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Fubm90YXRpb25FbGVtZW50MTYpIHsKICBfaW5oZXJpdHMoU3RhbXBBbm5vdGF0aW9uRWxlbWVudCwgX0Fubm90YXRpb25FbGVtZW50MTYpOwoKICB2YXIgX3N1cGVyMjIgPSBfY3JlYXRlU3VwZXIoU3RhbXBBbm5vdGF0aW9uRWxlbWVudCk7CgogIGZ1bmN0aW9uIFN0YW1wQW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycykgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0YW1wQW5ub3RhdGlvbkVsZW1lbnQpOwoKICAgIHZhciBpc1JlbmRlcmFibGUgPSAhIShwYXJhbWV0ZXJzLmRhdGEuaGFzUG9wdXAgfHwgcGFyYW1ldGVycy5kYXRhLnRpdGxlIHx8IHBhcmFtZXRlcnMuZGF0YS5jb250ZW50cyk7CiAgICByZXR1cm4gX3N1cGVyMjIuY2FsbCh0aGlzLCBwYXJhbWV0ZXJzLCBpc1JlbmRlcmFibGUsIHRydWUpOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFN0YW1wQW5ub3RhdGlvbkVsZW1lbnQsIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gInN0YW1wQW5ub3RhdGlvbiI7CgogICAgICBpZiAoIXRoaXMuZGF0YS5oYXNQb3B1cCkgewogICAgICAgIHRoaXMuX2NyZWF0ZVBvcHVwKHRoaXMuY29udGFpbmVyLCBudWxsLCB0aGlzLmRhdGEpOwogICAgICB9CgogICAgICByZXR1cm4gdGhpcy5jb250YWluZXI7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gU3RhbXBBbm5vdGF0aW9uRWxlbWVudDsKfShBbm5vdGF0aW9uRWxlbWVudCk7Cgp2YXIgRmlsZUF0dGFjaG1lbnRBbm5vdGF0aW9uRWxlbWVudCA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Fubm90YXRpb25FbGVtZW50MTcpIHsKICBfaW5oZXJpdHMoRmlsZUF0dGFjaG1lbnRBbm5vdGF0aW9uRWxlbWVudCwgX0Fubm90YXRpb25FbGVtZW50MTcpOwoKICB2YXIgX3N1cGVyMjMgPSBfY3JlYXRlU3VwZXIoRmlsZUF0dGFjaG1lbnRBbm5vdGF0aW9uRWxlbWVudCk7CgogIGZ1bmN0aW9uIEZpbGVBdHRhY2htZW50QW5ub3RhdGlvbkVsZW1lbnQocGFyYW1ldGVycykgewogICAgdmFyIF90aGlzNjsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRmlsZUF0dGFjaG1lbnRBbm5vdGF0aW9uRWxlbWVudCk7CgogICAgX3RoaXM2ID0gX3N1cGVyMjMuY2FsbCh0aGlzLCBwYXJhbWV0ZXJzLCB0cnVlKTsKICAgIHZhciBfdGhpczYkZGF0YSRmaWxlID0gX3RoaXM2LmRhdGEuZmlsZSwKICAgICAgICBmaWxlbmFtZSA9IF90aGlzNiRkYXRhJGZpbGUuZmlsZW5hbWUsCiAgICAgICAgY29udGVudCA9IF90aGlzNiRkYXRhJGZpbGUuY29udGVudDsKICAgIF90aGlzNi5maWxlbmFtZSA9ICgwLCBfZGlzcGxheV91dGlscy5nZXRGaWxlbmFtZUZyb21VcmwpKGZpbGVuYW1lKTsKICAgIF90aGlzNi5jb250ZW50ID0gY29udGVudDsKCiAgICBpZiAoX3RoaXM2LmxpbmtTZXJ2aWNlLmV2ZW50QnVzKSB7CiAgICAgIF90aGlzNi5saW5rU2VydmljZS5ldmVudEJ1cy5kaXNwYXRjaCgiZmlsZWF0dGFjaG1lbnRhbm5vdGF0aW9uIiwgewogICAgICAgIHNvdXJjZTogX2Fzc2VydFRoaXNJbml0aWFsaXplZChfdGhpczYpLAogICAgICAgIGlkOiAoMCwgX3V0aWwuc3RyaW5nVG9QREZTdHJpbmcpKGZpbGVuYW1lKSwKICAgICAgICBmaWxlbmFtZTogZmlsZW5hbWUsCiAgICAgICAgY29udGVudDogY29udGVudAogICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gX3RoaXM2OwogIH0KCiAgX2NyZWF0ZUNsYXNzKEZpbGVBdHRhY2htZW50QW5ub3RhdGlvbkVsZW1lbnQsIFt7CiAgICBrZXk6ICJyZW5kZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHsKICAgICAgdGhpcy5jb250YWluZXIuY2xhc3NOYW1lID0gImZpbGVBdHRhY2htZW50QW5ub3RhdGlvbiI7CiAgICAgIHZhciB0cmlnZ2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICAgIHRyaWdnZXIuc3R5bGUuaGVpZ2h0ID0gdGhpcy5jb250YWluZXIuc3R5bGUuaGVpZ2h0OwogICAgICB0cmlnZ2VyLnN0eWxlLndpZHRoID0gdGhpcy5jb250YWluZXIuc3R5bGUud2lkdGg7CiAgICAgIHRyaWdnZXIuYWRkRXZlbnRMaXN0ZW5lcigiZGJsY2xpY2siLCB0aGlzLl9kb3dubG9hZC5iaW5kKHRoaXMpKTsKCiAgICAgIGlmICghdGhpcy5kYXRhLmhhc1BvcHVwICYmICh0aGlzLmRhdGEudGl0bGUgfHwgdGhpcy5kYXRhLmNvbnRlbnRzKSkgewogICAgICAgIHRoaXMuX2NyZWF0ZVBvcHVwKHRoaXMuY29udGFpbmVyLCB0cmlnZ2VyLCB0aGlzLmRhdGEpOwogICAgICB9CgogICAgICB0aGlzLmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0cmlnZ2VyKTsKICAgICAgcmV0dXJuIHRoaXMuY29udGFpbmVyOwogICAgfQogIH0sIHsKICAgIGtleTogIl9kb3dubG9hZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2Rvd25sb2FkKCkgewogICAgICBpZiAoIXRoaXMuZG93bmxvYWRNYW5hZ2VyKSB7CiAgICAgICAgKDAsIF91dGlsLndhcm4pKCJEb3dubG9hZCBjYW5ub3QgYmUgc3RhcnRlZCBkdWUgdG8gdW5hdmFpbGFibGUgZG93bmxvYWQgbWFuYWdlciIpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdGhpcy5kb3dubG9hZE1hbmFnZXIuZG93bmxvYWREYXRhKHRoaXMuY29udGVudCwgdGhpcy5maWxlbmFtZSwgIiIpOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEZpbGVBdHRhY2htZW50QW5ub3RhdGlvbkVsZW1lbnQ7Cn0oQW5ub3RhdGlvbkVsZW1lbnQpOwoKdmFyIEFubm90YXRpb25MYXllciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gQW5ub3RhdGlvbkxheWVyKCkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEFubm90YXRpb25MYXllcik7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQW5ub3RhdGlvbkxheWVyLCBudWxsLCBbewogICAga2V5OiAicmVuZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIocGFyYW1ldGVycykgewogICAgICB2YXIgc29ydGVkQW5ub3RhdGlvbnMgPSBbXSwKICAgICAgICAgIHBvcHVwQW5ub3RhdGlvbnMgPSBbXTsKCiAgICAgIHZhciBfaXRlcmF0b3I1ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIocGFyYW1ldGVycy5hbm5vdGF0aW9ucyksCiAgICAgICAgICBfc3RlcDU7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yNS5zKCk7ICEoX3N0ZXA1ID0gX2l0ZXJhdG9yNS5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgX2RhdGEgPSBfc3RlcDUudmFsdWU7CgogICAgICAgICAgaWYgKCFfZGF0YSkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoX2RhdGEuYW5ub3RhdGlvblR5cGUgPT09IF91dGlsLkFubm90YXRpb25UeXBlLlBPUFVQKSB7CiAgICAgICAgICAgIHBvcHVwQW5ub3RhdGlvbnMucHVzaChfZGF0YSk7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQoKICAgICAgICAgIHNvcnRlZEFubm90YXRpb25zLnB1c2goX2RhdGEpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2l0ZXJhdG9yNS5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yNS5mKCk7CiAgICAgIH0KCiAgICAgIGlmIChwb3B1cEFubm90YXRpb25zLmxlbmd0aCkgewogICAgICAgIHNvcnRlZEFubm90YXRpb25zLnB1c2guYXBwbHkoc29ydGVkQW5ub3RhdGlvbnMsIHBvcHVwQW5ub3RhdGlvbnMpOwogICAgICB9CgogICAgICBmb3IgKHZhciBfaSA9IDAsIF9zb3J0ZWRBbm5vdGF0aW9ucyA9IHNvcnRlZEFubm90YXRpb25zOyBfaSA8IF9zb3J0ZWRBbm5vdGF0aW9ucy5sZW5ndGg7IF9pKyspIHsKICAgICAgICB2YXIgZGF0YSA9IF9zb3J0ZWRBbm5vdGF0aW9uc1tfaV07CiAgICAgICAgdmFyIGVsZW1lbnQgPSBBbm5vdGF0aW9uRWxlbWVudEZhY3RvcnkuY3JlYXRlKHsKICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICBsYXllcjogcGFyYW1ldGVycy5kaXYsCiAgICAgICAgICBwYWdlOiBwYXJhbWV0ZXJzLnBhZ2UsCiAgICAgICAgICB2aWV3cG9ydDogcGFyYW1ldGVycy52aWV3cG9ydCwKICAgICAgICAgIGxpbmtTZXJ2aWNlOiBwYXJhbWV0ZXJzLmxpbmtTZXJ2aWNlLAogICAgICAgICAgZG93bmxvYWRNYW5hZ2VyOiBwYXJhbWV0ZXJzLmRvd25sb2FkTWFuYWdlciwKICAgICAgICAgIGltYWdlUmVzb3VyY2VzUGF0aDogcGFyYW1ldGVycy5pbWFnZVJlc291cmNlc1BhdGggfHwgIiIsCiAgICAgICAgICByZW5kZXJJbnRlcmFjdGl2ZUZvcm1zOiBwYXJhbWV0ZXJzLnJlbmRlckludGVyYWN0aXZlRm9ybXMgfHwgZmFsc2UsCiAgICAgICAgICBzdmdGYWN0b3J5OiBuZXcgX2Rpc3BsYXlfdXRpbHMuRE9NU1ZHRmFjdG9yeSgpCiAgICAgICAgfSk7CgogICAgICAgIGlmIChlbGVtZW50LmlzUmVuZGVyYWJsZSkgewogICAgICAgICAgcGFyYW1ldGVycy5kaXYuYXBwZW5kQ2hpbGQoZWxlbWVudC5yZW5kZXIoKSk7CiAgICAgICAgfQogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAidXBkYXRlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGUocGFyYW1ldGVycykgewogICAgICB2YXIgX2l0ZXJhdG9yNiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHBhcmFtZXRlcnMuYW5ub3RhdGlvbnMpLAogICAgICAgICAgX3N0ZXA2OwoKICAgICAgdHJ5IHsKICAgICAgICBmb3IgKF9pdGVyYXRvcjYucygpOyAhKF9zdGVwNiA9IF9pdGVyYXRvcjYubigpKS5kb25lOykgewogICAgICAgICAgdmFyIGRhdGEgPSBfc3RlcDYudmFsdWU7CiAgICAgICAgICB2YXIgZWxlbWVudCA9IHBhcmFtZXRlcnMuZGl2LnF1ZXJ5U2VsZWN0b3IoIltkYXRhLWFubm90YXRpb24taWQ9XCIiLmNvbmNhdChkYXRhLmlkLCAiXCJdIikpOwoKICAgICAgICAgIGlmIChlbGVtZW50KSB7CiAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gIm1hdHJpeCgiLmNvbmNhdChwYXJhbWV0ZXJzLnZpZXdwb3J0LnRyYW5zZm9ybS5qb2luKCIsIiksICIpIik7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3I2LmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3I2LmYoKTsKICAgICAgfQoKICAgICAgcGFyYW1ldGVycy5kaXYucmVtb3ZlQXR0cmlidXRlKCJoaWRkZW4iKTsKICAgIH0KICB9XSk7CgogIHJldHVybiBBbm5vdGF0aW9uTGF5ZXI7Cn0oKTsKCmV4cG9ydHMuQW5ub3RhdGlvbkxheWVyID0gQW5ub3RhdGlvbkxheWVyOwoKLyoqKi8gfSksCi8qIDIxMCAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7CgoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLnJlbmRlclRleHRMYXllciA9IHZvaWQgMDsKCnZhciBfdXRpbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNSk7Cgp2YXIgcmVuZGVyVGV4dExheWVyID0gZnVuY3Rpb24gcmVuZGVyVGV4dExheWVyQ2xvc3VyZSgpIHsKICB2YXIgTUFYX1RFWFRfRElWU19UT19SRU5ERVIgPSAxMDAwMDA7CiAgdmFyIE5vbldoaXRlc3BhY2VSZWdleHAgPSAvXFMvOwoKICBmdW5jdGlvbiBpc0FsbFdoaXRlc3BhY2Uoc3RyKSB7CiAgICByZXR1cm4gIU5vbldoaXRlc3BhY2VSZWdleHAudGVzdChzdHIpOwogIH0KCiAgZnVuY3Rpb24gYXBwZW5kVGV4dCh0YXNrLCBnZW9tLCBzdHlsZXMpIHsKICAgIHZhciB0ZXh0RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic3BhbiIpOwogICAgdmFyIHRleHREaXZQcm9wZXJ0aWVzID0gewogICAgICBhbmdsZTogMCwKICAgICAgY2FudmFzV2lkdGg6IDAsCiAgICAgIGlzV2hpdGVzcGFjZTogZmFsc2UsCiAgICAgIG9yaWdpbmFsVHJhbnNmb3JtOiBudWxsLAogICAgICBwYWRkaW5nQm90dG9tOiAwLAogICAgICBwYWRkaW5nTGVmdDogMCwKICAgICAgcGFkZGluZ1JpZ2h0OiAwLAogICAgICBwYWRkaW5nVG9wOiAwLAogICAgICBzY2FsZTogMQogICAgfTsKCiAgICB0YXNrLl90ZXh0RGl2cy5wdXNoKHRleHREaXYpOwoKICAgIGlmIChpc0FsbFdoaXRlc3BhY2UoZ2VvbS5zdHIpKSB7CiAgICAgIHRleHREaXZQcm9wZXJ0aWVzLmlzV2hpdGVzcGFjZSA9IHRydWU7CgogICAgICB0YXNrLl90ZXh0RGl2UHJvcGVydGllcy5zZXQodGV4dERpdiwgdGV4dERpdlByb3BlcnRpZXMpOwoKICAgICAgcmV0dXJuOwogICAgfQoKICAgIHZhciB0eCA9IF91dGlsLlV0aWwudHJhbnNmb3JtKHRhc2suX3ZpZXdwb3J0LnRyYW5zZm9ybSwgZ2VvbS50cmFuc2Zvcm0pOwoKICAgIHZhciBhbmdsZSA9IE1hdGguYXRhbjIodHhbMV0sIHR4WzBdKTsKICAgIHZhciBzdHlsZSA9IHN0eWxlc1tnZW9tLmZvbnROYW1lXTsKCiAgICBpZiAoc3R5bGUudmVydGljYWwpIHsKICAgICAgYW5nbGUgKz0gTWF0aC5QSSAvIDI7CiAgICB9CgogICAgdmFyIGZvbnRIZWlnaHQgPSBNYXRoLnNxcnQodHhbMl0gKiB0eFsyXSArIHR4WzNdICogdHhbM10pOwogICAgdmFyIGZvbnRBc2NlbnQgPSBmb250SGVpZ2h0OwoKICAgIGlmIChzdHlsZS5hc2NlbnQpIHsKICAgICAgZm9udEFzY2VudCA9IHN0eWxlLmFzY2VudCAqIGZvbnRBc2NlbnQ7CiAgICB9IGVsc2UgaWYgKHN0eWxlLmRlc2NlbnQpIHsKICAgICAgZm9udEFzY2VudCA9ICgxICsgc3R5bGUuZGVzY2VudCkgKiBmb250QXNjZW50OwogICAgfQoKICAgIHZhciBsZWZ0LCB0b3A7CgogICAgaWYgKGFuZ2xlID09PSAwKSB7CiAgICAgIGxlZnQgPSB0eFs0XTsKICAgICAgdG9wID0gdHhbNV0gLSBmb250QXNjZW50OwogICAgfSBlbHNlIHsKICAgICAgbGVmdCA9IHR4WzRdICsgZm9udEFzY2VudCAqIE1hdGguc2luKGFuZ2xlKTsKICAgICAgdG9wID0gdHhbNV0gLSBmb250QXNjZW50ICogTWF0aC5jb3MoYW5nbGUpOwogICAgfQoKICAgIHRleHREaXYuc3R5bGUubGVmdCA9ICIiLmNvbmNhdChsZWZ0LCAicHgiKTsKICAgIHRleHREaXYuc3R5bGUudG9wID0gIiIuY29uY2F0KHRvcCwgInB4Iik7CiAgICB0ZXh0RGl2LnN0eWxlLmZvbnRTaXplID0gIiIuY29uY2F0KGZvbnRIZWlnaHQsICJweCIpOwogICAgdGV4dERpdi5zdHlsZS5mb250RmFtaWx5ID0gc3R5bGUuZm9udEZhbWlseTsKICAgIHRleHREaXYudGV4dENvbnRlbnQgPSBnZW9tLnN0cjsKCiAgICBpZiAodGFzay5fZm9udEluc3BlY3RvckVuYWJsZWQpIHsKICAgICAgdGV4dERpdi5kYXRhc2V0LmZvbnROYW1lID0gZ2VvbS5mb250TmFtZTsKICAgIH0KCiAgICBpZiAoYW5nbGUgIT09IDApIHsKICAgICAgdGV4dERpdlByb3BlcnRpZXMuYW5nbGUgPSBhbmdsZSAqICgxODAgLyBNYXRoLlBJKTsKICAgIH0KCiAgICB2YXIgc2hvdWxkU2NhbGVUZXh0ID0gZmFsc2U7CgogICAgaWYgKGdlb20uc3RyLmxlbmd0aCA+IDEpIHsKICAgICAgc2hvdWxkU2NhbGVUZXh0ID0gdHJ1ZTsKICAgIH0gZWxzZSBpZiAoZ2VvbS50cmFuc2Zvcm1bMF0gIT09IGdlb20udHJhbnNmb3JtWzNdKSB7CiAgICAgIHZhciBhYnNTY2FsZVggPSBNYXRoLmFicyhnZW9tLnRyYW5zZm9ybVswXSksCiAgICAgICAgICBhYnNTY2FsZVkgPSBNYXRoLmFicyhnZW9tLnRyYW5zZm9ybVszXSk7CgogICAgICBpZiAoYWJzU2NhbGVYICE9PSBhYnNTY2FsZVkgJiYgTWF0aC5tYXgoYWJzU2NhbGVYLCBhYnNTY2FsZVkpIC8gTWF0aC5taW4oYWJzU2NhbGVYLCBhYnNTY2FsZVkpID4gMS41KSB7CiAgICAgICAgc2hvdWxkU2NhbGVUZXh0ID0gdHJ1ZTsKICAgICAgfQogICAgfQoKICAgIGlmIChzaG91bGRTY2FsZVRleHQpIHsKICAgICAgaWYgKHN0eWxlLnZlcnRpY2FsKSB7CiAgICAgICAgdGV4dERpdlByb3BlcnRpZXMuY2FudmFzV2lkdGggPSBnZW9tLmhlaWdodCAqIHRhc2suX3ZpZXdwb3J0LnNjYWxlOwogICAgICB9IGVsc2UgewogICAgICAgIHRleHREaXZQcm9wZXJ0aWVzLmNhbnZhc1dpZHRoID0gZ2VvbS53aWR0aCAqIHRhc2suX3ZpZXdwb3J0LnNjYWxlOwogICAgICB9CiAgICB9CgogICAgdGFzay5fdGV4dERpdlByb3BlcnRpZXMuc2V0KHRleHREaXYsIHRleHREaXZQcm9wZXJ0aWVzKTsKCiAgICBpZiAodGFzay5fdGV4dENvbnRlbnRTdHJlYW0pIHsKICAgICAgdGFzay5fbGF5b3V0VGV4dCh0ZXh0RGl2KTsKICAgIH0KCiAgICBpZiAodGFzay5fZW5oYW5jZVRleHRTZWxlY3Rpb24pIHsKICAgICAgdmFyIGFuZ2xlQ29zID0gMSwKICAgICAgICAgIGFuZ2xlU2luID0gMDsKCiAgICAgIGlmIChhbmdsZSAhPT0gMCkgewogICAgICAgIGFuZ2xlQ29zID0gTWF0aC5jb3MoYW5nbGUpOwogICAgICAgIGFuZ2xlU2luID0gTWF0aC5zaW4oYW5nbGUpOwogICAgICB9CgogICAgICB2YXIgZGl2V2lkdGggPSAoc3R5bGUudmVydGljYWwgPyBnZW9tLmhlaWdodCA6IGdlb20ud2lkdGgpICogdGFzay5fdmlld3BvcnQuc2NhbGU7CiAgICAgIHZhciBkaXZIZWlnaHQgPSBmb250SGVpZ2h0OwogICAgICB2YXIgbSwgYjsKCiAgICAgIGlmIChhbmdsZSAhPT0gMCkgewogICAgICAgIG0gPSBbYW5nbGVDb3MsIGFuZ2xlU2luLCAtYW5nbGVTaW4sIGFuZ2xlQ29zLCBsZWZ0LCB0b3BdOwogICAgICAgIGIgPSBfdXRpbC5VdGlsLmdldEF4aWFsQWxpZ25lZEJvdW5kaW5nQm94KFswLCAwLCBkaXZXaWR0aCwgZGl2SGVpZ2h0XSwgbSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgYiA9IFtsZWZ0LCB0b3AsIGxlZnQgKyBkaXZXaWR0aCwgdG9wICsgZGl2SGVpZ2h0XTsKICAgICAgfQoKICAgICAgdGFzay5fYm91bmRzLnB1c2goewogICAgICAgIGxlZnQ6IGJbMF0sCiAgICAgICAgdG9wOiBiWzFdLAogICAgICAgIHJpZ2h0OiBiWzJdLAogICAgICAgIGJvdHRvbTogYlszXSwKICAgICAgICBkaXY6IHRleHREaXYsCiAgICAgICAgc2l6ZTogW2RpdldpZHRoLCBkaXZIZWlnaHRdLAogICAgICAgIG06IG0KICAgICAgfSk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiByZW5kZXIodGFzaykgewogICAgaWYgKHRhc2suX2NhbmNlbGVkKSB7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICB2YXIgdGV4dERpdnMgPSB0YXNrLl90ZXh0RGl2czsKICAgIHZhciBjYXBhYmlsaXR5ID0gdGFzay5fY2FwYWJpbGl0eTsKICAgIHZhciB0ZXh0RGl2c0xlbmd0aCA9IHRleHREaXZzLmxlbmd0aDsKCiAgICBpZiAodGV4dERpdnNMZW5ndGggPiBNQVhfVEVYVF9ESVZTX1RPX1JFTkRFUikgewogICAgICB0YXNrLl9yZW5kZXJpbmdEb25lID0gdHJ1ZTsKICAgICAgY2FwYWJpbGl0eS5yZXNvbHZlKCk7CiAgICAgIHJldHVybjsKICAgIH0KCiAgICBpZiAoIXRhc2suX3RleHRDb250ZW50U3RyZWFtKSB7CiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGV4dERpdnNMZW5ndGg7IGkrKykgewogICAgICAgIHRhc2suX2xheW91dFRleHQodGV4dERpdnNbaV0pOwogICAgICB9CiAgICB9CgogICAgdGFzay5fcmVuZGVyaW5nRG9uZSA9IHRydWU7CiAgICBjYXBhYmlsaXR5LnJlc29sdmUoKTsKICB9CgogIGZ1bmN0aW9uIGZpbmRQb3NpdGl2ZU1pbih0cywgb2Zmc2V0LCBjb3VudCkgewogICAgdmFyIHJlc3VsdCA9IDA7CgogICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7CiAgICAgIHZhciB0ID0gdHNbb2Zmc2V0KytdOwoKICAgICAgaWYgKHQgPiAwKSB7CiAgICAgICAgcmVzdWx0ID0gcmVzdWx0ID8gTWF0aC5taW4odCwgcmVzdWx0KSA6IHQ7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gcmVzdWx0OwogIH0KCiAgZnVuY3Rpb24gZXhwYW5kKHRhc2spIHsKICAgIHZhciBib3VuZHMgPSB0YXNrLl9ib3VuZHM7CiAgICB2YXIgdmlld3BvcnQgPSB0YXNrLl92aWV3cG9ydDsKICAgIHZhciBleHBhbmRlZCA9IGV4cGFuZEJvdW5kcyh2aWV3cG9ydC53aWR0aCwgdmlld3BvcnQuaGVpZ2h0LCBib3VuZHMpOwoKICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhwYW5kZWQubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIGRpdiA9IGJvdW5kc1tpXS5kaXY7CgogICAgICB2YXIgZGl2UHJvcGVydGllcyA9IHRhc2suX3RleHREaXZQcm9wZXJ0aWVzLmdldChkaXYpOwoKICAgICAgaWYgKGRpdlByb3BlcnRpZXMuYW5nbGUgPT09IDApIHsKICAgICAgICBkaXZQcm9wZXJ0aWVzLnBhZGRpbmdMZWZ0ID0gYm91bmRzW2ldLmxlZnQgLSBleHBhbmRlZFtpXS5sZWZ0OwogICAgICAgIGRpdlByb3BlcnRpZXMucGFkZGluZ1RvcCA9IGJvdW5kc1tpXS50b3AgLSBleHBhbmRlZFtpXS50b3A7CiAgICAgICAgZGl2UHJvcGVydGllcy5wYWRkaW5nUmlnaHQgPSBleHBhbmRlZFtpXS5yaWdodCAtIGJvdW5kc1tpXS5yaWdodDsKICAgICAgICBkaXZQcm9wZXJ0aWVzLnBhZGRpbmdCb3R0b20gPSBleHBhbmRlZFtpXS5ib3R0b20gLSBib3VuZHNbaV0uYm90dG9tOwoKICAgICAgICB0YXNrLl90ZXh0RGl2UHJvcGVydGllcy5zZXQoZGl2LCBkaXZQcm9wZXJ0aWVzKTsKCiAgICAgICAgY29udGludWU7CiAgICAgIH0KCiAgICAgIHZhciBlID0gZXhwYW5kZWRbaV0sCiAgICAgICAgICBiID0gYm91bmRzW2ldOwogICAgICB2YXIgbSA9IGIubSwKICAgICAgICAgIGMgPSBtWzBdLAogICAgICAgICAgcyA9IG1bMV07CiAgICAgIHZhciBwb2ludHMgPSBbWzAsIDBdLCBbMCwgYi5zaXplWzFdXSwgW2Iuc2l6ZVswXSwgMF0sIGIuc2l6ZV07CiAgICAgIHZhciB0cyA9IG5ldyBGbG9hdDY0QXJyYXkoNjQpOwogICAgICBwb2ludHMuZm9yRWFjaChmdW5jdGlvbiAocCwgaikgewogICAgICAgIHZhciB0ID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShwLCBtKTsKCiAgICAgICAgdHNbaiArIDBdID0gYyAmJiAoZS5sZWZ0IC0gdFswXSkgLyBjOwogICAgICAgIHRzW2ogKyA0XSA9IHMgJiYgKGUudG9wIC0gdFsxXSkgLyBzOwogICAgICAgIHRzW2ogKyA4XSA9IGMgJiYgKGUucmlnaHQgLSB0WzBdKSAvIGM7CiAgICAgICAgdHNbaiArIDEyXSA9IHMgJiYgKGUuYm90dG9tIC0gdFsxXSkgLyBzOwogICAgICAgIHRzW2ogKyAxNl0gPSBzICYmIChlLmxlZnQgLSB0WzBdKSAvIC1zOwogICAgICAgIHRzW2ogKyAyMF0gPSBjICYmIChlLnRvcCAtIHRbMV0pIC8gYzsKICAgICAgICB0c1tqICsgMjRdID0gcyAmJiAoZS5yaWdodCAtIHRbMF0pIC8gLXM7CiAgICAgICAgdHNbaiArIDI4XSA9IGMgJiYgKGUuYm90dG9tIC0gdFsxXSkgLyBjOwogICAgICAgIHRzW2ogKyAzMl0gPSBjICYmIChlLmxlZnQgLSB0WzBdKSAvIC1jOwogICAgICAgIHRzW2ogKyAzNl0gPSBzICYmIChlLnRvcCAtIHRbMV0pIC8gLXM7CiAgICAgICAgdHNbaiArIDQwXSA9IGMgJiYgKGUucmlnaHQgLSB0WzBdKSAvIC1jOwogICAgICAgIHRzW2ogKyA0NF0gPSBzICYmIChlLmJvdHRvbSAtIHRbMV0pIC8gLXM7CiAgICAgICAgdHNbaiArIDQ4XSA9IHMgJiYgKGUubGVmdCAtIHRbMF0pIC8gczsKICAgICAgICB0c1tqICsgNTJdID0gYyAmJiAoZS50b3AgLSB0WzFdKSAvIC1jOwogICAgICAgIHRzW2ogKyA1Nl0gPSBzICYmIChlLnJpZ2h0IC0gdFswXSkgLyBzOwogICAgICAgIHRzW2ogKyA2MF0gPSBjICYmIChlLmJvdHRvbSAtIHRbMV0pIC8gLWM7CiAgICAgIH0pOwogICAgICB2YXIgYm94U2NhbGUgPSAxICsgTWF0aC5taW4oTWF0aC5hYnMoYyksIE1hdGguYWJzKHMpKTsKICAgICAgZGl2UHJvcGVydGllcy5wYWRkaW5nTGVmdCA9IGZpbmRQb3NpdGl2ZU1pbih0cywgMzIsIDE2KSAvIGJveFNjYWxlOwogICAgICBkaXZQcm9wZXJ0aWVzLnBhZGRpbmdUb3AgPSBmaW5kUG9zaXRpdmVNaW4odHMsIDQ4LCAxNikgLyBib3hTY2FsZTsKICAgICAgZGl2UHJvcGVydGllcy5wYWRkaW5nUmlnaHQgPSBmaW5kUG9zaXRpdmVNaW4odHMsIDAsIDE2KSAvIGJveFNjYWxlOwogICAgICBkaXZQcm9wZXJ0aWVzLnBhZGRpbmdCb3R0b20gPSBmaW5kUG9zaXRpdmVNaW4odHMsIDE2LCAxNikgLyBib3hTY2FsZTsKCiAgICAgIHRhc2suX3RleHREaXZQcm9wZXJ0aWVzLnNldChkaXYsIGRpdlByb3BlcnRpZXMpOwogICAgfQogIH0KCiAgZnVuY3Rpb24gZXhwYW5kQm91bmRzKHdpZHRoLCBoZWlnaHQsIGJveGVzKSB7CiAgICB2YXIgYm91bmRzID0gYm94ZXMubWFwKGZ1bmN0aW9uIChib3gsIGkpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICB4MTogYm94LmxlZnQsCiAgICAgICAgeTE6IGJveC50b3AsCiAgICAgICAgeDI6IGJveC5yaWdodCwKICAgICAgICB5MjogYm94LmJvdHRvbSwKICAgICAgICBpbmRleDogaSwKICAgICAgICB4MU5ldzogdW5kZWZpbmVkLAogICAgICAgIHgyTmV3OiB1bmRlZmluZWQKICAgICAgfTsKICAgIH0pOwogICAgZXhwYW5kQm91bmRzTFRSKHdpZHRoLCBib3VuZHMpOwogICAgdmFyIGV4cGFuZGVkID0gbmV3IEFycmF5KGJveGVzLmxlbmd0aCk7CiAgICBib3VuZHMuZm9yRWFjaChmdW5jdGlvbiAoYikgewogICAgICB2YXIgaSA9IGIuaW5kZXg7CiAgICAgIGV4cGFuZGVkW2ldID0gewogICAgICAgIGxlZnQ6IGIueDFOZXcsCiAgICAgICAgdG9wOiAwLAogICAgICAgIHJpZ2h0OiBiLngyTmV3LAogICAgICAgIGJvdHRvbTogMAogICAgICB9OwogICAgfSk7CiAgICBib3hlcy5tYXAoZnVuY3Rpb24gKGJveCwgaSkgewogICAgICB2YXIgZSA9IGV4cGFuZGVkW2ldLAogICAgICAgICAgYiA9IGJvdW5kc1tpXTsKICAgICAgYi54MSA9IGJveC50b3A7CiAgICAgIGIueTEgPSB3aWR0aCAtIGUucmlnaHQ7CiAgICAgIGIueDIgPSBib3guYm90dG9tOwogICAgICBiLnkyID0gd2lkdGggLSBlLmxlZnQ7CiAgICAgIGIuaW5kZXggPSBpOwogICAgICBiLngxTmV3ID0gdW5kZWZpbmVkOwogICAgICBiLngyTmV3ID0gdW5kZWZpbmVkOwogICAgfSk7CiAgICBleHBhbmRCb3VuZHNMVFIoaGVpZ2h0LCBib3VuZHMpOwogICAgYm91bmRzLmZvckVhY2goZnVuY3Rpb24gKGIpIHsKICAgICAgdmFyIGkgPSBiLmluZGV4OwogICAgICBleHBhbmRlZFtpXS50b3AgPSBiLngxTmV3OwogICAgICBleHBhbmRlZFtpXS5ib3R0b20gPSBiLngyTmV3OwogICAgfSk7CiAgICByZXR1cm4gZXhwYW5kZWQ7CiAgfQoKICBmdW5jdGlvbiBleHBhbmRCb3VuZHNMVFIod2lkdGgsIGJvdW5kcykgewogICAgYm91bmRzLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgcmV0dXJuIGEueDEgLSBiLngxIHx8IGEuaW5kZXggLSBiLmluZGV4OwogICAgfSk7CiAgICB2YXIgZmFrZUJvdW5kYXJ5ID0gewogICAgICB4MTogLUluZmluaXR5LAogICAgICB5MTogLUluZmluaXR5LAogICAgICB4MjogMCwKICAgICAgeTI6IEluZmluaXR5LAogICAgICBpbmRleDogLTEsCiAgICAgIHgxTmV3OiAwLAogICAgICB4Mk5ldzogMAogICAgfTsKICAgIHZhciBob3Jpem9uID0gW3sKICAgICAgc3RhcnQ6IC1JbmZpbml0eSwKICAgICAgZW5kOiBJbmZpbml0eSwKICAgICAgYm91bmRhcnk6IGZha2VCb3VuZGFyeQogICAgfV07CiAgICBib3VuZHMuZm9yRWFjaChmdW5jdGlvbiAoYm91bmRhcnkpIHsKICAgICAgdmFyIGkgPSAwOwoKICAgICAgd2hpbGUgKGkgPCBob3Jpem9uLmxlbmd0aCAmJiBob3Jpem9uW2ldLmVuZCA8PSBib3VuZGFyeS55MSkgewogICAgICAgIGkrKzsKICAgICAgfQoKICAgICAgdmFyIGogPSBob3Jpem9uLmxlbmd0aCAtIDE7CgogICAgICB3aGlsZSAoaiA+PSAwICYmIGhvcml6b25bal0uc3RhcnQgPj0gYm91bmRhcnkueTIpIHsKICAgICAgICBqLS07CiAgICAgIH0KCiAgICAgIHZhciBob3Jpem9uUGFydCwgYWZmZWN0ZWRCb3VuZGFyeTsKICAgICAgdmFyIHEsCiAgICAgICAgICBrLAogICAgICAgICAgbWF4WE5ldyA9IC1JbmZpbml0eTsKCiAgICAgIGZvciAocSA9IGk7IHEgPD0gajsgcSsrKSB7CiAgICAgICAgaG9yaXpvblBhcnQgPSBob3Jpem9uW3FdOwogICAgICAgIGFmZmVjdGVkQm91bmRhcnkgPSBob3Jpem9uUGFydC5ib3VuZGFyeTsKICAgICAgICB2YXIgeE5ldzsKCiAgICAgICAgaWYgKGFmZmVjdGVkQm91bmRhcnkueDIgPiBib3VuZGFyeS54MSkgewogICAgICAgICAgeE5ldyA9IGFmZmVjdGVkQm91bmRhcnkuaW5kZXggPiBib3VuZGFyeS5pbmRleCA/IGFmZmVjdGVkQm91bmRhcnkueDFOZXcgOiBib3VuZGFyeS54MTsKICAgICAgICB9IGVsc2UgaWYgKGFmZmVjdGVkQm91bmRhcnkueDJOZXcgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgeE5ldyA9IChhZmZlY3RlZEJvdW5kYXJ5LngyICsgYm91bmRhcnkueDEpIC8gMjsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgeE5ldyA9IGFmZmVjdGVkQm91bmRhcnkueDJOZXc7CiAgICAgICAgfQoKICAgICAgICBpZiAoeE5ldyA+IG1heFhOZXcpIHsKICAgICAgICAgIG1heFhOZXcgPSB4TmV3OwogICAgICAgIH0KICAgICAgfQoKICAgICAgYm91bmRhcnkueDFOZXcgPSBtYXhYTmV3OwoKICAgICAgZm9yIChxID0gaTsgcSA8PSBqOyBxKyspIHsKICAgICAgICBob3Jpem9uUGFydCA9IGhvcml6b25bcV07CiAgICAgICAgYWZmZWN0ZWRCb3VuZGFyeSA9IGhvcml6b25QYXJ0LmJvdW5kYXJ5OwoKICAgICAgICBpZiAoYWZmZWN0ZWRCb3VuZGFyeS54Mk5ldyA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICBpZiAoYWZmZWN0ZWRCb3VuZGFyeS54MiA+IGJvdW5kYXJ5LngxKSB7CiAgICAgICAgICAgIGlmIChhZmZlY3RlZEJvdW5kYXJ5LmluZGV4ID4gYm91bmRhcnkuaW5kZXgpIHsKICAgICAgICAgICAgICBhZmZlY3RlZEJvdW5kYXJ5LngyTmV3ID0gYWZmZWN0ZWRCb3VuZGFyeS54MjsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYWZmZWN0ZWRCb3VuZGFyeS54Mk5ldyA9IG1heFhOZXc7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChhZmZlY3RlZEJvdW5kYXJ5LngyTmV3ID4gbWF4WE5ldykgewogICAgICAgICAgYWZmZWN0ZWRCb3VuZGFyeS54Mk5ldyA9IE1hdGgubWF4KG1heFhOZXcsIGFmZmVjdGVkQm91bmRhcnkueDIpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgdmFyIGNoYW5nZWRIb3Jpem9uID0gW10sCiAgICAgICAgICBsYXN0Qm91bmRhcnkgPSBudWxsOwoKICAgICAgZm9yIChxID0gaTsgcSA8PSBqOyBxKyspIHsKICAgICAgICBob3Jpem9uUGFydCA9IGhvcml6b25bcV07CiAgICAgICAgYWZmZWN0ZWRCb3VuZGFyeSA9IGhvcml6b25QYXJ0LmJvdW5kYXJ5OwogICAgICAgIHZhciB1c2VCb3VuZGFyeSA9IGFmZmVjdGVkQm91bmRhcnkueDIgPiBib3VuZGFyeS54MiA/IGFmZmVjdGVkQm91bmRhcnkgOiBib3VuZGFyeTsKCiAgICAgICAgaWYgKGxhc3RCb3VuZGFyeSA9PT0gdXNlQm91bmRhcnkpIHsKICAgICAgICAgIGNoYW5nZWRIb3Jpem9uW2NoYW5nZWRIb3Jpem9uLmxlbmd0aCAtIDFdLmVuZCA9IGhvcml6b25QYXJ0LmVuZDsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY2hhbmdlZEhvcml6b24ucHVzaCh7CiAgICAgICAgICAgIHN0YXJ0OiBob3Jpem9uUGFydC5zdGFydCwKICAgICAgICAgICAgZW5kOiBob3Jpem9uUGFydC5lbmQsCiAgICAgICAgICAgIGJvdW5kYXJ5OiB1c2VCb3VuZGFyeQogICAgICAgICAgfSk7CiAgICAgICAgICBsYXN0Qm91bmRhcnkgPSB1c2VCb3VuZGFyeTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmIChob3Jpem9uW2ldLnN0YXJ0IDwgYm91bmRhcnkueTEpIHsKICAgICAgICBjaGFuZ2VkSG9yaXpvblswXS5zdGFydCA9IGJvdW5kYXJ5LnkxOwogICAgICAgIGNoYW5nZWRIb3Jpem9uLnVuc2hpZnQoewogICAgICAgICAgc3RhcnQ6IGhvcml6b25baV0uc3RhcnQsCiAgICAgICAgICBlbmQ6IGJvdW5kYXJ5LnkxLAogICAgICAgICAgYm91bmRhcnk6IGhvcml6b25baV0uYm91bmRhcnkKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgaWYgKGJvdW5kYXJ5LnkyIDwgaG9yaXpvbltqXS5lbmQpIHsKICAgICAgICBjaGFuZ2VkSG9yaXpvbltjaGFuZ2VkSG9yaXpvbi5sZW5ndGggLSAxXS5lbmQgPSBib3VuZGFyeS55MjsKICAgICAgICBjaGFuZ2VkSG9yaXpvbi5wdXNoKHsKICAgICAgICAgIHN0YXJ0OiBib3VuZGFyeS55MiwKICAgICAgICAgIGVuZDogaG9yaXpvbltqXS5lbmQsCiAgICAgICAgICBib3VuZGFyeTogaG9yaXpvbltqXS5ib3VuZGFyeQogICAgICAgIH0pOwogICAgICB9CgogICAgICBmb3IgKHEgPSBpOyBxIDw9IGo7IHErKykgewogICAgICAgIGhvcml6b25QYXJ0ID0gaG9yaXpvbltxXTsKICAgICAgICBhZmZlY3RlZEJvdW5kYXJ5ID0gaG9yaXpvblBhcnQuYm91bmRhcnk7CgogICAgICAgIGlmIChhZmZlY3RlZEJvdW5kYXJ5LngyTmV3ICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KCiAgICAgICAgdmFyIHVzZWQgPSBmYWxzZTsKCiAgICAgICAgZm9yIChrID0gaSAtIDE7ICF1c2VkICYmIGsgPj0gMCAmJiBob3Jpem9uW2tdLnN0YXJ0ID49IGFmZmVjdGVkQm91bmRhcnkueTE7IGstLSkgewogICAgICAgICAgdXNlZCA9IGhvcml6b25ba10uYm91bmRhcnkgPT09IGFmZmVjdGVkQm91bmRhcnk7CiAgICAgICAgfQoKICAgICAgICBmb3IgKGsgPSBqICsgMTsgIXVzZWQgJiYgayA8IGhvcml6b24ubGVuZ3RoICYmIGhvcml6b25ba10uZW5kIDw9IGFmZmVjdGVkQm91bmRhcnkueTI7IGsrKykgewogICAgICAgICAgdXNlZCA9IGhvcml6b25ba10uYm91bmRhcnkgPT09IGFmZmVjdGVkQm91bmRhcnk7CiAgICAgICAgfQoKICAgICAgICBmb3IgKGsgPSAwOyAhdXNlZCAmJiBrIDwgY2hhbmdlZEhvcml6b24ubGVuZ3RoOyBrKyspIHsKICAgICAgICAgIHVzZWQgPSBjaGFuZ2VkSG9yaXpvbltrXS5ib3VuZGFyeSA9PT0gYWZmZWN0ZWRCb3VuZGFyeTsKICAgICAgICB9CgogICAgICAgIGlmICghdXNlZCkgewogICAgICAgICAgYWZmZWN0ZWRCb3VuZGFyeS54Mk5ldyA9IG1heFhOZXc7CiAgICAgICAgfQogICAgICB9CgogICAgICBBcnJheS5wcm90b3R5cGUuc3BsaWNlLmFwcGx5KGhvcml6b24sIFtpLCBqIC0gaSArIDFdLmNvbmNhdChjaGFuZ2VkSG9yaXpvbikpOwogICAgfSk7CiAgICBob3Jpem9uLmZvckVhY2goZnVuY3Rpb24gKGhvcml6b25QYXJ0KSB7CiAgICAgIHZhciBhZmZlY3RlZEJvdW5kYXJ5ID0gaG9yaXpvblBhcnQuYm91bmRhcnk7CgogICAgICBpZiAoYWZmZWN0ZWRCb3VuZGFyeS54Mk5ldyA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgYWZmZWN0ZWRCb3VuZGFyeS54Mk5ldyA9IE1hdGgubWF4KHdpZHRoLCBhZmZlY3RlZEJvdW5kYXJ5LngyKTsKICAgICAgfQogICAgfSk7CiAgfQoKICBmdW5jdGlvbiBUZXh0TGF5ZXJSZW5kZXJUYXNrKF9yZWYpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgdmFyIHRleHRDb250ZW50ID0gX3JlZi50ZXh0Q29udGVudCwKICAgICAgICB0ZXh0Q29udGVudFN0cmVhbSA9IF9yZWYudGV4dENvbnRlbnRTdHJlYW0sCiAgICAgICAgY29udGFpbmVyID0gX3JlZi5jb250YWluZXIsCiAgICAgICAgdmlld3BvcnQgPSBfcmVmLnZpZXdwb3J0LAogICAgICAgIHRleHREaXZzID0gX3JlZi50ZXh0RGl2cywKICAgICAgICB0ZXh0Q29udGVudEl0ZW1zU3RyID0gX3JlZi50ZXh0Q29udGVudEl0ZW1zU3RyLAogICAgICAgIGVuaGFuY2VUZXh0U2VsZWN0aW9uID0gX3JlZi5lbmhhbmNlVGV4dFNlbGVjdGlvbjsKICAgIHRoaXMuX3RleHRDb250ZW50ID0gdGV4dENvbnRlbnQ7CiAgICB0aGlzLl90ZXh0Q29udGVudFN0cmVhbSA9IHRleHRDb250ZW50U3RyZWFtOwogICAgdGhpcy5fY29udGFpbmVyID0gY29udGFpbmVyOwogICAgdGhpcy5fdmlld3BvcnQgPSB2aWV3cG9ydDsKICAgIHRoaXMuX3RleHREaXZzID0gdGV4dERpdnMgfHwgW107CiAgICB0aGlzLl90ZXh0Q29udGVudEl0ZW1zU3RyID0gdGV4dENvbnRlbnRJdGVtc1N0ciB8fCBbXTsKICAgIHRoaXMuX2VuaGFuY2VUZXh0U2VsZWN0aW9uID0gISFlbmhhbmNlVGV4dFNlbGVjdGlvbjsKICAgIHRoaXMuX2ZvbnRJbnNwZWN0b3JFbmFibGVkID0gISEoZ2xvYmFsVGhpcy5Gb250SW5zcGVjdG9yICYmIGdsb2JhbFRoaXMuRm9udEluc3BlY3Rvci5lbmFibGVkKTsKICAgIHRoaXMuX3JlYWRlciA9IG51bGw7CiAgICB0aGlzLl9sYXlvdXRUZXh0TGFzdEZvbnRTaXplID0gbnVsbDsKICAgIHRoaXMuX2xheW91dFRleHRMYXN0Rm9udEZhbWlseSA9IG51bGw7CiAgICB0aGlzLl9sYXlvdXRUZXh0Q3R4ID0gbnVsbDsKICAgIHRoaXMuX3RleHREaXZQcm9wZXJ0aWVzID0gbmV3IFdlYWtNYXAoKTsKICAgIHRoaXMuX3JlbmRlcmluZ0RvbmUgPSBmYWxzZTsKICAgIHRoaXMuX2NhbmNlbGVkID0gZmFsc2U7CiAgICB0aGlzLl9jYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpOwogICAgdGhpcy5fcmVuZGVyVGltZXIgPSBudWxsOwogICAgdGhpcy5fYm91bmRzID0gW107CgogICAgdGhpcy5fY2FwYWJpbGl0eS5wcm9taXNlWyJmaW5hbGx5Il0oZnVuY3Rpb24gKCkgewogICAgICBpZiAoX3RoaXMuX2xheW91dFRleHRDdHgpIHsKICAgICAgICBfdGhpcy5fbGF5b3V0VGV4dEN0eC5jYW52YXMud2lkdGggPSAwOwogICAgICAgIF90aGlzLl9sYXlvdXRUZXh0Q3R4LmNhbnZhcy5oZWlnaHQgPSAwOwogICAgICAgIF90aGlzLl9sYXlvdXRUZXh0Q3R4ID0gbnVsbDsKICAgICAgfQogICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKCkge30pOwogIH0KCiAgVGV4dExheWVyUmVuZGVyVGFzay5wcm90b3R5cGUgPSB7CiAgICBnZXQgcHJvbWlzZSgpIHsKICAgICAgcmV0dXJuIHRoaXMuX2NhcGFiaWxpdHkucHJvbWlzZTsKICAgIH0sCgogICAgY2FuY2VsOiBmdW5jdGlvbiBUZXh0TGF5ZXJfY2FuY2VsKCkgewogICAgICB0aGlzLl9jYW5jZWxlZCA9IHRydWU7CgogICAgICBpZiAodGhpcy5fcmVhZGVyKSB7CiAgICAgICAgdGhpcy5fcmVhZGVyLmNhbmNlbChuZXcgX3V0aWwuQWJvcnRFeGNlcHRpb24oIlRleHRMYXllciB0YXNrIGNhbmNlbGxlZC4iKSk7CgogICAgICAgIHRoaXMuX3JlYWRlciA9IG51bGw7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLl9yZW5kZXJUaW1lciAhPT0gbnVsbCkgewogICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9yZW5kZXJUaW1lcik7CiAgICAgICAgdGhpcy5fcmVuZGVyVGltZXIgPSBudWxsOwogICAgICB9CgogICAgICB0aGlzLl9jYXBhYmlsaXR5LnJlamVjdChuZXcgRXJyb3IoIlRleHRMYXllciB0YXNrIGNhbmNlbGxlZC4iKSk7CiAgICB9LAogICAgX3Byb2Nlc3NJdGVtczogZnVuY3Rpb24gX3Byb2Nlc3NJdGVtcyhpdGVtcywgc3R5bGVDYWNoZSkgewogICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gaXRlbXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICB0aGlzLl90ZXh0Q29udGVudEl0ZW1zU3RyLnB1c2goaXRlbXNbaV0uc3RyKTsKCiAgICAgICAgYXBwZW5kVGV4dCh0aGlzLCBpdGVtc1tpXSwgc3R5bGVDYWNoZSk7CiAgICAgIH0KICAgIH0sCiAgICBfbGF5b3V0VGV4dDogZnVuY3Rpb24gX2xheW91dFRleHQodGV4dERpdikgewogICAgICB2YXIgdGV4dERpdlByb3BlcnRpZXMgPSB0aGlzLl90ZXh0RGl2UHJvcGVydGllcy5nZXQodGV4dERpdik7CgogICAgICBpZiAodGV4dERpdlByb3BlcnRpZXMuaXNXaGl0ZXNwYWNlKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB2YXIgdHJhbnNmb3JtID0gIiI7CgogICAgICBpZiAodGV4dERpdlByb3BlcnRpZXMuY2FudmFzV2lkdGggIT09IDApIHsKICAgICAgICB2YXIgX3RleHREaXYkc3R5bGUgPSB0ZXh0RGl2LnN0eWxlLAogICAgICAgICAgICBmb250U2l6ZSA9IF90ZXh0RGl2JHN0eWxlLmZvbnRTaXplLAogICAgICAgICAgICBmb250RmFtaWx5ID0gX3RleHREaXYkc3R5bGUuZm9udEZhbWlseTsKCiAgICAgICAgaWYgKGZvbnRTaXplICE9PSB0aGlzLl9sYXlvdXRUZXh0TGFzdEZvbnRTaXplIHx8IGZvbnRGYW1pbHkgIT09IHRoaXMuX2xheW91dFRleHRMYXN0Rm9udEZhbWlseSkgewogICAgICAgICAgdGhpcy5fbGF5b3V0VGV4dEN0eC5mb250ID0gIiIuY29uY2F0KGZvbnRTaXplLCAiICIpLmNvbmNhdChmb250RmFtaWx5KTsKICAgICAgICAgIHRoaXMuX2xheW91dFRleHRMYXN0Rm9udFNpemUgPSBmb250U2l6ZTsKICAgICAgICAgIHRoaXMuX2xheW91dFRleHRMYXN0Rm9udEZhbWlseSA9IGZvbnRGYW1pbHk7CiAgICAgICAgfQoKICAgICAgICB2YXIgX3RoaXMkX2xheW91dFRleHRDdHgkID0gdGhpcy5fbGF5b3V0VGV4dEN0eC5tZWFzdXJlVGV4dCh0ZXh0RGl2LnRleHRDb250ZW50KSwKICAgICAgICAgICAgd2lkdGggPSBfdGhpcyRfbGF5b3V0VGV4dEN0eCQud2lkdGg7CgogICAgICAgIGlmICh3aWR0aCA+IDApIHsKICAgICAgICAgIHRleHREaXZQcm9wZXJ0aWVzLnNjYWxlID0gdGV4dERpdlByb3BlcnRpZXMuY2FudmFzV2lkdGggLyB3aWR0aDsKICAgICAgICAgIHRyYW5zZm9ybSA9ICJzY2FsZVgoIi5jb25jYXQodGV4dERpdlByb3BlcnRpZXMuc2NhbGUsICIpIik7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAodGV4dERpdlByb3BlcnRpZXMuYW5nbGUgIT09IDApIHsKICAgICAgICB0cmFuc2Zvcm0gPSAicm90YXRlKCIuY29uY2F0KHRleHREaXZQcm9wZXJ0aWVzLmFuZ2xlLCAiZGVnKSAiKS5jb25jYXQodHJhbnNmb3JtKTsKICAgICAgfQoKICAgICAgaWYgKHRyYW5zZm9ybS5sZW5ndGggPiAwKSB7CiAgICAgICAgaWYgKHRoaXMuX2VuaGFuY2VUZXh0U2VsZWN0aW9uKSB7CiAgICAgICAgICB0ZXh0RGl2UHJvcGVydGllcy5vcmlnaW5hbFRyYW5zZm9ybSA9IHRyYW5zZm9ybTsKICAgICAgICB9CgogICAgICAgIHRleHREaXYuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtOwogICAgICB9CgogICAgICB0aGlzLl90ZXh0RGl2UHJvcGVydGllcy5zZXQodGV4dERpdiwgdGV4dERpdlByb3BlcnRpZXMpOwoKICAgICAgdGhpcy5fY29udGFpbmVyLmFwcGVuZENoaWxkKHRleHREaXYpOwogICAgfSwKICAgIF9yZW5kZXI6IGZ1bmN0aW9uIFRleHRMYXllcl9yZW5kZXIodGltZW91dCkgewogICAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICAgIHZhciBjYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpOwogICAgICB2YXIgc3R5bGVDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJjYW52YXMiKTsKICAgICAgY2FudmFzLm1vek9wYXF1ZSA9IHRydWU7CiAgICAgIHRoaXMuX2xheW91dFRleHRDdHggPSBjYW52YXMuZ2V0Q29udGV4dCgiMmQiLCB7CiAgICAgICAgYWxwaGE6IGZhbHNlCiAgICAgIH0pOwoKICAgICAgaWYgKHRoaXMuX3RleHRDb250ZW50KSB7CiAgICAgICAgdmFyIHRleHRJdGVtcyA9IHRoaXMuX3RleHRDb250ZW50Lml0ZW1zOwogICAgICAgIHZhciB0ZXh0U3R5bGVzID0gdGhpcy5fdGV4dENvbnRlbnQuc3R5bGVzOwoKICAgICAgICB0aGlzLl9wcm9jZXNzSXRlbXModGV4dEl0ZW1zLCB0ZXh0U3R5bGVzKTsKCiAgICAgICAgY2FwYWJpbGl0eS5yZXNvbHZlKCk7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5fdGV4dENvbnRlbnRTdHJlYW0pIHsKICAgICAgICB2YXIgcHVtcCA9IGZ1bmN0aW9uIHB1bXAoKSB7CiAgICAgICAgICBfdGhpczIuX3JlYWRlci5yZWFkKCkudGhlbihmdW5jdGlvbiAoX3JlZjIpIHsKICAgICAgICAgICAgdmFyIHZhbHVlID0gX3JlZjIudmFsdWUsCiAgICAgICAgICAgICAgICBkb25lID0gX3JlZjIuZG9uZTsKCiAgICAgICAgICAgIGlmIChkb25lKSB7CiAgICAgICAgICAgICAgY2FwYWJpbGl0eS5yZXNvbHZlKCk7CiAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBPYmplY3QuYXNzaWduKHN0eWxlQ2FjaGUsIHZhbHVlLnN0eWxlcyk7CgogICAgICAgICAgICBfdGhpczIuX3Byb2Nlc3NJdGVtcyh2YWx1ZS5pdGVtcywgc3R5bGVDYWNoZSk7CgogICAgICAgICAgICBwdW1wKCk7CiAgICAgICAgICB9LCBjYXBhYmlsaXR5LnJlamVjdCk7CiAgICAgICAgfTsKCiAgICAgICAgdGhpcy5fcmVhZGVyID0gdGhpcy5fdGV4dENvbnRlbnRTdHJlYW0uZ2V0UmVhZGVyKCk7CiAgICAgICAgcHVtcCgpOwogICAgICB9IGVsc2UgewogICAgICAgIHRocm93IG5ldyBFcnJvcignTmVpdGhlciAidGV4dENvbnRlbnQiIG5vciAidGV4dENvbnRlbnRTdHJlYW0iJyArICIgcGFyYW1ldGVycyBzcGVjaWZpZWQuIik7CiAgICAgIH0KCiAgICAgIGNhcGFiaWxpdHkucHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICBzdHlsZUNhY2hlID0gbnVsbDsKCiAgICAgICAgaWYgKCF0aW1lb3V0KSB7CiAgICAgICAgICByZW5kZXIoX3RoaXMyKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXMyLl9yZW5kZXJUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZW5kZXIoX3RoaXMyKTsKICAgICAgICAgICAgX3RoaXMyLl9yZW5kZXJUaW1lciA9IG51bGw7CiAgICAgICAgICB9LCB0aW1lb3V0KTsKICAgICAgICB9CiAgICAgIH0sIHRoaXMuX2NhcGFiaWxpdHkucmVqZWN0KTsKICAgIH0sCiAgICBleHBhbmRUZXh0RGl2czogZnVuY3Rpb24gVGV4dExheWVyX2V4cGFuZFRleHREaXZzKGV4cGFuZERpdnMpIHsKICAgICAgaWYgKCF0aGlzLl9lbmhhbmNlVGV4dFNlbGVjdGlvbiB8fCAhdGhpcy5fcmVuZGVyaW5nRG9uZSkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgaWYgKHRoaXMuX2JvdW5kcyAhPT0gbnVsbCkgewogICAgICAgIGV4cGFuZCh0aGlzKTsKICAgICAgICB0aGlzLl9ib3VuZHMgPSBudWxsOwogICAgICB9CgogICAgICB2YXIgdHJhbnNmb3JtQnVmID0gW10sCiAgICAgICAgICBwYWRkaW5nQnVmID0gW107CgogICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSB0aGlzLl90ZXh0RGl2cy5sZW5ndGg7IGkgPCBpaTsgaSsrKSB7CiAgICAgICAgdmFyIGRpdiA9IHRoaXMuX3RleHREaXZzW2ldOwoKICAgICAgICB2YXIgZGl2UHJvcHMgPSB0aGlzLl90ZXh0RGl2UHJvcGVydGllcy5nZXQoZGl2KTsKCiAgICAgICAgaWYgKGRpdlByb3BzLmlzV2hpdGVzcGFjZSkgewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQoKICAgICAgICBpZiAoZXhwYW5kRGl2cykgewogICAgICAgICAgdHJhbnNmb3JtQnVmLmxlbmd0aCA9IDA7CiAgICAgICAgICBwYWRkaW5nQnVmLmxlbmd0aCA9IDA7CgogICAgICAgICAgaWYgKGRpdlByb3BzLm9yaWdpbmFsVHJhbnNmb3JtKSB7CiAgICAgICAgICAgIHRyYW5zZm9ybUJ1Zi5wdXNoKGRpdlByb3BzLm9yaWdpbmFsVHJhbnNmb3JtKTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoZGl2UHJvcHMucGFkZGluZ1RvcCA+IDApIHsKICAgICAgICAgICAgcGFkZGluZ0J1Zi5wdXNoKCIiLmNvbmNhdChkaXZQcm9wcy5wYWRkaW5nVG9wLCAicHgiKSk7CiAgICAgICAgICAgIHRyYW5zZm9ybUJ1Zi5wdXNoKCJ0cmFuc2xhdGVZKCIuY29uY2F0KC1kaXZQcm9wcy5wYWRkaW5nVG9wLCAicHgpIikpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcGFkZGluZ0J1Zi5wdXNoKDApOwogICAgICAgICAgfQoKICAgICAgICAgIGlmIChkaXZQcm9wcy5wYWRkaW5nUmlnaHQgPiAwKSB7CiAgICAgICAgICAgIHBhZGRpbmdCdWYucHVzaCgiIi5jb25jYXQoZGl2UHJvcHMucGFkZGluZ1JpZ2h0IC8gZGl2UHJvcHMuc2NhbGUsICJweCIpKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHBhZGRpbmdCdWYucHVzaCgwKTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoZGl2UHJvcHMucGFkZGluZ0JvdHRvbSA+IDApIHsKICAgICAgICAgICAgcGFkZGluZ0J1Zi5wdXNoKCIiLmNvbmNhdChkaXZQcm9wcy5wYWRkaW5nQm90dG9tLCAicHgiKSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBwYWRkaW5nQnVmLnB1c2goMCk7CiAgICAgICAgICB9CgogICAgICAgICAgaWYgKGRpdlByb3BzLnBhZGRpbmdMZWZ0ID4gMCkgewogICAgICAgICAgICBwYWRkaW5nQnVmLnB1c2goIiIuY29uY2F0KGRpdlByb3BzLnBhZGRpbmdMZWZ0IC8gZGl2UHJvcHMuc2NhbGUsICJweCIpKTsKICAgICAgICAgICAgdHJhbnNmb3JtQnVmLnB1c2goInRyYW5zbGF0ZVgoIi5jb25jYXQoLWRpdlByb3BzLnBhZGRpbmdMZWZ0IC8gZGl2UHJvcHMuc2NhbGUsICJweCkiKSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBwYWRkaW5nQnVmLnB1c2goMCk7CiAgICAgICAgICB9CgogICAgICAgICAgZGl2LnN0eWxlLnBhZGRpbmcgPSBwYWRkaW5nQnVmLmpvaW4oIiAiKTsKCiAgICAgICAgICBpZiAodHJhbnNmb3JtQnVmLmxlbmd0aCkgewogICAgICAgICAgICBkaXYuc3R5bGUudHJhbnNmb3JtID0gdHJhbnNmb3JtQnVmLmpvaW4oIiAiKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgZGl2LnN0eWxlLnBhZGRpbmcgPSBudWxsOwogICAgICAgICAgZGl2LnN0eWxlLnRyYW5zZm9ybSA9IGRpdlByb3BzLm9yaWdpbmFsVHJhbnNmb3JtOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH07CgogIGZ1bmN0aW9uIHJlbmRlclRleHRMYXllcihyZW5kZXJQYXJhbWV0ZXJzKSB7CiAgICB2YXIgdGFzayA9IG5ldyBUZXh0TGF5ZXJSZW5kZXJUYXNrKHsKICAgICAgdGV4dENvbnRlbnQ6IHJlbmRlclBhcmFtZXRlcnMudGV4dENvbnRlbnQsCiAgICAgIHRleHRDb250ZW50U3RyZWFtOiByZW5kZXJQYXJhbWV0ZXJzLnRleHRDb250ZW50U3RyZWFtLAogICAgICBjb250YWluZXI6IHJlbmRlclBhcmFtZXRlcnMuY29udGFpbmVyLAogICAgICB2aWV3cG9ydDogcmVuZGVyUGFyYW1ldGVycy52aWV3cG9ydCwKICAgICAgdGV4dERpdnM6IHJlbmRlclBhcmFtZXRlcnMudGV4dERpdnMsCiAgICAgIHRleHRDb250ZW50SXRlbXNTdHI6IHJlbmRlclBhcmFtZXRlcnMudGV4dENvbnRlbnRJdGVtc1N0ciwKICAgICAgZW5oYW5jZVRleHRTZWxlY3Rpb246IHJlbmRlclBhcmFtZXRlcnMuZW5oYW5jZVRleHRTZWxlY3Rpb24KICAgIH0pOwoKICAgIHRhc2suX3JlbmRlcihyZW5kZXJQYXJhbWV0ZXJzLnRpbWVvdXQpOwoKICAgIHJldHVybiB0YXNrOwogIH0KCiAgcmV0dXJuIHJlbmRlclRleHRMYXllcjsKfSgpOwoKZXhwb3J0cy5yZW5kZXJUZXh0TGF5ZXIgPSByZW5kZXJUZXh0TGF5ZXI7CgovKioqLyB9KSwKLyogMjExICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuU1ZHR3JhcGhpY3MgPSB2b2lkIDA7Cgp2YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDUpOwoKdmFyIF9kaXNwbGF5X3V0aWxzID0gX193X3BkZmpzX3JlcXVpcmVfXygxKTsKCnZhciBfaXNfbm9kZSA9IF9fd19wZGZqc19yZXF1aXJlX18oNyk7CgpmdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IHJldHVybiBfYXJyYXlXaXRob3V0SG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5KGFycikgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFycikgfHwgX25vbkl0ZXJhYmxlU3ByZWFkKCk7IH0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuIik7IH0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXkoaXRlcikgeyBpZiAodHlwZW9mIFN5bWJvbCAhPT0gInVuZGVmaW5lZCIgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyKSkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7IH0KCmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7IH0KCmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9CgpmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLiIpOyB9CgpmdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSAidW5kZWZpbmVkIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbInJldHVybiJdICE9IG51bGwpIF9pWyJyZXR1cm4iXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0KCmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfQoKZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobywgYWxsb3dBcnJheUxpa2UpIHsgdmFyIGl0OyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gInVuZGVmaW5lZCIgfHwgb1tTeW1ib2wuaXRlcmF0b3JdID09IG51bGwpIHsgaWYgKEFycmF5LmlzQXJyYXkobykgfHwgKGl0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8pKSB8fCBhbGxvd0FycmF5TGlrZSAmJiBvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gIm51bWJlciIpIHsgaWYgKGl0KSBvID0gaXQ7IHZhciBpID0gMDsgdmFyIEYgPSBmdW5jdGlvbiBGKCkge307IHJldHVybiB7IHM6IEYsIG46IGZ1bmN0aW9uIG4oKSB7IGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4geyBkb25lOiB0cnVlIH07IHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogb1tpKytdIH07IH0sIGU6IGZ1bmN0aW9uIGUoX2UyKSB7IHRocm93IF9lMjsgfSwgZjogRiB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC4iKTsgfSB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsIGRpZEVyciA9IGZhbHNlLCBlcnI7IHJldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IGl0ID0gb1tTeW1ib2wuaXRlcmF0b3JdKCk7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciBzdGVwID0gaXQubmV4dCgpOyBub3JtYWxDb21wbGV0aW9uID0gc3RlcC5kb25lOyByZXR1cm4gc3RlcDsgfSwgZTogZnVuY3Rpb24gZShfZTMpIHsgZGlkRXJyID0gdHJ1ZTsgZXJyID0gX2UzOyB9LCBmOiBmdW5jdGlvbiBmKCkgeyB0cnkgeyBpZiAoIW5vcm1hbENvbXBsZXRpb24gJiYgaXRbInJldHVybiJdICE9IG51bGwpIGl0WyJyZXR1cm4iXSgpOyB9IGZpbmFsbHkgeyBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7IH0gfSB9OyB9CgpmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09ICJzdHJpbmciKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gIk9iamVjdCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09ICJNYXAiIHx8IG4gPT09ICJTZXQiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09ICJBcmd1bWVudHMiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfQoKZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKdmFyIFNWR0dyYXBoaWNzID0gZnVuY3Rpb24gU1ZHR3JhcGhpY3MoKSB7CiAgdGhyb3cgbmV3IEVycm9yKCJOb3QgaW1wbGVtZW50ZWQ6IFNWR0dyYXBoaWNzIik7Cn07CgpleHBvcnRzLlNWR0dyYXBoaWNzID0gU1ZHR3JhcGhpY3M7CnsKICB2YXIgb3BMaXN0VG9UcmVlID0gZnVuY3Rpb24gb3BMaXN0VG9UcmVlKG9wTGlzdCkgewogICAgdmFyIG9wVHJlZSA9IFtdOwogICAgdmFyIHRtcCA9IFtdOwoKICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvcExpc3QpLAogICAgICAgIF9zdGVwOwoKICAgIHRyeSB7CiAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgICAgdmFyIG9wTGlzdEVsZW1lbnQgPSBfc3RlcC52YWx1ZTsKCiAgICAgICAgaWYgKG9wTGlzdEVsZW1lbnQuZm4gPT09ICJzYXZlIikgewogICAgICAgICAgb3BUcmVlLnB1c2goewogICAgICAgICAgICBmbklkOiA5MiwKICAgICAgICAgICAgZm46ICJncm91cCIsCiAgICAgICAgICAgIGl0ZW1zOiBbXQogICAgICAgICAgfSk7CiAgICAgICAgICB0bXAucHVzaChvcFRyZWUpOwogICAgICAgICAgb3BUcmVlID0gb3BUcmVlW29wVHJlZS5sZW5ndGggLSAxXS5pdGVtczsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KCiAgICAgICAgaWYgKG9wTGlzdEVsZW1lbnQuZm4gPT09ICJyZXN0b3JlIikgewogICAgICAgICAgb3BUcmVlID0gdG1wLnBvcCgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBvcFRyZWUucHVzaChvcExpc3RFbGVtZW50KTsKICAgICAgICB9CiAgICAgIH0KICAgIH0gY2F0Y2ggKGVycikgewogICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgfSBmaW5hbGx5IHsKICAgICAgX2l0ZXJhdG9yLmYoKTsKICAgIH0KCiAgICByZXR1cm4gb3BUcmVlOwogIH07CgogIHZhciBwZiA9IGZ1bmN0aW9uIHBmKHZhbHVlKSB7CiAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkpIHsKICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKCk7CiAgICB9CgogICAgdmFyIHMgPSB2YWx1ZS50b0ZpeGVkKDEwKTsKICAgIHZhciBpID0gcy5sZW5ndGggLSAxOwoKICAgIGlmIChzW2ldICE9PSAiMCIpIHsKICAgICAgcmV0dXJuIHM7CiAgICB9CgogICAgZG8gewogICAgICBpLS07CiAgICB9IHdoaWxlIChzW2ldID09PSAiMCIpOwoKICAgIHJldHVybiBzLnN1YnN0cmluZygwLCBzW2ldID09PSAiLiIgPyBpIDogaSArIDEpOwogIH07CgogIHZhciBwbSA9IGZ1bmN0aW9uIHBtKG0pIHsKICAgIGlmIChtWzRdID09PSAwICYmIG1bNV0gPT09IDApIHsKICAgICAgaWYgKG1bMV0gPT09IDAgJiYgbVsyXSA9PT0gMCkgewogICAgICAgIGlmIChtWzBdID09PSAxICYmIG1bM10gPT09IDEpIHsKICAgICAgICAgIHJldHVybiAiIjsKICAgICAgICB9CgogICAgICAgIHJldHVybiAic2NhbGUoIi5jb25jYXQocGYobVswXSksICIgIikuY29uY2F0KHBmKG1bM10pLCAiKSIpOwogICAgICB9CgogICAgICBpZiAobVswXSA9PT0gbVszXSAmJiBtWzFdID09PSAtbVsyXSkgewogICAgICAgIHZhciBhID0gTWF0aC5hY29zKG1bMF0pICogMTgwIC8gTWF0aC5QSTsKICAgICAgICByZXR1cm4gInJvdGF0ZSgiLmNvbmNhdChwZihhKSwgIikiKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgaWYgKG1bMF0gPT09IDEgJiYgbVsxXSA9PT0gMCAmJiBtWzJdID09PSAwICYmIG1bM10gPT09IDEpIHsKICAgICAgICByZXR1cm4gInRyYW5zbGF0ZSgiLmNvbmNhdChwZihtWzRdKSwgIiAiKS5jb25jYXQocGYobVs1XSksICIpIik7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gIm1hdHJpeCgiLmNvbmNhdChwZihtWzBdKSwgIiAiKS5jb25jYXQocGYobVsxXSksICIgIikuY29uY2F0KHBmKG1bMl0pLCAiICIpLmNvbmNhdChwZihtWzNdKSwgIiAiKS5jb25jYXQocGYobVs0XSksICIgIikgKyAiIi5jb25jYXQocGYobVs1XSksICIpIik7CiAgfTsKCiAgdmFyIFNWR19ERUZBVUxUUyA9IHsKICAgIGZvbnRTdHlsZTogIm5vcm1hbCIsCiAgICBmb250V2VpZ2h0OiAibm9ybWFsIiwKICAgIGZpbGxDb2xvcjogIiMwMDAwMDAiCiAgfTsKICB2YXIgWE1MX05TID0gImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZSI7CiAgdmFyIFhMSU5LX05TID0gImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiOwogIHZhciBMSU5FX0NBUF9TVFlMRVMgPSBbImJ1dHQiLCAicm91bmQiLCAic3F1YXJlIl07CiAgdmFyIExJTkVfSk9JTl9TVFlMRVMgPSBbIm1pdGVyIiwgInJvdW5kIiwgImJldmVsIl07CgogIHZhciBjb252ZXJ0SW1nRGF0YVRvUG5nID0gZnVuY3Rpb24gKCkgewogICAgdmFyIFBOR19IRUFERVIgPSBuZXcgVWludDhBcnJheShbMHg4OSwgMHg1MCwgMHg0ZSwgMHg0NywgMHgwZCwgMHgwYSwgMHgxYSwgMHgwYV0pOwogICAgdmFyIENIVU5LX1dSQVBQRVJfU0laRSA9IDEyOwogICAgdmFyIGNyY1RhYmxlID0gbmV3IEludDMyQXJyYXkoMjU2KTsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgaSsrKSB7CiAgICAgIHZhciBjID0gaTsKCiAgICAgIGZvciAodmFyIGggPSAwOyBoIDwgODsgaCsrKSB7CiAgICAgICAgaWYgKGMgJiAxKSB7CiAgICAgICAgICBjID0gMHhlZGI4ODMyMCBeIGMgPj4gMSAmIDB4N2ZmZmZmZmY7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGMgPSBjID4+IDEgJiAweDdmZmZmZmZmOwogICAgICAgIH0KICAgICAgfQoKICAgICAgY3JjVGFibGVbaV0gPSBjOwogICAgfQoKICAgIGZ1bmN0aW9uIGNyYzMyKGRhdGEsIHN0YXJ0LCBlbmQpIHsKICAgICAgdmFyIGNyYyA9IC0xOwoKICAgICAgZm9yICh2YXIgX2kgPSBzdGFydDsgX2kgPCBlbmQ7IF9pKyspIHsKICAgICAgICB2YXIgYSA9IChjcmMgXiBkYXRhW19pXSkgJiAweGZmOwogICAgICAgIHZhciBiID0gY3JjVGFibGVbYV07CiAgICAgICAgY3JjID0gY3JjID4+PiA4IF4gYjsKICAgICAgfQoKICAgICAgcmV0dXJuIGNyYyBeIC0xOwogICAgfQoKICAgIGZ1bmN0aW9uIHdyaXRlUG5nQ2h1bmsodHlwZSwgYm9keSwgZGF0YSwgb2Zmc2V0KSB7CiAgICAgIHZhciBwID0gb2Zmc2V0OwogICAgICB2YXIgbGVuID0gYm9keS5sZW5ndGg7CiAgICAgIGRhdGFbcF0gPSBsZW4gPj4gMjQgJiAweGZmOwogICAgICBkYXRhW3AgKyAxXSA9IGxlbiA+PiAxNiAmIDB4ZmY7CiAgICAgIGRhdGFbcCArIDJdID0gbGVuID4+IDggJiAweGZmOwogICAgICBkYXRhW3AgKyAzXSA9IGxlbiAmIDB4ZmY7CiAgICAgIHAgKz0gNDsKICAgICAgZGF0YVtwXSA9IHR5cGUuY2hhckNvZGVBdCgwKSAmIDB4ZmY7CiAgICAgIGRhdGFbcCArIDFdID0gdHlwZS5jaGFyQ29kZUF0KDEpICYgMHhmZjsKICAgICAgZGF0YVtwICsgMl0gPSB0eXBlLmNoYXJDb2RlQXQoMikgJiAweGZmOwogICAgICBkYXRhW3AgKyAzXSA9IHR5cGUuY2hhckNvZGVBdCgzKSAmIDB4ZmY7CiAgICAgIHAgKz0gNDsKICAgICAgZGF0YS5zZXQoYm9keSwgcCk7CiAgICAgIHAgKz0gYm9keS5sZW5ndGg7CiAgICAgIHZhciBjcmMgPSBjcmMzMihkYXRhLCBvZmZzZXQgKyA0LCBwKTsKICAgICAgZGF0YVtwXSA9IGNyYyA+PiAyNCAmIDB4ZmY7CiAgICAgIGRhdGFbcCArIDFdID0gY3JjID4+IDE2ICYgMHhmZjsKICAgICAgZGF0YVtwICsgMl0gPSBjcmMgPj4gOCAmIDB4ZmY7CiAgICAgIGRhdGFbcCArIDNdID0gY3JjICYgMHhmZjsKICAgIH0KCiAgICBmdW5jdGlvbiBhZGxlcjMyKGRhdGEsIHN0YXJ0LCBlbmQpIHsKICAgICAgdmFyIGEgPSAxOwogICAgICB2YXIgYiA9IDA7CgogICAgICBmb3IgKHZhciBfaTIgPSBzdGFydDsgX2kyIDwgZW5kOyArK19pMikgewogICAgICAgIGEgPSAoYSArIChkYXRhW19pMl0gJiAweGZmKSkgJSA2NTUyMTsKICAgICAgICBiID0gKGIgKyBhKSAlIDY1NTIxOwogICAgICB9CgogICAgICByZXR1cm4gYiA8PCAxNiB8IGE7CiAgICB9CgogICAgZnVuY3Rpb24gZGVmbGF0ZVN5bmMobGl0ZXJhbHMpIHsKICAgICAgaWYgKCFfaXNfbm9kZS5pc05vZGVKUykgewogICAgICAgIHJldHVybiBkZWZsYXRlU3luY1VuY29tcHJlc3NlZChsaXRlcmFscyk7CiAgICAgIH0KCiAgICAgIHRyeSB7CiAgICAgICAgdmFyIGlucHV0OwoKICAgICAgICBpZiAocGFyc2VJbnQocHJvY2Vzcy52ZXJzaW9ucy5ub2RlKSA+PSA4KSB7CiAgICAgICAgICBpbnB1dCA9IGxpdGVyYWxzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpbnB1dCA9IEJ1ZmZlci5mcm9tKGxpdGVyYWxzKTsKICAgICAgICB9CgogICAgICAgIHZhciBvdXRwdXQgPSByZXF1aXJlKCJ6bGliIikuZGVmbGF0ZVN5bmMoaW5wdXQsIHsKICAgICAgICAgIGxldmVsOiA5CiAgICAgICAgfSk7CgogICAgICAgIHJldHVybiBvdXRwdXQgaW5zdGFuY2VvZiBVaW50OEFycmF5ID8gb3V0cHV0IDogbmV3IFVpbnQ4QXJyYXkob3V0cHV0KTsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICgwLCBfdXRpbC53YXJuKSgiTm90IGNvbXByZXNzaW5nIFBORyBiZWNhdXNlIHpsaWIuZGVmbGF0ZVN5bmMgaXMgdW5hdmFpbGFibGU6ICIgKyBlKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGRlZmxhdGVTeW5jVW5jb21wcmVzc2VkKGxpdGVyYWxzKTsKICAgIH0KCiAgICBmdW5jdGlvbiBkZWZsYXRlU3luY1VuY29tcHJlc3NlZChsaXRlcmFscykgewogICAgICB2YXIgbGVuID0gbGl0ZXJhbHMubGVuZ3RoOwogICAgICB2YXIgbWF4QmxvY2tMZW5ndGggPSAweGZmZmY7CiAgICAgIHZhciBkZWZsYXRlQmxvY2tzID0gTWF0aC5jZWlsKGxlbiAvIG1heEJsb2NrTGVuZ3RoKTsKICAgICAgdmFyIGlkYXQgPSBuZXcgVWludDhBcnJheSgyICsgbGVuICsgZGVmbGF0ZUJsb2NrcyAqIDUgKyA0KTsKICAgICAgdmFyIHBpID0gMDsKICAgICAgaWRhdFtwaSsrXSA9IDB4Nzg7CiAgICAgIGlkYXRbcGkrK10gPSAweDljOwogICAgICB2YXIgcG9zID0gMDsKCiAgICAgIHdoaWxlIChsZW4gPiBtYXhCbG9ja0xlbmd0aCkgewogICAgICAgIGlkYXRbcGkrK10gPSAweDAwOwogICAgICAgIGlkYXRbcGkrK10gPSAweGZmOwogICAgICAgIGlkYXRbcGkrK10gPSAweGZmOwogICAgICAgIGlkYXRbcGkrK10gPSAweDAwOwogICAgICAgIGlkYXRbcGkrK10gPSAweDAwOwogICAgICAgIGlkYXQuc2V0KGxpdGVyYWxzLnN1YmFycmF5KHBvcywgcG9zICsgbWF4QmxvY2tMZW5ndGgpLCBwaSk7CiAgICAgICAgcGkgKz0gbWF4QmxvY2tMZW5ndGg7CiAgICAgICAgcG9zICs9IG1heEJsb2NrTGVuZ3RoOwogICAgICAgIGxlbiAtPSBtYXhCbG9ja0xlbmd0aDsKICAgICAgfQoKICAgICAgaWRhdFtwaSsrXSA9IDB4MDE7CiAgICAgIGlkYXRbcGkrK10gPSBsZW4gJiAweGZmOwogICAgICBpZGF0W3BpKytdID0gbGVuID4+IDggJiAweGZmOwogICAgICBpZGF0W3BpKytdID0gfmxlbiAmIDB4ZmZmZiAmIDB4ZmY7CiAgICAgIGlkYXRbcGkrK10gPSAofmxlbiAmIDB4ZmZmZikgPj4gOCAmIDB4ZmY7CiAgICAgIGlkYXQuc2V0KGxpdGVyYWxzLnN1YmFycmF5KHBvcyksIHBpKTsKICAgICAgcGkgKz0gbGl0ZXJhbHMubGVuZ3RoIC0gcG9zOwogICAgICB2YXIgYWRsZXIgPSBhZGxlcjMyKGxpdGVyYWxzLCAwLCBsaXRlcmFscy5sZW5ndGgpOwogICAgICBpZGF0W3BpKytdID0gYWRsZXIgPj4gMjQgJiAweGZmOwogICAgICBpZGF0W3BpKytdID0gYWRsZXIgPj4gMTYgJiAweGZmOwogICAgICBpZGF0W3BpKytdID0gYWRsZXIgPj4gOCAmIDB4ZmY7CiAgICAgIGlkYXRbcGkrK10gPSBhZGxlciAmIDB4ZmY7CiAgICAgIHJldHVybiBpZGF0OwogICAgfQoKICAgIGZ1bmN0aW9uIGVuY29kZShpbWdEYXRhLCBraW5kLCBmb3JjZURhdGFTY2hlbWEsIGlzTWFzaykgewogICAgICB2YXIgd2lkdGggPSBpbWdEYXRhLndpZHRoOwogICAgICB2YXIgaGVpZ2h0ID0gaW1nRGF0YS5oZWlnaHQ7CiAgICAgIHZhciBiaXREZXB0aCwgY29sb3JUeXBlLCBsaW5lU2l6ZTsKICAgICAgdmFyIGJ5dGVzID0gaW1nRGF0YS5kYXRhOwoKICAgICAgc3dpdGNoIChraW5kKSB7CiAgICAgICAgY2FzZSBfdXRpbC5JbWFnZUtpbmQuR1JBWVNDQUxFXzFCUFA6CiAgICAgICAgICBjb2xvclR5cGUgPSAwOwogICAgICAgICAgYml0RGVwdGggPSAxOwogICAgICAgICAgbGluZVNpemUgPSB3aWR0aCArIDcgPj4gMzsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBjYXNlIF91dGlsLkltYWdlS2luZC5SR0JfMjRCUFA6CiAgICAgICAgICBjb2xvclR5cGUgPSAyOwogICAgICAgICAgYml0RGVwdGggPSA4OwogICAgICAgICAgbGluZVNpemUgPSB3aWR0aCAqIDM7CiAgICAgICAgICBicmVhazsKCiAgICAgICAgY2FzZSBfdXRpbC5JbWFnZUtpbmQuUkdCQV8zMkJQUDoKICAgICAgICAgIGNvbG9yVHlwZSA9IDY7CiAgICAgICAgICBiaXREZXB0aCA9IDg7CiAgICAgICAgICBsaW5lU2l6ZSA9IHdpZHRoICogNDsKICAgICAgICAgIGJyZWFrOwoKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJpbnZhbGlkIGZvcm1hdCIpOwogICAgICB9CgogICAgICB2YXIgbGl0ZXJhbHMgPSBuZXcgVWludDhBcnJheSgoMSArIGxpbmVTaXplKSAqIGhlaWdodCk7CiAgICAgIHZhciBvZmZzZXRMaXRlcmFscyA9IDAsCiAgICAgICAgICBvZmZzZXRCeXRlcyA9IDA7CgogICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IGhlaWdodDsgKyt5KSB7CiAgICAgICAgbGl0ZXJhbHNbb2Zmc2V0TGl0ZXJhbHMrK10gPSAwOwogICAgICAgIGxpdGVyYWxzLnNldChieXRlcy5zdWJhcnJheShvZmZzZXRCeXRlcywgb2Zmc2V0Qnl0ZXMgKyBsaW5lU2l6ZSksIG9mZnNldExpdGVyYWxzKTsKICAgICAgICBvZmZzZXRCeXRlcyArPSBsaW5lU2l6ZTsKICAgICAgICBvZmZzZXRMaXRlcmFscyArPSBsaW5lU2l6ZTsKICAgICAgfQoKICAgICAgaWYgKGtpbmQgPT09IF91dGlsLkltYWdlS2luZC5HUkFZU0NBTEVfMUJQUCAmJiBpc01hc2spIHsKICAgICAgICBvZmZzZXRMaXRlcmFscyA9IDA7CgogICAgICAgIGZvciAodmFyIF95ID0gMDsgX3kgPCBoZWlnaHQ7IF95KyspIHsKICAgICAgICAgIG9mZnNldExpdGVyYWxzKys7CgogICAgICAgICAgZm9yICh2YXIgX2kzID0gMDsgX2kzIDwgbGluZVNpemU7IF9pMysrKSB7CiAgICAgICAgICAgIGxpdGVyYWxzW29mZnNldExpdGVyYWxzKytdIF49IDB4ZmY7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICB2YXIgaWhkciA9IG5ldyBVaW50OEFycmF5KFt3aWR0aCA+PiAyNCAmIDB4ZmYsIHdpZHRoID4+IDE2ICYgMHhmZiwgd2lkdGggPj4gOCAmIDB4ZmYsIHdpZHRoICYgMHhmZiwgaGVpZ2h0ID4+IDI0ICYgMHhmZiwgaGVpZ2h0ID4+IDE2ICYgMHhmZiwgaGVpZ2h0ID4+IDggJiAweGZmLCBoZWlnaHQgJiAweGZmLCBiaXREZXB0aCwgY29sb3JUeXBlLCAweDAwLCAweDAwLCAweDAwXSk7CiAgICAgIHZhciBpZGF0ID0gZGVmbGF0ZVN5bmMobGl0ZXJhbHMpOwogICAgICB2YXIgcG5nTGVuZ3RoID0gUE5HX0hFQURFUi5sZW5ndGggKyBDSFVOS19XUkFQUEVSX1NJWkUgKiAzICsgaWhkci5sZW5ndGggKyBpZGF0Lmxlbmd0aDsKICAgICAgdmFyIGRhdGEgPSBuZXcgVWludDhBcnJheShwbmdMZW5ndGgpOwogICAgICB2YXIgb2Zmc2V0ID0gMDsKICAgICAgZGF0YS5zZXQoUE5HX0hFQURFUiwgb2Zmc2V0KTsKICAgICAgb2Zmc2V0ICs9IFBOR19IRUFERVIubGVuZ3RoOwogICAgICB3cml0ZVBuZ0NodW5rKCJJSERSIiwgaWhkciwgZGF0YSwgb2Zmc2V0KTsKICAgICAgb2Zmc2V0ICs9IENIVU5LX1dSQVBQRVJfU0laRSArIGloZHIubGVuZ3RoOwogICAgICB3cml0ZVBuZ0NodW5rKCJJREFUQSIsIGlkYXQsIGRhdGEsIG9mZnNldCk7CiAgICAgIG9mZnNldCArPSBDSFVOS19XUkFQUEVSX1NJWkUgKyBpZGF0Lmxlbmd0aDsKICAgICAgd3JpdGVQbmdDaHVuaygiSUVORCIsIG5ldyBVaW50OEFycmF5KDApLCBkYXRhLCBvZmZzZXQpOwogICAgICByZXR1cm4gKDAsIF91dGlsLmNyZWF0ZU9iamVjdFVSTCkoZGF0YSwgImltYWdlL3BuZyIsIGZvcmNlRGF0YVNjaGVtYSk7CiAgICB9CgogICAgcmV0dXJuIGZ1bmN0aW9uIGNvbnZlcnRJbWdEYXRhVG9QbmcoaW1nRGF0YSwgZm9yY2VEYXRhU2NoZW1hLCBpc01hc2spIHsKICAgICAgdmFyIGtpbmQgPSBpbWdEYXRhLmtpbmQgPT09IHVuZGVmaW5lZCA/IF91dGlsLkltYWdlS2luZC5HUkFZU0NBTEVfMUJQUCA6IGltZ0RhdGEua2luZDsKICAgICAgcmV0dXJuIGVuY29kZShpbWdEYXRhLCBraW5kLCBmb3JjZURhdGFTY2hlbWEsIGlzTWFzayk7CiAgICB9OwogIH0oKTsKCiAgdmFyIFNWR0V4dHJhU3RhdGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gU1ZHRXh0cmFTdGF0ZSgpIHsKICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFNWR0V4dHJhU3RhdGUpOwoKICAgICAgdGhpcy5mb250U2l6ZVNjYWxlID0gMTsKICAgICAgdGhpcy5mb250V2VpZ2h0ID0gU1ZHX0RFRkFVTFRTLmZvbnRXZWlnaHQ7CiAgICAgIHRoaXMuZm9udFNpemUgPSAwOwogICAgICB0aGlzLnRleHRNYXRyaXggPSBfdXRpbC5JREVOVElUWV9NQVRSSVg7CiAgICAgIHRoaXMuZm9udE1hdHJpeCA9IF91dGlsLkZPTlRfSURFTlRJVFlfTUFUUklYOwogICAgICB0aGlzLmxlYWRpbmcgPSAwOwogICAgICB0aGlzLnRleHRSZW5kZXJpbmdNb2RlID0gX3V0aWwuVGV4dFJlbmRlcmluZ01vZGUuRklMTDsKICAgICAgdGhpcy50ZXh0TWF0cml4U2NhbGUgPSAxOwogICAgICB0aGlzLnggPSAwOwogICAgICB0aGlzLnkgPSAwOwogICAgICB0aGlzLmxpbmVYID0gMDsKICAgICAgdGhpcy5saW5lWSA9IDA7CiAgICAgIHRoaXMuY2hhclNwYWNpbmcgPSAwOwogICAgICB0aGlzLndvcmRTcGFjaW5nID0gMDsKICAgICAgdGhpcy50ZXh0SFNjYWxlID0gMTsKICAgICAgdGhpcy50ZXh0UmlzZSA9IDA7CiAgICAgIHRoaXMuZmlsbENvbG9yID0gU1ZHX0RFRkFVTFRTLmZpbGxDb2xvcjsKICAgICAgdGhpcy5zdHJva2VDb2xvciA9ICIjMDAwMDAwIjsKICAgICAgdGhpcy5maWxsQWxwaGEgPSAxOwogICAgICB0aGlzLnN0cm9rZUFscGhhID0gMTsKICAgICAgdGhpcy5saW5lV2lkdGggPSAxOwogICAgICB0aGlzLmxpbmVKb2luID0gIiI7CiAgICAgIHRoaXMubGluZUNhcCA9ICIiOwogICAgICB0aGlzLm1pdGVyTGltaXQgPSAwOwogICAgICB0aGlzLmRhc2hBcnJheSA9IFtdOwogICAgICB0aGlzLmRhc2hQaGFzZSA9IDA7CiAgICAgIHRoaXMuZGVwZW5kZW5jaWVzID0gW107CiAgICAgIHRoaXMuYWN0aXZlQ2xpcFVybCA9IG51bGw7CiAgICAgIHRoaXMuY2xpcEdyb3VwID0gbnVsbDsKICAgICAgdGhpcy5tYXNrSWQgPSAiIjsKICAgIH0KCiAgICBfY3JlYXRlQ2xhc3MoU1ZHRXh0cmFTdGF0ZSwgW3sKICAgICAga2V5OiAiY2xvbmUiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gY2xvbmUoKSB7CiAgICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUodGhpcyk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAic2V0Q3VycmVudFBvaW50IiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEN1cnJlbnRQb2ludCh4LCB5KSB7CiAgICAgICAgdGhpcy54ID0geDsKICAgICAgICB0aGlzLnkgPSB5OwogICAgICB9CiAgICB9XSk7CgogICAgcmV0dXJuIFNWR0V4dHJhU3RhdGU7CiAgfSgpOwoKICB2YXIgY2xpcENvdW50ID0gMDsKICB2YXIgbWFza0NvdW50ID0gMDsKICB2YXIgc2hhZGluZ0NvdW50ID0gMDsKCiAgZXhwb3J0cy5TVkdHcmFwaGljcyA9IFNWR0dyYXBoaWNzID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAgIGZ1bmN0aW9uIFNWR0dyYXBoaWNzKGNvbW1vbk9ianMsIG9ianMpIHsKICAgICAgdmFyIGZvcmNlRGF0YVNjaGVtYSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7CgogICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgU1ZHR3JhcGhpY3MpOwoKICAgICAgdGhpcy5zdmdGYWN0b3J5ID0gbmV3IF9kaXNwbGF5X3V0aWxzLkRPTVNWR0ZhY3RvcnkoKTsKICAgICAgdGhpcy5jdXJyZW50ID0gbmV3IFNWR0V4dHJhU3RhdGUoKTsKICAgICAgdGhpcy50cmFuc2Zvcm1NYXRyaXggPSBfdXRpbC5JREVOVElUWV9NQVRSSVg7CiAgICAgIHRoaXMudHJhbnNmb3JtU3RhY2sgPSBbXTsKICAgICAgdGhpcy5leHRyYVN0YWNrID0gW107CiAgICAgIHRoaXMuY29tbW9uT2JqcyA9IGNvbW1vbk9ianM7CiAgICAgIHRoaXMub2JqcyA9IG9ianM7CiAgICAgIHRoaXMucGVuZGluZ0NsaXAgPSBudWxsOwogICAgICB0aGlzLnBlbmRpbmdFT0ZpbGwgPSBmYWxzZTsKICAgICAgdGhpcy5lbWJlZEZvbnRzID0gZmFsc2U7CiAgICAgIHRoaXMuZW1iZWRkZWRGb250cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgICAgIHRoaXMuY3NzU3R5bGUgPSBudWxsOwogICAgICB0aGlzLmZvcmNlRGF0YVNjaGVtYSA9ICEhZm9yY2VEYXRhU2NoZW1hOwogICAgICB0aGlzLl9vcGVyYXRvcklkTWFwcGluZyA9IFtdOwoKICAgICAgZm9yICh2YXIgb3AgaW4gX3V0aWwuT1BTKSB7CiAgICAgICAgdGhpcy5fb3BlcmF0b3JJZE1hcHBpbmdbX3V0aWwuT1BTW29wXV0gPSBvcDsKICAgICAgfQogICAgfQoKICAgIF9jcmVhdGVDbGFzcyhTVkdHcmFwaGljcywgW3sKICAgICAga2V5OiAic2F2ZSIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlKCkgewogICAgICAgIHRoaXMudHJhbnNmb3JtU3RhY2sucHVzaCh0aGlzLnRyYW5zZm9ybU1hdHJpeCk7CiAgICAgICAgdmFyIG9sZCA9IHRoaXMuY3VycmVudDsKICAgICAgICB0aGlzLmV4dHJhU3RhY2sucHVzaChvbGQpOwogICAgICAgIHRoaXMuY3VycmVudCA9IG9sZC5jbG9uZSgpOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInJlc3RvcmUiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gcmVzdG9yZSgpIHsKICAgICAgICB0aGlzLnRyYW5zZm9ybU1hdHJpeCA9IHRoaXMudHJhbnNmb3JtU3RhY2sucG9wKCk7CiAgICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5leHRyYVN0YWNrLnBvcCgpOwogICAgICAgIHRoaXMucGVuZGluZ0NsaXAgPSBudWxsOwogICAgICAgIHRoaXMudGdycCA9IG51bGw7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiZ3JvdXAiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gZ3JvdXAoaXRlbXMpIHsKICAgICAgICB0aGlzLnNhdmUoKTsKICAgICAgICB0aGlzLmV4ZWN1dGVPcFRyZWUoaXRlbXMpOwogICAgICAgIHRoaXMucmVzdG9yZSgpOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogImxvYWREZXBlbmRlbmNpZXMiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZERlcGVuZGVuY2llcyhvcGVyYXRvckxpc3QpIHsKICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgICB2YXIgZm5BcnJheSA9IG9wZXJhdG9yTGlzdC5mbkFycmF5OwogICAgICAgIHZhciBhcmdzQXJyYXkgPSBvcGVyYXRvckxpc3QuYXJnc0FycmF5OwoKICAgICAgICBmb3IgKHZhciBpID0gMCwgaWkgPSBmbkFycmF5Lmxlbmd0aDsgaSA8IGlpOyBpKyspIHsKICAgICAgICAgIGlmIChmbkFycmF5W2ldICE9PSBfdXRpbC5PUFMuZGVwZW5kZW5jeSkgewogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KCiAgICAgICAgICB2YXIgX2l0ZXJhdG9yMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGFyZ3NBcnJheVtpXSksCiAgICAgICAgICAgICAgX3N0ZXAyOwoKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKCkgewogICAgICAgICAgICAgIHZhciBvYmogPSBfc3RlcDIudmFsdWU7CiAgICAgICAgICAgICAgdmFyIG9ianNQb29sID0gb2JqLnN0YXJ0c1dpdGgoImdfIikgPyBfdGhpcy5jb21tb25PYmpzIDogX3RoaXMub2JqczsKICAgICAgICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7CiAgICAgICAgICAgICAgICBvYmpzUG9vbC5nZXQob2JqLCByZXNvbHZlKTsKICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgX3RoaXMuY3VycmVudC5kZXBlbmRlbmNpZXMucHVzaChwcm9taXNlKTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgICAgX2xvb3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgIF9pdGVyYXRvcjIuZShlcnIpOwogICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgX2l0ZXJhdG9yMi5mKCk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwodGhpcy5jdXJyZW50LmRlcGVuZGVuY2llcyk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAidHJhbnNmb3JtIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHRyYW5zZm9ybShhLCBiLCBjLCBkLCBlLCBmKSB7CiAgICAgICAgdmFyIHRyYW5zZm9ybU1hdHJpeCA9IFthLCBiLCBjLCBkLCBlLCBmXTsKICAgICAgICB0aGlzLnRyYW5zZm9ybU1hdHJpeCA9IF91dGlsLlV0aWwudHJhbnNmb3JtKHRoaXMudHJhbnNmb3JtTWF0cml4LCB0cmFuc2Zvcm1NYXRyaXgpOwogICAgICAgIHRoaXMudGdycCA9IG51bGw7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiZ2V0U1ZHIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNWRyhvcGVyYXRvckxpc3QsIHZpZXdwb3J0KSB7CiAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICAgIHRoaXMudmlld3BvcnQgPSB2aWV3cG9ydDsKCiAgICAgICAgdmFyIHN2Z0VsZW1lbnQgPSB0aGlzLl9pbml0aWFsaXplKHZpZXdwb3J0KTsKCiAgICAgICAgcmV0dXJuIHRoaXMubG9hZERlcGVuZGVuY2llcyhvcGVyYXRvckxpc3QpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgX3RoaXMyLnRyYW5zZm9ybU1hdHJpeCA9IF91dGlsLklERU5USVRZX01BVFJJWDsKCiAgICAgICAgICBfdGhpczIuZXhlY3V0ZU9wVHJlZShfdGhpczIuY29udmVydE9wTGlzdChvcGVyYXRvckxpc3QpKTsKCiAgICAgICAgICByZXR1cm4gc3ZnRWxlbWVudDsKICAgICAgICB9KTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJjb252ZXJ0T3BMaXN0IiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnZlcnRPcExpc3Qob3BlcmF0b3JMaXN0KSB7CiAgICAgICAgdmFyIG9wZXJhdG9ySWRNYXBwaW5nID0gdGhpcy5fb3BlcmF0b3JJZE1hcHBpbmc7CiAgICAgICAgdmFyIGFyZ3NBcnJheSA9IG9wZXJhdG9yTGlzdC5hcmdzQXJyYXk7CiAgICAgICAgdmFyIGZuQXJyYXkgPSBvcGVyYXRvckxpc3QuZm5BcnJheTsKICAgICAgICB2YXIgb3BMaXN0ID0gW107CgogICAgICAgIGZvciAodmFyIGkgPSAwLCBpaSA9IGZuQXJyYXkubGVuZ3RoOyBpIDwgaWk7IGkrKykgewogICAgICAgICAgdmFyIGZuSWQgPSBmbkFycmF5W2ldOwogICAgICAgICAgb3BMaXN0LnB1c2goewogICAgICAgICAgICBmbklkOiBmbklkLAogICAgICAgICAgICBmbjogb3BlcmF0b3JJZE1hcHBpbmdbZm5JZF0sCiAgICAgICAgICAgIGFyZ3M6IGFyZ3NBcnJheVtpXQogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gb3BMaXN0VG9UcmVlKG9wTGlzdCk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiZXhlY3V0ZU9wVHJlZSIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBleGVjdXRlT3BUcmVlKG9wVHJlZSkgewogICAgICAgIHZhciBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIob3BUcmVlKSwKICAgICAgICAgICAgX3N0ZXAzOwoKICAgICAgICB0cnkgewogICAgICAgICAgZm9yIChfaXRlcmF0b3IzLnMoKTsgIShfc3RlcDMgPSBfaXRlcmF0b3IzLm4oKSkuZG9uZTspIHsKICAgICAgICAgICAgdmFyIG9wVHJlZUVsZW1lbnQgPSBfc3RlcDMudmFsdWU7CiAgICAgICAgICAgIHZhciBmbiA9IG9wVHJlZUVsZW1lbnQuZm47CiAgICAgICAgICAgIHZhciBmbklkID0gb3BUcmVlRWxlbWVudC5mbklkOwogICAgICAgICAgICB2YXIgYXJncyA9IG9wVHJlZUVsZW1lbnQuYXJnczsKCiAgICAgICAgICAgIHN3aXRjaCAoZm5JZCB8IDApIHsKICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5iZWdpblRleHQ6CiAgICAgICAgICAgICAgICB0aGlzLmJlZ2luVGV4dCgpOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmRlcGVuZGVuY3k6CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0TGVhZGluZzoKICAgICAgICAgICAgICAgIHRoaXMuc2V0TGVhZGluZyhhcmdzKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5zZXRMZWFkaW5nTW92ZVRleHQ6CiAgICAgICAgICAgICAgICB0aGlzLnNldExlYWRpbmdNb3ZlVGV4dChhcmdzWzBdLCBhcmdzWzFdKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5zZXRGb250OgogICAgICAgICAgICAgICAgdGhpcy5zZXRGb250KGFyZ3MpOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNob3dUZXh0OgogICAgICAgICAgICAgICAgdGhpcy5zaG93VGV4dChhcmdzWzBdKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5zaG93U3BhY2VkVGV4dDoKICAgICAgICAgICAgICAgIHRoaXMuc2hvd1RleHQoYXJnc1swXSk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuZW5kVGV4dDoKICAgICAgICAgICAgICAgIHRoaXMuZW5kVGV4dCgpOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLm1vdmVUZXh0OgogICAgICAgICAgICAgICAgdGhpcy5tb3ZlVGV4dChhcmdzWzBdLCBhcmdzWzFdKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5zZXRDaGFyU3BhY2luZzoKICAgICAgICAgICAgICAgIHRoaXMuc2V0Q2hhclNwYWNpbmcoYXJnc1swXSk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0V29yZFNwYWNpbmc6CiAgICAgICAgICAgICAgICB0aGlzLnNldFdvcmRTcGFjaW5nKGFyZ3NbMF0pOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldEhTY2FsZToKICAgICAgICAgICAgICAgIHRoaXMuc2V0SFNjYWxlKGFyZ3NbMF0pOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldFRleHRNYXRyaXg6CiAgICAgICAgICAgICAgICB0aGlzLnNldFRleHRNYXRyaXgoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSwgYXJnc1s0XSwgYXJnc1s1XSk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0VGV4dFJpc2U6CiAgICAgICAgICAgICAgICB0aGlzLnNldFRleHRSaXNlKGFyZ3NbMF0pOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldFRleHRSZW5kZXJpbmdNb2RlOgogICAgICAgICAgICAgICAgdGhpcy5zZXRUZXh0UmVuZGVyaW5nTW9kZShhcmdzWzBdKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5zZXRMaW5lV2lkdGg6CiAgICAgICAgICAgICAgICB0aGlzLnNldExpbmVXaWR0aChhcmdzWzBdKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5zZXRMaW5lSm9pbjoKICAgICAgICAgICAgICAgIHRoaXMuc2V0TGluZUpvaW4oYXJnc1swXSk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuc2V0TGluZUNhcDoKICAgICAgICAgICAgICAgIHRoaXMuc2V0TGluZUNhcChhcmdzWzBdKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5zZXRNaXRlckxpbWl0OgogICAgICAgICAgICAgICAgdGhpcy5zZXRNaXRlckxpbWl0KGFyZ3NbMF0pOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldEZpbGxSR0JDb2xvcjoKICAgICAgICAgICAgICAgIHRoaXMuc2V0RmlsbFJHQkNvbG9yKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldFN0cm9rZVJHQkNvbG9yOgogICAgICAgICAgICAgICAgdGhpcy5zZXRTdHJva2VSR0JDb2xvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5zZXRTdHJva2VDb2xvck46CiAgICAgICAgICAgICAgICB0aGlzLnNldFN0cm9rZUNvbG9yTihhcmdzKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5zZXRGaWxsQ29sb3JOOgogICAgICAgICAgICAgICAgdGhpcy5zZXRGaWxsQ29sb3JOKGFyZ3MpOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNoYWRpbmdGaWxsOgogICAgICAgICAgICAgICAgdGhpcy5zaGFkaW5nRmlsbChhcmdzWzBdKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5zZXREYXNoOgogICAgICAgICAgICAgICAgdGhpcy5zZXREYXNoKGFyZ3NbMF0sIGFyZ3NbMV0pOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldFJlbmRlcmluZ0ludGVudDoKICAgICAgICAgICAgICAgIHRoaXMuc2V0UmVuZGVyaW5nSW50ZW50KGFyZ3NbMF0pOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnNldEZsYXRuZXNzOgogICAgICAgICAgICAgICAgdGhpcy5zZXRGbGF0bmVzcyhhcmdzWzBdKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5zZXRHU3RhdGU6CiAgICAgICAgICAgICAgICB0aGlzLnNldEdTdGF0ZShhcmdzWzBdKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5maWxsOgogICAgICAgICAgICAgICAgdGhpcy5maWxsKCk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuZW9GaWxsOgogICAgICAgICAgICAgICAgdGhpcy5lb0ZpbGwoKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5zdHJva2U6CiAgICAgICAgICAgICAgICB0aGlzLnN0cm9rZSgpOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmZpbGxTdHJva2U6CiAgICAgICAgICAgICAgICB0aGlzLmZpbGxTdHJva2UoKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5lb0ZpbGxTdHJva2U6CiAgICAgICAgICAgICAgICB0aGlzLmVvRmlsbFN0cm9rZSgpOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmNsaXA6CiAgICAgICAgICAgICAgICB0aGlzLmNsaXAoIm5vbnplcm8iKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5lb0NsaXA6CiAgICAgICAgICAgICAgICB0aGlzLmNsaXAoImV2ZW5vZGQiKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5wYWludFNvbGlkQ29sb3JJbWFnZU1hc2s6CiAgICAgICAgICAgICAgICB0aGlzLnBhaW50U29saWRDb2xvckltYWdlTWFzaygpOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnBhaW50SW1hZ2VYT2JqZWN0OgogICAgICAgICAgICAgICAgdGhpcy5wYWludEltYWdlWE9iamVjdChhcmdzWzBdKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5wYWludElubGluZUltYWdlWE9iamVjdDoKICAgICAgICAgICAgICAgIHRoaXMucGFpbnRJbmxpbmVJbWFnZVhPYmplY3QoYXJnc1swXSk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMucGFpbnRJbWFnZU1hc2tYT2JqZWN0OgogICAgICAgICAgICAgICAgdGhpcy5wYWludEltYWdlTWFza1hPYmplY3QoYXJnc1swXSk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMucGFpbnRGb3JtWE9iamVjdEJlZ2luOgogICAgICAgICAgICAgICAgdGhpcy5wYWludEZvcm1YT2JqZWN0QmVnaW4oYXJnc1swXSwgYXJnc1sxXSk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMucGFpbnRGb3JtWE9iamVjdEVuZDoKICAgICAgICAgICAgICAgIHRoaXMucGFpbnRGb3JtWE9iamVjdEVuZCgpOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmNsb3NlUGF0aDoKICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VQYXRoKCk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY2xvc2VTdHJva2U6CiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlU3Ryb2tlKCk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY2xvc2VGaWxsU3Ryb2tlOgogICAgICAgICAgICAgICAgdGhpcy5jbG9zZUZpbGxTdHJva2UoKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5jbG9zZUVPRmlsbFN0cm9rZToKICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VFT0ZpbGxTdHJva2UoKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5uZXh0TGluZToKICAgICAgICAgICAgICAgIHRoaXMubmV4dExpbmUoKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy50cmFuc2Zvcm06CiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybShhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5jb25zdHJ1Y3RQYXRoOgogICAgICAgICAgICAgICAgdGhpcy5jb25zdHJ1Y3RQYXRoKGFyZ3NbMF0sIGFyZ3NbMV0pOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmVuZFBhdGg6CiAgICAgICAgICAgICAgICB0aGlzLmVuZFBhdGgoKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDkyOgogICAgICAgICAgICAgICAgdGhpcy5ncm91cChvcFRyZWVFbGVtZW50Lml0ZW1zKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgKDAsIF91dGlsLndhcm4pKCJVbmltcGxlbWVudGVkIG9wZXJhdG9yICIuY29uY2F0KGZuKSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgX2l0ZXJhdG9yMy5lKGVycik7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIF9pdGVyYXRvcjMuZigpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJzZXRXb3JkU3BhY2luZyIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRXb3JkU3BhY2luZyh3b3JkU3BhY2luZykgewogICAgICAgIHRoaXMuY3VycmVudC53b3JkU3BhY2luZyA9IHdvcmRTcGFjaW5nOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInNldENoYXJTcGFjaW5nIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldENoYXJTcGFjaW5nKGNoYXJTcGFjaW5nKSB7CiAgICAgICAgdGhpcy5jdXJyZW50LmNoYXJTcGFjaW5nID0gY2hhclNwYWNpbmc7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAibmV4dExpbmUiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gbmV4dExpbmUoKSB7CiAgICAgICAgdGhpcy5tb3ZlVGV4dCgwLCB0aGlzLmN1cnJlbnQubGVhZGluZyk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAic2V0VGV4dE1hdHJpeCIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRUZXh0TWF0cml4KGEsIGIsIGMsIGQsIGUsIGYpIHsKICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDsKICAgICAgICBjdXJyZW50LnRleHRNYXRyaXggPSBjdXJyZW50LmxpbmVNYXRyaXggPSBbYSwgYiwgYywgZCwgZSwgZl07CiAgICAgICAgY3VycmVudC50ZXh0TWF0cml4U2NhbGUgPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7CiAgICAgICAgY3VycmVudC54ID0gY3VycmVudC5saW5lWCA9IDA7CiAgICAgICAgY3VycmVudC55ID0gY3VycmVudC5saW5lWSA9IDA7CiAgICAgICAgY3VycmVudC54Y29vcmRzID0gW107CiAgICAgICAgY3VycmVudC55Y29vcmRzID0gW107CiAgICAgICAgY3VycmVudC50c3BhbiA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KCJzdmc6dHNwYW4iKTsKICAgICAgICBjdXJyZW50LnRzcGFuLnNldEF0dHJpYnV0ZU5TKG51bGwsICJmb250LWZhbWlseSIsIGN1cnJlbnQuZm9udEZhbWlseSk7CiAgICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCAiZm9udC1zaXplIiwgIiIuY29uY2F0KHBmKGN1cnJlbnQuZm9udFNpemUpLCAicHgiKSk7CiAgICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCAieSIsIHBmKC1jdXJyZW50LnkpKTsKICAgICAgICBjdXJyZW50LnR4dEVsZW1lbnQgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudCgic3ZnOnRleHQiKTsKICAgICAgICBjdXJyZW50LnR4dEVsZW1lbnQuYXBwZW5kQ2hpbGQoY3VycmVudC50c3Bhbik7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiYmVnaW5UZXh0IiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJlZ2luVGV4dCgpIHsKICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDsKICAgICAgICBjdXJyZW50LnggPSBjdXJyZW50LmxpbmVYID0gMDsKICAgICAgICBjdXJyZW50LnkgPSBjdXJyZW50LmxpbmVZID0gMDsKICAgICAgICBjdXJyZW50LnRleHRNYXRyaXggPSBfdXRpbC5JREVOVElUWV9NQVRSSVg7CiAgICAgICAgY3VycmVudC5saW5lTWF0cml4ID0gX3V0aWwuSURFTlRJVFlfTUFUUklYOwogICAgICAgIGN1cnJlbnQudGV4dE1hdHJpeFNjYWxlID0gMTsKICAgICAgICBjdXJyZW50LnRzcGFuID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoInN2Zzp0c3BhbiIpOwogICAgICAgIGN1cnJlbnQudHh0RWxlbWVudCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KCJzdmc6dGV4dCIpOwogICAgICAgIGN1cnJlbnQudHh0Z3JwID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoInN2ZzpnIik7CiAgICAgICAgY3VycmVudC54Y29vcmRzID0gW107CiAgICAgICAgY3VycmVudC55Y29vcmRzID0gW107CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAibW92ZVRleHQiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gbW92ZVRleHQoeCwgeSkgewogICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5jdXJyZW50OwogICAgICAgIGN1cnJlbnQueCA9IGN1cnJlbnQubGluZVggKz0geDsKICAgICAgICBjdXJyZW50LnkgPSBjdXJyZW50LmxpbmVZICs9IHk7CiAgICAgICAgY3VycmVudC54Y29vcmRzID0gW107CiAgICAgICAgY3VycmVudC55Y29vcmRzID0gW107CiAgICAgICAgY3VycmVudC50c3BhbiA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KCJzdmc6dHNwYW4iKTsKICAgICAgICBjdXJyZW50LnRzcGFuLnNldEF0dHJpYnV0ZU5TKG51bGwsICJmb250LWZhbWlseSIsIGN1cnJlbnQuZm9udEZhbWlseSk7CiAgICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCAiZm9udC1zaXplIiwgIiIuY29uY2F0KHBmKGN1cnJlbnQuZm9udFNpemUpLCAicHgiKSk7CiAgICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCAieSIsIHBmKC1jdXJyZW50LnkpKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJzaG93VGV4dCIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzaG93VGV4dChnbHlwaHMpIHsKICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDsKICAgICAgICB2YXIgZm9udCA9IGN1cnJlbnQuZm9udDsKICAgICAgICB2YXIgZm9udFNpemUgPSBjdXJyZW50LmZvbnRTaXplOwoKICAgICAgICBpZiAoZm9udFNpemUgPT09IDApIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHZhciBmb250U2l6ZVNjYWxlID0gY3VycmVudC5mb250U2l6ZVNjYWxlOwogICAgICAgIHZhciBjaGFyU3BhY2luZyA9IGN1cnJlbnQuY2hhclNwYWNpbmc7CiAgICAgICAgdmFyIHdvcmRTcGFjaW5nID0gY3VycmVudC53b3JkU3BhY2luZzsKICAgICAgICB2YXIgZm9udERpcmVjdGlvbiA9IGN1cnJlbnQuZm9udERpcmVjdGlvbjsKICAgICAgICB2YXIgdGV4dEhTY2FsZSA9IGN1cnJlbnQudGV4dEhTY2FsZSAqIGZvbnREaXJlY3Rpb247CiAgICAgICAgdmFyIHZlcnRpY2FsID0gZm9udC52ZXJ0aWNhbDsKICAgICAgICB2YXIgc3BhY2luZ0RpciA9IHZlcnRpY2FsID8gMSA6IC0xOwogICAgICAgIHZhciBkZWZhdWx0Vk1ldHJpY3MgPSBmb250LmRlZmF1bHRWTWV0cmljczsKICAgICAgICB2YXIgd2lkdGhBZHZhbmNlU2NhbGUgPSBmb250U2l6ZSAqIGN1cnJlbnQuZm9udE1hdHJpeFswXTsKICAgICAgICB2YXIgeCA9IDA7CgogICAgICAgIHZhciBfaXRlcmF0b3I0ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZ2x5cGhzKSwKICAgICAgICAgICAgX3N0ZXA0OwoKICAgICAgICB0cnkgewogICAgICAgICAgZm9yIChfaXRlcmF0b3I0LnMoKTsgIShfc3RlcDQgPSBfaXRlcmF0b3I0Lm4oKSkuZG9uZTspIHsKICAgICAgICAgICAgdmFyIGdseXBoID0gX3N0ZXA0LnZhbHVlOwoKICAgICAgICAgICAgaWYgKGdseXBoID09PSBudWxsKSB7CiAgICAgICAgICAgICAgeCArPSBmb250RGlyZWN0aW9uICogd29yZFNwYWNpbmc7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoKDAsIF91dGlsLmlzTnVtKShnbHlwaCkpIHsKICAgICAgICAgICAgICB4ICs9IHNwYWNpbmdEaXIgKiBnbHlwaCAqIGZvbnRTaXplIC8gMTAwMDsKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIHNwYWNpbmcgPSAoZ2x5cGguaXNTcGFjZSA/IHdvcmRTcGFjaW5nIDogMCkgKyBjaGFyU3BhY2luZzsKICAgICAgICAgICAgdmFyIGNoYXJhY3RlciA9IGdseXBoLmZvbnRDaGFyOwogICAgICAgICAgICB2YXIgc2NhbGVkWCA9IHZvaWQgMCwKICAgICAgICAgICAgICAgIHNjYWxlZFkgPSB2b2lkIDA7CiAgICAgICAgICAgIHZhciB3aWR0aCA9IGdseXBoLndpZHRoOwoKICAgICAgICAgICAgaWYgKHZlcnRpY2FsKSB7CiAgICAgICAgICAgICAgdmFyIHZ4ID0gdm9pZCAwOwogICAgICAgICAgICAgIHZhciB2bWV0cmljID0gZ2x5cGgudm1ldHJpYyB8fCBkZWZhdWx0Vk1ldHJpY3M7CiAgICAgICAgICAgICAgdnggPSBnbHlwaC52bWV0cmljID8gdm1ldHJpY1sxXSA6IHdpZHRoICogMC41OwogICAgICAgICAgICAgIHZ4ID0gLXZ4ICogd2lkdGhBZHZhbmNlU2NhbGU7CiAgICAgICAgICAgICAgdmFyIHZ5ID0gdm1ldHJpY1syXSAqIHdpZHRoQWR2YW5jZVNjYWxlOwogICAgICAgICAgICAgIHdpZHRoID0gdm1ldHJpYyA/IC12bWV0cmljWzBdIDogd2lkdGg7CiAgICAgICAgICAgICAgc2NhbGVkWCA9IHZ4IC8gZm9udFNpemVTY2FsZTsKICAgICAgICAgICAgICBzY2FsZWRZID0gKHggKyB2eSkgLyBmb250U2l6ZVNjYWxlOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIHNjYWxlZFggPSB4IC8gZm9udFNpemVTY2FsZTsKICAgICAgICAgICAgICBzY2FsZWRZID0gMDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKGdseXBoLmlzSW5Gb250IHx8IGZvbnQubWlzc2luZ0ZpbGUpIHsKICAgICAgICAgICAgICBjdXJyZW50Lnhjb29yZHMucHVzaChjdXJyZW50LnggKyBzY2FsZWRYKTsKCiAgICAgICAgICAgICAgaWYgKHZlcnRpY2FsKSB7CiAgICAgICAgICAgICAgICBjdXJyZW50Lnljb29yZHMucHVzaCgtY3VycmVudC55ICsgc2NhbGVkWSk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjdXJyZW50LnRzcGFuLnRleHRDb250ZW50ICs9IGNoYXJhY3RlcjsKICAgICAgICAgICAgfSBlbHNlIHt9CgogICAgICAgICAgICB2YXIgY2hhcldpZHRoID0gdm9pZCAwOwoKICAgICAgICAgICAgaWYgKHZlcnRpY2FsKSB7CiAgICAgICAgICAgICAgY2hhcldpZHRoID0gd2lkdGggKiB3aWR0aEFkdmFuY2VTY2FsZSAtIHNwYWNpbmcgKiBmb250RGlyZWN0aW9uOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIGNoYXJXaWR0aCA9IHdpZHRoICogd2lkdGhBZHZhbmNlU2NhbGUgKyBzcGFjaW5nICogZm9udERpcmVjdGlvbjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgeCArPSBjaGFyV2lkdGg7CiAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICBfaXRlcmF0b3I0LmUoZXJyKTsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgX2l0ZXJhdG9yNC5mKCk7CiAgICAgICAgfQoKICAgICAgICBjdXJyZW50LnRzcGFuLnNldEF0dHJpYnV0ZU5TKG51bGwsICJ4IiwgY3VycmVudC54Y29vcmRzLm1hcChwZikuam9pbigiICIpKTsKCiAgICAgICAgaWYgKHZlcnRpY2FsKSB7CiAgICAgICAgICBjdXJyZW50LnRzcGFuLnNldEF0dHJpYnV0ZU5TKG51bGwsICJ5IiwgY3VycmVudC55Y29vcmRzLm1hcChwZikuam9pbigiICIpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCAieSIsIHBmKC1jdXJyZW50LnkpKTsKICAgICAgICB9CgogICAgICAgIGlmICh2ZXJ0aWNhbCkgewogICAgICAgICAgY3VycmVudC55IC09IHg7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGN1cnJlbnQueCArPSB4ICogdGV4dEhTY2FsZTsKICAgICAgICB9CgogICAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgImZvbnQtZmFtaWx5IiwgY3VycmVudC5mb250RmFtaWx5KTsKICAgICAgICBjdXJyZW50LnRzcGFuLnNldEF0dHJpYnV0ZU5TKG51bGwsICJmb250LXNpemUiLCAiIi5jb25jYXQocGYoY3VycmVudC5mb250U2l6ZSksICJweCIpKTsKCiAgICAgICAgaWYgKGN1cnJlbnQuZm9udFN0eWxlICE9PSBTVkdfREVGQVVMVFMuZm9udFN0eWxlKSB7CiAgICAgICAgICBjdXJyZW50LnRzcGFuLnNldEF0dHJpYnV0ZU5TKG51bGwsICJmb250LXN0eWxlIiwgY3VycmVudC5mb250U3R5bGUpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGN1cnJlbnQuZm9udFdlaWdodCAhPT0gU1ZHX0RFRkFVTFRTLmZvbnRXZWlnaHQpIHsKICAgICAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgImZvbnQtd2VpZ2h0IiwgY3VycmVudC5mb250V2VpZ2h0KTsKICAgICAgICB9CgogICAgICAgIHZhciBmaWxsU3Ryb2tlTW9kZSA9IGN1cnJlbnQudGV4dFJlbmRlcmluZ01vZGUgJiBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5GSUxMX1NUUk9LRV9NQVNLOwoKICAgICAgICBpZiAoZmlsbFN0cm9rZU1vZGUgPT09IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTEwgfHwgZmlsbFN0cm9rZU1vZGUgPT09IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTExfU1RST0tFKSB7CiAgICAgICAgICBpZiAoY3VycmVudC5maWxsQ29sb3IgIT09IFNWR19ERUZBVUxUUy5maWxsQ29sb3IpIHsKICAgICAgICAgICAgY3VycmVudC50c3Bhbi5zZXRBdHRyaWJ1dGVOUyhudWxsLCAiZmlsbCIsIGN1cnJlbnQuZmlsbENvbG9yKTsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAoY3VycmVudC5maWxsQWxwaGEgPCAxKSB7CiAgICAgICAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgImZpbGwtb3BhY2l0eSIsIGN1cnJlbnQuZmlsbEFscGhhKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnQudGV4dFJlbmRlcmluZ01vZGUgPT09IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkFERF9UT19QQVRIKSB7CiAgICAgICAgICBjdXJyZW50LnRzcGFuLnNldEF0dHJpYnV0ZU5TKG51bGwsICJmaWxsIiwgInRyYW5zcGFyZW50Iik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGN1cnJlbnQudHNwYW4uc2V0QXR0cmlidXRlTlMobnVsbCwgImZpbGwiLCAibm9uZSIpOwogICAgICAgIH0KCiAgICAgICAgaWYgKGZpbGxTdHJva2VNb2RlID09PSBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5TVFJPS0UgfHwgZmlsbFN0cm9rZU1vZGUgPT09IF91dGlsLlRleHRSZW5kZXJpbmdNb2RlLkZJTExfU1RST0tFKSB7CiAgICAgICAgICB2YXIgbGluZVdpZHRoU2NhbGUgPSAxIC8gKGN1cnJlbnQudGV4dE1hdHJpeFNjYWxlIHx8IDEpOwoKICAgICAgICAgIHRoaXMuX3NldFN0cm9rZUF0dHJpYnV0ZXMoY3VycmVudC50c3BhbiwgbGluZVdpZHRoU2NhbGUpOwogICAgICAgIH0KCiAgICAgICAgdmFyIHRleHRNYXRyaXggPSBjdXJyZW50LnRleHRNYXRyaXg7CgogICAgICAgIGlmIChjdXJyZW50LnRleHRSaXNlICE9PSAwKSB7CiAgICAgICAgICB0ZXh0TWF0cml4ID0gdGV4dE1hdHJpeC5zbGljZSgpOwogICAgICAgICAgdGV4dE1hdHJpeFs1XSArPSBjdXJyZW50LnRleHRSaXNlOwogICAgICAgIH0KCiAgICAgICAgY3VycmVudC50eHRFbGVtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsICJ0cmFuc2Zvcm0iLCAiIi5jb25jYXQocG0odGV4dE1hdHJpeCksICIgc2NhbGUoIikuY29uY2F0KHBmKHRleHRIU2NhbGUpLCAiLCAtMSkiKSk7CiAgICAgICAgY3VycmVudC50eHRFbGVtZW50LnNldEF0dHJpYnV0ZU5TKFhNTF9OUywgInhtbDpzcGFjZSIsICJwcmVzZXJ2ZSIpOwogICAgICAgIGN1cnJlbnQudHh0RWxlbWVudC5hcHBlbmRDaGlsZChjdXJyZW50LnRzcGFuKTsKICAgICAgICBjdXJyZW50LnR4dGdycC5hcHBlbmRDaGlsZChjdXJyZW50LnR4dEVsZW1lbnQpOwoKICAgICAgICB0aGlzLl9lbnN1cmVUcmFuc2Zvcm1Hcm91cCgpLmFwcGVuZENoaWxkKGN1cnJlbnQudHh0RWxlbWVudCk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAic2V0TGVhZGluZ01vdmVUZXh0IiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldExlYWRpbmdNb3ZlVGV4dCh4LCB5KSB7CiAgICAgICAgdGhpcy5zZXRMZWFkaW5nKC15KTsKICAgICAgICB0aGlzLm1vdmVUZXh0KHgsIHkpOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogImFkZEZvbnRTdHlsZSIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRGb250U3R5bGUoZm9udE9iaikgewogICAgICAgIGlmICghZm9udE9iai5kYXRhKSB7CiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoImFkZEZvbnRTdHlsZTogTm8gZm9udCBkYXRhIGF2YWlsYWJsZSwgIiArICdlbnN1cmUgdGhhdCB0aGUgImZvbnRFeHRyYVByb3BlcnRpZXMiIEFQSSBwYXJhbWV0ZXIgaXMgc2V0LicpOwogICAgICAgIH0KCiAgICAgICAgaWYgKCF0aGlzLmNzc1N0eWxlKSB7CiAgICAgICAgICB0aGlzLmNzc1N0eWxlID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoInN2ZzpzdHlsZSIpOwogICAgICAgICAgdGhpcy5jc3NTdHlsZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAidHlwZSIsICJ0ZXh0L2NzcyIpOwogICAgICAgICAgdGhpcy5kZWZzLmFwcGVuZENoaWxkKHRoaXMuY3NzU3R5bGUpOwogICAgICAgIH0KCiAgICAgICAgdmFyIHVybCA9ICgwLCBfdXRpbC5jcmVhdGVPYmplY3RVUkwpKGZvbnRPYmouZGF0YSwgZm9udE9iai5taW1ldHlwZSwgdGhpcy5mb3JjZURhdGFTY2hlbWEpOwogICAgICAgIHRoaXMuY3NzU3R5bGUudGV4dENvbnRlbnQgKz0gIkBmb250LWZhY2UgeyBmb250LWZhbWlseTogXCIiLmNvbmNhdChmb250T2JqLmxvYWRlZE5hbWUsICJcIjsiKSArICIgc3JjOiB1cmwoIi5jb25jYXQodXJsLCAiKTsgfVxuIik7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAic2V0Rm9udCIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRGb250KGRldGFpbHMpIHsKICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDsKICAgICAgICB2YXIgZm9udE9iaiA9IHRoaXMuY29tbW9uT2Jqcy5nZXQoZGV0YWlsc1swXSk7CiAgICAgICAgdmFyIHNpemUgPSBkZXRhaWxzWzFdOwogICAgICAgIGN1cnJlbnQuZm9udCA9IGZvbnRPYmo7CgogICAgICAgIGlmICh0aGlzLmVtYmVkRm9udHMgJiYgIWZvbnRPYmoubWlzc2luZ0ZpbGUgJiYgIXRoaXMuZW1iZWRkZWRGb250c1tmb250T2JqLmxvYWRlZE5hbWVdKSB7CiAgICAgICAgICB0aGlzLmFkZEZvbnRTdHlsZShmb250T2JqKTsKICAgICAgICAgIHRoaXMuZW1iZWRkZWRGb250c1tmb250T2JqLmxvYWRlZE5hbWVdID0gZm9udE9iajsKICAgICAgICB9CgogICAgICAgIGN1cnJlbnQuZm9udE1hdHJpeCA9IGZvbnRPYmouZm9udE1hdHJpeCA/IGZvbnRPYmouZm9udE1hdHJpeCA6IF91dGlsLkZPTlRfSURFTlRJVFlfTUFUUklYOwogICAgICAgIHZhciBib2xkID0gIm5vcm1hbCI7CgogICAgICAgIGlmIChmb250T2JqLmJsYWNrKSB7CiAgICAgICAgICBib2xkID0gIjkwMCI7CiAgICAgICAgfSBlbHNlIGlmIChmb250T2JqLmJvbGQpIHsKICAgICAgICAgIGJvbGQgPSAiYm9sZCI7CiAgICAgICAgfQoKICAgICAgICB2YXIgaXRhbGljID0gZm9udE9iai5pdGFsaWMgPyAiaXRhbGljIiA6ICJub3JtYWwiOwoKICAgICAgICBpZiAoc2l6ZSA8IDApIHsKICAgICAgICAgIHNpemUgPSAtc2l6ZTsKICAgICAgICAgIGN1cnJlbnQuZm9udERpcmVjdGlvbiA9IC0xOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBjdXJyZW50LmZvbnREaXJlY3Rpb24gPSAxOwogICAgICAgIH0KCiAgICAgICAgY3VycmVudC5mb250U2l6ZSA9IHNpemU7CiAgICAgICAgY3VycmVudC5mb250RmFtaWx5ID0gZm9udE9iai5sb2FkZWROYW1lOwogICAgICAgIGN1cnJlbnQuZm9udFdlaWdodCA9IGJvbGQ7CiAgICAgICAgY3VycmVudC5mb250U3R5bGUgPSBpdGFsaWM7CiAgICAgICAgY3VycmVudC50c3BhbiA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KCJzdmc6dHNwYW4iKTsKICAgICAgICBjdXJyZW50LnRzcGFuLnNldEF0dHJpYnV0ZU5TKG51bGwsICJ5IiwgcGYoLWN1cnJlbnQueSkpOwogICAgICAgIGN1cnJlbnQueGNvb3JkcyA9IFtdOwogICAgICAgIGN1cnJlbnQueWNvb3JkcyA9IFtdOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogImVuZFRleHQiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gZW5kVGV4dCgpIHsKICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDsKCiAgICAgICAgaWYgKGN1cnJlbnQudGV4dFJlbmRlcmluZ01vZGUgJiBfdXRpbC5UZXh0UmVuZGVyaW5nTW9kZS5BRERfVE9fUEFUSF9GTEFHICYmIGN1cnJlbnQudHh0RWxlbWVudCAmJiBjdXJyZW50LnR4dEVsZW1lbnQuaGFzQ2hpbGROb2RlcygpKSB7CiAgICAgICAgICBjdXJyZW50LmVsZW1lbnQgPSBjdXJyZW50LnR4dEVsZW1lbnQ7CiAgICAgICAgICB0aGlzLmNsaXAoIm5vbnplcm8iKTsKICAgICAgICAgIHRoaXMuZW5kUGF0aCgpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJzZXRMaW5lV2lkdGgiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TGluZVdpZHRoKHdpZHRoKSB7CiAgICAgICAgaWYgKHdpZHRoID4gMCkgewogICAgICAgICAgdGhpcy5jdXJyZW50LmxpbmVXaWR0aCA9IHdpZHRoOwogICAgICAgIH0KICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJzZXRMaW5lQ2FwIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldExpbmVDYXAoc3R5bGUpIHsKICAgICAgICB0aGlzLmN1cnJlbnQubGluZUNhcCA9IExJTkVfQ0FQX1NUWUxFU1tzdHlsZV07CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAic2V0TGluZUpvaW4iLAogICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TGluZUpvaW4oc3R5bGUpIHsKICAgICAgICB0aGlzLmN1cnJlbnQubGluZUpvaW4gPSBMSU5FX0pPSU5fU1RZTEVTW3N0eWxlXTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJzZXRNaXRlckxpbWl0IiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldE1pdGVyTGltaXQobGltaXQpIHsKICAgICAgICB0aGlzLmN1cnJlbnQubWl0ZXJMaW1pdCA9IGxpbWl0OwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInNldFN0cm9rZUFscGhhIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFN0cm9rZUFscGhhKHN0cm9rZUFscGhhKSB7CiAgICAgICAgdGhpcy5jdXJyZW50LnN0cm9rZUFscGhhID0gc3Ryb2tlQWxwaGE7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAic2V0U3Ryb2tlUkdCQ29sb3IiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0U3Ryb2tlUkdCQ29sb3IociwgZywgYikgewogICAgICAgIHRoaXMuY3VycmVudC5zdHJva2VDb2xvciA9IF91dGlsLlV0aWwubWFrZUNzc1JnYihyLCBnLCBiKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJzZXRGaWxsQWxwaGEiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RmlsbEFscGhhKGZpbGxBbHBoYSkgewogICAgICAgIHRoaXMuY3VycmVudC5maWxsQWxwaGEgPSBmaWxsQWxwaGE7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAic2V0RmlsbFJHQkNvbG9yIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEZpbGxSR0JDb2xvcihyLCBnLCBiKSB7CiAgICAgICAgdGhpcy5jdXJyZW50LmZpbGxDb2xvciA9IF91dGlsLlV0aWwubWFrZUNzc1JnYihyLCBnLCBiKTsKICAgICAgICB0aGlzLmN1cnJlbnQudHNwYW4gPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudCgic3ZnOnRzcGFuIik7CiAgICAgICAgdGhpcy5jdXJyZW50Lnhjb29yZHMgPSBbXTsKICAgICAgICB0aGlzLmN1cnJlbnQueWNvb3JkcyA9IFtdOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInNldFN0cm9rZUNvbG9yTiIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTdHJva2VDb2xvck4oYXJncykgewogICAgICAgIHRoaXMuY3VycmVudC5zdHJva2VDb2xvciA9IHRoaXMuX21ha2VDb2xvck5fUGF0dGVybihhcmdzKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJzZXRGaWxsQ29sb3JOIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEZpbGxDb2xvck4oYXJncykgewogICAgICAgIHRoaXMuY3VycmVudC5maWxsQ29sb3IgPSB0aGlzLl9tYWtlQ29sb3JOX1BhdHRlcm4oYXJncyk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAic2hhZGluZ0ZpbGwiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gc2hhZGluZ0ZpbGwoYXJncykgewogICAgICAgIHZhciB3aWR0aCA9IHRoaXMudmlld3BvcnQud2lkdGg7CiAgICAgICAgdmFyIGhlaWdodCA9IHRoaXMudmlld3BvcnQuaGVpZ2h0OwoKICAgICAgICB2YXIgaW52ID0gX3V0aWwuVXRpbC5pbnZlcnNlVHJhbnNmb3JtKHRoaXMudHJhbnNmb3JtTWF0cml4KTsKCiAgICAgICAgdmFyIGJsID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbMCwgMF0sIGludik7CgogICAgICAgIHZhciBiciA9IF91dGlsLlV0aWwuYXBwbHlUcmFuc2Zvcm0oWzAsIGhlaWdodF0sIGludik7CgogICAgICAgIHZhciB1bCA9IF91dGlsLlV0aWwuYXBwbHlUcmFuc2Zvcm0oW3dpZHRoLCAwXSwgaW52KTsKCiAgICAgICAgdmFyIHVyID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbd2lkdGgsIGhlaWdodF0sIGludik7CgogICAgICAgIHZhciB4MCA9IE1hdGgubWluKGJsWzBdLCBiclswXSwgdWxbMF0sIHVyWzBdKTsKICAgICAgICB2YXIgeTAgPSBNYXRoLm1pbihibFsxXSwgYnJbMV0sIHVsWzFdLCB1clsxXSk7CiAgICAgICAgdmFyIHgxID0gTWF0aC5tYXgoYmxbMF0sIGJyWzBdLCB1bFswXSwgdXJbMF0pOwogICAgICAgIHZhciB5MSA9IE1hdGgubWF4KGJsWzFdLCBiclsxXSwgdWxbMV0sIHVyWzFdKTsKICAgICAgICB2YXIgcmVjdCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KCJzdmc6cmVjdCIpOwogICAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgIngiLCB4MCk7CiAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAieSIsIHkwKTsKICAgICAgICByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsICJ3aWR0aCIsIHgxIC0geDApOwogICAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgImhlaWdodCIsIHkxIC0geTApOwogICAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgImZpbGwiLCB0aGlzLl9tYWtlU2hhZGluZ1BhdHRlcm4oYXJncykpOwoKICAgICAgICBpZiAodGhpcy5jdXJyZW50LmZpbGxBbHBoYSA8IDEpIHsKICAgICAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgImZpbGwtb3BhY2l0eSIsIHRoaXMuY3VycmVudC5maWxsQWxwaGEpOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5fZW5zdXJlVHJhbnNmb3JtR3JvdXAoKS5hcHBlbmRDaGlsZChyZWN0KTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJfbWFrZUNvbG9yTl9QYXR0ZXJuIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9tYWtlQ29sb3JOX1BhdHRlcm4oYXJncykgewogICAgICAgIGlmIChhcmdzWzBdID09PSAiVGlsaW5nUGF0dGVybiIpIHsKICAgICAgICAgIHJldHVybiB0aGlzLl9tYWtlVGlsaW5nUGF0dGVybihhcmdzKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0aGlzLl9tYWtlU2hhZGluZ1BhdHRlcm4oYXJncyk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiX21ha2VUaWxpbmdQYXR0ZXJuIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9tYWtlVGlsaW5nUGF0dGVybihhcmdzKSB7CiAgICAgICAgdmFyIGNvbG9yID0gYXJnc1sxXTsKICAgICAgICB2YXIgb3BlcmF0b3JMaXN0ID0gYXJnc1syXTsKICAgICAgICB2YXIgbWF0cml4ID0gYXJnc1szXSB8fCBfdXRpbC5JREVOVElUWV9NQVRSSVg7CgogICAgICAgIHZhciBfYXJncyQgPSBfc2xpY2VkVG9BcnJheShhcmdzWzRdLCA0KSwKICAgICAgICAgICAgeDAgPSBfYXJncyRbMF0sCiAgICAgICAgICAgIHkwID0gX2FyZ3MkWzFdLAogICAgICAgICAgICB4MSA9IF9hcmdzJFsyXSwKICAgICAgICAgICAgeTEgPSBfYXJncyRbM107CgogICAgICAgIHZhciB4c3RlcCA9IGFyZ3NbNV07CiAgICAgICAgdmFyIHlzdGVwID0gYXJnc1s2XTsKICAgICAgICB2YXIgcGFpbnRUeXBlID0gYXJnc1s3XTsKICAgICAgICB2YXIgdGlsaW5nSWQgPSAic2hhZGluZyIuY29uY2F0KHNoYWRpbmdDb3VudCsrKTsKCiAgICAgICAgdmFyIF9VdGlsJGFwcGx5VHJhbnNmb3JtID0gX3V0aWwuVXRpbC5hcHBseVRyYW5zZm9ybShbeDAsIHkwXSwgbWF0cml4KSwKICAgICAgICAgICAgX1V0aWwkYXBwbHlUcmFuc2Zvcm0yID0gX3NsaWNlZFRvQXJyYXkoX1V0aWwkYXBwbHlUcmFuc2Zvcm0sIDIpLAogICAgICAgICAgICB0eDAgPSBfVXRpbCRhcHBseVRyYW5zZm9ybTJbMF0sCiAgICAgICAgICAgIHR5MCA9IF9VdGlsJGFwcGx5VHJhbnNmb3JtMlsxXTsKCiAgICAgICAgdmFyIF9VdGlsJGFwcGx5VHJhbnNmb3JtMyA9IF91dGlsLlV0aWwuYXBwbHlUcmFuc2Zvcm0oW3gxLCB5MV0sIG1hdHJpeCksCiAgICAgICAgICAgIF9VdGlsJGFwcGx5VHJhbnNmb3JtNCA9IF9zbGljZWRUb0FycmF5KF9VdGlsJGFwcGx5VHJhbnNmb3JtMywgMiksCiAgICAgICAgICAgIHR4MSA9IF9VdGlsJGFwcGx5VHJhbnNmb3JtNFswXSwKICAgICAgICAgICAgdHkxID0gX1V0aWwkYXBwbHlUcmFuc2Zvcm00WzFdOwoKICAgICAgICB2YXIgX1V0aWwkc2luZ3VsYXJWYWx1ZURlID0gX3V0aWwuVXRpbC5zaW5ndWxhclZhbHVlRGVjb21wb3NlMmRTY2FsZShtYXRyaXgpLAogICAgICAgICAgICBfVXRpbCRzaW5ndWxhclZhbHVlRGUyID0gX3NsaWNlZFRvQXJyYXkoX1V0aWwkc2luZ3VsYXJWYWx1ZURlLCAyKSwKICAgICAgICAgICAgeHNjYWxlID0gX1V0aWwkc2luZ3VsYXJWYWx1ZURlMlswXSwKICAgICAgICAgICAgeXNjYWxlID0gX1V0aWwkc2luZ3VsYXJWYWx1ZURlMlsxXTsKCiAgICAgICAgdmFyIHR4c3RlcCA9IHhzdGVwICogeHNjYWxlOwogICAgICAgIHZhciB0eXN0ZXAgPSB5c3RlcCAqIHlzY2FsZTsKICAgICAgICB2YXIgdGlsaW5nID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoInN2ZzpwYXR0ZXJuIik7CiAgICAgICAgdGlsaW5nLnNldEF0dHJpYnV0ZU5TKG51bGwsICJpZCIsIHRpbGluZ0lkKTsKICAgICAgICB0aWxpbmcuc2V0QXR0cmlidXRlTlMobnVsbCwgInBhdHRlcm5Vbml0cyIsICJ1c2VyU3BhY2VPblVzZSIpOwogICAgICAgIHRpbGluZy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAid2lkdGgiLCB0eHN0ZXApOwogICAgICAgIHRpbGluZy5zZXRBdHRyaWJ1dGVOUyhudWxsLCAiaGVpZ2h0IiwgdHlzdGVwKTsKICAgICAgICB0aWxpbmcuc2V0QXR0cmlidXRlTlMobnVsbCwgIngiLCAiIi5jb25jYXQodHgwKSk7CiAgICAgICAgdGlsaW5nLnNldEF0dHJpYnV0ZU5TKG51bGwsICJ5IiwgIiIuY29uY2F0KHR5MCkpOwogICAgICAgIHZhciBzdmcgPSB0aGlzLnN2ZzsKICAgICAgICB2YXIgdHJhbnNmb3JtTWF0cml4ID0gdGhpcy50cmFuc2Zvcm1NYXRyaXg7CiAgICAgICAgdmFyIGZpbGxDb2xvciA9IHRoaXMuY3VycmVudC5maWxsQ29sb3I7CiAgICAgICAgdmFyIHN0cm9rZUNvbG9yID0gdGhpcy5jdXJyZW50LnN0cm9rZUNvbG9yOwogICAgICAgIHZhciBiYm94ID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZSh0eDEgLSB0eDAsIHR5MSAtIHR5MCk7CiAgICAgICAgdGhpcy5zdmcgPSBiYm94OwogICAgICAgIHRoaXMudHJhbnNmb3JtTWF0cml4ID0gbWF0cml4OwoKICAgICAgICBpZiAocGFpbnRUeXBlID09PSAyKSB7CiAgICAgICAgICB2YXIgY3NzQ29sb3IgPSBfdXRpbC5VdGlsLm1ha2VDc3NSZ2IuYXBwbHkoX3V0aWwuVXRpbCwgX3RvQ29uc3VtYWJsZUFycmF5KGNvbG9yKSk7CgogICAgICAgICAgdGhpcy5jdXJyZW50LmZpbGxDb2xvciA9IGNzc0NvbG9yOwogICAgICAgICAgdGhpcy5jdXJyZW50LnN0cm9rZUNvbG9yID0gY3NzQ29sb3I7CiAgICAgICAgfQoKICAgICAgICB0aGlzLmV4ZWN1dGVPcFRyZWUodGhpcy5jb252ZXJ0T3BMaXN0KG9wZXJhdG9yTGlzdCkpOwogICAgICAgIHRoaXMuc3ZnID0gc3ZnOwogICAgICAgIHRoaXMudHJhbnNmb3JtTWF0cml4ID0gdHJhbnNmb3JtTWF0cml4OwogICAgICAgIHRoaXMuY3VycmVudC5maWxsQ29sb3IgPSBmaWxsQ29sb3I7CiAgICAgICAgdGhpcy5jdXJyZW50LnN0cm9rZUNvbG9yID0gc3Ryb2tlQ29sb3I7CiAgICAgICAgdGlsaW5nLmFwcGVuZENoaWxkKGJib3guY2hpbGROb2Rlc1swXSk7CiAgICAgICAgdGhpcy5kZWZzLmFwcGVuZENoaWxkKHRpbGluZyk7CiAgICAgICAgcmV0dXJuICJ1cmwoIyIuY29uY2F0KHRpbGluZ0lkLCAiKSIpOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogIl9tYWtlU2hhZGluZ1BhdHRlcm4iLAogICAgICB2YWx1ZTogZnVuY3Rpb24gX21ha2VTaGFkaW5nUGF0dGVybihhcmdzKSB7CiAgICAgICAgc3dpdGNoIChhcmdzWzBdKSB7CiAgICAgICAgICBjYXNlICJSYWRpYWxBeGlhbCI6CiAgICAgICAgICAgIHZhciBzaGFkaW5nSWQgPSAic2hhZGluZyIuY29uY2F0KHNoYWRpbmdDb3VudCsrKTsKICAgICAgICAgICAgdmFyIGNvbG9yU3RvcHMgPSBhcmdzWzNdOwogICAgICAgICAgICB2YXIgZ3JhZGllbnQ7CgogICAgICAgICAgICBzd2l0Y2ggKGFyZ3NbMV0pIHsKICAgICAgICAgICAgICBjYXNlICJheGlhbCI6CiAgICAgICAgICAgICAgICB2YXIgcG9pbnQwID0gYXJnc1s0XTsKICAgICAgICAgICAgICAgIHZhciBwb2ludDEgPSBhcmdzWzVdOwogICAgICAgICAgICAgICAgZ3JhZGllbnQgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudCgic3ZnOmxpbmVhckdyYWRpZW50Iik7CiAgICAgICAgICAgICAgICBncmFkaWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAiaWQiLCBzaGFkaW5nSWQpOwogICAgICAgICAgICAgICAgZ3JhZGllbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgImdyYWRpZW50VW5pdHMiLCAidXNlclNwYWNlT25Vc2UiKTsKICAgICAgICAgICAgICAgIGdyYWRpZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsICJ4MSIsIHBvaW50MFswXSk7CiAgICAgICAgICAgICAgICBncmFkaWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAieTEiLCBwb2ludDBbMV0pOwogICAgICAgICAgICAgICAgZ3JhZGllbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgIngyIiwgcG9pbnQxWzBdKTsKICAgICAgICAgICAgICAgIGdyYWRpZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsICJ5MiIsIHBvaW50MVsxXSk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAicmFkaWFsIjoKICAgICAgICAgICAgICAgIHZhciBmb2NhbFBvaW50ID0gYXJnc1s0XTsKICAgICAgICAgICAgICAgIHZhciBjaXJjbGVQb2ludCA9IGFyZ3NbNV07CiAgICAgICAgICAgICAgICB2YXIgZm9jYWxSYWRpdXMgPSBhcmdzWzZdOwogICAgICAgICAgICAgICAgdmFyIGNpcmNsZVJhZGl1cyA9IGFyZ3NbN107CiAgICAgICAgICAgICAgICBncmFkaWVudCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KCJzdmc6cmFkaWFsR3JhZGllbnQiKTsKICAgICAgICAgICAgICAgIGdyYWRpZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsICJpZCIsIHNoYWRpbmdJZCk7CiAgICAgICAgICAgICAgICBncmFkaWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAiZ3JhZGllbnRVbml0cyIsICJ1c2VyU3BhY2VPblVzZSIpOwogICAgICAgICAgICAgICAgZ3JhZGllbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgImN4IiwgY2lyY2xlUG9pbnRbMF0pOwogICAgICAgICAgICAgICAgZ3JhZGllbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgImN5IiwgY2lyY2xlUG9pbnRbMV0pOwogICAgICAgICAgICAgICAgZ3JhZGllbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgInIiLCBjaXJjbGVSYWRpdXMpOwogICAgICAgICAgICAgICAgZ3JhZGllbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgImZ4IiwgZm9jYWxQb2ludFswXSk7CiAgICAgICAgICAgICAgICBncmFkaWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAiZnkiLCBmb2NhbFBvaW50WzFdKTsKICAgICAgICAgICAgICAgIGdyYWRpZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsICJmciIsIGZvY2FsUmFkaXVzKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJVbmtub3duIFJhZGlhbEF4aWFsIHR5cGU6ICIuY29uY2F0KGFyZ3NbMV0pKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIF9pdGVyYXRvcjUgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihjb2xvclN0b3BzKSwKICAgICAgICAgICAgICAgIF9zdGVwNTsKCiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgZm9yIChfaXRlcmF0b3I1LnMoKTsgIShfc3RlcDUgPSBfaXRlcmF0b3I1Lm4oKSkuZG9uZTspIHsKICAgICAgICAgICAgICAgIHZhciBjb2xvclN0b3AgPSBfc3RlcDUudmFsdWU7CiAgICAgICAgICAgICAgICB2YXIgc3RvcCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KCJzdmc6c3RvcCIpOwogICAgICAgICAgICAgICAgc3RvcC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAib2Zmc2V0IiwgY29sb3JTdG9wWzBdKTsKICAgICAgICAgICAgICAgIHN0b3Auc2V0QXR0cmlidXRlTlMobnVsbCwgInN0b3AtY29sb3IiLCBjb2xvclN0b3BbMV0pOwogICAgICAgICAgICAgICAgZ3JhZGllbnQuYXBwZW5kQ2hpbGQoc3RvcCk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICBfaXRlcmF0b3I1LmUoZXJyKTsKICAgICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgICBfaXRlcmF0b3I1LmYoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdGhpcy5kZWZzLmFwcGVuZENoaWxkKGdyYWRpZW50KTsKICAgICAgICAgICAgcmV0dXJuICJ1cmwoIyIuY29uY2F0KHNoYWRpbmdJZCwgIikiKTsKCiAgICAgICAgICBjYXNlICJNZXNoIjoKICAgICAgICAgICAgKDAsIF91dGlsLndhcm4pKCJVbmltcGxlbWVudGVkIHBhdHRlcm4gTWVzaCIpOwogICAgICAgICAgICByZXR1cm4gbnVsbDsKCiAgICAgICAgICBjYXNlICJEdW1teSI6CiAgICAgICAgICAgIHJldHVybiAiaG90cGluayI7CgogICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJVbmtub3duIElSIHR5cGU6ICIuY29uY2F0KGFyZ3NbMF0pKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAic2V0RGFzaCIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXREYXNoKGRhc2hBcnJheSwgZGFzaFBoYXNlKSB7CiAgICAgICAgdGhpcy5jdXJyZW50LmRhc2hBcnJheSA9IGRhc2hBcnJheTsKICAgICAgICB0aGlzLmN1cnJlbnQuZGFzaFBoYXNlID0gZGFzaFBoYXNlOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogImNvbnN0cnVjdFBhdGgiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gY29uc3RydWN0UGF0aChvcHMsIGFyZ3MpIHsKICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDsKICAgICAgICB2YXIgeCA9IGN1cnJlbnQueCwKICAgICAgICAgICAgeSA9IGN1cnJlbnQueTsKICAgICAgICB2YXIgZCA9IFtdOwogICAgICAgIHZhciBqID0gMDsKCiAgICAgICAgdmFyIF9pdGVyYXRvcjYgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvcHMpLAogICAgICAgICAgICBfc3RlcDY7CgogICAgICAgIHRyeSB7CiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjYucygpOyAhKF9zdGVwNiA9IF9pdGVyYXRvcjYubigpKS5kb25lOykgewogICAgICAgICAgICB2YXIgb3AgPSBfc3RlcDYudmFsdWU7CgogICAgICAgICAgICBzd2l0Y2ggKG9wIHwgMCkgewogICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLnJlY3RhbmdsZToKICAgICAgICAgICAgICAgIHggPSBhcmdzW2orK107CiAgICAgICAgICAgICAgICB5ID0gYXJnc1tqKytdOwogICAgICAgICAgICAgICAgdmFyIHdpZHRoID0gYXJnc1tqKytdOwogICAgICAgICAgICAgICAgdmFyIGhlaWdodCA9IGFyZ3NbaisrXTsKICAgICAgICAgICAgICAgIHZhciB4dyA9IHggKyB3aWR0aDsKICAgICAgICAgICAgICAgIHZhciB5aCA9IHkgKyBoZWlnaHQ7CiAgICAgICAgICAgICAgICBkLnB1c2goIk0iLCBwZih4KSwgcGYoeSksICJMIiwgcGYoeHcpLCBwZih5KSwgIkwiLCBwZih4dyksIHBmKHloKSwgIkwiLCBwZih4KSwgcGYoeWgpLCAiWiIpOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLm1vdmVUbzoKICAgICAgICAgICAgICAgIHggPSBhcmdzW2orK107CiAgICAgICAgICAgICAgICB5ID0gYXJnc1tqKytdOwogICAgICAgICAgICAgICAgZC5wdXNoKCJNIiwgcGYoeCksIHBmKHkpKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIF91dGlsLk9QUy5saW5lVG86CiAgICAgICAgICAgICAgICB4ID0gYXJnc1tqKytdOwogICAgICAgICAgICAgICAgeSA9IGFyZ3NbaisrXTsKICAgICAgICAgICAgICAgIGQucHVzaCgiTCIsIHBmKHgpLCBwZih5KSk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY3VydmVUbzoKICAgICAgICAgICAgICAgIHggPSBhcmdzW2ogKyA0XTsKICAgICAgICAgICAgICAgIHkgPSBhcmdzW2ogKyA1XTsKICAgICAgICAgICAgICAgIGQucHVzaCgiQyIsIHBmKGFyZ3Nbal0pLCBwZihhcmdzW2ogKyAxXSksIHBmKGFyZ3NbaiArIDJdKSwgcGYoYXJnc1tqICsgM10pLCBwZih4KSwgcGYoeSkpOwogICAgICAgICAgICAgICAgaiArPSA2OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgX3V0aWwuT1BTLmN1cnZlVG8yOgogICAgICAgICAgICAgICAgZC5wdXNoKCJDIiwgcGYoeCksIHBmKHkpLCBwZihhcmdzW2pdKSwgcGYoYXJnc1tqICsgMV0pLCBwZihhcmdzW2ogKyAyXSksIHBmKGFyZ3NbaiArIDNdKSk7CiAgICAgICAgICAgICAgICB4ID0gYXJnc1tqICsgMl07CiAgICAgICAgICAgICAgICB5ID0gYXJnc1tqICsgM107CiAgICAgICAgICAgICAgICBqICs9IDQ7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY3VydmVUbzM6CiAgICAgICAgICAgICAgICB4ID0gYXJnc1tqICsgMl07CiAgICAgICAgICAgICAgICB5ID0gYXJnc1tqICsgM107CiAgICAgICAgICAgICAgICBkLnB1c2goIkMiLCBwZihhcmdzW2pdKSwgcGYoYXJnc1tqICsgMV0pLCBwZih4KSwgcGYoeSksIHBmKHgpLCBwZih5KSk7CiAgICAgICAgICAgICAgICBqICs9IDQ7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSBfdXRpbC5PUFMuY2xvc2VQYXRoOgogICAgICAgICAgICAgICAgZC5wdXNoKCJaIik7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgX2l0ZXJhdG9yNi5lKGVycik7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIF9pdGVyYXRvcjYuZigpOwogICAgICAgIH0KCiAgICAgICAgZCA9IGQuam9pbigiICIpOwoKICAgICAgICBpZiAoY3VycmVudC5wYXRoICYmIG9wcy5sZW5ndGggPiAwICYmIG9wc1swXSAhPT0gX3V0aWwuT1BTLnJlY3RhbmdsZSAmJiBvcHNbMF0gIT09IF91dGlsLk9QUy5tb3ZlVG8pIHsKICAgICAgICAgIGQgPSBjdXJyZW50LnBhdGguZ2V0QXR0cmlidXRlTlMobnVsbCwgImQiKSArIGQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGN1cnJlbnQucGF0aCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KCJzdmc6cGF0aCIpOwoKICAgICAgICAgIHRoaXMuX2Vuc3VyZVRyYW5zZm9ybUdyb3VwKCkuYXBwZW5kQ2hpbGQoY3VycmVudC5wYXRoKTsKICAgICAgICB9CgogICAgICAgIGN1cnJlbnQucGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAiZCIsIGQpOwogICAgICAgIGN1cnJlbnQucGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAiZmlsbCIsICJub25lIik7CiAgICAgICAgY3VycmVudC5lbGVtZW50ID0gY3VycmVudC5wYXRoOwogICAgICAgIGN1cnJlbnQuc2V0Q3VycmVudFBvaW50KHgsIHkpOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogImVuZFBhdGgiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gZW5kUGF0aCgpIHsKICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDsKICAgICAgICBjdXJyZW50LnBhdGggPSBudWxsOwoKICAgICAgICBpZiAoIXRoaXMucGVuZGluZ0NsaXApIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIGlmICghY3VycmVudC5lbGVtZW50KSB7CiAgICAgICAgICB0aGlzLnBlbmRpbmdDbGlwID0gbnVsbDsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIHZhciBjbGlwSWQgPSAiY2xpcHBhdGgiLmNvbmNhdChjbGlwQ291bnQrKyk7CiAgICAgICAgdmFyIGNsaXBQYXRoID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoInN2ZzpjbGlwUGF0aCIpOwogICAgICAgIGNsaXBQYXRoLnNldEF0dHJpYnV0ZU5TKG51bGwsICJpZCIsIGNsaXBJZCk7CiAgICAgICAgY2xpcFBhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgInRyYW5zZm9ybSIsIHBtKHRoaXMudHJhbnNmb3JtTWF0cml4KSk7CiAgICAgICAgdmFyIGNsaXBFbGVtZW50ID0gY3VycmVudC5lbGVtZW50LmNsb25lTm9kZSh0cnVlKTsKCiAgICAgICAgaWYgKHRoaXMucGVuZGluZ0NsaXAgPT09ICJldmVub2RkIikgewogICAgICAgICAgY2xpcEVsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgImNsaXAtcnVsZSIsICJldmVub2RkIik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNsaXBFbGVtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsICJjbGlwLXJ1bGUiLCAibm9uemVybyIpOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5wZW5kaW5nQ2xpcCA9IG51bGw7CiAgICAgICAgY2xpcFBhdGguYXBwZW5kQ2hpbGQoY2xpcEVsZW1lbnQpOwogICAgICAgIHRoaXMuZGVmcy5hcHBlbmRDaGlsZChjbGlwUGF0aCk7CgogICAgICAgIGlmIChjdXJyZW50LmFjdGl2ZUNsaXBVcmwpIHsKICAgICAgICAgIGN1cnJlbnQuY2xpcEdyb3VwID0gbnVsbDsKICAgICAgICAgIHRoaXMuZXh0cmFTdGFjay5mb3JFYWNoKGZ1bmN0aW9uIChwcmV2KSB7CiAgICAgICAgICAgIHByZXYuY2xpcEdyb3VwID0gbnVsbDsKICAgICAgICAgIH0pOwogICAgICAgICAgY2xpcFBhdGguc2V0QXR0cmlidXRlTlMobnVsbCwgImNsaXAtcGF0aCIsIGN1cnJlbnQuYWN0aXZlQ2xpcFVybCk7CiAgICAgICAgfQoKICAgICAgICBjdXJyZW50LmFjdGl2ZUNsaXBVcmwgPSAidXJsKCMiLmNvbmNhdChjbGlwSWQsICIpIik7CiAgICAgICAgdGhpcy50Z3JwID0gbnVsbDsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJjbGlwIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNsaXAodHlwZSkgewogICAgICAgIHRoaXMucGVuZGluZ0NsaXAgPSB0eXBlOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogImNsb3NlUGF0aCIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZVBhdGgoKSB7CiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnQ7CgogICAgICAgIGlmIChjdXJyZW50LnBhdGgpIHsKICAgICAgICAgIHZhciBkID0gIiIuY29uY2F0KGN1cnJlbnQucGF0aC5nZXRBdHRyaWJ1dGVOUyhudWxsLCAiZCIpLCAiWiIpOwogICAgICAgICAgY3VycmVudC5wYXRoLnNldEF0dHJpYnV0ZU5TKG51bGwsICJkIiwgZCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInNldExlYWRpbmciLAogICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TGVhZGluZyhsZWFkaW5nKSB7CiAgICAgICAgdGhpcy5jdXJyZW50LmxlYWRpbmcgPSAtbGVhZGluZzsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJzZXRUZXh0UmlzZSIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRUZXh0UmlzZSh0ZXh0UmlzZSkgewogICAgICAgIHRoaXMuY3VycmVudC50ZXh0UmlzZSA9IHRleHRSaXNlOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInNldFRleHRSZW5kZXJpbmdNb2RlIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFRleHRSZW5kZXJpbmdNb2RlKHRleHRSZW5kZXJpbmdNb2RlKSB7CiAgICAgICAgdGhpcy5jdXJyZW50LnRleHRSZW5kZXJpbmdNb2RlID0gdGV4dFJlbmRlcmluZ01vZGU7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAic2V0SFNjYWxlIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEhTY2FsZShzY2FsZSkgewogICAgICAgIHRoaXMuY3VycmVudC50ZXh0SFNjYWxlID0gc2NhbGUgLyAxMDA7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAic2V0UmVuZGVyaW5nSW50ZW50IiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFJlbmRlcmluZ0ludGVudChpbnRlbnQpIHt9CiAgICB9LCB7CiAgICAgIGtleTogInNldEZsYXRuZXNzIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEZsYXRuZXNzKGZsYXRuZXNzKSB7fQogICAgfSwgewogICAgICBrZXk6ICJzZXRHU3RhdGUiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0R1N0YXRlKHN0YXRlcykgewogICAgICAgIHZhciBfaXRlcmF0b3I3ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoc3RhdGVzKSwKICAgICAgICAgICAgX3N0ZXA3OwoKICAgICAgICB0cnkgewogICAgICAgICAgZm9yIChfaXRlcmF0b3I3LnMoKTsgIShfc3RlcDcgPSBfaXRlcmF0b3I3Lm4oKSkuZG9uZTspIHsKICAgICAgICAgICAgdmFyIF9zdGVwNyR2YWx1ZSA9IF9zbGljZWRUb0FycmF5KF9zdGVwNy52YWx1ZSwgMiksCiAgICAgICAgICAgICAgICBrZXkgPSBfc3RlcDckdmFsdWVbMF0sCiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9zdGVwNyR2YWx1ZVsxXTsKCiAgICAgICAgICAgIHN3aXRjaCAoa2V5KSB7CiAgICAgICAgICAgICAgY2FzZSAiTFciOgogICAgICAgICAgICAgICAgdGhpcy5zZXRMaW5lV2lkdGgodmFsdWUpOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgIkxDIjoKICAgICAgICAgICAgICAgIHRoaXMuc2V0TGluZUNhcCh2YWx1ZSk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAiTEoiOgogICAgICAgICAgICAgICAgdGhpcy5zZXRMaW5lSm9pbih2YWx1ZSk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAiTUwiOgogICAgICAgICAgICAgICAgdGhpcy5zZXRNaXRlckxpbWl0KHZhbHVlKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlICJEIjoKICAgICAgICAgICAgICAgIHRoaXMuc2V0RGFzaCh2YWx1ZVswXSwgdmFsdWVbMV0pOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgIlJJIjoKICAgICAgICAgICAgICAgIHRoaXMuc2V0UmVuZGVyaW5nSW50ZW50KHZhbHVlKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlICJGTCI6CiAgICAgICAgICAgICAgICB0aGlzLnNldEZsYXRuZXNzKHZhbHVlKTsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlICJGb250IjoKICAgICAgICAgICAgICAgIHRoaXMuc2V0Rm9udCh2YWx1ZSk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAiQ0EiOgogICAgICAgICAgICAgICAgdGhpcy5zZXRTdHJva2VBbHBoYSh2YWx1ZSk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSAiY2EiOgogICAgICAgICAgICAgICAgdGhpcy5zZXRGaWxsQWxwaGEodmFsdWUpOwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAoMCwgX3V0aWwud2FybikoIlVuaW1wbGVtZW50ZWQgZ3JhcGhpYyBzdGF0ZSBvcGVyYXRvciAiLmNvbmNhdChrZXkpKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICBfaXRlcmF0b3I3LmUoZXJyKTsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgX2l0ZXJhdG9yNy5mKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogImZpbGwiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gZmlsbCgpIHsKICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDsKCiAgICAgICAgaWYgKGN1cnJlbnQuZWxlbWVudCkgewogICAgICAgICAgY3VycmVudC5lbGVtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsICJmaWxsIiwgY3VycmVudC5maWxsQ29sb3IpOwogICAgICAgICAgY3VycmVudC5lbGVtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsICJmaWxsLW9wYWNpdHkiLCBjdXJyZW50LmZpbGxBbHBoYSk7CiAgICAgICAgICB0aGlzLmVuZFBhdGgoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAic3Ryb2tlIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN0cm9rZSgpIHsKICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDsKCiAgICAgICAgaWYgKGN1cnJlbnQuZWxlbWVudCkgewogICAgICAgICAgdGhpcy5fc2V0U3Ryb2tlQXR0cmlidXRlcyhjdXJyZW50LmVsZW1lbnQpOwoKICAgICAgICAgIGN1cnJlbnQuZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAiZmlsbCIsICJub25lIik7CiAgICAgICAgICB0aGlzLmVuZFBhdGgoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiX3NldFN0cm9rZUF0dHJpYnV0ZXMiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gX3NldFN0cm9rZUF0dHJpYnV0ZXMoZWxlbWVudCkgewogICAgICAgIHZhciBsaW5lV2lkdGhTY2FsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMTsKICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDsKICAgICAgICB2YXIgZGFzaEFycmF5ID0gY3VycmVudC5kYXNoQXJyYXk7CgogICAgICAgIGlmIChsaW5lV2lkdGhTY2FsZSAhPT0gMSAmJiBkYXNoQXJyYXkubGVuZ3RoID4gMCkgewogICAgICAgICAgZGFzaEFycmF5ID0gZGFzaEFycmF5Lm1hcChmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgcmV0dXJuIGxpbmVXaWR0aFNjYWxlICogdmFsdWU7CiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgInN0cm9rZSIsIGN1cnJlbnQuc3Ryb2tlQ29sb3IpOwogICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlTlMobnVsbCwgInN0cm9rZS1vcGFjaXR5IiwgY3VycmVudC5zdHJva2VBbHBoYSk7CiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAic3Ryb2tlLW1pdGVybGltaXQiLCBwZihjdXJyZW50Lm1pdGVyTGltaXQpKTsKICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsICJzdHJva2UtbGluZWNhcCIsIGN1cnJlbnQubGluZUNhcCk7CiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAic3Ryb2tlLWxpbmVqb2luIiwgY3VycmVudC5saW5lSm9pbik7CiAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAic3Ryb2tlLXdpZHRoIiwgcGYobGluZVdpZHRoU2NhbGUgKiBjdXJyZW50LmxpbmVXaWR0aCkgKyAicHgiKTsKICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsICJzdHJva2UtZGFzaGFycmF5IiwgZGFzaEFycmF5Lm1hcChwZikuam9pbigiICIpKTsKICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsICJzdHJva2UtZGFzaG9mZnNldCIsIHBmKGxpbmVXaWR0aFNjYWxlICogY3VycmVudC5kYXNoUGhhc2UpICsgInB4Iik7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiZW9GaWxsIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVvRmlsbCgpIHsKICAgICAgICBpZiAodGhpcy5jdXJyZW50LmVsZW1lbnQpIHsKICAgICAgICAgIHRoaXMuY3VycmVudC5lbGVtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsICJmaWxsLXJ1bGUiLCAiZXZlbm9kZCIpOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5maWxsKCk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiZmlsbFN0cm9rZSIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBmaWxsU3Ryb2tlKCkgewogICAgICAgIHRoaXMuc3Ryb2tlKCk7CiAgICAgICAgdGhpcy5maWxsKCk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiZW9GaWxsU3Ryb2tlIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVvRmlsbFN0cm9rZSgpIHsKICAgICAgICBpZiAodGhpcy5jdXJyZW50LmVsZW1lbnQpIHsKICAgICAgICAgIHRoaXMuY3VycmVudC5lbGVtZW50LnNldEF0dHJpYnV0ZU5TKG51bGwsICJmaWxsLXJ1bGUiLCAiZXZlbm9kZCIpOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5maWxsU3Ryb2tlKCk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAiY2xvc2VTdHJva2UiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gY2xvc2VTdHJva2UoKSB7CiAgICAgICAgdGhpcy5jbG9zZVBhdGgoKTsKICAgICAgICB0aGlzLnN0cm9rZSgpOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogImNsb3NlRmlsbFN0cm9rZSIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZUZpbGxTdHJva2UoKSB7CiAgICAgICAgdGhpcy5jbG9zZVBhdGgoKTsKICAgICAgICB0aGlzLmZpbGxTdHJva2UoKTsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJjbG9zZUVPRmlsbFN0cm9rZSIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBjbG9zZUVPRmlsbFN0cm9rZSgpIHsKICAgICAgICB0aGlzLmNsb3NlUGF0aCgpOwogICAgICAgIHRoaXMuZW9GaWxsU3Ryb2tlKCk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAicGFpbnRTb2xpZENvbG9ySW1hZ2VNYXNrIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBhaW50U29saWRDb2xvckltYWdlTWFzaygpIHsKICAgICAgICB2YXIgcmVjdCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KCJzdmc6cmVjdCIpOwogICAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgIngiLCAiMCIpOwogICAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgInkiLCAiMCIpOwogICAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgIndpZHRoIiwgIjFweCIpOwogICAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgImhlaWdodCIsICIxcHgiKTsKICAgICAgICByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsICJmaWxsIiwgdGhpcy5jdXJyZW50LmZpbGxDb2xvcik7CgogICAgICAgIHRoaXMuX2Vuc3VyZVRyYW5zZm9ybUdyb3VwKCkuYXBwZW5kQ2hpbGQocmVjdCk7CiAgICAgIH0KICAgIH0sIHsKICAgICAga2V5OiAicGFpbnRJbWFnZVhPYmplY3QiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gcGFpbnRJbWFnZVhPYmplY3Qob2JqSWQpIHsKICAgICAgICB2YXIgaW1nRGF0YSA9IHRoaXMub2Jqcy5nZXQob2JqSWQpOwoKICAgICAgICBpZiAoIWltZ0RhdGEpIHsKICAgICAgICAgICgwLCBfdXRpbC53YXJuKSgiRGVwZW5kZW50IGltYWdlIHdpdGggb2JqZWN0IElEICIuY29uY2F0KG9iaklkLCAiIGlzIG5vdCByZWFkeSB5ZXQiKSk7CiAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICB0aGlzLnBhaW50SW5saW5lSW1hZ2VYT2JqZWN0KGltZ0RhdGEpOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInBhaW50SW5saW5lSW1hZ2VYT2JqZWN0IiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIHBhaW50SW5saW5lSW1hZ2VYT2JqZWN0KGltZ0RhdGEsIG1hc2spIHsKICAgICAgICB2YXIgd2lkdGggPSBpbWdEYXRhLndpZHRoOwogICAgICAgIHZhciBoZWlnaHQgPSBpbWdEYXRhLmhlaWdodDsKICAgICAgICB2YXIgaW1nU3JjID0gY29udmVydEltZ0RhdGFUb1BuZyhpbWdEYXRhLCB0aGlzLmZvcmNlRGF0YVNjaGVtYSwgISFtYXNrKTsKICAgICAgICB2YXIgY2xpcHJlY3QgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudCgic3ZnOnJlY3QiKTsKICAgICAgICBjbGlwcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAieCIsICIwIik7CiAgICAgICAgY2xpcHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgInkiLCAiMCIpOwogICAgICAgIGNsaXByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsICJ3aWR0aCIsIHBmKHdpZHRoKSk7CiAgICAgICAgY2xpcHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgImhlaWdodCIsIHBmKGhlaWdodCkpOwogICAgICAgIHRoaXMuY3VycmVudC5lbGVtZW50ID0gY2xpcHJlY3Q7CiAgICAgICAgdGhpcy5jbGlwKCJub256ZXJvIik7CiAgICAgICAgdmFyIGltZ0VsID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoInN2ZzppbWFnZSIpOwogICAgICAgIGltZ0VsLnNldEF0dHJpYnV0ZU5TKFhMSU5LX05TLCAieGxpbms6aHJlZiIsIGltZ1NyYyk7CiAgICAgICAgaW1nRWwuc2V0QXR0cmlidXRlTlMobnVsbCwgIngiLCAiMCIpOwogICAgICAgIGltZ0VsLnNldEF0dHJpYnV0ZU5TKG51bGwsICJ5IiwgcGYoLWhlaWdodCkpOwogICAgICAgIGltZ0VsLnNldEF0dHJpYnV0ZU5TKG51bGwsICJ3aWR0aCIsIHBmKHdpZHRoKSArICJweCIpOwogICAgICAgIGltZ0VsLnNldEF0dHJpYnV0ZU5TKG51bGwsICJoZWlnaHQiLCBwZihoZWlnaHQpICsgInB4Iik7CiAgICAgICAgaW1nRWwuc2V0QXR0cmlidXRlTlMobnVsbCwgInRyYW5zZm9ybSIsICJzY2FsZSgiLmNvbmNhdChwZigxIC8gd2lkdGgpLCAiICIpLmNvbmNhdChwZigtMSAvIGhlaWdodCksICIpIikpOwoKICAgICAgICBpZiAobWFzaykgewogICAgICAgICAgbWFzay5hcHBlbmRDaGlsZChpbWdFbCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuX2Vuc3VyZVRyYW5zZm9ybUdyb3VwKCkuYXBwZW5kQ2hpbGQoaW1nRWwpOwogICAgICAgIH0KICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJwYWludEltYWdlTWFza1hPYmplY3QiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gcGFpbnRJbWFnZU1hc2tYT2JqZWN0KGltZ0RhdGEpIHsKICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuY3VycmVudDsKICAgICAgICB2YXIgd2lkdGggPSBpbWdEYXRhLndpZHRoOwogICAgICAgIHZhciBoZWlnaHQgPSBpbWdEYXRhLmhlaWdodDsKICAgICAgICB2YXIgZmlsbENvbG9yID0gY3VycmVudC5maWxsQ29sb3I7CiAgICAgICAgY3VycmVudC5tYXNrSWQgPSAibWFzayIuY29uY2F0KG1hc2tDb3VudCsrKTsKICAgICAgICB2YXIgbWFzayA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KCJzdmc6bWFzayIpOwogICAgICAgIG1hc2suc2V0QXR0cmlidXRlTlMobnVsbCwgImlkIiwgY3VycmVudC5tYXNrSWQpOwogICAgICAgIHZhciByZWN0ID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoInN2ZzpyZWN0Iik7CiAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAieCIsICIwIik7CiAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAieSIsICIwIik7CiAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAid2lkdGgiLCBwZih3aWR0aCkpOwogICAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgImhlaWdodCIsIHBmKGhlaWdodCkpOwogICAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgImZpbGwiLCBmaWxsQ29sb3IpOwogICAgICAgIHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgIm1hc2siLCAidXJsKCMiLmNvbmNhdChjdXJyZW50Lm1hc2tJZCwgIikiKSk7CiAgICAgICAgdGhpcy5kZWZzLmFwcGVuZENoaWxkKG1hc2spOwoKICAgICAgICB0aGlzLl9lbnN1cmVUcmFuc2Zvcm1Hcm91cCgpLmFwcGVuZENoaWxkKHJlY3QpOwoKICAgICAgICB0aGlzLnBhaW50SW5saW5lSW1hZ2VYT2JqZWN0KGltZ0RhdGEsIG1hc2spOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInBhaW50Rm9ybVhPYmplY3RCZWdpbiIsCiAgICAgIHZhbHVlOiBmdW5jdGlvbiBwYWludEZvcm1YT2JqZWN0QmVnaW4obWF0cml4LCBiYm94KSB7CiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobWF0cml4KSAmJiBtYXRyaXgubGVuZ3RoID09PSA2KSB7CiAgICAgICAgICB0aGlzLnRyYW5zZm9ybShtYXRyaXhbMF0sIG1hdHJpeFsxXSwgbWF0cml4WzJdLCBtYXRyaXhbM10sIG1hdHJpeFs0XSwgbWF0cml4WzVdKTsKICAgICAgICB9CgogICAgICAgIGlmIChiYm94KSB7CiAgICAgICAgICB2YXIgd2lkdGggPSBiYm94WzJdIC0gYmJveFswXTsKICAgICAgICAgIHZhciBoZWlnaHQgPSBiYm94WzNdIC0gYmJveFsxXTsKICAgICAgICAgIHZhciBjbGlwcmVjdCA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGVFbGVtZW50KCJzdmc6cmVjdCIpOwogICAgICAgICAgY2xpcHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgIngiLCBiYm94WzBdKTsKICAgICAgICAgIGNsaXByZWN0LnNldEF0dHJpYnV0ZU5TKG51bGwsICJ5IiwgYmJveFsxXSk7CiAgICAgICAgICBjbGlwcmVjdC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAid2lkdGgiLCBwZih3aWR0aCkpOwogICAgICAgICAgY2xpcHJlY3Quc2V0QXR0cmlidXRlTlMobnVsbCwgImhlaWdodCIsIHBmKGhlaWdodCkpOwogICAgICAgICAgdGhpcy5jdXJyZW50LmVsZW1lbnQgPSBjbGlwcmVjdDsKICAgICAgICAgIHRoaXMuY2xpcCgibm9uemVybyIpOwogICAgICAgICAgdGhpcy5lbmRQYXRoKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogInBhaW50Rm9ybVhPYmplY3RFbmQiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gcGFpbnRGb3JtWE9iamVjdEVuZCgpIHt9CiAgICB9LCB7CiAgICAgIGtleTogIl9pbml0aWFsaXplIiwKICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9pbml0aWFsaXplKHZpZXdwb3J0KSB7CiAgICAgICAgdmFyIHN2ZyA9IHRoaXMuc3ZnRmFjdG9yeS5jcmVhdGUodmlld3BvcnQud2lkdGgsIHZpZXdwb3J0LmhlaWdodCk7CiAgICAgICAgdmFyIGRlZmluaXRpb25zID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoInN2ZzpkZWZzIik7CiAgICAgICAgc3ZnLmFwcGVuZENoaWxkKGRlZmluaXRpb25zKTsKICAgICAgICB0aGlzLmRlZnMgPSBkZWZpbml0aW9uczsKICAgICAgICB2YXIgcm9vdEdyb3VwID0gdGhpcy5zdmdGYWN0b3J5LmNyZWF0ZUVsZW1lbnQoInN2ZzpnIik7CiAgICAgICAgcm9vdEdyb3VwLnNldEF0dHJpYnV0ZU5TKG51bGwsICJ0cmFuc2Zvcm0iLCBwbSh2aWV3cG9ydC50cmFuc2Zvcm0pKTsKICAgICAgICBzdmcuYXBwZW5kQ2hpbGQocm9vdEdyb3VwKTsKICAgICAgICB0aGlzLnN2ZyA9IHJvb3RHcm91cDsKICAgICAgICByZXR1cm4gc3ZnOwogICAgICB9CiAgICB9LCB7CiAgICAgIGtleTogIl9lbnN1cmVDbGlwR3JvdXAiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gX2Vuc3VyZUNsaXBHcm91cCgpIHsKICAgICAgICBpZiAoIXRoaXMuY3VycmVudC5jbGlwR3JvdXApIHsKICAgICAgICAgIHZhciBjbGlwR3JvdXAgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudCgic3ZnOmciKTsKICAgICAgICAgIGNsaXBHcm91cC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAiY2xpcC1wYXRoIiwgdGhpcy5jdXJyZW50LmFjdGl2ZUNsaXBVcmwpOwogICAgICAgICAgdGhpcy5zdmcuYXBwZW5kQ2hpbGQoY2xpcEdyb3VwKTsKICAgICAgICAgIHRoaXMuY3VycmVudC5jbGlwR3JvdXAgPSBjbGlwR3JvdXA7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50LmNsaXBHcm91cDsKICAgICAgfQogICAgfSwgewogICAgICBrZXk6ICJfZW5zdXJlVHJhbnNmb3JtR3JvdXAiLAogICAgICB2YWx1ZTogZnVuY3Rpb24gX2Vuc3VyZVRyYW5zZm9ybUdyb3VwKCkgewogICAgICAgIGlmICghdGhpcy50Z3JwKSB7CiAgICAgICAgICB0aGlzLnRncnAgPSB0aGlzLnN2Z0ZhY3RvcnkuY3JlYXRlRWxlbWVudCgic3ZnOmciKTsKICAgICAgICAgIHRoaXMudGdycC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAidHJhbnNmb3JtIiwgcG0odGhpcy50cmFuc2Zvcm1NYXRyaXgpKTsKCiAgICAgICAgICBpZiAodGhpcy5jdXJyZW50LmFjdGl2ZUNsaXBVcmwpIHsKICAgICAgICAgICAgdGhpcy5fZW5zdXJlQ2xpcEdyb3VwKCkuYXBwZW5kQ2hpbGQodGhpcy50Z3JwKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRoaXMuc3ZnLmFwcGVuZENoaWxkKHRoaXMudGdycCk7CiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gdGhpcy50Z3JwOwogICAgICB9CiAgICB9XSk7CgogICAgcmV0dXJuIFNWR0dyYXBoaWNzOwogIH0oKTsKfQoKLyoqKi8gfSksCi8qIDIxMiAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7CgoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLlBERk5vZGVTdHJlYW0gPSB2b2lkIDA7Cgp2YXIgX3JlZ2VuZXJhdG9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfX3dfcGRmanNfcmVxdWlyZV9fKDIpKTsKCnZhciBfdXRpbCA9IF9fd19wZGZqc19yZXF1aXJlX18oNSk7Cgp2YXIgX25ldHdvcmtfdXRpbHMgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDIxMyk7CgpmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAiZGVmYXVsdCI6IG9iaiB9OyB9CgpmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyAiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2YiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mKG9iaik7IH0KCmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09ICJmdW5jdGlvbiIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiIpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIF9zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7IH0KCmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9CgpmdW5jdGlvbiBfY3JlYXRlU3VwZXIoRGVyaXZlZCkgeyB2YXIgaGFzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCA9IF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKTsgcmV0dXJuIGZ1bmN0aW9uIF9jcmVhdGVTdXBlckludGVybmFsKCkgeyB2YXIgU3VwZXIgPSBfZ2V0UHJvdG90eXBlT2YoRGVyaXZlZCksIHJlc3VsdDsgaWYgKGhhc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QpIHsgdmFyIE5ld1RhcmdldCA9IF9nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3RvcjsgcmVzdWx0ID0gUmVmbGVjdC5jb25zdHJ1Y3QoU3VwZXIsIGFyZ3VtZW50cywgTmV3VGFyZ2V0KTsgfSBlbHNlIHsgcmVzdWx0ID0gU3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfSByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgcmVzdWx0KTsgfTsgfQoKZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gIm9iamVjdCIgfHwgdHlwZW9mIGNhbGwgPT09ICJmdW5jdGlvbiIpKSB7IHJldHVybiBjYWxsOyB9IHJldHVybiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpOyB9CgpmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZCIpOyB9IHJldHVybiBzZWxmOyB9CgpmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICJ1bmRlZmluZWQiIHx8ICFSZWZsZWN0LmNvbnN0cnVjdCkgcmV0dXJuIGZhbHNlOyBpZiAoUmVmbGVjdC5jb25zdHJ1Y3Quc2hhbSkgcmV0dXJuIGZhbHNlOyBpZiAodHlwZW9mIFByb3h5ID09PSAiZnVuY3Rpb24iKSByZXR1cm4gdHJ1ZTsgdHJ5IHsgRGF0ZS5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChEYXRlLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgcmV0dXJuIHRydWU7IH0gY2F0Y2ggKGUpIHsgcmV0dXJuIGZhbHNlOyB9IH0KCmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH0KCmZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHsgdHJ5IHsgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpOyB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlOyB9IGNhdGNoIChlcnJvcikgeyByZWplY3QoZXJyb3IpOyByZXR1cm47IH0gaWYgKGluZm8uZG9uZSkgeyByZXNvbHZlKHZhbHVlKTsgfSBlbHNlIHsgUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKF9uZXh0LCBfdGhyb3cpOyB9IH0KCmZ1bmN0aW9uIF9hc3luY1RvR2VuZXJhdG9yKGZuKSB7IHJldHVybiBmdW5jdGlvbiAoKSB7IHZhciBzZWxmID0gdGhpcywgYXJncyA9IGFyZ3VtZW50czsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdmFyIGdlbiA9IGZuLmFwcGx5KHNlbGYsIGFyZ3MpOyBmdW5jdGlvbiBfbmV4dCh2YWx1ZSkgeyBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csICJuZXh0IiwgdmFsdWUpOyB9IGZ1bmN0aW9uIF90aHJvdyhlcnIpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAidGhyb3ciLCBlcnIpOyB9IF9uZXh0KHVuZGVmaW5lZCk7IH0pOyB9OyB9CgpmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvbiIpOyB9IH0KCmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9CgpmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfQoKOwoKdmFyIGZzID0gcmVxdWlyZSgiZnMiKTsKCnZhciBodHRwID0gcmVxdWlyZSgiaHR0cCIpOwoKdmFyIGh0dHBzID0gcmVxdWlyZSgiaHR0cHMiKTsKCnZhciB1cmwgPSByZXF1aXJlKCJ1cmwiKTsKCnZhciBmaWxlVXJpUmVnZXggPSAvXmZpbGU6XC9cL1wvW2EtekEtWl06XC8vOwoKZnVuY3Rpb24gcGFyc2VVcmwoc291cmNlVXJsKSB7CiAgdmFyIHBhcnNlZFVybCA9IHVybC5wYXJzZShzb3VyY2VVcmwpOwoKICBpZiAocGFyc2VkVXJsLnByb3RvY29sID09PSAiZmlsZToiIHx8IHBhcnNlZFVybC5ob3N0KSB7CiAgICByZXR1cm4gcGFyc2VkVXJsOwogIH0KCiAgaWYgKC9eW2Etel06Wy9cXF0vaS50ZXN0KHNvdXJjZVVybCkpIHsKICAgIHJldHVybiB1cmwucGFyc2UoImZpbGU6Ly8vIi5jb25jYXQoc291cmNlVXJsKSk7CiAgfQoKICBpZiAoIXBhcnNlZFVybC5ob3N0KSB7CiAgICBwYXJzZWRVcmwucHJvdG9jb2wgPSAiZmlsZToiOwogIH0KCiAgcmV0dXJuIHBhcnNlZFVybDsKfQoKdmFyIFBERk5vZGVTdHJlYW0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFBERk5vZGVTdHJlYW0oc291cmNlKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUERGTm9kZVN0cmVhbSk7CgogICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7CiAgICB0aGlzLnVybCA9IHBhcnNlVXJsKHNvdXJjZS51cmwpOwogICAgdGhpcy5pc0h0dHAgPSB0aGlzLnVybC5wcm90b2NvbCA9PT0gImh0dHA6IiB8fCB0aGlzLnVybC5wcm90b2NvbCA9PT0gImh0dHBzOiI7CiAgICB0aGlzLmlzRnNVcmwgPSB0aGlzLnVybC5wcm90b2NvbCA9PT0gImZpbGU6IjsKICAgIHRoaXMuaHR0cEhlYWRlcnMgPSB0aGlzLmlzSHR0cCAmJiBzb3VyY2UuaHR0cEhlYWRlcnMgfHwge307CiAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciA9IG51bGw7CiAgICB0aGlzLl9yYW5nZVJlcXVlc3RSZWFkZXJzID0gW107CiAgfQoKICBfY3JlYXRlQ2xhc3MoUERGTm9kZVN0cmVhbSwgW3sKICAgIGtleTogImdldEZ1bGxSZWFkZXIiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZ1bGxSZWFkZXIoKSB7CiAgICAgICgwLCBfdXRpbC5hc3NlcnQpKCF0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciwgIlBERk5vZGVTdHJlYW0uZ2V0RnVsbFJlYWRlciBjYW4gb25seSBiZSBjYWxsZWQgb25jZS4iKTsKICAgICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIgPSB0aGlzLmlzRnNVcmwgPyBuZXcgUERGTm9kZVN0cmVhbUZzRnVsbFJlYWRlcih0aGlzKSA6IG5ldyBQREZOb2RlU3RyZWFtRnVsbFJlYWRlcih0aGlzKTsKICAgICAgcmV0dXJuIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFJhbmdlUmVhZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSYW5nZVJlYWRlcihzdGFydCwgZW5kKSB7CiAgICAgIGlmIChlbmQgPD0gdGhpcy5fcHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIHZhciByYW5nZVJlYWRlciA9IHRoaXMuaXNGc1VybCA/IG5ldyBQREZOb2RlU3RyZWFtRnNSYW5nZVJlYWRlcih0aGlzLCBzdGFydCwgZW5kKSA6IG5ldyBQREZOb2RlU3RyZWFtUmFuZ2VSZWFkZXIodGhpcywgc3RhcnQsIGVuZCk7CgogICAgICB0aGlzLl9yYW5nZVJlcXVlc3RSZWFkZXJzLnB1c2gocmFuZ2VSZWFkZXIpOwoKICAgICAgcmV0dXJuIHJhbmdlUmVhZGVyOwogICAgfQogIH0sIHsKICAgIGtleTogImNhbmNlbEFsbFJlcXVlc3RzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjYW5jZWxBbGxSZXF1ZXN0cyhyZWFzb24pIHsKICAgICAgaWYgKHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyKSB7CiAgICAgICAgdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIuY2FuY2VsKHJlYXNvbik7CiAgICAgIH0KCiAgICAgIHZhciByZWFkZXJzID0gdGhpcy5fcmFuZ2VSZXF1ZXN0UmVhZGVycy5zbGljZSgwKTsKCiAgICAgIHJlYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAocmVhZGVyKSB7CiAgICAgICAgcmVhZGVyLmNhbmNlbChyZWFzb24pOwogICAgICB9KTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfcHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIgPyB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlci5fbG9hZGVkIDogMDsKICAgIH0KICB9XSk7CgogIHJldHVybiBQREZOb2RlU3RyZWFtOwp9KCk7CgpleHBvcnRzLlBERk5vZGVTdHJlYW0gPSBQREZOb2RlU3RyZWFtOwoKdmFyIEJhc2VGdWxsUmVhZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBCYXNlRnVsbFJlYWRlcihzdHJlYW0pIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCYXNlRnVsbFJlYWRlcik7CgogICAgdGhpcy5fdXJsID0gc3RyZWFtLnVybDsKICAgIHRoaXMuX2RvbmUgPSBmYWxzZTsKICAgIHRoaXMuX3N0b3JlZEVycm9yID0gbnVsbDsKICAgIHRoaXMub25Qcm9ncmVzcyA9IG51bGw7CiAgICB2YXIgc291cmNlID0gc3RyZWFtLnNvdXJjZTsKICAgIHRoaXMuX2NvbnRlbnRMZW5ndGggPSBzb3VyY2UubGVuZ3RoOwogICAgdGhpcy5fbG9hZGVkID0gMDsKICAgIHRoaXMuX2ZpbGVuYW1lID0gbnVsbDsKICAgIHRoaXMuX2Rpc2FibGVSYW5nZSA9IHNvdXJjZS5kaXNhYmxlUmFuZ2UgfHwgZmFsc2U7CiAgICB0aGlzLl9yYW5nZUNodW5rU2l6ZSA9IHNvdXJjZS5yYW5nZUNodW5rU2l6ZTsKCiAgICBpZiAoIXRoaXMuX3JhbmdlQ2h1bmtTaXplICYmICF0aGlzLl9kaXNhYmxlUmFuZ2UpIHsKICAgICAgdGhpcy5fZGlzYWJsZVJhbmdlID0gdHJ1ZTsKICAgIH0KCiAgICB0aGlzLl9pc1N0cmVhbWluZ1N1cHBvcnRlZCA9ICFzb3VyY2UuZGlzYWJsZVN0cmVhbTsKICAgIHRoaXMuX2lzUmFuZ2VTdXBwb3J0ZWQgPSAhc291cmNlLmRpc2FibGVSYW5nZTsKICAgIHRoaXMuX3JlYWRhYmxlU3RyZWFtID0gbnVsbDsKICAgIHRoaXMuX3JlYWRDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpOwogICAgdGhpcy5faGVhZGVyc0NhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoQmFzZUZ1bGxSZWFkZXIsIFt7CiAgICBrZXk6ICJyZWFkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcmVhZCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yWyJkZWZhdWx0Il0ubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBjaHVuaywgYnVmZmVyOwogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JbImRlZmF1bHQiXS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVhZENhcGFiaWxpdHkucHJvbWlzZTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9kb25lKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWQsCiAgICAgICAgICAgICAgICAgIGRvbmU6IHRydWUKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3N0b3JlZEVycm9yKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA2OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyB0aGlzLl9zdG9yZWRFcnJvcjsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgY2h1bmsgPSB0aGlzLl9yZWFkYWJsZVN0cmVhbS5yZWFkKCk7CgogICAgICAgICAgICAgICAgaWYgKCEoY2h1bmsgPT09IG51bGwpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxMDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhpcy5fcmVhZENhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCB0aGlzLnJlYWQoKSk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICB0aGlzLl9sb2FkZWQgKz0gY2h1bmsubGVuZ3RoOwoKICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uUHJvZ3Jlc3MpIHsKICAgICAgICAgICAgICAgICAgdGhpcy5vblByb2dyZXNzKHsKICAgICAgICAgICAgICAgICAgICBsb2FkZWQ6IHRoaXMuX2xvYWRlZCwKICAgICAgICAgICAgICAgICAgICB0b3RhbDogdGhpcy5fY29udGVudExlbmd0aAogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBidWZmZXIgPSBuZXcgVWludDhBcnJheShjaHVuaykuYnVmZmVyOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgICAgICB2YWx1ZTogYnVmZmVyLAogICAgICAgICAgICAgICAgICBkb25lOiBmYWxzZQogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gcmVhZCgpIHsKICAgICAgICByZXR1cm4gX3JlYWQuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHJlYWQ7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJjYW5jZWwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbChyZWFzb24pIHsKICAgICAgaWYgKCF0aGlzLl9yZWFkYWJsZVN0cmVhbSkgewogICAgICAgIHRoaXMuX2Vycm9yKHJlYXNvbik7CgogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdGhpcy5fcmVhZGFibGVTdHJlYW0uZGVzdHJveShyZWFzb24pOwogICAgfQogIH0sIHsKICAgIGtleTogIl9lcnJvciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2Vycm9yKHJlYXNvbikgewogICAgICB0aGlzLl9zdG9yZWRFcnJvciA9IHJlYXNvbjsKCiAgICAgIHRoaXMuX3JlYWRDYXBhYmlsaXR5LnJlc29sdmUoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfc2V0UmVhZGFibGVTdHJlYW0iLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9zZXRSZWFkYWJsZVN0cmVhbShyZWFkYWJsZVN0cmVhbSkgewogICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgdGhpcy5fcmVhZGFibGVTdHJlYW0gPSByZWFkYWJsZVN0cmVhbTsKICAgICAgcmVhZGFibGVTdHJlYW0ub24oInJlYWRhYmxlIiwgZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzLl9yZWFkQ2FwYWJpbGl0eS5yZXNvbHZlKCk7CiAgICAgIH0pOwogICAgICByZWFkYWJsZVN0cmVhbS5vbigiZW5kIiwgZnVuY3Rpb24gKCkgewogICAgICAgIHJlYWRhYmxlU3RyZWFtLmRlc3Ryb3koKTsKICAgICAgICBfdGhpcy5fZG9uZSA9IHRydWU7CgogICAgICAgIF90aGlzLl9yZWFkQ2FwYWJpbGl0eS5yZXNvbHZlKCk7CiAgICAgIH0pOwogICAgICByZWFkYWJsZVN0cmVhbS5vbigiZXJyb3IiLCBmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgICAgX3RoaXMuX2Vycm9yKHJlYXNvbik7CiAgICAgIH0pOwoKICAgICAgaWYgKCF0aGlzLl9pc1N0cmVhbWluZ1N1cHBvcnRlZCAmJiB0aGlzLl9pc1JhbmdlU3VwcG9ydGVkKSB7CiAgICAgICAgdGhpcy5fZXJyb3IobmV3IF91dGlsLkFib3J0RXhjZXB0aW9uKCJzdHJlYW1pbmcgaXMgZGlzYWJsZWQiKSk7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLl9zdG9yZWRFcnJvcikgewogICAgICAgIHRoaXMuX3JlYWRhYmxlU3RyZWFtLmRlc3Ryb3kodGhpcy5fc3RvcmVkRXJyb3IpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiaGVhZGVyc1JlYWR5IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5faGVhZGVyc0NhcGFiaWxpdHkucHJvbWlzZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJmaWxlbmFtZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX2ZpbGVuYW1lOwogICAgfQogIH0sIHsKICAgIGtleTogImNvbnRlbnRMZW5ndGgiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9jb250ZW50TGVuZ3RoOwogICAgfQogIH0sIHsKICAgIGtleTogImlzUmFuZ2VTdXBwb3J0ZWQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9pc1JhbmdlU3VwcG9ydGVkOwogICAgfQogIH0sIHsKICAgIGtleTogImlzU3RyZWFtaW5nU3VwcG9ydGVkIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQ7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gQmFzZUZ1bGxSZWFkZXI7Cn0oKTsKCnZhciBCYXNlUmFuZ2VSZWFkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIEJhc2VSYW5nZVJlYWRlcihzdHJlYW0pIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBCYXNlUmFuZ2VSZWFkZXIpOwoKICAgIHRoaXMuX3VybCA9IHN0cmVhbS51cmw7CiAgICB0aGlzLl9kb25lID0gZmFsc2U7CiAgICB0aGlzLl9zdG9yZWRFcnJvciA9IG51bGw7CiAgICB0aGlzLm9uUHJvZ3Jlc3MgPSBudWxsOwogICAgdGhpcy5fbG9hZGVkID0gMDsKICAgIHRoaXMuX3JlYWRhYmxlU3RyZWFtID0gbnVsbDsKICAgIHRoaXMuX3JlYWRDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpOwogICAgdmFyIHNvdXJjZSA9IHN0cmVhbS5zb3VyY2U7CiAgICB0aGlzLl9pc1N0cmVhbWluZ1N1cHBvcnRlZCA9ICFzb3VyY2UuZGlzYWJsZVN0cmVhbTsKICB9CgogIF9jcmVhdGVDbGFzcyhCYXNlUmFuZ2VSZWFkZXIsIFt7CiAgICBrZXk6ICJyZWFkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcmVhZDIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclsiZGVmYXVsdCJdLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyIGNodW5rLCBidWZmZXI7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclsiZGVmYXVsdCJdLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlYWRDYXBhYmlsaXR5LnByb21pc2U7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIGlmICghdGhpcy5fZG9uZSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWQsCiAgICAgICAgICAgICAgICAgIGRvbmU6IHRydWUKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3N0b3JlZEVycm9yKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhyb3cgdGhpcy5fc3RvcmVkRXJyb3I7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIGNodW5rID0gdGhpcy5fcmVhZGFibGVTdHJlYW0ucmVhZCgpOwoKICAgICAgICAgICAgICAgIGlmICghKGNodW5rID09PSBudWxsKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDEwOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCB0aGlzLnJlYWQoKSk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgICB0aGlzLl9sb2FkZWQgKz0gY2h1bmsubGVuZ3RoOwoKICAgICAgICAgICAgICAgIGlmICh0aGlzLm9uUHJvZ3Jlc3MpIHsKICAgICAgICAgICAgICAgICAgdGhpcy5vblByb2dyZXNzKHsKICAgICAgICAgICAgICAgICAgICBsb2FkZWQ6IHRoaXMuX2xvYWRlZAogICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBidWZmZXIgPSBuZXcgVWludDhBcnJheShjaHVuaykuYnVmZmVyOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICAgICAgdmFsdWU6IGJ1ZmZlciwKICAgICAgICAgICAgICAgICAgZG9uZTogZmFsc2UKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gcmVhZCgpIHsKICAgICAgICByZXR1cm4gX3JlYWQyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiByZWFkOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiY2FuY2VsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjYW5jZWwocmVhc29uKSB7CiAgICAgIGlmICghdGhpcy5fcmVhZGFibGVTdHJlYW0pIHsKICAgICAgICB0aGlzLl9lcnJvcihyZWFzb24pOwoKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHRoaXMuX3JlYWRhYmxlU3RyZWFtLmRlc3Ryb3kocmVhc29uKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJfZXJyb3IiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9lcnJvcihyZWFzb24pIHsKICAgICAgdGhpcy5fc3RvcmVkRXJyb3IgPSByZWFzb247CgogICAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eS5yZXNvbHZlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX3NldFJlYWRhYmxlU3RyZWFtIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0UmVhZGFibGVTdHJlYW0ocmVhZGFibGVTdHJlYW0pIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB0aGlzLl9yZWFkYWJsZVN0cmVhbSA9IHJlYWRhYmxlU3RyZWFtOwogICAgICByZWFkYWJsZVN0cmVhbS5vbigicmVhZGFibGUiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgX3RoaXMyLl9yZWFkQ2FwYWJpbGl0eS5yZXNvbHZlKCk7CiAgICAgIH0pOwogICAgICByZWFkYWJsZVN0cmVhbS5vbigiZW5kIiwgZnVuY3Rpb24gKCkgewogICAgICAgIHJlYWRhYmxlU3RyZWFtLmRlc3Ryb3koKTsKICAgICAgICBfdGhpczIuX2RvbmUgPSB0cnVlOwoKICAgICAgICBfdGhpczIuX3JlYWRDYXBhYmlsaXR5LnJlc29sdmUoKTsKICAgICAgfSk7CiAgICAgIHJlYWRhYmxlU3RyZWFtLm9uKCJlcnJvciIsIGZ1bmN0aW9uIChyZWFzb24pIHsKICAgICAgICBfdGhpczIuX2Vycm9yKHJlYXNvbik7CiAgICAgIH0pOwoKICAgICAgaWYgKHRoaXMuX3N0b3JlZEVycm9yKSB7CiAgICAgICAgdGhpcy5fcmVhZGFibGVTdHJlYW0uZGVzdHJveSh0aGlzLl9zdG9yZWRFcnJvcik7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc1N0cmVhbWluZ1N1cHBvcnRlZCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX2lzU3RyZWFtaW5nU3VwcG9ydGVkOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIEJhc2VSYW5nZVJlYWRlcjsKfSgpOwoKZnVuY3Rpb24gY3JlYXRlUmVxdWVzdE9wdGlvbnMocGFyc2VkVXJsLCBoZWFkZXJzKSB7CiAgcmV0dXJuIHsKICAgIHByb3RvY29sOiBwYXJzZWRVcmwucHJvdG9jb2wsCiAgICBhdXRoOiBwYXJzZWRVcmwuYXV0aCwKICAgIGhvc3Q6IHBhcnNlZFVybC5ob3N0bmFtZSwKICAgIHBvcnQ6IHBhcnNlZFVybC5wb3J0LAogICAgcGF0aDogcGFyc2VkVXJsLnBhdGgsCiAgICBtZXRob2Q6ICJHRVQiLAogICAgaGVhZGVyczogaGVhZGVycwogIH07Cn0KCnZhciBQREZOb2RlU3RyZWFtRnVsbFJlYWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0Jhc2VGdWxsUmVhZGVyKSB7CiAgX2luaGVyaXRzKFBERk5vZGVTdHJlYW1GdWxsUmVhZGVyLCBfQmFzZUZ1bGxSZWFkZXIpOwoKICB2YXIgX3N1cGVyID0gX2NyZWF0ZVN1cGVyKFBERk5vZGVTdHJlYW1GdWxsUmVhZGVyKTsKCiAgZnVuY3Rpb24gUERGTm9kZVN0cmVhbUZ1bGxSZWFkZXIoc3RyZWFtKSB7CiAgICB2YXIgX3RoaXMzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQREZOb2RlU3RyZWFtRnVsbFJlYWRlcik7CgogICAgX3RoaXMzID0gX3N1cGVyLmNhbGwodGhpcywgc3RyZWFtKTsKCiAgICB2YXIgaGFuZGxlUmVzcG9uc2UgPSBmdW5jdGlvbiBoYW5kbGVSZXNwb25zZShyZXNwb25zZSkgewogICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzQ29kZSA9PT0gNDA0KSB7CiAgICAgICAgdmFyIGVycm9yID0gbmV3IF91dGlsLk1pc3NpbmdQREZFeGNlcHRpb24oIk1pc3NpbmcgUERGIFwiIi5jb25jYXQoX3RoaXMzLl91cmwsICJcIi4iKSk7CiAgICAgICAgX3RoaXMzLl9zdG9yZWRFcnJvciA9IGVycm9yOwoKICAgICAgICBfdGhpczMuX2hlYWRlcnNDYXBhYmlsaXR5LnJlamVjdChlcnJvcik7CgogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgX3RoaXMzLl9oZWFkZXJzQ2FwYWJpbGl0eS5yZXNvbHZlKCk7CgogICAgICBfdGhpczMuX3NldFJlYWRhYmxlU3RyZWFtKHJlc3BvbnNlKTsKCiAgICAgIHZhciBnZXRSZXNwb25zZUhlYWRlciA9IGZ1bmN0aW9uIGdldFJlc3BvbnNlSGVhZGVyKG5hbWUpIHsKICAgICAgICByZXR1cm4gX3RoaXMzLl9yZWFkYWJsZVN0cmVhbS5oZWFkZXJzW25hbWUudG9Mb3dlckNhc2UoKV07CiAgICAgIH07CgogICAgICB2YXIgX3ZhbGlkYXRlUmFuZ2VSZXF1ZXN0ID0gKDAsIF9uZXR3b3JrX3V0aWxzLnZhbGlkYXRlUmFuZ2VSZXF1ZXN0Q2FwYWJpbGl0aWVzKSh7CiAgICAgICAgZ2V0UmVzcG9uc2VIZWFkZXI6IGdldFJlc3BvbnNlSGVhZGVyLAogICAgICAgIGlzSHR0cDogc3RyZWFtLmlzSHR0cCwKICAgICAgICByYW5nZUNodW5rU2l6ZTogX3RoaXMzLl9yYW5nZUNodW5rU2l6ZSwKICAgICAgICBkaXNhYmxlUmFuZ2U6IF90aGlzMy5fZGlzYWJsZVJhbmdlCiAgICAgIH0pLAogICAgICAgICAgYWxsb3dSYW5nZVJlcXVlc3RzID0gX3ZhbGlkYXRlUmFuZ2VSZXF1ZXN0LmFsbG93UmFuZ2VSZXF1ZXN0cywKICAgICAgICAgIHN1Z2dlc3RlZExlbmd0aCA9IF92YWxpZGF0ZVJhbmdlUmVxdWVzdC5zdWdnZXN0ZWRMZW5ndGg7CgogICAgICBfdGhpczMuX2lzUmFuZ2VTdXBwb3J0ZWQgPSBhbGxvd1JhbmdlUmVxdWVzdHM7CiAgICAgIF90aGlzMy5fY29udGVudExlbmd0aCA9IHN1Z2dlc3RlZExlbmd0aCB8fCBfdGhpczMuX2NvbnRlbnRMZW5ndGg7CiAgICAgIF90aGlzMy5fZmlsZW5hbWUgPSAoMCwgX25ldHdvcmtfdXRpbHMuZXh0cmFjdEZpbGVuYW1lRnJvbUhlYWRlcikoZ2V0UmVzcG9uc2VIZWFkZXIpOwogICAgfTsKCiAgICBfdGhpczMuX3JlcXVlc3QgPSBudWxsOwoKICAgIGlmIChfdGhpczMuX3VybC5wcm90b2NvbCA9PT0gImh0dHA6IikgewogICAgICBfdGhpczMuX3JlcXVlc3QgPSBodHRwLnJlcXVlc3QoY3JlYXRlUmVxdWVzdE9wdGlvbnMoX3RoaXMzLl91cmwsIHN0cmVhbS5odHRwSGVhZGVycyksIGhhbmRsZVJlc3BvbnNlKTsKICAgIH0gZWxzZSB7CiAgICAgIF90aGlzMy5fcmVxdWVzdCA9IGh0dHBzLnJlcXVlc3QoY3JlYXRlUmVxdWVzdE9wdGlvbnMoX3RoaXMzLl91cmwsIHN0cmVhbS5odHRwSGVhZGVycyksIGhhbmRsZVJlc3BvbnNlKTsKICAgIH0KCiAgICBfdGhpczMuX3JlcXVlc3Qub24oImVycm9yIiwgZnVuY3Rpb24gKHJlYXNvbikgewogICAgICBfdGhpczMuX3N0b3JlZEVycm9yID0gcmVhc29uOwoKICAgICAgX3RoaXMzLl9oZWFkZXJzQ2FwYWJpbGl0eS5yZWplY3QocmVhc29uKTsKICAgIH0pOwoKICAgIF90aGlzMy5fcmVxdWVzdC5lbmQoKTsKCiAgICByZXR1cm4gX3RoaXMzOwogIH0KCiAgcmV0dXJuIFBERk5vZGVTdHJlYW1GdWxsUmVhZGVyOwp9KEJhc2VGdWxsUmVhZGVyKTsKCnZhciBQREZOb2RlU3RyZWFtUmFuZ2VSZWFkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlUmFuZ2VSZWFkZXIpIHsKICBfaW5oZXJpdHMoUERGTm9kZVN0cmVhbVJhbmdlUmVhZGVyLCBfQmFzZVJhbmdlUmVhZGVyKTsKCiAgdmFyIF9zdXBlcjIgPSBfY3JlYXRlU3VwZXIoUERGTm9kZVN0cmVhbVJhbmdlUmVhZGVyKTsKCiAgZnVuY3Rpb24gUERGTm9kZVN0cmVhbVJhbmdlUmVhZGVyKHN0cmVhbSwgc3RhcnQsIGVuZCkgewogICAgdmFyIF90aGlzNDsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUERGTm9kZVN0cmVhbVJhbmdlUmVhZGVyKTsKCiAgICBfdGhpczQgPSBfc3VwZXIyLmNhbGwodGhpcywgc3RyZWFtKTsKICAgIF90aGlzNC5faHR0cEhlYWRlcnMgPSB7fTsKCiAgICBmb3IgKHZhciBwcm9wZXJ0eSBpbiBzdHJlYW0uaHR0cEhlYWRlcnMpIHsKICAgICAgdmFyIHZhbHVlID0gc3RyZWFtLmh0dHBIZWFkZXJzW3Byb3BlcnR5XTsKCiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KCiAgICAgIF90aGlzNC5faHR0cEhlYWRlcnNbcHJvcGVydHldID0gdmFsdWU7CiAgICB9CgogICAgX3RoaXM0Ll9odHRwSGVhZGVycy5SYW5nZSA9ICJieXRlcz0iLmNvbmNhdChzdGFydCwgIi0iKS5jb25jYXQoZW5kIC0gMSk7CgogICAgdmFyIGhhbmRsZVJlc3BvbnNlID0gZnVuY3Rpb24gaGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpIHsKICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1c0NvZGUgPT09IDQwNCkgewogICAgICAgIHZhciBlcnJvciA9IG5ldyBfdXRpbC5NaXNzaW5nUERGRXhjZXB0aW9uKCJNaXNzaW5nIFBERiBcIiIuY29uY2F0KF90aGlzNC5fdXJsLCAiXCIuIikpOwogICAgICAgIF90aGlzNC5fc3RvcmVkRXJyb3IgPSBlcnJvcjsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIF90aGlzNC5fc2V0UmVhZGFibGVTdHJlYW0ocmVzcG9uc2UpOwogICAgfTsKCiAgICBfdGhpczQuX3JlcXVlc3QgPSBudWxsOwoKICAgIGlmIChfdGhpczQuX3VybC5wcm90b2NvbCA9PT0gImh0dHA6IikgewogICAgICBfdGhpczQuX3JlcXVlc3QgPSBodHRwLnJlcXVlc3QoY3JlYXRlUmVxdWVzdE9wdGlvbnMoX3RoaXM0Ll91cmwsIF90aGlzNC5faHR0cEhlYWRlcnMpLCBoYW5kbGVSZXNwb25zZSk7CiAgICB9IGVsc2UgewogICAgICBfdGhpczQuX3JlcXVlc3QgPSBodHRwcy5yZXF1ZXN0KGNyZWF0ZVJlcXVlc3RPcHRpb25zKF90aGlzNC5fdXJsLCBfdGhpczQuX2h0dHBIZWFkZXJzKSwgaGFuZGxlUmVzcG9uc2UpOwogICAgfQoKICAgIF90aGlzNC5fcmVxdWVzdC5vbigiZXJyb3IiLCBmdW5jdGlvbiAocmVhc29uKSB7CiAgICAgIF90aGlzNC5fc3RvcmVkRXJyb3IgPSByZWFzb247CiAgICB9KTsKCiAgICBfdGhpczQuX3JlcXVlc3QuZW5kKCk7CgogICAgcmV0dXJuIF90aGlzNDsKICB9CgogIHJldHVybiBQREZOb2RlU3RyZWFtUmFuZ2VSZWFkZXI7Cn0oQmFzZVJhbmdlUmVhZGVyKTsKCnZhciBQREZOb2RlU3RyZWFtRnNGdWxsUmVhZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQmFzZUZ1bGxSZWFkZXIyKSB7CiAgX2luaGVyaXRzKFBERk5vZGVTdHJlYW1Gc0Z1bGxSZWFkZXIsIF9CYXNlRnVsbFJlYWRlcjIpOwoKICB2YXIgX3N1cGVyMyA9IF9jcmVhdGVTdXBlcihQREZOb2RlU3RyZWFtRnNGdWxsUmVhZGVyKTsKCiAgZnVuY3Rpb24gUERGTm9kZVN0cmVhbUZzRnVsbFJlYWRlcihzdHJlYW0pIHsKICAgIHZhciBfdGhpczU7CgogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBERk5vZGVTdHJlYW1Gc0Z1bGxSZWFkZXIpOwoKICAgIF90aGlzNSA9IF9zdXBlcjMuY2FsbCh0aGlzLCBzdHJlYW0pOwogICAgdmFyIHBhdGggPSBkZWNvZGVVUklDb21wb25lbnQoX3RoaXM1Ll91cmwucGF0aCk7CgogICAgaWYgKGZpbGVVcmlSZWdleC50ZXN0KF90aGlzNS5fdXJsLmhyZWYpKSB7CiAgICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoL15cLy8sICIiKTsKICAgIH0KCiAgICBmcy5sc3RhdChwYXRoLCBmdW5jdGlvbiAoZXJyb3IsIHN0YXQpIHsKICAgICAgaWYgKGVycm9yKSB7CiAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09ICJFTk9FTlQiKSB7CiAgICAgICAgICBlcnJvciA9IG5ldyBfdXRpbC5NaXNzaW5nUERGRXhjZXB0aW9uKCJNaXNzaW5nIFBERiBcIiIuY29uY2F0KHBhdGgsICJcIi4iKSk7CiAgICAgICAgfQoKICAgICAgICBfdGhpczUuX3N0b3JlZEVycm9yID0gZXJyb3I7CgogICAgICAgIF90aGlzNS5faGVhZGVyc0NhcGFiaWxpdHkucmVqZWN0KGVycm9yKTsKCiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBfdGhpczUuX2NvbnRlbnRMZW5ndGggPSBzdGF0LnNpemU7CgogICAgICBfdGhpczUuX3NldFJlYWRhYmxlU3RyZWFtKGZzLmNyZWF0ZVJlYWRTdHJlYW0ocGF0aCkpOwoKICAgICAgX3RoaXM1Ll9oZWFkZXJzQ2FwYWJpbGl0eS5yZXNvbHZlKCk7CiAgICB9KTsKICAgIHJldHVybiBfdGhpczU7CiAgfQoKICByZXR1cm4gUERGTm9kZVN0cmVhbUZzRnVsbFJlYWRlcjsKfShCYXNlRnVsbFJlYWRlcik7Cgp2YXIgUERGTm9kZVN0cmVhbUZzUmFuZ2VSZWFkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9CYXNlUmFuZ2VSZWFkZXIyKSB7CiAgX2luaGVyaXRzKFBERk5vZGVTdHJlYW1Gc1JhbmdlUmVhZGVyLCBfQmFzZVJhbmdlUmVhZGVyMik7CgogIHZhciBfc3VwZXI0ID0gX2NyZWF0ZVN1cGVyKFBERk5vZGVTdHJlYW1Gc1JhbmdlUmVhZGVyKTsKCiAgZnVuY3Rpb24gUERGTm9kZVN0cmVhbUZzUmFuZ2VSZWFkZXIoc3RyZWFtLCBzdGFydCwgZW5kKSB7CiAgICB2YXIgX3RoaXM2OwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQREZOb2RlU3RyZWFtRnNSYW5nZVJlYWRlcik7CgogICAgX3RoaXM2ID0gX3N1cGVyNC5jYWxsKHRoaXMsIHN0cmVhbSk7CiAgICB2YXIgcGF0aCA9IGRlY29kZVVSSUNvbXBvbmVudChfdGhpczYuX3VybC5wYXRoKTsKCiAgICBpZiAoZmlsZVVyaVJlZ2V4LnRlc3QoX3RoaXM2Ll91cmwuaHJlZikpIHsKICAgICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXlwvLywgIiIpOwogICAgfQoKICAgIF90aGlzNi5fc2V0UmVhZGFibGVTdHJlYW0oZnMuY3JlYXRlUmVhZFN0cmVhbShwYXRoLCB7CiAgICAgIHN0YXJ0OiBzdGFydCwKICAgICAgZW5kOiBlbmQgLSAxCiAgICB9KSk7CgogICAgcmV0dXJuIF90aGlzNjsKICB9CgogIHJldHVybiBQREZOb2RlU3RyZWFtRnNSYW5nZVJlYWRlcjsKfShCYXNlUmFuZ2VSZWFkZXIpOwoKLyoqKi8gfSksCi8qIDIxMyAqLwovKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dfcGRmanNfcmVxdWlyZV9fKSB7CgoidXNlIHN0cmljdCI7CgoKT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogIHZhbHVlOiB0cnVlCn0pOwpleHBvcnRzLmNyZWF0ZVJlc3BvbnNlU3RhdHVzRXJyb3IgPSBjcmVhdGVSZXNwb25zZVN0YXR1c0Vycm9yOwpleHBvcnRzLmV4dHJhY3RGaWxlbmFtZUZyb21IZWFkZXIgPSBleHRyYWN0RmlsZW5hbWVGcm9tSGVhZGVyOwpleHBvcnRzLnZhbGlkYXRlUmFuZ2VSZXF1ZXN0Q2FwYWJpbGl0aWVzID0gdmFsaWRhdGVSYW5nZVJlcXVlc3RDYXBhYmlsaXRpZXM7CmV4cG9ydHMudmFsaWRhdGVSZXNwb25zZVN0YXR1cyA9IHZhbGlkYXRlUmVzcG9uc2VTdGF0dXM7Cgp2YXIgX3V0aWwgPSBfX3dfcGRmanNfcmVxdWlyZV9fKDUpOwoKdmFyIF9jb250ZW50X2Rpc3Bvc2l0aW9uID0gX193X3BkZmpzX3JlcXVpcmVfXygyMTQpOwoKZnVuY3Rpb24gdmFsaWRhdGVSYW5nZVJlcXVlc3RDYXBhYmlsaXRpZXMoX3JlZikgewogIHZhciBnZXRSZXNwb25zZUhlYWRlciA9IF9yZWYuZ2V0UmVzcG9uc2VIZWFkZXIsCiAgICAgIGlzSHR0cCA9IF9yZWYuaXNIdHRwLAogICAgICByYW5nZUNodW5rU2l6ZSA9IF9yZWYucmFuZ2VDaHVua1NpemUsCiAgICAgIGRpc2FibGVSYW5nZSA9IF9yZWYuZGlzYWJsZVJhbmdlOwogICgwLCBfdXRpbC5hc3NlcnQpKHJhbmdlQ2h1bmtTaXplID4gMCwgIlJhbmdlIGNodW5rIHNpemUgbXVzdCBiZSBsYXJnZXIgdGhhbiB6ZXJvIik7CiAgdmFyIHJldHVyblZhbHVlcyA9IHsKICAgIGFsbG93UmFuZ2VSZXF1ZXN0czogZmFsc2UsCiAgICBzdWdnZXN0ZWRMZW5ndGg6IHVuZGVmaW5lZAogIH07CiAgdmFyIGxlbmd0aCA9IHBhcnNlSW50KGdldFJlc3BvbnNlSGVhZGVyKCJDb250ZW50LUxlbmd0aCIpLCAxMCk7CgogIGlmICghTnVtYmVyLmlzSW50ZWdlcihsZW5ndGgpKSB7CiAgICByZXR1cm4gcmV0dXJuVmFsdWVzOwogIH0KCiAgcmV0dXJuVmFsdWVzLnN1Z2dlc3RlZExlbmd0aCA9IGxlbmd0aDsKCiAgaWYgKGxlbmd0aCA8PSAyICogcmFuZ2VDaHVua1NpemUpIHsKICAgIHJldHVybiByZXR1cm5WYWx1ZXM7CiAgfQoKICBpZiAoZGlzYWJsZVJhbmdlIHx8ICFpc0h0dHApIHsKICAgIHJldHVybiByZXR1cm5WYWx1ZXM7CiAgfQoKICBpZiAoZ2V0UmVzcG9uc2VIZWFkZXIoIkFjY2VwdC1SYW5nZXMiKSAhPT0gImJ5dGVzIikgewogICAgcmV0dXJuIHJldHVyblZhbHVlczsKICB9CgogIHZhciBjb250ZW50RW5jb2RpbmcgPSBnZXRSZXNwb25zZUhlYWRlcigiQ29udGVudC1FbmNvZGluZyIpIHx8ICJpZGVudGl0eSI7CgogIGlmIChjb250ZW50RW5jb2RpbmcgIT09ICJpZGVudGl0eSIpIHsKICAgIHJldHVybiByZXR1cm5WYWx1ZXM7CiAgfQoKICByZXR1cm5WYWx1ZXMuYWxsb3dSYW5nZVJlcXVlc3RzID0gdHJ1ZTsKICByZXR1cm4gcmV0dXJuVmFsdWVzOwp9CgpmdW5jdGlvbiBleHRyYWN0RmlsZW5hbWVGcm9tSGVhZGVyKGdldFJlc3BvbnNlSGVhZGVyKSB7CiAgdmFyIGNvbnRlbnREaXNwb3NpdGlvbiA9IGdldFJlc3BvbnNlSGVhZGVyKCJDb250ZW50LURpc3Bvc2l0aW9uIik7CgogIGlmIChjb250ZW50RGlzcG9zaXRpb24pIHsKICAgIHZhciBmaWxlbmFtZSA9ICgwLCBfY29udGVudF9kaXNwb3NpdGlvbi5nZXRGaWxlbmFtZUZyb21Db250ZW50RGlzcG9zaXRpb25IZWFkZXIpKGNvbnRlbnREaXNwb3NpdGlvbik7CgogICAgaWYgKGZpbGVuYW1lLmluY2x1ZGVzKCIlIikpIHsKICAgICAgdHJ5IHsKICAgICAgICBmaWxlbmFtZSA9IGRlY29kZVVSSUNvbXBvbmVudChmaWxlbmFtZSk7CiAgICAgIH0gY2F0Y2ggKGV4KSB7fQogICAgfQoKICAgIGlmICgvXC5wZGYkL2kudGVzdChmaWxlbmFtZSkpIHsKICAgICAgcmV0dXJuIGZpbGVuYW1lOwogICAgfQogIH0KCiAgcmV0dXJuIG51bGw7Cn0KCmZ1bmN0aW9uIGNyZWF0ZVJlc3BvbnNlU3RhdHVzRXJyb3Ioc3RhdHVzLCB1cmwpIHsKICBpZiAoc3RhdHVzID09PSA0MDQgfHwgc3RhdHVzID09PSAwICYmIHVybC5zdGFydHNXaXRoKCJmaWxlOiIpKSB7CiAgICByZXR1cm4gbmV3IF91dGlsLk1pc3NpbmdQREZFeGNlcHRpb24oJ01pc3NpbmcgUERGICInICsgdXJsICsgJyIuJyk7CiAgfQoKICByZXR1cm4gbmV3IF91dGlsLlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbigiVW5leHBlY3RlZCBzZXJ2ZXIgcmVzcG9uc2UgKCIgKyBzdGF0dXMgKyAnKSB3aGlsZSByZXRyaWV2aW5nIFBERiAiJyArIHVybCArICciLicsIHN0YXR1cyk7Cn0KCmZ1bmN0aW9uIHZhbGlkYXRlUmVzcG9uc2VTdGF0dXMoc3RhdHVzKSB7CiAgcmV0dXJuIHN0YXR1cyA9PT0gMjAwIHx8IHN0YXR1cyA9PT0gMjA2Owp9CgovKioqLyB9KSwKLyogMjE0ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuZ2V0RmlsZW5hbWVGcm9tQ29udGVudERpc3Bvc2l0aW9uSGVhZGVyID0gZ2V0RmlsZW5hbWVGcm9tQ29udGVudERpc3Bvc2l0aW9uSGVhZGVyOwoKZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH0KCmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuIik7IH0KCmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gInN0cmluZyIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSAiT2JqZWN0IiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gIk1hcCIgfHwgbiA9PT0gIlNldCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gIkFyZ3VtZW50cyIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9CgpmdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0KCmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICJ1bmRlZmluZWQiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVsicmV0dXJuIl0gIT0gbnVsbCkgX2lbInJldHVybiJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfQoKZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9CgpmdW5jdGlvbiBnZXRGaWxlbmFtZUZyb21Db250ZW50RGlzcG9zaXRpb25IZWFkZXIoY29udGVudERpc3Bvc2l0aW9uKSB7CiAgdmFyIG5lZWRzRW5jb2RpbmdGaXh1cCA9IHRydWU7CiAgdmFyIHRtcCA9IHRvUGFyYW1SZWdFeHAoImZpbGVuYW1lXFwqIiwgImkiKS5leGVjKGNvbnRlbnREaXNwb3NpdGlvbik7CgogIGlmICh0bXApIHsKICAgIHRtcCA9IHRtcFsxXTsKICAgIHZhciBmaWxlbmFtZSA9IHJmYzI2MTZ1bnF1b3RlKHRtcCk7CiAgICBmaWxlbmFtZSA9IHVuZXNjYXBlKGZpbGVuYW1lKTsKICAgIGZpbGVuYW1lID0gcmZjNTk4N2RlY29kZShmaWxlbmFtZSk7CiAgICBmaWxlbmFtZSA9IHJmYzIwNDdkZWNvZGUoZmlsZW5hbWUpOwogICAgcmV0dXJuIGZpeHVwRW5jb2RpbmcoZmlsZW5hbWUpOwogIH0KCiAgdG1wID0gcmZjMjIzMWdldHBhcmFtKGNvbnRlbnREaXNwb3NpdGlvbik7CgogIGlmICh0bXApIHsKICAgIHZhciBfZmlsZW5hbWUgPSByZmMyMDQ3ZGVjb2RlKHRtcCk7CgogICAgcmV0dXJuIGZpeHVwRW5jb2RpbmcoX2ZpbGVuYW1lKTsKICB9CgogIHRtcCA9IHRvUGFyYW1SZWdFeHAoImZpbGVuYW1lIiwgImkiKS5leGVjKGNvbnRlbnREaXNwb3NpdGlvbik7CgogIGlmICh0bXApIHsKICAgIHRtcCA9IHRtcFsxXTsKCiAgICB2YXIgX2ZpbGVuYW1lMiA9IHJmYzI2MTZ1bnF1b3RlKHRtcCk7CgogICAgX2ZpbGVuYW1lMiA9IHJmYzIwNDdkZWNvZGUoX2ZpbGVuYW1lMik7CiAgICByZXR1cm4gZml4dXBFbmNvZGluZyhfZmlsZW5hbWUyKTsKICB9CgogIGZ1bmN0aW9uIHRvUGFyYW1SZWdFeHAoYXR0cmlidXRlUGF0dGVybiwgZmxhZ3MpIHsKICAgIHJldHVybiBuZXcgUmVnRXhwKCIoPzpefDspXFxzKiIgKyBhdHRyaWJ1dGVQYXR0ZXJuICsgIlxccyo9XFxzKiIgKyAiKCIgKyAnW14iO1xcc11bXjtcXHNdKicgKyAifCIgKyAnIig/OlteIlxcXFxdfFxcXFwiPykrIj8nICsgIikiLCBmbGFncyk7CiAgfQoKICBmdW5jdGlvbiB0ZXh0ZGVjb2RlKGVuY29kaW5nLCB2YWx1ZSkgewogICAgaWYgKGVuY29kaW5nKSB7CiAgICAgIGlmICghL15bXHgwMC1ceEZGXSskLy50ZXN0KHZhbHVlKSkgewogICAgICAgIHJldHVybiB2YWx1ZTsKICAgICAgfQoKICAgICAgdHJ5IHsKICAgICAgICB2YXIgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcihlbmNvZGluZywgewogICAgICAgICAgZmF0YWw6IHRydWUKICAgICAgICB9KTsKICAgICAgICB2YXIgYnl0ZXMgPSBBcnJheS5mcm9tKHZhbHVlLCBmdW5jdGlvbiAoY2gpIHsKICAgICAgICAgIHJldHVybiBjaC5jaGFyQ29kZUF0KDApICYgMHhmZjsKICAgICAgICB9KTsKICAgICAgICB2YWx1ZSA9IGRlY29kZXIuZGVjb2RlKG5ldyBVaW50OEFycmF5KGJ5dGVzKSk7CiAgICAgICAgbmVlZHNFbmNvZGluZ0ZpeHVwID0gZmFsc2U7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBpZiAoL151dGYtPzgkL2kudGVzdChlbmNvZGluZykpIHsKICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgIHZhbHVlID0gZGVjb2RlVVJJQ29tcG9uZW50KGVzY2FwZSh2YWx1ZSkpOwogICAgICAgICAgICBuZWVkc0VuY29kaW5nRml4dXAgPSBmYWxzZTsKICAgICAgICAgIH0gY2F0Y2ggKGVycikge30KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gdmFsdWU7CiAgfQoKICBmdW5jdGlvbiBmaXh1cEVuY29kaW5nKHZhbHVlKSB7CiAgICBpZiAobmVlZHNFbmNvZGluZ0ZpeHVwICYmIC9bXHg4MC1ceGZmXS8udGVzdCh2YWx1ZSkpIHsKICAgICAgdmFsdWUgPSB0ZXh0ZGVjb2RlKCJ1dGYtOCIsIHZhbHVlKTsKCiAgICAgIGlmIChuZWVkc0VuY29kaW5nRml4dXApIHsKICAgICAgICB2YWx1ZSA9IHRleHRkZWNvZGUoImlzby04ODU5LTEiLCB2YWx1ZSk7CiAgICAgIH0KICAgIH0KCiAgICByZXR1cm4gdmFsdWU7CiAgfQoKICBmdW5jdGlvbiByZmMyMjMxZ2V0cGFyYW0oY29udGVudERpc3Bvc2l0aW9uU3RyKSB7CiAgICB2YXIgbWF0Y2hlcyA9IFtdOwogICAgdmFyIG1hdGNoOwogICAgdmFyIGl0ZXIgPSB0b1BhcmFtUmVnRXhwKCJmaWxlbmFtZVxcKigoPyEwXFxkKVxcZCspKFxcKj8pIiwgImlnIik7CgogICAgd2hpbGUgKChtYXRjaCA9IGl0ZXIuZXhlYyhjb250ZW50RGlzcG9zaXRpb25TdHIpKSAhPT0gbnVsbCkgewogICAgICB2YXIgX21hdGNoID0gbWF0Y2gsCiAgICAgICAgICBfbWF0Y2gyID0gX3NsaWNlZFRvQXJyYXkoX21hdGNoLCA0KSwKICAgICAgICAgIG4gPSBfbWF0Y2gyWzFdLAogICAgICAgICAgcXVvdCA9IF9tYXRjaDJbMl0sCiAgICAgICAgICBwYXJ0ID0gX21hdGNoMlszXTsKCiAgICAgIG4gPSBwYXJzZUludChuLCAxMCk7CgogICAgICBpZiAobiBpbiBtYXRjaGVzKSB7CiAgICAgICAgaWYgKG4gPT09IDApIHsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KCiAgICAgICAgY29udGludWU7CiAgICAgIH0KCiAgICAgIG1hdGNoZXNbbl0gPSBbcXVvdCwgcGFydF07CiAgICB9CgogICAgdmFyIHBhcnRzID0gW107CgogICAgZm9yICh2YXIgX24yID0gMDsgX24yIDwgbWF0Y2hlcy5sZW5ndGg7ICsrX24yKSB7CiAgICAgIGlmICghKF9uMiBpbiBtYXRjaGVzKSkgewogICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICB2YXIgX21hdGNoZXMkX24gPSBfc2xpY2VkVG9BcnJheShtYXRjaGVzW19uMl0sIDIpLAogICAgICAgICAgX3F1b3QgPSBfbWF0Y2hlcyRfblswXSwKICAgICAgICAgIF9wYXJ0ID0gX21hdGNoZXMkX25bMV07CgogICAgICBfcGFydCA9IHJmYzI2MTZ1bnF1b3RlKF9wYXJ0KTsKCiAgICAgIGlmIChfcXVvdCkgewogICAgICAgIF9wYXJ0ID0gdW5lc2NhcGUoX3BhcnQpOwoKICAgICAgICBpZiAoX24yID09PSAwKSB7CiAgICAgICAgICBfcGFydCA9IHJmYzU5ODdkZWNvZGUoX3BhcnQpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcGFydHMucHVzaChfcGFydCk7CiAgICB9CgogICAgcmV0dXJuIHBhcnRzLmpvaW4oIiIpOwogIH0KCiAgZnVuY3Rpb24gcmZjMjYxNnVucXVvdGUodmFsdWUpIHsKICAgIGlmICh2YWx1ZS5zdGFydHNXaXRoKCciJykpIHsKICAgICAgdmFyIHBhcnRzID0gdmFsdWUuc2xpY2UoMSkuc3BsaXQoJ1xcIicpOwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkgewogICAgICAgIHZhciBxdW90aW5kZXggPSBwYXJ0c1tpXS5pbmRleE9mKCciJyk7CgogICAgICAgIGlmIChxdW90aW5kZXggIT09IC0xKSB7CiAgICAgICAgICBwYXJ0c1tpXSA9IHBhcnRzW2ldLnNsaWNlKDAsIHF1b3RpbmRleCk7CiAgICAgICAgICBwYXJ0cy5sZW5ndGggPSBpICsgMTsKICAgICAgICB9CgogICAgICAgIHBhcnRzW2ldID0gcGFydHNbaV0ucmVwbGFjZSgvXFwoLikvZywgIiQxIik7CiAgICAgIH0KCiAgICAgIHZhbHVlID0gcGFydHMuam9pbignIicpOwogICAgfQoKICAgIHJldHVybiB2YWx1ZTsKICB9CgogIGZ1bmN0aW9uIHJmYzU5ODdkZWNvZGUoZXh0dmFsdWUpIHsKICAgIHZhciBlbmNvZGluZ2VuZCA9IGV4dHZhbHVlLmluZGV4T2YoIiciKTsKCiAgICBpZiAoZW5jb2RpbmdlbmQgPT09IC0xKSB7CiAgICAgIHJldHVybiBleHR2YWx1ZTsKICAgIH0KCiAgICB2YXIgZW5jb2RpbmcgPSBleHR2YWx1ZS5zbGljZSgwLCBlbmNvZGluZ2VuZCk7CiAgICB2YXIgbGFuZ3ZhbHVlID0gZXh0dmFsdWUuc2xpY2UoZW5jb2RpbmdlbmQgKyAxKTsKICAgIHZhciB2YWx1ZSA9IGxhbmd2YWx1ZS5yZXBsYWNlKC9eW14nXSonLywgIiIpOwogICAgcmV0dXJuIHRleHRkZWNvZGUoZW5jb2RpbmcsIHZhbHVlKTsKICB9CgogIGZ1bmN0aW9uIHJmYzIwNDdkZWNvZGUodmFsdWUpIHsKICAgIGlmICghdmFsdWUuc3RhcnRzV2l0aCgiPT8iKSB8fCAvW1x4MDAtXHgxOVx4ODAtXHhmZl0vLnRlc3QodmFsdWUpKSB7CiAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0KCiAgICByZXR1cm4gdmFsdWUucmVwbGFjZSgvPVw/KFtcdy1dKilcPyhbUXFCYl0pXD8oKD86W14/XXxcPyg/IT0pKSopXD89L2csIGZ1bmN0aW9uIChtYXRjaGVzLCBjaGFyc2V0LCBlbmNvZGluZywgdGV4dCkgewogICAgICBpZiAoZW5jb2RpbmcgPT09ICJxIiB8fCBlbmNvZGluZyA9PT0gIlEiKSB7CiAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSgvXy9nLCAiICIpOwogICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UoLz0oWzAtOWEtZkEtRl17Mn0pL2csIGZ1bmN0aW9uIChtYXRjaCwgaGV4KSB7CiAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShwYXJzZUludChoZXgsIDE2KSk7CiAgICAgICAgfSk7CiAgICAgICAgcmV0dXJuIHRleHRkZWNvZGUoY2hhcnNldCwgdGV4dCk7CiAgICAgIH0KCiAgICAgIHRyeSB7CiAgICAgICAgdGV4dCA9IGF0b2IodGV4dCk7CiAgICAgIH0gY2F0Y2ggKGUpIHt9CgogICAgICByZXR1cm4gdGV4dGRlY29kZShjaGFyc2V0LCB0ZXh0KTsKICAgIH0pOwogIH0KCiAgcmV0dXJuICIiOwp9CgovKioqLyB9KSwKLyogMjE1ICovCi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd19wZGZqc19yZXF1aXJlX18pIHsKCiJ1c2Ugc3RyaWN0IjsKCgpPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgdmFsdWU6IHRydWUKfSk7CmV4cG9ydHMuUERGTmV0d29ya1N0cmVhbSA9IHZvaWQgMDsKCnZhciBfcmVnZW5lcmF0b3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd19wZGZqc19yZXF1aXJlX18oMikpOwoKdmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXyg1KTsKCnZhciBfbmV0d29ya191dGlscyA9IF9fd19wZGZqc19yZXF1aXJlX18oMjEzKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCjsKdmFyIE9LX1JFU1BPTlNFID0gMjAwOwp2YXIgUEFSVElBTF9DT05URU5UX1JFU1BPTlNFID0gMjA2OwoKZnVuY3Rpb24gZ2V0QXJyYXlCdWZmZXIoeGhyKSB7CiAgdmFyIGRhdGEgPSB4aHIucmVzcG9uc2U7CgogIGlmICh0eXBlb2YgZGF0YSAhPT0gInN0cmluZyIpIHsKICAgIHJldHVybiBkYXRhOwogIH0KCiAgdmFyIGFycmF5ID0gKDAsIF91dGlsLnN0cmluZ1RvQnl0ZXMpKGRhdGEpOwogIHJldHVybiBhcnJheS5idWZmZXI7Cn0KCnZhciBOZXR3b3JrTWFuYWdlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gTmV0d29ya01hbmFnZXIodXJsLCBhcmdzKSB7CiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTmV0d29ya01hbmFnZXIpOwoKICAgIHRoaXMudXJsID0gdXJsOwogICAgYXJncyA9IGFyZ3MgfHwge307CiAgICB0aGlzLmlzSHR0cCA9IC9eaHR0cHM/Oi9pLnRlc3QodXJsKTsKICAgIHRoaXMuaHR0cEhlYWRlcnMgPSB0aGlzLmlzSHR0cCAmJiBhcmdzLmh0dHBIZWFkZXJzIHx8IHt9OwogICAgdGhpcy53aXRoQ3JlZGVudGlhbHMgPSBhcmdzLndpdGhDcmVkZW50aWFscyB8fCBmYWxzZTsKCiAgICB0aGlzLmdldFhociA9IGFyZ3MuZ2V0WGhyIHx8IGZ1bmN0aW9uIE5ldHdvcmtNYW5hZ2VyX2dldFhocigpIHsKICAgICAgcmV0dXJuIG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogICAgfTsKCiAgICB0aGlzLmN1cnJYaHJJZCA9IDA7CiAgICB0aGlzLnBlbmRpbmdSZXF1ZXN0cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7CiAgfQoKICBfY3JlYXRlQ2xhc3MoTmV0d29ya01hbmFnZXIsIFt7CiAgICBrZXk6ICJyZXF1ZXN0UmFuZ2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlcXVlc3RSYW5nZShiZWdpbiwgZW5kLCBsaXN0ZW5lcnMpIHsKICAgICAgdmFyIGFyZ3MgPSB7CiAgICAgICAgYmVnaW46IGJlZ2luLAogICAgICAgIGVuZDogZW5kCiAgICAgIH07CgogICAgICBmb3IgKHZhciBwcm9wIGluIGxpc3RlbmVycykgewogICAgICAgIGFyZ3NbcHJvcF0gPSBsaXN0ZW5lcnNbcHJvcF07CiAgICAgIH0KCiAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoYXJncyk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVxdWVzdEZ1bGwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIHJlcXVlc3RGdWxsKGxpc3RlbmVycykgewogICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KGxpc3RlbmVycyk7CiAgICB9CiAgfSwgewogICAga2V5OiAicmVxdWVzdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVxdWVzdChhcmdzKSB7CiAgICAgIHZhciB4aHIgPSB0aGlzLmdldFhocigpOwogICAgICB2YXIgeGhySWQgPSB0aGlzLmN1cnJYaHJJZCsrOwogICAgICB2YXIgcGVuZGluZ1JlcXVlc3QgPSB0aGlzLnBlbmRpbmdSZXF1ZXN0c1t4aHJJZF0gPSB7CiAgICAgICAgeGhyOiB4aHIKICAgICAgfTsKICAgICAgeGhyLm9wZW4oIkdFVCIsIHRoaXMudXJsKTsKICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IHRoaXMud2l0aENyZWRlbnRpYWxzOwoKICAgICAgZm9yICh2YXIgcHJvcGVydHkgaW4gdGhpcy5odHRwSGVhZGVycykgewogICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuaHR0cEhlYWRlcnNbcHJvcGVydHldOwoKICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAidW5kZWZpbmVkIikgewogICAgICAgICAgY29udGludWU7CiAgICAgICAgfQoKICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihwcm9wZXJ0eSwgdmFsdWUpOwogICAgICB9CgogICAgICBpZiAodGhpcy5pc0h0dHAgJiYgImJlZ2luIiBpbiBhcmdzICYmICJlbmQiIGluIGFyZ3MpIHsKICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcigiUmFuZ2UiLCAiYnl0ZXM9Ii5jb25jYXQoYXJncy5iZWdpbiwgIi0iKS5jb25jYXQoYXJncy5lbmQgLSAxKSk7CiAgICAgICAgcGVuZGluZ1JlcXVlc3QuZXhwZWN0ZWRTdGF0dXMgPSBQQVJUSUFMX0NPTlRFTlRfUkVTUE9OU0U7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcGVuZGluZ1JlcXVlc3QuZXhwZWN0ZWRTdGF0dXMgPSBPS19SRVNQT05TRTsKICAgICAgfQoKICAgICAgeGhyLnJlc3BvbnNlVHlwZSA9ICJhcnJheWJ1ZmZlciI7CgogICAgICBpZiAoYXJncy5vbkVycm9yKSB7CiAgICAgICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbiAoZXZ0KSB7CiAgICAgICAgICBhcmdzLm9uRXJyb3IoeGhyLnN0YXR1cyk7CiAgICAgICAgfTsKICAgICAgfQoKICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IHRoaXMub25TdGF0ZUNoYW5nZS5iaW5kKHRoaXMsIHhocklkKTsKICAgICAgeGhyLm9ucHJvZ3Jlc3MgPSB0aGlzLm9uUHJvZ3Jlc3MuYmluZCh0aGlzLCB4aHJJZCk7CiAgICAgIHBlbmRpbmdSZXF1ZXN0Lm9uSGVhZGVyc1JlY2VpdmVkID0gYXJncy5vbkhlYWRlcnNSZWNlaXZlZDsKICAgICAgcGVuZGluZ1JlcXVlc3Qub25Eb25lID0gYXJncy5vbkRvbmU7CiAgICAgIHBlbmRpbmdSZXF1ZXN0Lm9uRXJyb3IgPSBhcmdzLm9uRXJyb3I7CiAgICAgIHBlbmRpbmdSZXF1ZXN0Lm9uUHJvZ3Jlc3MgPSBhcmdzLm9uUHJvZ3Jlc3M7CiAgICAgIHhoci5zZW5kKG51bGwpOwogICAgICByZXR1cm4geGhySWQ7CiAgICB9CiAgfSwgewogICAga2V5OiAib25Qcm9ncmVzcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25Qcm9ncmVzcyh4aHJJZCwgZXZ0KSB7CiAgICAgIHZhciBwZW5kaW5nUmVxdWVzdCA9IHRoaXMucGVuZGluZ1JlcXVlc3RzW3hocklkXTsKCiAgICAgIGlmICghcGVuZGluZ1JlcXVlc3QpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmIChwZW5kaW5nUmVxdWVzdC5vblByb2dyZXNzKSB7CiAgICAgICAgcGVuZGluZ1JlcXVlc3Qub25Qcm9ncmVzcyhldnQpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAib25TdGF0ZUNoYW5nZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb25TdGF0ZUNoYW5nZSh4aHJJZCwgZXZ0KSB7CiAgICAgIHZhciBwZW5kaW5nUmVxdWVzdCA9IHRoaXMucGVuZGluZ1JlcXVlc3RzW3hocklkXTsKCiAgICAgIGlmICghcGVuZGluZ1JlcXVlc3QpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciB4aHIgPSBwZW5kaW5nUmVxdWVzdC54aHI7CgogICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPj0gMiAmJiBwZW5kaW5nUmVxdWVzdC5vbkhlYWRlcnNSZWNlaXZlZCkgewogICAgICAgIHBlbmRpbmdSZXF1ZXN0Lm9uSGVhZGVyc1JlY2VpdmVkKCk7CiAgICAgICAgZGVsZXRlIHBlbmRpbmdSZXF1ZXN0Lm9uSGVhZGVyc1JlY2VpdmVkOwogICAgICB9CgogICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgIT09IDQpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIGlmICghKHhocklkIGluIHRoaXMucGVuZGluZ1JlcXVlc3RzKSkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgZGVsZXRlIHRoaXMucGVuZGluZ1JlcXVlc3RzW3hocklkXTsKCiAgICAgIGlmICh4aHIuc3RhdHVzID09PSAwICYmIHRoaXMuaXNIdHRwKSB7CiAgICAgICAgaWYgKHBlbmRpbmdSZXF1ZXN0Lm9uRXJyb3IpIHsKICAgICAgICAgIHBlbmRpbmdSZXF1ZXN0Lm9uRXJyb3IoeGhyLnN0YXR1cyk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciB4aHJTdGF0dXMgPSB4aHIuc3RhdHVzIHx8IE9LX1JFU1BPTlNFOwogICAgICB2YXIgb2tfcmVzcG9uc2Vfb25fcmFuZ2VfcmVxdWVzdCA9IHhoclN0YXR1cyA9PT0gT0tfUkVTUE9OU0UgJiYgcGVuZGluZ1JlcXVlc3QuZXhwZWN0ZWRTdGF0dXMgPT09IFBBUlRJQUxfQ09OVEVOVF9SRVNQT05TRTsKCiAgICAgIGlmICghb2tfcmVzcG9uc2Vfb25fcmFuZ2VfcmVxdWVzdCAmJiB4aHJTdGF0dXMgIT09IHBlbmRpbmdSZXF1ZXN0LmV4cGVjdGVkU3RhdHVzKSB7CiAgICAgICAgaWYgKHBlbmRpbmdSZXF1ZXN0Lm9uRXJyb3IpIHsKICAgICAgICAgIHBlbmRpbmdSZXF1ZXN0Lm9uRXJyb3IoeGhyLnN0YXR1cyk7CiAgICAgICAgfQoKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciBjaHVuayA9IGdldEFycmF5QnVmZmVyKHhocik7CgogICAgICBpZiAoeGhyU3RhdHVzID09PSBQQVJUSUFMX0NPTlRFTlRfUkVTUE9OU0UpIHsKICAgICAgICB2YXIgcmFuZ2VIZWFkZXIgPSB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoIkNvbnRlbnQtUmFuZ2UiKTsKICAgICAgICB2YXIgbWF0Y2hlcyA9IC9ieXRlcyAoXGQrKS0oXGQrKVwvKFxkKykvLmV4ZWMocmFuZ2VIZWFkZXIpOwogICAgICAgIHBlbmRpbmdSZXF1ZXN0Lm9uRG9uZSh7CiAgICAgICAgICBiZWdpbjogcGFyc2VJbnQobWF0Y2hlc1sxXSwgMTApLAogICAgICAgICAgY2h1bms6IGNodW5rCiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSBpZiAoY2h1bmspIHsKICAgICAgICBwZW5kaW5nUmVxdWVzdC5vbkRvbmUoewogICAgICAgICAgYmVnaW46IDAsCiAgICAgICAgICBjaHVuazogY2h1bmsKICAgICAgICB9KTsKICAgICAgfSBlbHNlIGlmIChwZW5kaW5nUmVxdWVzdC5vbkVycm9yKSB7CiAgICAgICAgcGVuZGluZ1JlcXVlc3Qub25FcnJvcih4aHIuc3RhdHVzKTsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImhhc1BlbmRpbmdSZXF1ZXN0cyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaGFzUGVuZGluZ1JlcXVlc3RzKCkgewogICAgICBmb3IgKHZhciB4aHJJZCBpbiB0aGlzLnBlbmRpbmdSZXF1ZXN0cykgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICByZXR1cm4gZmFsc2U7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0UmVxdWVzdFhociIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0UmVxdWVzdFhocih4aHJJZCkgewogICAgICByZXR1cm4gdGhpcy5wZW5kaW5nUmVxdWVzdHNbeGhySWRdLnhocjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc1BlbmRpbmdSZXF1ZXN0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBpc1BlbmRpbmdSZXF1ZXN0KHhocklkKSB7CiAgICAgIHJldHVybiB4aHJJZCBpbiB0aGlzLnBlbmRpbmdSZXF1ZXN0czsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJhYm9ydEFsbFJlcXVlc3RzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBhYm9ydEFsbFJlcXVlc3RzKCkgewogICAgICBmb3IgKHZhciB4aHJJZCBpbiB0aGlzLnBlbmRpbmdSZXF1ZXN0cykgewogICAgICAgIHRoaXMuYWJvcnRSZXF1ZXN0KHhocklkIHwgMCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJhYm9ydFJlcXVlc3QiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGFib3J0UmVxdWVzdCh4aHJJZCkgewogICAgICB2YXIgeGhyID0gdGhpcy5wZW5kaW5nUmVxdWVzdHNbeGhySWRdLnhocjsKICAgICAgZGVsZXRlIHRoaXMucGVuZGluZ1JlcXVlc3RzW3hocklkXTsKICAgICAgeGhyLmFib3J0KCk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gTmV0d29ya01hbmFnZXI7Cn0oKTsKCnZhciBQREZOZXR3b3JrU3RyZWFtID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBQREZOZXR3b3JrU3RyZWFtKHNvdXJjZSkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBERk5ldHdvcmtTdHJlYW0pOwoKICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTsKICAgIHRoaXMuX21hbmFnZXIgPSBuZXcgTmV0d29ya01hbmFnZXIoc291cmNlLnVybCwgewogICAgICBodHRwSGVhZGVyczogc291cmNlLmh0dHBIZWFkZXJzLAogICAgICB3aXRoQ3JlZGVudGlhbHM6IHNvdXJjZS53aXRoQ3JlZGVudGlhbHMKICAgIH0pOwogICAgdGhpcy5fcmFuZ2VDaHVua1NpemUgPSBzb3VyY2UucmFuZ2VDaHVua1NpemU7CiAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciA9IG51bGw7CiAgICB0aGlzLl9yYW5nZVJlcXVlc3RSZWFkZXJzID0gW107CiAgfQoKICBfY3JlYXRlQ2xhc3MoUERGTmV0d29ya1N0cmVhbSwgW3sKICAgIGtleTogIl9vblJhbmdlUmVxdWVzdFJlYWRlckNsb3NlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX29uUmFuZ2VSZXF1ZXN0UmVhZGVyQ2xvc2VkKHJlYWRlcikgewogICAgICB2YXIgaSA9IHRoaXMuX3JhbmdlUmVxdWVzdFJlYWRlcnMuaW5kZXhPZihyZWFkZXIpOwoKICAgICAgaWYgKGkgPj0gMCkgewogICAgICAgIHRoaXMuX3JhbmdlUmVxdWVzdFJlYWRlcnMuc3BsaWNlKGksIDEpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiZ2V0RnVsbFJlYWRlciIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RnVsbFJlYWRlcigpIHsKICAgICAgKDAsIF91dGlsLmFzc2VydCkoIXRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyLCAiUERGTmV0d29ya1N0cmVhbS5nZXRGdWxsUmVhZGVyIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlLiIpOwogICAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciA9IG5ldyBQREZOZXR3b3JrU3RyZWFtRnVsbFJlcXVlc3RSZWFkZXIodGhpcy5fbWFuYWdlciwgdGhpcy5fc291cmNlKTsKICAgICAgcmV0dXJuIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFJhbmdlUmVhZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSYW5nZVJlYWRlcihiZWdpbiwgZW5kKSB7CiAgICAgIHZhciByZWFkZXIgPSBuZXcgUERGTmV0d29ya1N0cmVhbVJhbmdlUmVxdWVzdFJlYWRlcih0aGlzLl9tYW5hZ2VyLCBiZWdpbiwgZW5kKTsKICAgICAgcmVhZGVyLm9uQ2xvc2VkID0gdGhpcy5fb25SYW5nZVJlcXVlc3RSZWFkZXJDbG9zZWQuYmluZCh0aGlzKTsKCiAgICAgIHRoaXMuX3JhbmdlUmVxdWVzdFJlYWRlcnMucHVzaChyZWFkZXIpOwoKICAgICAgcmV0dXJuIHJlYWRlcjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjYW5jZWxBbGxSZXF1ZXN0cyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuY2VsQWxsUmVxdWVzdHMocmVhc29uKSB7CiAgICAgIGlmICh0aGlzLl9mdWxsUmVxdWVzdFJlYWRlcikgewogICAgICAgIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyLmNhbmNlbChyZWFzb24pOwogICAgICB9CgogICAgICB2YXIgcmVhZGVycyA9IHRoaXMuX3JhbmdlUmVxdWVzdFJlYWRlcnMuc2xpY2UoMCk7CgogICAgICByZWFkZXJzLmZvckVhY2goZnVuY3Rpb24gKHJlYWRlcikgewogICAgICAgIHJlYWRlci5jYW5jZWwocmVhc29uKTsKICAgICAgfSk7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUERGTmV0d29ya1N0cmVhbTsKfSgpOwoKZXhwb3J0cy5QREZOZXR3b3JrU3RyZWFtID0gUERGTmV0d29ya1N0cmVhbTsKCnZhciBQREZOZXR3b3JrU3RyZWFtRnVsbFJlcXVlc3RSZWFkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFBERk5ldHdvcmtTdHJlYW1GdWxsUmVxdWVzdFJlYWRlcihtYW5hZ2VyLCBzb3VyY2UpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQREZOZXR3b3JrU3RyZWFtRnVsbFJlcXVlc3RSZWFkZXIpOwoKICAgIHRoaXMuX21hbmFnZXIgPSBtYW5hZ2VyOwogICAgdmFyIGFyZ3MgPSB7CiAgICAgIG9uSGVhZGVyc1JlY2VpdmVkOiB0aGlzLl9vbkhlYWRlcnNSZWNlaXZlZC5iaW5kKHRoaXMpLAogICAgICBvbkRvbmU6IHRoaXMuX29uRG9uZS5iaW5kKHRoaXMpLAogICAgICBvbkVycm9yOiB0aGlzLl9vbkVycm9yLmJpbmQodGhpcyksCiAgICAgIG9uUHJvZ3Jlc3M6IHRoaXMuX29uUHJvZ3Jlc3MuYmluZCh0aGlzKQogICAgfTsKICAgIHRoaXMuX3VybCA9IHNvdXJjZS51cmw7CiAgICB0aGlzLl9mdWxsUmVxdWVzdElkID0gbWFuYWdlci5yZXF1ZXN0RnVsbChhcmdzKTsKICAgIHRoaXMuX2hlYWRlcnNSZWNlaXZlZENhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7CiAgICB0aGlzLl9kaXNhYmxlUmFuZ2UgPSBzb3VyY2UuZGlzYWJsZVJhbmdlIHx8IGZhbHNlOwogICAgdGhpcy5fY29udGVudExlbmd0aCA9IHNvdXJjZS5sZW5ndGg7CiAgICB0aGlzLl9yYW5nZUNodW5rU2l6ZSA9IHNvdXJjZS5yYW5nZUNodW5rU2l6ZTsKCiAgICBpZiAoIXRoaXMuX3JhbmdlQ2h1bmtTaXplICYmICF0aGlzLl9kaXNhYmxlUmFuZ2UpIHsKICAgICAgdGhpcy5fZGlzYWJsZVJhbmdlID0gdHJ1ZTsKICAgIH0KCiAgICB0aGlzLl9pc1N0cmVhbWluZ1N1cHBvcnRlZCA9IGZhbHNlOwogICAgdGhpcy5faXNSYW5nZVN1cHBvcnRlZCA9IGZhbHNlOwogICAgdGhpcy5fY2FjaGVkQ2h1bmtzID0gW107CiAgICB0aGlzLl9yZXF1ZXN0cyA9IFtdOwogICAgdGhpcy5fZG9uZSA9IGZhbHNlOwogICAgdGhpcy5fc3RvcmVkRXJyb3IgPSB1bmRlZmluZWQ7CiAgICB0aGlzLl9maWxlbmFtZSA9IG51bGw7CiAgICB0aGlzLm9uUHJvZ3Jlc3MgPSBudWxsOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFBERk5ldHdvcmtTdHJlYW1GdWxsUmVxdWVzdFJlYWRlciwgW3sKICAgIGtleTogIl9vbkhlYWRlcnNSZWNlaXZlZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX29uSGVhZGVyc1JlY2VpdmVkKCkgewogICAgICB2YXIgZnVsbFJlcXVlc3RYaHJJZCA9IHRoaXMuX2Z1bGxSZXF1ZXN0SWQ7CgogICAgICB2YXIgZnVsbFJlcXVlc3RYaHIgPSB0aGlzLl9tYW5hZ2VyLmdldFJlcXVlc3RYaHIoZnVsbFJlcXVlc3RYaHJJZCk7CgogICAgICB2YXIgZ2V0UmVzcG9uc2VIZWFkZXIgPSBmdW5jdGlvbiBnZXRSZXNwb25zZUhlYWRlcihuYW1lKSB7CiAgICAgICAgcmV0dXJuIGZ1bGxSZXF1ZXN0WGhyLmdldFJlc3BvbnNlSGVhZGVyKG5hbWUpOwogICAgICB9OwoKICAgICAgdmFyIF92YWxpZGF0ZVJhbmdlUmVxdWVzdCA9ICgwLCBfbmV0d29ya191dGlscy52YWxpZGF0ZVJhbmdlUmVxdWVzdENhcGFiaWxpdGllcykoewogICAgICAgIGdldFJlc3BvbnNlSGVhZGVyOiBnZXRSZXNwb25zZUhlYWRlciwKICAgICAgICBpc0h0dHA6IHRoaXMuX21hbmFnZXIuaXNIdHRwLAogICAgICAgIHJhbmdlQ2h1bmtTaXplOiB0aGlzLl9yYW5nZUNodW5rU2l6ZSwKICAgICAgICBkaXNhYmxlUmFuZ2U6IHRoaXMuX2Rpc2FibGVSYW5nZQogICAgICB9KSwKICAgICAgICAgIGFsbG93UmFuZ2VSZXF1ZXN0cyA9IF92YWxpZGF0ZVJhbmdlUmVxdWVzdC5hbGxvd1JhbmdlUmVxdWVzdHMsCiAgICAgICAgICBzdWdnZXN0ZWRMZW5ndGggPSBfdmFsaWRhdGVSYW5nZVJlcXVlc3Quc3VnZ2VzdGVkTGVuZ3RoOwoKICAgICAgaWYgKGFsbG93UmFuZ2VSZXF1ZXN0cykgewogICAgICAgIHRoaXMuX2lzUmFuZ2VTdXBwb3J0ZWQgPSB0cnVlOwogICAgICB9CgogICAgICB0aGlzLl9jb250ZW50TGVuZ3RoID0gc3VnZ2VzdGVkTGVuZ3RoIHx8IHRoaXMuX2NvbnRlbnRMZW5ndGg7CiAgICAgIHRoaXMuX2ZpbGVuYW1lID0gKDAsIF9uZXR3b3JrX3V0aWxzLmV4dHJhY3RGaWxlbmFtZUZyb21IZWFkZXIpKGdldFJlc3BvbnNlSGVhZGVyKTsKCiAgICAgIGlmICh0aGlzLl9pc1JhbmdlU3VwcG9ydGVkKSB7CiAgICAgICAgdGhpcy5fbWFuYWdlci5hYm9ydFJlcXVlc3QoZnVsbFJlcXVlc3RYaHJJZCk7CiAgICAgIH0KCiAgICAgIHRoaXMuX2hlYWRlcnNSZWNlaXZlZENhcGFiaWxpdHkucmVzb2x2ZSgpOwogICAgfQogIH0sIHsKICAgIGtleTogIl9vbkRvbmUiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vbkRvbmUoYXJncykgewogICAgICBpZiAoYXJncykgewogICAgICAgIGlmICh0aGlzLl9yZXF1ZXN0cy5sZW5ndGggPiAwKSB7CiAgICAgICAgICB2YXIgcmVxdWVzdENhcGFiaWxpdHkgPSB0aGlzLl9yZXF1ZXN0cy5zaGlmdCgpOwoKICAgICAgICAgIHJlcXVlc3RDYXBhYmlsaXR5LnJlc29sdmUoewogICAgICAgICAgICB2YWx1ZTogYXJncy5jaHVuaywKICAgICAgICAgICAgZG9uZTogZmFsc2UKICAgICAgICAgIH0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLl9jYWNoZWRDaHVua3MucHVzaChhcmdzLmNodW5rKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHRoaXMuX2RvbmUgPSB0cnVlOwoKICAgICAgaWYgKHRoaXMuX2NhY2hlZENodW5rcy5sZW5ndGggPiAwKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICB0aGlzLl9yZXF1ZXN0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXF1ZXN0Q2FwYWJpbGl0eSkgewogICAgICAgIHJlcXVlc3RDYXBhYmlsaXR5LnJlc29sdmUoewogICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCwKICAgICAgICAgIGRvbmU6IHRydWUKICAgICAgICB9KTsKICAgICAgfSk7CgogICAgICB0aGlzLl9yZXF1ZXN0cyA9IFtdOwogICAgfQogIH0sIHsKICAgIGtleTogIl9vbkVycm9yIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfb25FcnJvcihzdGF0dXMpIHsKICAgICAgdmFyIHVybCA9IHRoaXMuX3VybDsKICAgICAgdmFyIGV4Y2VwdGlvbiA9ICgwLCBfbmV0d29ya191dGlscy5jcmVhdGVSZXNwb25zZVN0YXR1c0Vycm9yKShzdGF0dXMsIHVybCk7CiAgICAgIHRoaXMuX3N0b3JlZEVycm9yID0gZXhjZXB0aW9uOwoKICAgICAgdGhpcy5faGVhZGVyc1JlY2VpdmVkQ2FwYWJpbGl0eS5yZWplY3QoZXhjZXB0aW9uKTsKCiAgICAgIHRoaXMuX3JlcXVlc3RzLmZvckVhY2goZnVuY3Rpb24gKHJlcXVlc3RDYXBhYmlsaXR5KSB7CiAgICAgICAgcmVxdWVzdENhcGFiaWxpdHkucmVqZWN0KGV4Y2VwdGlvbik7CiAgICAgIH0pOwoKICAgICAgdGhpcy5fcmVxdWVzdHMgPSBbXTsKICAgICAgdGhpcy5fY2FjaGVkQ2h1bmtzID0gW107CiAgICB9CiAgfSwgewogICAga2V5OiAiX29uUHJvZ3Jlc3MiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vblByb2dyZXNzKGRhdGEpIHsKICAgICAgaWYgKHRoaXMub25Qcm9ncmVzcykgewogICAgICAgIHRoaXMub25Qcm9ncmVzcyh7CiAgICAgICAgICBsb2FkZWQ6IGRhdGEubG9hZGVkLAogICAgICAgICAgdG90YWw6IGRhdGEubGVuZ3RoQ29tcHV0YWJsZSA/IGRhdGEudG90YWwgOiB0aGlzLl9jb250ZW50TGVuZ3RoCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJyZWFkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcmVhZCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yWyJkZWZhdWx0Il0ubWFyayhmdW5jdGlvbiBfY2FsbGVlKCkgewogICAgICAgIHZhciBjaHVuaywgcmVxdWVzdENhcGFiaWxpdHk7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclsiZGVmYXVsdCJdLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3N0b3JlZEVycm9yKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB0aHJvdyB0aGlzLl9zdG9yZWRFcnJvcjsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgaWYgKCEodGhpcy5fY2FjaGVkQ2h1bmtzLmxlbmd0aCA+IDApKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBjaHVuayA9IHRoaXMuX2NhY2hlZENodW5rcy5zaGlmdCgpOwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgICAgICB2YWx1ZTogY2h1bmssCiAgICAgICAgICAgICAgICAgIGRvbmU6IGZhbHNlCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9kb25lKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA3OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWQsCiAgICAgICAgICAgICAgICAgIGRvbmU6IHRydWUKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgICByZXF1ZXN0Q2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTsKCiAgICAgICAgICAgICAgICB0aGlzLl9yZXF1ZXN0cy5wdXNoKHJlcXVlc3RDYXBhYmlsaXR5KTsKCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCByZXF1ZXN0Q2FwYWJpbGl0eS5wcm9taXNlKTsKCiAgICAgICAgICAgICAgY2FzZSAxMDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiByZWFkKCkgewogICAgICAgIHJldHVybiBfcmVhZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gcmVhZDsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImNhbmNlbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuY2VsKHJlYXNvbikgewogICAgICB0aGlzLl9kb25lID0gdHJ1ZTsKCiAgICAgIHRoaXMuX2hlYWRlcnNSZWNlaXZlZENhcGFiaWxpdHkucmVqZWN0KHJlYXNvbik7CgogICAgICB0aGlzLl9yZXF1ZXN0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXF1ZXN0Q2FwYWJpbGl0eSkgewogICAgICAgIHJlcXVlc3RDYXBhYmlsaXR5LnJlc29sdmUoewogICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCwKICAgICAgICAgIGRvbmU6IHRydWUKICAgICAgICB9KTsKICAgICAgfSk7CgogICAgICB0aGlzLl9yZXF1ZXN0cyA9IFtdOwoKICAgICAgaWYgKHRoaXMuX21hbmFnZXIuaXNQZW5kaW5nUmVxdWVzdCh0aGlzLl9mdWxsUmVxdWVzdElkKSkgewogICAgICAgIHRoaXMuX21hbmFnZXIuYWJvcnRSZXF1ZXN0KHRoaXMuX2Z1bGxSZXF1ZXN0SWQpOwogICAgICB9CgogICAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciA9IG51bGw7CiAgICB9CiAgfSwgewogICAga2V5OiAiZmlsZW5hbWUiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9maWxlbmFtZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc1JhbmdlU3VwcG9ydGVkIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5faXNSYW5nZVN1cHBvcnRlZDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc1N0cmVhbWluZ1N1cHBvcnRlZCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX2lzU3RyZWFtaW5nU3VwcG9ydGVkOwogICAgfQogIH0sIHsKICAgIGtleTogImNvbnRlbnRMZW5ndGgiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9jb250ZW50TGVuZ3RoOwogICAgfQogIH0sIHsKICAgIGtleTogImhlYWRlcnNSZWFkeSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX2hlYWRlcnNSZWNlaXZlZENhcGFiaWxpdHkucHJvbWlzZTsKICAgIH0KICB9XSk7CgogIHJldHVybiBQREZOZXR3b3JrU3RyZWFtRnVsbFJlcXVlc3RSZWFkZXI7Cn0oKTsKCnZhciBQREZOZXR3b3JrU3RyZWFtUmFuZ2VSZXF1ZXN0UmVhZGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBQREZOZXR3b3JrU3RyZWFtUmFuZ2VSZXF1ZXN0UmVhZGVyKG1hbmFnZXIsIGJlZ2luLCBlbmQpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQREZOZXR3b3JrU3RyZWFtUmFuZ2VSZXF1ZXN0UmVhZGVyKTsKCiAgICB0aGlzLl9tYW5hZ2VyID0gbWFuYWdlcjsKICAgIHZhciBhcmdzID0gewogICAgICBvbkRvbmU6IHRoaXMuX29uRG9uZS5iaW5kKHRoaXMpLAogICAgICBvblByb2dyZXNzOiB0aGlzLl9vblByb2dyZXNzLmJpbmQodGhpcykKICAgIH07CiAgICB0aGlzLl9yZXF1ZXN0SWQgPSBtYW5hZ2VyLnJlcXVlc3RSYW5nZShiZWdpbiwgZW5kLCBhcmdzKTsKICAgIHRoaXMuX3JlcXVlc3RzID0gW107CiAgICB0aGlzLl9xdWV1ZWRDaHVuayA9IG51bGw7CiAgICB0aGlzLl9kb25lID0gZmFsc2U7CiAgICB0aGlzLm9uUHJvZ3Jlc3MgPSBudWxsOwogICAgdGhpcy5vbkNsb3NlZCA9IG51bGw7CiAgfQoKICBfY3JlYXRlQ2xhc3MoUERGTmV0d29ya1N0cmVhbVJhbmdlUmVxdWVzdFJlYWRlciwgW3sKICAgIGtleTogIl9jbG9zZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX2Nsb3NlKCkgewogICAgICBpZiAodGhpcy5vbkNsb3NlZCkgewogICAgICAgIHRoaXMub25DbG9zZWQodGhpcyk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJfb25Eb25lIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBfb25Eb25lKGRhdGEpIHsKICAgICAgdmFyIGNodW5rID0gZGF0YS5jaHVuazsKCiAgICAgIGlmICh0aGlzLl9yZXF1ZXN0cy5sZW5ndGggPiAwKSB7CiAgICAgICAgdmFyIHJlcXVlc3RDYXBhYmlsaXR5ID0gdGhpcy5fcmVxdWVzdHMuc2hpZnQoKTsKCiAgICAgICAgcmVxdWVzdENhcGFiaWxpdHkucmVzb2x2ZSh7CiAgICAgICAgICB2YWx1ZTogY2h1bmssCiAgICAgICAgICBkb25lOiBmYWxzZQogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuX3F1ZXVlZENodW5rID0gY2h1bms7CiAgICAgIH0KCiAgICAgIHRoaXMuX2RvbmUgPSB0cnVlOwoKICAgICAgdGhpcy5fcmVxdWVzdHMuZm9yRWFjaChmdW5jdGlvbiAocmVxdWVzdENhcGFiaWxpdHkpIHsKICAgICAgICByZXF1ZXN0Q2FwYWJpbGl0eS5yZXNvbHZlKHsKICAgICAgICAgIHZhbHVlOiB1bmRlZmluZWQsCiAgICAgICAgICBkb25lOiB0cnVlCiAgICAgICAgfSk7CiAgICAgIH0pOwoKICAgICAgdGhpcy5fcmVxdWVzdHMgPSBbXTsKCiAgICAgIHRoaXMuX2Nsb3NlKCk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX29uUHJvZ3Jlc3MiLAogICAgdmFsdWU6IGZ1bmN0aW9uIF9vblByb2dyZXNzKGV2dCkgewogICAgICBpZiAoIXRoaXMuaXNTdHJlYW1pbmdTdXBwb3J0ZWQgJiYgdGhpcy5vblByb2dyZXNzKSB7CiAgICAgICAgdGhpcy5vblByb2dyZXNzKHsKICAgICAgICAgIGxvYWRlZDogZXZ0LmxvYWRlZAogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAicmVhZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3JlYWQyID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JbImRlZmF1bHQiXS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHZhciBjaHVuaywgcmVxdWVzdENhcGFiaWxpdHk7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclsiZGVmYXVsdCJdLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgaWYgKCEodGhpcy5fcXVldWVkQ2h1bmsgIT09IG51bGwpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgY2h1bmsgPSB0aGlzLl9xdWV1ZWRDaHVuazsKICAgICAgICAgICAgICAgIHRoaXMuX3F1ZXVlZENodW5rID0gbnVsbDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgICAgIHZhbHVlOiBjaHVuaywKICAgICAgICAgICAgICAgICAgZG9uZTogZmFsc2UKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2RvbmUpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA2OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgICAgICB2YWx1ZTogdW5kZWZpbmVkLAogICAgICAgICAgICAgICAgICBkb25lOiB0cnVlCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgcmVxdWVzdENhcGFiaWxpdHkgPSAoMCwgX3V0aWwuY3JlYXRlUHJvbWlzZUNhcGFiaWxpdHkpKCk7CgogICAgICAgICAgICAgICAgdGhpcy5fcmVxdWVzdHMucHVzaChyZXF1ZXN0Q2FwYWJpbGl0eSk7CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIHJlcXVlc3RDYXBhYmlsaXR5LnByb21pc2UpOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiByZWFkKCkgewogICAgICAgIHJldHVybiBfcmVhZDIuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHJlYWQ7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJjYW5jZWwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNhbmNlbChyZWFzb24pIHsKICAgICAgdGhpcy5fZG9uZSA9IHRydWU7CgogICAgICB0aGlzLl9yZXF1ZXN0cy5mb3JFYWNoKGZ1bmN0aW9uIChyZXF1ZXN0Q2FwYWJpbGl0eSkgewogICAgICAgIHJlcXVlc3RDYXBhYmlsaXR5LnJlc29sdmUoewogICAgICAgICAgdmFsdWU6IHVuZGVmaW5lZCwKICAgICAgICAgIGRvbmU6IHRydWUKICAgICAgICB9KTsKICAgICAgfSk7CgogICAgICB0aGlzLl9yZXF1ZXN0cyA9IFtdOwoKICAgICAgaWYgKHRoaXMuX21hbmFnZXIuaXNQZW5kaW5nUmVxdWVzdCh0aGlzLl9yZXF1ZXN0SWQpKSB7CiAgICAgICAgdGhpcy5fbWFuYWdlci5hYm9ydFJlcXVlc3QodGhpcy5fcmVxdWVzdElkKTsKICAgICAgfQoKICAgICAgdGhpcy5fY2xvc2UoKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc1N0cmVhbWluZ1N1cHBvcnRlZCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFBERk5ldHdvcmtTdHJlYW1SYW5nZVJlcXVlc3RSZWFkZXI7Cn0oKTsKCi8qKiovIH0pLAovKiAyMTYgKi8KLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193X3BkZmpzX3JlcXVpcmVfXykgewoKInVzZSBzdHJpY3QiOwoKCk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICB2YWx1ZTogdHJ1ZQp9KTsKZXhwb3J0cy5QREZGZXRjaFN0cmVhbSA9IHZvaWQgMDsKCnZhciBfcmVnZW5lcmF0b3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9fd19wZGZqc19yZXF1aXJlX18oMikpOwoKdmFyIF91dGlsID0gX193X3BkZmpzX3JlcXVpcmVfXyg1KTsKCnZhciBfbmV0d29ya191dGlscyA9IF9fd19wZGZqc19yZXF1aXJlX18oMjEzKTsKCmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgpmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7IHRyeSB7IHZhciBpbmZvID0gZ2VuW2tleV0oYXJnKTsgdmFyIHZhbHVlID0gaW5mby52YWx1ZTsgfSBjYXRjaCAoZXJyb3IpIHsgcmVqZWN0KGVycm9yKTsgcmV0dXJuOyB9IGlmIChpbmZvLmRvbmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0gZWxzZSB7IFByb21pc2UucmVzb2x2ZSh2YWx1ZSkudGhlbihfbmV4dCwgX3Rocm93KTsgfSB9CgpmdW5jdGlvbiBfYXN5bmNUb0dlbmVyYXRvcihmbikgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTsgZnVuY3Rpb24gX25leHQodmFsdWUpIHsgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCAibmV4dCIsIHZhbHVlKTsgfSBmdW5jdGlvbiBfdGhyb3coZXJyKSB7IGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgInRocm93IiwgZXJyKTsgfSBfbmV4dCh1bmRlZmluZWQpOyB9KTsgfTsgfQoKZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgpmdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfQoKZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH0KCjsKCmZ1bmN0aW9uIGNyZWF0ZUZldGNoT3B0aW9ucyhoZWFkZXJzLCB3aXRoQ3JlZGVudGlhbHMsIGFib3J0Q29udHJvbGxlcikgewogIHJldHVybiB7CiAgICBtZXRob2Q6ICJHRVQiLAogICAgaGVhZGVyczogaGVhZGVycywKICAgIHNpZ25hbDogYWJvcnRDb250cm9sbGVyICYmIGFib3J0Q29udHJvbGxlci5zaWduYWwsCiAgICBtb2RlOiAiY29ycyIsCiAgICBjcmVkZW50aWFsczogd2l0aENyZWRlbnRpYWxzID8gImluY2x1ZGUiIDogInNhbWUtb3JpZ2luIiwKICAgIHJlZGlyZWN0OiAiZm9sbG93IgogIH07Cn0KCmZ1bmN0aW9uIGNyZWF0ZUhlYWRlcnMoaHR0cEhlYWRlcnMpIHsKICB2YXIgaGVhZGVycyA9IG5ldyBIZWFkZXJzKCk7CgogIGZvciAodmFyIHByb3BlcnR5IGluIGh0dHBIZWFkZXJzKSB7CiAgICB2YXIgdmFsdWUgPSBodHRwSGVhZGVyc1twcm9wZXJ0eV07CgogICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gInVuZGVmaW5lZCIpIHsKICAgICAgY29udGludWU7CiAgICB9CgogICAgaGVhZGVycy5hcHBlbmQocHJvcGVydHksIHZhbHVlKTsKICB9CgogIHJldHVybiBoZWFkZXJzOwp9Cgp2YXIgUERGRmV0Y2hTdHJlYW0gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFBERkZldGNoU3RyZWFtKHNvdXJjZSkgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFBERkZldGNoU3RyZWFtKTsKCiAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTsKICAgIHRoaXMuaXNIdHRwID0gL15odHRwcz86L2kudGVzdChzb3VyY2UudXJsKTsKICAgIHRoaXMuaHR0cEhlYWRlcnMgPSB0aGlzLmlzSHR0cCAmJiBzb3VyY2UuaHR0cEhlYWRlcnMgfHwge307CiAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciA9IG51bGw7CiAgICB0aGlzLl9yYW5nZVJlcXVlc3RSZWFkZXJzID0gW107CiAgfQoKICBfY3JlYXRlQ2xhc3MoUERGRmV0Y2hTdHJlYW0sIFt7CiAgICBrZXk6ICJnZXRGdWxsUmVhZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRGdWxsUmVhZGVyKCkgewogICAgICAoMCwgX3V0aWwuYXNzZXJ0KSghdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIsICJQREZGZXRjaFN0cmVhbS5nZXRGdWxsUmVhZGVyIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlLiIpOwogICAgICB0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciA9IG5ldyBQREZGZXRjaFN0cmVhbVJlYWRlcih0aGlzKTsKICAgICAgcmV0dXJuIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyOwogICAgfQogIH0sIHsKICAgIGtleTogImdldFJhbmdlUmVhZGVyIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRSYW5nZVJlYWRlcihiZWdpbiwgZW5kKSB7CiAgICAgIGlmIChlbmQgPD0gdGhpcy5fcHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KCiAgICAgIHZhciByZWFkZXIgPSBuZXcgUERGRmV0Y2hTdHJlYW1SYW5nZVJlYWRlcih0aGlzLCBiZWdpbiwgZW5kKTsKCiAgICAgIHRoaXMuX3JhbmdlUmVxdWVzdFJlYWRlcnMucHVzaChyZWFkZXIpOwoKICAgICAgcmV0dXJuIHJlYWRlcjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJjYW5jZWxBbGxSZXF1ZXN0cyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuY2VsQWxsUmVxdWVzdHMocmVhc29uKSB7CiAgICAgIGlmICh0aGlzLl9mdWxsUmVxdWVzdFJlYWRlcikgewogICAgICAgIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyLmNhbmNlbChyZWFzb24pOwogICAgICB9CgogICAgICB2YXIgcmVhZGVycyA9IHRoaXMuX3JhbmdlUmVxdWVzdFJlYWRlcnMuc2xpY2UoMCk7CgogICAgICByZWFkZXJzLmZvckVhY2goZnVuY3Rpb24gKHJlYWRlcikgewogICAgICAgIHJlYWRlci5jYW5jZWwocmVhc29uKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAiX3Byb2dyZXNzaXZlRGF0YUxlbmd0aCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyID8gdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXIuX2xvYWRlZCA6IDA7CiAgICB9CiAgfV0pOwoKICByZXR1cm4gUERGRmV0Y2hTdHJlYW07Cn0oKTsKCmV4cG9ydHMuUERGRmV0Y2hTdHJlYW0gPSBQREZGZXRjaFN0cmVhbTsKCnZhciBQREZGZXRjaFN0cmVhbVJlYWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgZnVuY3Rpb24gUERGRmV0Y2hTdHJlYW1SZWFkZXIoc3RyZWFtKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQREZGZXRjaFN0cmVhbVJlYWRlcik7CgogICAgdGhpcy5fc3RyZWFtID0gc3RyZWFtOwogICAgdGhpcy5fcmVhZGVyID0gbnVsbDsKICAgIHRoaXMuX2xvYWRlZCA9IDA7CiAgICB0aGlzLl9maWxlbmFtZSA9IG51bGw7CiAgICB2YXIgc291cmNlID0gc3RyZWFtLnNvdXJjZTsKICAgIHRoaXMuX3dpdGhDcmVkZW50aWFscyA9IHNvdXJjZS53aXRoQ3JlZGVudGlhbHMgfHwgZmFsc2U7CiAgICB0aGlzLl9jb250ZW50TGVuZ3RoID0gc291cmNlLmxlbmd0aDsKICAgIHRoaXMuX2hlYWRlcnNDYXBhYmlsaXR5ID0gKDAsIF91dGlsLmNyZWF0ZVByb21pc2VDYXBhYmlsaXR5KSgpOwogICAgdGhpcy5fZGlzYWJsZVJhbmdlID0gc291cmNlLmRpc2FibGVSYW5nZSB8fCBmYWxzZTsKICAgIHRoaXMuX3JhbmdlQ2h1bmtTaXplID0gc291cmNlLnJhbmdlQ2h1bmtTaXplOwoKICAgIGlmICghdGhpcy5fcmFuZ2VDaHVua1NpemUgJiYgIXRoaXMuX2Rpc2FibGVSYW5nZSkgewogICAgICB0aGlzLl9kaXNhYmxlUmFuZ2UgPSB0cnVlOwogICAgfQoKICAgIGlmICh0eXBlb2YgQWJvcnRDb250cm9sbGVyICE9PSAidW5kZWZpbmVkIikgewogICAgICB0aGlzLl9hYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7CiAgICB9CgogICAgdGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQgPSAhc291cmNlLmRpc2FibGVTdHJlYW07CiAgICB0aGlzLl9pc1JhbmdlU3VwcG9ydGVkID0gIXNvdXJjZS5kaXNhYmxlUmFuZ2U7CiAgICB0aGlzLl9oZWFkZXJzID0gY3JlYXRlSGVhZGVycyh0aGlzLl9zdHJlYW0uaHR0cEhlYWRlcnMpOwogICAgdmFyIHVybCA9IHNvdXJjZS51cmw7CiAgICBmZXRjaCh1cmwsIGNyZWF0ZUZldGNoT3B0aW9ucyh0aGlzLl9oZWFkZXJzLCB0aGlzLl93aXRoQ3JlZGVudGlhbHMsIHRoaXMuX2Fib3J0Q29udHJvbGxlcikpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgIGlmICghKDAsIF9uZXR3b3JrX3V0aWxzLnZhbGlkYXRlUmVzcG9uc2VTdGF0dXMpKHJlc3BvbnNlLnN0YXR1cykpIHsKICAgICAgICB0aHJvdyAoMCwgX25ldHdvcmtfdXRpbHMuY3JlYXRlUmVzcG9uc2VTdGF0dXNFcnJvcikocmVzcG9uc2Uuc3RhdHVzLCB1cmwpOwogICAgICB9CgogICAgICBfdGhpcy5fcmVhZGVyID0gcmVzcG9uc2UuYm9keS5nZXRSZWFkZXIoKTsKCiAgICAgIF90aGlzLl9oZWFkZXJzQ2FwYWJpbGl0eS5yZXNvbHZlKCk7CgogICAgICB2YXIgZ2V0UmVzcG9uc2VIZWFkZXIgPSBmdW5jdGlvbiBnZXRSZXNwb25zZUhlYWRlcihuYW1lKSB7CiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmhlYWRlcnMuZ2V0KG5hbWUpOwogICAgICB9OwoKICAgICAgdmFyIF92YWxpZGF0ZVJhbmdlUmVxdWVzdCA9ICgwLCBfbmV0d29ya191dGlscy52YWxpZGF0ZVJhbmdlUmVxdWVzdENhcGFiaWxpdGllcykoewogICAgICAgIGdldFJlc3BvbnNlSGVhZGVyOiBnZXRSZXNwb25zZUhlYWRlciwKICAgICAgICBpc0h0dHA6IF90aGlzLl9zdHJlYW0uaXNIdHRwLAogICAgICAgIHJhbmdlQ2h1bmtTaXplOiBfdGhpcy5fcmFuZ2VDaHVua1NpemUsCiAgICAgICAgZGlzYWJsZVJhbmdlOiBfdGhpcy5fZGlzYWJsZVJhbmdlCiAgICAgIH0pLAogICAgICAgICAgYWxsb3dSYW5nZVJlcXVlc3RzID0gX3ZhbGlkYXRlUmFuZ2VSZXF1ZXN0LmFsbG93UmFuZ2VSZXF1ZXN0cywKICAgICAgICAgIHN1Z2dlc3RlZExlbmd0aCA9IF92YWxpZGF0ZVJhbmdlUmVxdWVzdC5zdWdnZXN0ZWRMZW5ndGg7CgogICAgICBfdGhpcy5faXNSYW5nZVN1cHBvcnRlZCA9IGFsbG93UmFuZ2VSZXF1ZXN0czsKICAgICAgX3RoaXMuX2NvbnRlbnRMZW5ndGggPSBzdWdnZXN0ZWRMZW5ndGggfHwgX3RoaXMuX2NvbnRlbnRMZW5ndGg7CiAgICAgIF90aGlzLl9maWxlbmFtZSA9ICgwLCBfbmV0d29ya191dGlscy5leHRyYWN0RmlsZW5hbWVGcm9tSGVhZGVyKShnZXRSZXNwb25zZUhlYWRlcik7CgogICAgICBpZiAoIV90aGlzLl9pc1N0cmVhbWluZ1N1cHBvcnRlZCAmJiBfdGhpcy5faXNSYW5nZVN1cHBvcnRlZCkgewogICAgICAgIF90aGlzLmNhbmNlbChuZXcgX3V0aWwuQWJvcnRFeGNlcHRpb24oIlN0cmVhbWluZyBpcyBkaXNhYmxlZC4iKSk7CiAgICAgIH0KICAgIH0pWyJjYXRjaCJdKHRoaXMuX2hlYWRlcnNDYXBhYmlsaXR5LnJlamVjdCk7CiAgICB0aGlzLm9uUHJvZ3Jlc3MgPSBudWxsOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFBERkZldGNoU3RyZWFtUmVhZGVyLCBbewogICAga2V5OiAicmVhZCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3JlYWQgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclsiZGVmYXVsdCJdLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgX3lpZWxkJHRoaXMkX3JlYWRlciRyLCB2YWx1ZSwgZG9uZSwgYnVmZmVyOwoKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yWyJkZWZhdWx0Il0ud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2hlYWRlcnNDYXBhYmlsaXR5LnByb21pc2U7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlYWRlci5yZWFkKCk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIF95aWVsZCR0aGlzJF9yZWFkZXIkciA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICB2YWx1ZSA9IF95aWVsZCR0aGlzJF9yZWFkZXIkci52YWx1ZTsKICAgICAgICAgICAgICAgIGRvbmUgPSBfeWllbGQkdGhpcyRfcmVhZGVyJHIuZG9uZTsKCiAgICAgICAgICAgICAgICBpZiAoIWRvbmUpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHsKICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLAogICAgICAgICAgICAgICAgICBkb25lOiBkb25lCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgICAgdGhpcy5fbG9hZGVkICs9IHZhbHVlLmJ5dGVMZW5ndGg7CgogICAgICAgICAgICAgICAgaWYgKHRoaXMub25Qcm9ncmVzcykgewogICAgICAgICAgICAgICAgICB0aGlzLm9uUHJvZ3Jlc3MoewogICAgICAgICAgICAgICAgICAgIGxvYWRlZDogdGhpcy5fbG9hZGVkLAogICAgICAgICAgICAgICAgICAgIHRvdGFsOiB0aGlzLl9jb250ZW50TGVuZ3RoCiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KHZhbHVlKS5idWZmZXI7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgICAgIHZhbHVlOiBidWZmZXIsCiAgICAgICAgICAgICAgICAgIGRvbmU6IGZhbHNlCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiByZWFkKCkgewogICAgICAgIHJldHVybiBfcmVhZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gcmVhZDsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImNhbmNlbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuY2VsKHJlYXNvbikgewogICAgICBpZiAodGhpcy5fcmVhZGVyKSB7CiAgICAgICAgdGhpcy5fcmVhZGVyLmNhbmNlbChyZWFzb24pOwogICAgICB9CgogICAgICBpZiAodGhpcy5fYWJvcnRDb250cm9sbGVyKSB7CiAgICAgICAgdGhpcy5fYWJvcnRDb250cm9sbGVyLmFib3J0KCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJoZWFkZXJzUmVhZHkiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9oZWFkZXJzQ2FwYWJpbGl0eS5wcm9taXNlOwogICAgfQogIH0sIHsKICAgIGtleTogImZpbGVuYW1lIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5fZmlsZW5hbWU7CiAgICB9CiAgfSwgewogICAga2V5OiAiY29udGVudExlbmd0aCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnRMZW5ndGg7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNSYW5nZVN1cHBvcnRlZCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX2lzUmFuZ2VTdXBwb3J0ZWQ7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNTdHJlYW1pbmdTdXBwb3J0ZWQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLl9pc1N0cmVhbWluZ1N1cHBvcnRlZDsKICAgIH0KICB9XSk7CgogIHJldHVybiBQREZGZXRjaFN0cmVhbVJlYWRlcjsKfSgpOwoKdmFyIFBERkZldGNoU3RyZWFtUmFuZ2VSZWFkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIGZ1bmN0aW9uIFBERkZldGNoU3RyZWFtUmFuZ2VSZWFkZXIoc3RyZWFtLCBiZWdpbiwgZW5kKSB7CiAgICB2YXIgX3RoaXMyID0gdGhpczsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUERGRmV0Y2hTdHJlYW1SYW5nZVJlYWRlcik7CgogICAgdGhpcy5fc3RyZWFtID0gc3RyZWFtOwogICAgdGhpcy5fcmVhZGVyID0gbnVsbDsKICAgIHRoaXMuX2xvYWRlZCA9IDA7CiAgICB2YXIgc291cmNlID0gc3RyZWFtLnNvdXJjZTsKICAgIHRoaXMuX3dpdGhDcmVkZW50aWFscyA9IHNvdXJjZS53aXRoQ3JlZGVudGlhbHMgfHwgZmFsc2U7CiAgICB0aGlzLl9yZWFkQ2FwYWJpbGl0eSA9ICgwLCBfdXRpbC5jcmVhdGVQcm9taXNlQ2FwYWJpbGl0eSkoKTsKICAgIHRoaXMuX2lzU3RyZWFtaW5nU3VwcG9ydGVkID0gIXNvdXJjZS5kaXNhYmxlU3RyZWFtOwoKICAgIGlmICh0eXBlb2YgQWJvcnRDb250cm9sbGVyICE9PSAidW5kZWZpbmVkIikgewogICAgICB0aGlzLl9hYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7CiAgICB9CgogICAgdGhpcy5faGVhZGVycyA9IGNyZWF0ZUhlYWRlcnModGhpcy5fc3RyZWFtLmh0dHBIZWFkZXJzKTsKCiAgICB0aGlzLl9oZWFkZXJzLmFwcGVuZCgiUmFuZ2UiLCAiYnl0ZXM9Ii5jb25jYXQoYmVnaW4sICItIikuY29uY2F0KGVuZCAtIDEpKTsKCiAgICB2YXIgdXJsID0gc291cmNlLnVybDsKICAgIGZldGNoKHVybCwgY3JlYXRlRmV0Y2hPcHRpb25zKHRoaXMuX2hlYWRlcnMsIHRoaXMuX3dpdGhDcmVkZW50aWFscywgdGhpcy5fYWJvcnRDb250cm9sbGVyKSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgaWYgKCEoMCwgX25ldHdvcmtfdXRpbHMudmFsaWRhdGVSZXNwb25zZVN0YXR1cykocmVzcG9uc2Uuc3RhdHVzKSkgewogICAgICAgIHRocm93ICgwLCBfbmV0d29ya191dGlscy5jcmVhdGVSZXNwb25zZVN0YXR1c0Vycm9yKShyZXNwb25zZS5zdGF0dXMsIHVybCk7CiAgICAgIH0KCiAgICAgIF90aGlzMi5fcmVhZENhcGFiaWxpdHkucmVzb2x2ZSgpOwoKICAgICAgX3RoaXMyLl9yZWFkZXIgPSByZXNwb25zZS5ib2R5LmdldFJlYWRlcigpOwogICAgfSk7CiAgICB0aGlzLm9uUHJvZ3Jlc3MgPSBudWxsOwogIH0KCiAgX2NyZWF0ZUNsYXNzKFBERkZldGNoU3RyZWFtUmFuZ2VSZWFkZXIsIFt7CiAgICBrZXk6ICJyZWFkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcmVhZDIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclsiZGVmYXVsdCJdLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTIoKSB7CiAgICAgICAgdmFyIF95aWVsZCR0aGlzJF9yZWFkZXIkcjIsIHZhbHVlLCBkb25lLCBidWZmZXI7CgogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JbImRlZmF1bHQiXS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gMjsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWFkQ2FwYWJpbGl0eS5wcm9taXNlOwoKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVhZGVyLnJlYWQoKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgX3lpZWxkJHRoaXMkX3JlYWRlciRyMiA9IF9jb250ZXh0Mi5zZW50OwogICAgICAgICAgICAgICAgdmFsdWUgPSBfeWllbGQkdGhpcyRfcmVhZGVyJHIyLnZhbHVlOwogICAgICAgICAgICAgICAgZG9uZSA9IF95aWVsZCR0aGlzJF9yZWFkZXIkcjIuZG9uZTsKCiAgICAgICAgICAgICAgICBpZiAoIWRvbmUpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA5OwogICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLmFicnVwdCgicmV0dXJuIiwgewogICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsCiAgICAgICAgICAgICAgICAgIGRvbmU6IGRvbmUKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICB0aGlzLl9sb2FkZWQgKz0gdmFsdWUuYnl0ZUxlbmd0aDsKCiAgICAgICAgICAgICAgICBpZiAodGhpcy5vblByb2dyZXNzKSB7CiAgICAgICAgICAgICAgICAgIHRoaXMub25Qcm9ncmVzcyh7CiAgICAgICAgICAgICAgICAgICAgbG9hZGVkOiB0aGlzLl9sb2FkZWQKICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgYnVmZmVyID0gbmV3IFVpbnQ4QXJyYXkodmFsdWUpLmJ1ZmZlcjsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgICAgIHZhbHVlOiBidWZmZXIsCiAgICAgICAgICAgICAgICAgIGRvbmU6IGZhbHNlCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMiwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHJlYWQoKSB7CiAgICAgICAgcmV0dXJuIF9yZWFkMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gcmVhZDsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImNhbmNlbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY2FuY2VsKHJlYXNvbikgewogICAgICBpZiAodGhpcy5fcmVhZGVyKSB7CiAgICAgICAgdGhpcy5fcmVhZGVyLmNhbmNlbChyZWFzb24pOwogICAgICB9CgogICAgICBpZiAodGhpcy5fYWJvcnRDb250cm9sbGVyKSB7CiAgICAgICAgdGhpcy5fYWJvcnRDb250cm9sbGVyLmFib3J0KCk7CiAgICAgIH0KICAgIH0KICB9LCB7CiAgICBrZXk6ICJpc1N0cmVhbWluZ1N1cHBvcnRlZCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMuX2lzU3RyZWFtaW5nU3VwcG9ydGVkOwogICAgfQogIH1dKTsKCiAgcmV0dXJuIFBERkZldGNoU3RyZWFtUmFuZ2VSZWFkZXI7Cn0oKTsKCi8qKiovIH0pCi8qKioqKiovIF0pOwp9KTsKLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGRmLmpzLm1hcA==';
  export function getBundle() {
    return bundle;
  }
  export function getBundleMd5() {
    return '7aa5270e7710cf5f60aa481c3861650a';
  }
  export function getFileName() {
    return 'pdf.min.js';
  }
  